<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: call_graph Pages: 1 -->
<svg width="576pt" height="315pt"
 viewBox="0.00 0.00 576.00 315.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 311)">
<title>call_graph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-311 572,-311 572,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="8,-8 8,-299 560,-299 560,-8 8,-8"/>
<text text-anchor="middle" x="284" y="-283.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/refinedrust&#45;dev/case_studies/minivec/src</text>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 rrptr/dangling(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 rrptr/dangling().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn dangling&lt;T&gt;() &#45;&gt; *mut T { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NonNull::dangling().as_ptr() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="501,-106 424,-106 424,-70 501,-70 501,-106"/>
<text text-anchor="middle" x="462.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">dangling</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 rrptr/const_add(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 rrptr/const_add().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub unsafe fn const_add&lt;T&gt;(ptr: *const T, count: usize) &#45;&gt; *const T &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ptr.add(count) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="118.5,-268 31.5,-268 31.5,-232 118.5,-232 118.5,-268"/>
<text text-anchor="middle" x="75" y="-246.3" font-family="Helvetica,sans-Serif" font-size="14.00">const_add</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 client/get_mut_client(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 client/get_mut_client().</title>
<g id="a_node3"><a xlink:title="fn get_mut_client() &#160;{ &#160;&#160;&#160;&#160;&#160;// We have desugared this, as the macro uses parts of Rust our frontend does not support yet. &#160;&#160;&#160;&#160;//let mut x = vec![100, 200, 300]; &#160;&#160;&#160;&#160;let mut x = Vec::new(); &#160;&#160;&#160;&#160;x.push(...">
<polygon fill="lightblue" stroke="black" points="134,-214 16,-214 16,-178 134,-178 134,-214"/>
<text text-anchor="middle" x="75" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_mut_client</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 impl#[`Vec&lt;T&gt;`]new(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 impl#[`Vec&lt;T&gt;`]new().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub fn new() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Vec { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;buf: RawVec::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;len: 0, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="224,-214 170,-214 170,-178 224,-178 224,-214"/>
<text text-anchor="middle" x="197" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 client/get_mut_client().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 impl#[`Vec&lt;T&gt;`]new(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo minivec 0.1.0 client/get_mut_client().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 impl#[`Vec&lt;T&gt;`]new().</title>
<path fill="none" stroke="gray" d="M134.24,-196C142.96,-196 151.73,-196 159.81,-196"/>
<polygon fill="gray" stroke="gray" points="159.98,-199.5 169.98,-196 159.98,-192.5 159.98,-199.5"/>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 rrptr/mut_add(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 rrptr/mut_add().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub unsafe fn mut_add&lt;T&gt;(ptr: *mut T, count: usize) &#45;&gt; *mut T &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ptr.add(count) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="337,-160 260,-160 260,-124 337,-124 337,-160"/>
<text text-anchor="middle" x="298.5" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">mut_add</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 impl#[`Vec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rrptr/mut_add(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo minivec 0.1.0 impl#[`Vec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rrptr/mut_add().</title>
<path fill="none" stroke="gray" d="M224.14,-181.81C233.58,-176.69 244.5,-170.76 254.98,-165.08"/>
<polygon fill="gray" stroke="gray" points="256.91,-168.01 264.03,-160.16 253.57,-161.86 256.91,-168.01"/>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;pub fn new() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// !0 is usize::MAX. This branch should be stripped at compile time. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let cap = if mem::size_of::&lt;T&gt;() == 0 { !0 } else { 0 }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// `NonNull::dangling...">
<polygon fill="lightblue" stroke="black" points="325.5,-214 271.5,-214 271.5,-178 325.5,-178 325.5,-214"/>
<text text-anchor="middle" x="298.5" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 impl#[`Vec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo minivec 0.1.0 impl#[`Vec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().</title>
<path fill="none" stroke="gray" d="M224.14,-196C235.36,-196 248.67,-196 260.85,-196"/>
<polygon fill="gray" stroke="gray" points="261.19,-199.5 271.19,-196 261.19,-192.5 261.19,-199.5"/>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 rralloc/check_array_layoutable(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 rralloc/check_array_layoutable().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;pub fn check_array_layoutable&lt;T&gt;(len: usize) &#45;&gt; bool &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let layout = Layout::array::&lt;T&gt;(len); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;layout.is_ok() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="552,-160 373,-160 373,-124 552,-124 552,-160"/>
<text text-anchor="middle" x="462.5" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">check_array_layoutable</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 rrptr/const_offset(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 rrptr/const_offset().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;pub unsafe fn const_offset&lt;T&gt;(ptr: *const T, count: isize) &#45;&gt; *const T &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ptr.offset(count) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="125,-160 25,-160 25,-124 125,-124 125,-160"/>
<text text-anchor="middle" x="75" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">const_offset</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 rralloc/realloc_array(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 rralloc/realloc_array().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub unsafe fn realloc_array&lt;T&gt;(old_len: usize, ptr: *mut T, new_len: usize) &#45;&gt; *mut T &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(new_len &gt; 0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// fine: checks that size is â‰¤ MaxInt isize &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let old_layout ...">
<polygon fill="lightblue" stroke="black" points="514.5,-214 410.5,-214 410.5,-178 514.5,-178 514.5,-214"/>
<text text-anchor="middle" x="462.5" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">realloc_array</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 rrptr/mut_offset(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 rrptr/mut_offset().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;pub unsafe fn mut_offset&lt;T&gt;(ptr: *mut T, count: isize) &#45;&gt; *mut T &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ptr.offset(count) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="120,-106 30,-106 30,-70 120,-70 120,-106"/>
<text text-anchor="middle" x="75" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">mut_offset</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rrptr/dangling(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rrptr/dangling().</title>
<path fill="none" stroke="gray" d="M325.52,-179.15C329.57,-176.01 333.55,-172.58 337,-169 357.03,-148.24 349.85,-132.21 373,-115 384.82,-106.21 399.54,-100.25 413.55,-96.22"/>
<polygon fill="gray" stroke="gray" points="414.78,-99.52 423.58,-93.62 413.02,-92.74 414.78,-99.52"/>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rralloc/check_array_layoutable(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rralloc/check_array_layoutable().</title>
<path fill="none" stroke="gray" d="M325.57,-186.02C339.56,-180.77 357.15,-174.32 373,-169 378.66,-167.1 384.54,-165.18 390.46,-163.29"/>
<polygon fill="gray" stroke="gray" points="391.94,-166.49 400.42,-160.15 389.83,-159.82 391.94,-166.49"/>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rralloc/realloc_array(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rralloc/realloc_array().</title>
<path fill="none" stroke="gray" d="M325.53,-196C345.66,-196 374.38,-196 400.24,-196"/>
<polygon fill="gray" stroke="gray" points="400.36,-199.5 410.36,-196 400.36,-192.5 400.36,-199.5"/>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 rralloc/alloc_array(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 rralloc/alloc_array().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;pub unsafe fn alloc_array&lt;T&gt;(len: usize) &#45;&gt; *mut T &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(len &gt; 0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// checks that size is â‰¤ MaxInt isize &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ly = Layout::array::&lt;T&gt;(len).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// will ...">
<polygon fill="lightblue" stroke="black" points="508,-268 417,-268 417,-232 508,-232 508,-268"/>
<text text-anchor="middle" x="462.5" y="-246.3" font-family="Helvetica,sans-Serif" font-size="14.00">alloc_array</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rralloc/alloc_array(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo minivec 0.1.0 impl#[`RawVec&lt;T&gt;`]new().&#45;&gt;rust&#45;analyzer cargo minivec 0.1.0 rralloc/alloc_array().</title>
<path fill="none" stroke="gray" d="M325.57,-205.98C339.56,-211.23 357.15,-217.68 373,-223 383.95,-226.68 395.74,-230.42 407.02,-233.9"/>
<polygon fill="gray" stroke="gray" points="406.19,-237.31 416.78,-236.89 408.24,-230.62 406.19,-237.31"/>
</g>
<!-- rust&#45;analyzer cargo minivec 0.1.0 rralloc/dealloc_array(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo minivec 0.1.0 rralloc/dealloc_array().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub unsafe fn dealloc_array&lt;T&gt;(len: usize, ptr: *mut T) &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alloc::dealloc(ptr as *mut u8, Layout::array::&lt;T&gt;(len).unwrap()); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="129,-52 21,-52 21,-16 129,-16 129,-52"/>
<text text-anchor="middle" x="75" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">dealloc_array</text>
</a>
</g>
</g>
</g>
</svg>
