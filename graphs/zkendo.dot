digraph files_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "group_send_endorsement.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()." [label="sort_points", tooltip="    fn sort_points(points: &mut [(usize, curve25519_dalek_signal::RistrettoPoint)]) {         debug_assert!(points.iter().enumerate().all(|(i, (j, _))| i == *j));         let sort_keys = curve25519_da...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()." [label="for_expiration", tooltip="    pub fn for_expiration(         expiration: Timestamp,         root: impl AsRef<zkcredential::endorsements::ServerRootKeyPair>,     ) -> Self {         Self {             reserved: ReservedByte::de...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress()." [label="compress", tooltip="    pub fn compress(         self,     ) -> GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto> {         GroupSendEndorsement {             reserved: self.reserved,         ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [label="to_token", tooltip="    pub fn to_token<T: AsRef<uid_encryption::KeyPair>>(&self, key_pair: T) -> GroupSendToken {         let client_key =             zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [label="receive_with_ciphertexts", tooltip="    pub fn receive_with_ciphertexts(         self,         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         now: Timestamp,         root_public_key: impl AsRef<zkcredential::endor...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]remove()." [label="remove", tooltip="    pub fn remove(&self, unwanted_endorsements: &GroupSendEndorsement) -> GroupSendEndorsement {         assert_eq!(             self.reserved, unwanted_endorsements.reserved,             ' endorsemen...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement][Debug]fmt()." [label="fmt", tooltip="    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {         f.debug_struct(' GroupSendEndorsement' )             .field(' reserved' , &self.reserved)             .field(' endorsem...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [label="receive_with_service_ids", tooltip="    pub fn receive_with_service_ids<T>(         self,         user_ids: T,         now: Timestamp,         group_params: &GroupSecretParams,         root_public_key: impl AsRef<zkcredential::endorseme...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendToken][Debug]fmt()." [label="fmt", tooltip="    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {         f.debug_struct(' GroupSendToken' )             .field(' reserved' , &self.reserved)             .field(' raw_token' , &...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendToken]into_full_token()." [label="into_full_token", tooltip="    pub fn into_full_token(self, expiration: Timestamp) -> GroupSendFullToken {         GroupSendFullToken {             reserved: self.reserved,             raw_token: self.raw_token,             exp...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine()." [label="combine", tooltip="    pub fn combine(         endorsements: impl IntoIterator<Item = GroupSendEndorsement>,     ) -> GroupSendEndorsement {         let mut endorsements = endorsements.into_iter();         let Some(mut ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]default_expiration()." [label="default_expiration", tooltip="    pub fn default_expiration(current_time: Timestamp) -> Timestamp {         // Return the end of the next day, unless that's less than 25 hours away.         // In that case, return the end of the f...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]expiration()." [label="expiration", tooltip="    pub fn expiration(&self) -> Timestamp {         self.expiration     }", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto>`][Debug]fmt()." [label="fmt", tooltip="    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {         f.debug_struct(' GroupSendEndorsement' )             .field(' reserved' , &self.reserved)             .field(' endorsem...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto>`]decompress()." [label="decompress", tooltip="    pub fn decompress(         self,     ) -> Result<         GroupSendEndorsement<curve25519_dalek_signal::RistrettoPoint>,         ZkGroupDeserializationFailure,     > {         Ok(GroupSendEndorsem...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()." [label="derive_public_signing_key_from_expiration", tooltip="    fn derive_public_signing_key_from_expiration(         &self,         now: Timestamp,         root_public_key: impl AsRef<zkcredential::endorsements::ServerRootPublicKey>,     ) -> Result<zkcredent...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." [label="verify", tooltip="    pub fn verify(         &self,         user_ids: impl IntoIterator<Item = libsignal_core::ServiceId>,         now: Timestamp,         key_pair: &GroupSendDerivedKeyPair,     ) -> Result<(), ZkGroup...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [label="issue", tooltip="    pub fn issue(         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         key_pair: &GroupSendDerivedKeyPair,         randomness: RandomnessBytes,     ) -> Self {         // Note...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken][Debug]fmt()." [label="fmt", tooltip="    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {         f.debug_struct(' GroupSendFullToken' )             .field(' reserved' , &self.reserved)             .field(' raw_token'...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." [label="receive_with_service_ids_single_threaded", tooltip="    pub fn receive_with_service_ids_single_threaded(         self,         user_ids: impl IntoIterator<Item = libsignal_core::ServiceId>,         now: Timestamp,         group_params: &GroupSecretPara...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]expiration()." [label="expiration", tooltip="    pub fn expiration(&self) -> Timestamp {         self.expiration     }", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]tag_info()." [label="tag_info", tooltip="    fn tag_info(expiration: Timestamp) -> impl poksho::ShoApi + Clone {         let mut sho = poksho::ShoHmacSha256::new(b' 20240215_Signal_GroupSendEndorsement' );         sho.absorb_and_ratchet(&exp...", fillcolor=white]
  }
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()." [label="calc_M1", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`Ciphertext<D>`][Attribute]as_points()." [label="as_points", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress()." [label="compress", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<Storage>`][Default]default()." [label="default", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." [label="benchmark_group_send_endorsements", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]epoch_seconds()." [label="epoch_seconds", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration()." [label="GroupSendDerivedKeyPair_ForExpiration", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]from_epoch_seconds()." [label="from_epoch_seconds", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_GetExpiration()." [label="GroupSendEndorsementsResponse_GetExpiration", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_Combine()." [label="GroupSendEndorsement_Combine", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." [label="test_single_member_group", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." [label="GroupSendEndorsementsResponse_IssueDeterministic", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute()." [label="for_first_point_of_attribute", fillcolor=lightgray]
  "rust-analyzer cargo poksho 0.7.0 shohmacsha256/impl#[ShoHmacSha256][ShoApi]new()." [label="new", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()." [label="derive_key", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken()." [label="GroupSendEndorsement_CallLinkParams_ToToken", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 common/array_utils/collect_permutation()." [label="collect_permutation", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]saturating_seconds_since()." [label="saturating_seconds_since", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken()." [label="GroupSendEndorsement_ToToken", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." [label="test_endorsement", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [label="verify", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()." [label="derive_key", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendFullToken_Verify()." [label="GroupSendFullToken_Verify", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`]decompress()." [label="decompress", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendToken_ToFullToken()." [label="GroupSendToken_ToFullToken", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [label="receive", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_Remove()." [label="GroupSendEndorsement_Remove", fillcolor=lightgray]
  "rust-analyzer cargo poksho 0.7.0 shoapi/ShoApi#absorb_and_ratchet()." [label="absorb_and_ratchet", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]is_day_aligned()." [label="is_day_aligned", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 common/errors/impl#[ZkGroupDeserializationFailure]new()." [label="new", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [label="to_token", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]combine_with()." [label="combine_with", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [label="issue", fillcolor=lightgray]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendFullToken_GetExpiration()." [label="GroupSendFullToken_GetExpiration", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." [label="test_client_rejects_bad_expirations", fillcolor=lightgray]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]remove()." [label="remove", fillcolor=lightgray]
  "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]to_be_bytes()." [label="to_be_bytes", fillcolor=lightgray]

  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]tag_info()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 common/array_utils/collect_permutation()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`Ciphertext<D>`][Attribute]as_points()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]remove()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]remove()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkgroup 0.9.0 common/array_utils/collect_permutation()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]combine_with()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<Storage>`][Default]default()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]default_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]from_epoch_seconds()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]default_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]epoch_seconds()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto>`]decompress()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`]decompress()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto>`]decompress()." -> "rust-analyzer cargo zkgroup 0.9.0 common/errors/impl#[ZkGroupDeserializationFailure]new()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]tag_info()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]saturating_seconds_since()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]is_day_aligned()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`Ciphertext<D>`][Attribute]as_points()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkgroup 0.9.0 common/array_utils/collect_permutation()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]tag_info()." -> "rust-analyzer cargo poksho 0.7.0 shoapi/ShoApi#absorb_and_ratchet()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]tag_info()." -> "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/impl#[Timestamp]to_be_bytes()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]tag_info()." -> "rust-analyzer cargo poksho 0.7.0 shohmacsha256/impl#[ShoHmacSha256][ShoApi]new()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]remove()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_Remove()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]remove()."
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendToken]into_full_token()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendToken_ToFullToken()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendToken]into_full_token()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_Combine()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]expiration()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_GetExpiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]expiration()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendFullToken_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendFullToken_GetExpiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]expiration()."
}
