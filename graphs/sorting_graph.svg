<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: call_graph Pages: 1 -->
<svg width="1340pt" height="5233pt"
 viewBox="0.00 0.00 1340.00 5233.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 5229)">
<title>call_graph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-5229 1336,-5229 1336,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="8,-4897 8,-5026 331,-5026 331,-4897 8,-4897"/>
<text text-anchor="middle" x="169.5" y="-5010.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/sorting_rs/benches</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="175,-8 175,-4889 1324,-4889 1324,-8 175,-8"/>
<text text-anchor="middle" x="749.5" y="-4873.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/sorting_rs/src</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" points="46.5,-5034 46.5,-5217 622.5,-5217 622.5,-5034 46.5,-5034"/>
<text text-anchor="middle" x="334.5" y="-5201.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/sorting_rs/src/bin</text>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 get_random_vec(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 get_random_vec().</title>
<g id="a_node1"><a xlink:title="fn get_random_vec(n: usize) &#45;&gt; Vec&lt;usize&gt; &#160;{ &#160;&#160;&#160;&#160;let mut rng: StdRng = StdRng::seed_from_u64(42); &#160;&#160;&#160;&#160;let mut vec: Vec&lt;usize&gt; = (0..n).collect(); &#160;&#160;&#160;&#160;vec.shuffle(&amp;mut rng); &#160;&#160;&#160;&#160;vec }">
<polygon fill="lightblue" stroke="black" points="147,-4995 16,-4995 16,-4959 147,-4959 147,-4995"/>
<text text-anchor="middle" x="81.5" y="-4973.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_random_vec</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().</title>
<g id="a_node2"><a xlink:title="fn bench(c: &amp;mut Criterion) &#160;{ &#160;&#160;&#160;&#160;let sizes: Vec&lt;usize&gt; = vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2, 5, 8, 10, 16, 100, 128, 500, 512, 1000, 1024, 2000, 2048, 8000, 8192, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10_000, 16_000, 16_384, 32_000, 32_768, 50_000...">
<polygon fill="lightblue" stroke="black" points="323,-4941 264,-4941 264,-4905 323,-4905 323,-4941"/>
<text text-anchor="middle" x="293.5" y="-4919.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<g id="a_node6"><a xlink:title="pub fn quick_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &gt; 1 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pivot = lomuto_partition(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut input[..pivot]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut input[pivot ...">
<polygon fill="lightblue" stroke="black" points="585.5,-349 497.5,-349 497.5,-313 585.5,-313 585.5,-349"/>
<text text-anchor="middle" x="541.5" y="-327.3" font-family="Helvetica,sans-Serif" font-size="14.00">quick_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<path fill="none" stroke="gray" d="M323.48,-4923.98C349.16,-4923.1 385.37,-4917.22 404,-4893 478.99,-4795.53 400.85,-582.58 440,-466 454.59,-422.57 489,-381.7 513.49,-356.55"/>
<polygon fill="gray" stroke="gray" points="516.16,-358.82 520.73,-349.26 511.2,-353.88 516.16,-358.82"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<g id="a_node7"><a xlink:title="pub fn bingo_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;&#160;let minmax = get_min_max(input); &#160;&#160;&#160;&#160;let min = minmax[0]; &#160;&#160;&#160;&#160;let max =...">
<polygon fill="lightblue" stroke="black" points="586,-673 497,-673 497,-637 586,-637 586,-673"/>
<text text-anchor="middle" x="541.5" y="-651.3" font-family="Helvetica,sans-Serif" font-size="14.00">bingo_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<path fill="none" stroke="gray" d="M323.48,-4923.98C349.15,-4923.1 385.36,-4917.21 404,-4893 473.07,-4803.28 408.49,-925.75 440,-817 455.32,-764.11 493.17,-711.55 517.8,-681.23"/>
<polygon fill="gray" stroke="gray" points="520.69,-683.22 524.36,-673.28 515.3,-678.76 520.69,-683.22"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<g id="a_node20"><a xlink:title="pub fn merge_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let len = input.len(); &#160;&#160;&#160;&#160;let mid = len / 2; &#160;&#160;&#160;&#160;merge_sort(&amp;mut input[..mid]); &#160;&#160;&#160;&#160;merge_sort(&amp;m...">
<polygon fill="lightblue" stroke="black" points="589,-2401 494,-2401 494,-2365 589,-2365 589,-2401"/>
<text text-anchor="middle" x="541.5" y="-2379.3" font-family="Helvetica,sans-Serif" font-size="14.00">merge_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<path fill="none" stroke="gray" d="M323.45,-4923.95C349.09,-4923.05 385.29,-4917.15 404,-4893 485.74,-4787.5 390.22,-2614.83 440,-2491 453.67,-2456.99 483.47,-2427.25 507.09,-2407.64"/>
<polygon fill="gray" stroke="gray" points="509.57,-2410.14 515.15,-2401.13 505.17,-2404.69 509.57,-2410.14"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<g id="a_node37"><a xlink:title="pub fn comb_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let len = input.len(); &#160;&#160;&#160;&#160;let inv_shrink: f32 = 1.0 / 1.3; &#160;&#160;&#160;&#160;&#160;let mut gap = len; &#160;&#160;&#160;&#160;let mut sorted = len &lt;...">
<polygon fill="lightblue" stroke="black" points="586,-3859 497,-3859 497,-3823 586,-3823 586,-3859"/>
<text text-anchor="middle" x="541.5" y="-3837.3" font-family="Helvetica,sans-Serif" font-size="14.00">comb_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<path fill="none" stroke="gray" d="M323.31,-4923.85C348.86,-4922.87 385,-4916.92 404,-4893 467.43,-4813.16 406.03,-4072.14 440,-3976 455.26,-3932.81 489.52,-3891.88 513.79,-3866.65"/>
<polygon fill="gray" stroke="gray" points="516.46,-3868.93 520.97,-3859.34 511.46,-3864.02 516.46,-3868.93"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<g id="a_node45"><a xlink:title="pub fn merge_bottom_up_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;let mut width = 1; &#160;&#160;&#160;&#160;&#160;let mut tmp = input.to_vec(); &#160;&#160;&#160;&#160;let len = input.len(); &#160;&#160;&#160;&#160;&#160;while width &lt; len { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut i = ...">
<polygon fill="lightblue" stroke="black" points="629.5,-3319 453.5,-3319 453.5,-3283 629.5,-3283 629.5,-3319"/>
<text text-anchor="middle" x="541.5" y="-3297.3" font-family="Helvetica,sans-Serif" font-size="14.00">merge_bottom_up_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M323.39,-4923.91C349,-4922.98 385.17,-4917.06 404,-4893 453.9,-4829.24 413.58,-3512.54 440,-3436 454.94,-3392.7 489.28,-3351.8 513.65,-3326.6"/>
<polygon fill="gray" stroke="gray" points="516.32,-3328.88 520.86,-3319.3 511.34,-3323.96 516.32,-3328.88"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<g id="a_node50"><a xlink:title="pub fn gnome_up_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let mut i = 1; &#160;&#160;&#160;&#160;let mut j = 2; &#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;&#160;while i &lt; in_len { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if input[i...">
<polygon fill="lightblue" stroke="black" points="603,-4507 480,-4507 480,-4471 603,-4471 603,-4507"/>
<text text-anchor="middle" x="541.5" y="-4485.3" font-family="Helvetica,sans-Serif" font-size="14.00">gnome_up_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<path fill="none" stroke="gray" d="M323.28,-4923.39C348.46,-4922.07 384.03,-4915.86 404,-4893 483.37,-4802.17 394.53,-4735.72 440,-4624 457.37,-4581.32 491.47,-4540 515.1,-4514.56"/>
<polygon fill="gray" stroke="gray" points="517.74,-4516.86 522.07,-4507.19 512.66,-4512.05 517.74,-4516.86"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<g id="a_node53"><a xlink:title="pub fn shell_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let len = input.len(); &#160;&#160;&#160;&#160;let gaps = GapSequence::new(len); &#160;&#160;&#160;&#160;&#160;for gap in gaps { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in gap....">
<polygon fill="lightblue" stroke="black" points="583,-4372 500,-4372 500,-4336 583,-4336 583,-4372"/>
<text text-anchor="middle" x="541.5" y="-4350.3" font-family="Helvetica,sans-Serif" font-size="14.00">shell_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<path fill="none" stroke="gray" d="M323.07,-4923.65C348.45,-4922.54 384.47,-4916.5 404,-4893 465.43,-4819.08 401.13,-4549.9 440,-4462 454.83,-4428.47 484.49,-4398.68 507.76,-4378.92"/>
<polygon fill="gray" stroke="gray" points="510.22,-4381.43 515.69,-4372.36 505.76,-4376.04 510.22,-4381.43"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<g id="a_node62"><a xlink:title="pub fn weak_heap_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;let n = input.len(); &#160;&#160;&#160;&#160;&#160;if n &lt; 2 {return;} &#160;&#160;&#160;&#160;else { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut r = vec![0; (n + 7) / 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in (1..n).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="605.5,-3670 477.5,-3670 477.5,-3634 605.5,-3634 605.5,-3670"/>
<text text-anchor="middle" x="541.5" y="-3648.3" font-family="Helvetica,sans-Serif" font-size="14.00">weak_heap_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M323.34,-4923.87C348.92,-4922.92 385.07,-4916.98 404,-4893 478.34,-4798.85 405.2,-3928.8 440,-3814 455.97,-3761.31 493.63,-3708.69 518.04,-3678.3"/>
<polygon fill="gray" stroke="gray" points="520.93,-3680.29 524.54,-3670.33 515.51,-3675.86 520.93,-3680.29"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<g id="a_node64"><a xlink:title="pub fn selection_double_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let mut left = 0; &#160;&#160;&#160;&#160;let mut right = input.len() &#45; 1; &#160;&#160;&#160;&#160;let mut min = left; &#160;&#160;&#160;&#160;let mut max = l...">
<polygon fill="lightblue" stroke="black" points="624.5,-4804 458.5,-4804 458.5,-4768 624.5,-4768 624.5,-4804"/>
<text text-anchor="middle" x="541.5" y="-4782.3" font-family="Helvetica,sans-Serif" font-size="14.00">selection_double_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<path fill="none" stroke="gray" d="M323.24,-4921.76C347.35,-4919.31 381.38,-4912.35 404,-4893 433.63,-4867.65 410.31,-4838.27 440,-4813 442.92,-4810.51 446.05,-4808.25 449.34,-4806.2"/>
<polygon fill="gray" stroke="gray" points="451.28,-4809.12 458.35,-4801.22 447.9,-4802.99 451.28,-4809.12"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<g id="a_node75"><a xlink:title="pub fn oddeven_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sorted = false; &#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;while !sorted { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sorted = true; &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="596.5,-2725 486.5,-2725 486.5,-2689 596.5,-2689 596.5,-2725"/>
<text text-anchor="middle" x="541.5" y="-2703.3" font-family="Helvetica,sans-Serif" font-size="14.00">oddeven_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<path fill="none" stroke="gray" d="M323.43,-4923.94C349.06,-4923.03 385.25,-4917.12 404,-4893 472.09,-4805.39 412.18,-3003.42 440,-2896 456.23,-2833.32 496.92,-2768.41 521.26,-2733.34"/>
<polygon fill="gray" stroke="gray" points="524.17,-2735.28 527.07,-2725.09 518.45,-2731.25 524.17,-2735.28"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<g id="a_node78"><a xlink:title="pub fn cocktail_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let mut index_st = 0; &#160;&#160;&#160;&#160;let mut index_end = input.len() &#45; 1; &#160;&#160;&#160;&#160;&#160;while index_st &lt; index_end { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightblue" stroke="black" points="593,-4183 490,-4183 490,-4147 593,-4147 593,-4183"/>
<text text-anchor="middle" x="541.5" y="-4161.3" font-family="Helvetica,sans-Serif" font-size="14.00">cocktail_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<path fill="none" stroke="gray" d="M323.17,-4923.74C348.63,-4922.69 384.71,-4916.69 404,-4893 443.79,-4844.14 420.81,-4387.02 440,-4327 456.76,-4274.55 494.18,-4221.86 518.33,-4191.39"/>
<polygon fill="gray" stroke="gray" points="521.21,-4193.38 524.76,-4183.4 515.76,-4188.99 521.21,-4193.38"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<g id="a_node79"><a xlink:title="pub fn bitonic_sort&lt;T: PartialOrd + Default + Clone&gt;(input: &amp;mut Vec&lt;T&gt;) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;else if input.len() &gt; 9223372036854775808 {panic!(&#39; Array is too big&#39; )} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let i...">
<polygon fill="lightblue" stroke="black" points="590,-2158 493,-2158 493,-2122 590,-2122 590,-2158"/>
<text text-anchor="middle" x="541.5" y="-2136.3" font-family="Helvetica,sans-Serif" font-size="14.00">bitonic_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M323.45,-4923.96C349.1,-4923.06 385.3,-4917.16 404,-4893 447.14,-4837.27 424.29,-2424.71 440,-2356 456.56,-2283.59 499.35,-2206.46 523.42,-2166.88"/>
<polygon fill="gray" stroke="gray" points="526.56,-2168.46 528.82,-2158.11 520.59,-2164.79 526.56,-2168.46"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<g id="a_node85"><a xlink:title="pub fn heap_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;for i in (0..input.len() / 2).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_max(input, i, input.len()); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;for i in (0..input.l...">
<polygon fill="lightblue" stroke="black" points="584,-511 499,-511 499,-475 584,-475 584,-511"/>
<text text-anchor="middle" x="541.5" y="-489.3" font-family="Helvetica,sans-Serif" font-size="14.00">heap_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<path fill="none" stroke="gray" d="M323.48,-4923.98C349.16,-4923.1 385.37,-4917.21 404,-4893 476.26,-4799.11 402.26,-740.3 440,-628 454.59,-584.58 489.01,-543.71 513.49,-518.55"/>
<polygon fill="gray" stroke="gray" points="516.17,-520.82 520.74,-511.26 511.2,-515.88 516.17,-520.82"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<g id="a_node88"><a xlink:title="pub fn ksort&lt;T: PartialOrd + Clone + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;ksort_lr(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="568.5,-160 514.5,-160 514.5,-124 568.5,-124 568.5,-160"/>
<text text-anchor="middle" x="541.5" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">ksort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M323.49,-4923.98C349.16,-4923.11 385.37,-4917.22 404,-4893 442.86,-4842.48 422.29,-365.23 440,-304 455.3,-251.11 493.15,-198.55 517.79,-168.22"/>
<polygon fill="gray" stroke="gray" points="520.68,-170.22 524.36,-160.28 515.29,-165.76 520.68,-170.22"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<g id="a_node94"><a xlink:title="pub fn bubble_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input_len = input.len(); &#160;&#160;&#160;&#160;&#160;for i in (0..input_len).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut has_swapped = false; &#160;...">
<polygon fill="lightblue" stroke="black" points="590.5,-3481 492.5,-3481 492.5,-3445 590.5,-3445 590.5,-3481"/>
<text text-anchor="middle" x="541.5" y="-3459.3" font-family="Helvetica,sans-Serif" font-size="14.00">bubble_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<path fill="none" stroke="gray" d="M323.37,-4923.89C348.97,-4922.96 385.13,-4917.03 404,-4893 447.53,-4837.58 419.73,-3692.49 440,-3625 455.84,-3572.27 493.53,-3519.66 517.99,-3489.28"/>
<polygon fill="gray" stroke="gray" points="520.88,-3491.28 524.51,-3481.32 515.46,-3486.84 520.88,-3491.28"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<g id="a_node96"><a xlink:title="pub fn pancake_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let in_len = input.len() &#45; 1; &#160;&#160;&#160;&#160;for item in (0..in_len + 1).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let cut = largest_panc...">
<polygon fill="lightblue" stroke="black" points="595.5,-3157 487.5,-3157 487.5,-3121 595.5,-3121 595.5,-3157"/>
<text text-anchor="middle" x="541.5" y="-3135.3" font-family="Helvetica,sans-Serif" font-size="14.00">pancake_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<path fill="none" stroke="gray" d="M323.4,-4923.92C349.02,-4923 385.2,-4917.08 404,-4893 459.36,-4822.08 410.75,-3359.08 440,-3274 454.89,-3230.68 489.24,-3189.79 513.62,-3164.59"/>
<polygon fill="gray" stroke="gray" points="516.3,-3166.87 520.84,-3157.3 511.32,-3161.95 516.3,-3166.87"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<g id="a_node97"><a xlink:title="pub fn insertion_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 1..input.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut j = i; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while j &gt; 0 &amp;&amp; input[j &#45; 1] &gt; input[j] { &#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="597,-1915 486,-1915 486,-1879 597,-1879 597,-1915"/>
<text text-anchor="middle" x="541.5" y="-1893.3" font-family="Helvetica,sans-Serif" font-size="14.00">insertion_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<path fill="none" stroke="gray" d="M323.46,-4923.96C349.11,-4923.07 385.31,-4917.17 404,-4893 451.24,-4831.9 422.83,-2188.3 440,-2113 456.52,-2040.58 499.32,-1963.46 523.4,-1923.88"/>
<polygon fill="gray" stroke="gray" points="526.54,-1925.46 528.81,-1915.11 520.58,-1921.78 526.54,-1925.46"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<g id="a_node104"><a xlink:title="pub fn selection_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;for i in 0..input.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let swap_val = { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut min = &amp;input[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let m...">
<polygon fill="lightblue" stroke="black" points="597.5,-4669 485.5,-4669 485.5,-4633 597.5,-4633 597.5,-4669"/>
<text text-anchor="middle" x="541.5" y="-4647.3" font-family="Helvetica,sans-Serif" font-size="14.00">selection_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<path fill="none" stroke="gray" d="M323.08,-4922.72C347.77,-4920.92 382.73,-4914.38 404,-4893 447.5,-4849.29 410.11,-4812.94 440,-4759 457.99,-4726.53 487.81,-4696.22 510.31,-4676.02"/>
<polygon fill="gray" stroke="gray" points="512.74,-4678.55 517.93,-4669.31 508.12,-4673.29 512.74,-4678.55"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<g id="a_node110"><a xlink:title="pub fn gnome_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut i = 0; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while i &lt; input.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if i == 0 || input[i &#45; 1] &lt; input[i] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="590.5,-1753 492.5,-1753 492.5,-1717 590.5,-1717 590.5,-1753"/>
<text text-anchor="middle" x="541.5" y="-1731.3" font-family="Helvetica,sans-Serif" font-size="14.00">gnome_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<path fill="none" stroke="gray" d="M323.46,-4923.97C349.12,-4923.08 385.32,-4917.18 404,-4893 455.33,-4826.54 413.11,-1949.56 440,-1870 454.67,-1826.6 489.06,-1785.73 513.52,-1760.56"/>
<polygon fill="gray" stroke="gray" points="516.2,-1762.83 520.76,-1753.27 511.23,-1757.9 516.2,-1762.83"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<g id="a_node111"><a xlink:title="pub fn quick_dual_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;dual_pivot(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="604,-2941 479,-2941 479,-2905 604,-2905 604,-2941"/>
<text text-anchor="middle" x="541.5" y="-2919.3" font-family="Helvetica,sans-Serif" font-size="14.00">quick_dual_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M323.42,-4923.93C349.04,-4923.02 385.22,-4917.1 404,-4893 464.82,-4814.93 415.09,-3207.78 440,-3112 456.3,-3049.33 496.97,-2984.42 521.28,-2949.35"/>
<polygon fill="gray" stroke="gray" points="524.2,-2951.29 527.08,-2941.09 518.47,-2947.26 524.2,-2951.29"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<g id="a_node124"><a xlink:title="pub fn smooth_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) { &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Init addtitional index heap &#160;&#160;&#160;&#160;let input = input; &#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;let mut heap = Ve...">
<polygon fill="lightblue" stroke="black" points="592.5,-1564 490.5,-1564 490.5,-1528 592.5,-1528 592.5,-1564"/>
<text text-anchor="middle" x="541.5" y="-1542.3" font-family="Helvetica,sans-Serif" font-size="14.00">smooth_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M323.47,-4923.97C349.13,-4923.08 385.33,-4917.19 404,-4893 458.06,-4822.96 415.27,-1792.95 440,-1708 455.39,-1655.13 493.22,-1602.57 517.82,-1572.23"/>
<polygon fill="gray" stroke="gray" points="520.72,-1574.23 524.38,-1564.29 515.32,-1569.77 520.72,-1574.23"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<g id="a_node129"><a xlink:title="pub fn nheap_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let children = 3; &#160;&#160;&#160;&#160;for i in (0..=input.len()).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sift(input, children, i, input.len() &#45;...">
<polygon fill="lightblue" stroke="black" points="588.5,-862 494.5,-862 494.5,-826 588.5,-826 588.5,-862"/>
<text text-anchor="middle" x="541.5" y="-840.3" font-family="Helvetica,sans-Serif" font-size="14.00">nheap_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M323.48,-4923.98C349.15,-4923.1 385.36,-4917.21 404,-4893 470.34,-4806.86 405.33,-1082.05 440,-979 454.61,-935.58 489.02,-894.71 513.5,-869.55"/>
<polygon fill="gray" stroke="gray" points="516.17,-871.82 520.74,-862.26 511.21,-866.89 516.17,-871.82"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<g id="a_node137"><a xlink:title="pub fn heap_bottom_up_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;for start in (0..=(in_len &#45; 2) / 2).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hbu_sift(input...">
<polygon fill="lightblue" stroke="black" points="624.5,-1375 458.5,-1375 458.5,-1339 624.5,-1339 624.5,-1375"/>
<text text-anchor="middle" x="541.5" y="-1353.3" font-family="Helvetica,sans-Serif" font-size="14.00">heap_bottom_up_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M323.47,-4923.97C349.13,-4923.09 385.34,-4917.19 404,-4893 461.25,-4818.79 413.83,-1609 440,-1519 455.37,-1466.13 493.21,-1413.56 517.82,-1383.23"/>
<polygon fill="gray" stroke="gray" points="520.71,-1385.22 524.38,-1375.28 515.31,-1380.77 520.71,-1385.22"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<g id="a_node139"><a xlink:title="pub fn cycle_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;for index in 0..in_len { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut key = input[index]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="584.5,-4021 498.5,-4021 498.5,-3985 584.5,-3985 584.5,-4021"/>
<text text-anchor="middle" x="541.5" y="-3999.3" font-family="Helvetica,sans-Serif" font-size="14.00">cycle_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<path fill="none" stroke="gray" d="M323.26,-4923.81C348.78,-4922.81 384.9,-4916.84 404,-4893 456.52,-4827.46 411.69,-4217.07 440,-4138 455.44,-4094.87 489.66,-4053.93 513.87,-4028.68"/>
<polygon fill="gray" stroke="gray" points="516.54,-4030.96 521.03,-4021.36 511.54,-4026.06 516.54,-4030.96"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 benches(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 benches().</title>
<g id="a_node3"><a xlink:title="criterion_group!(benches, bench); criterion_main!(benches);">
<polygon fill="lightblue" stroke="black" points="119,-4941 44,-4941 44,-4905 119,-4905 119,-4941"/>
<text text-anchor="middle" x="81.5" y="-4919.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 benches().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bench(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 benches().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bench().</title>
<path fill="none" stroke="gray" d="M119.08,-4923C156.67,-4923 215,-4923 253.46,-4923"/>
<polygon fill="gray" stroke="gray" points="253.75,-4926.5 263.75,-4923 253.75,-4919.5 253.75,-4926.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_max(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_max().</title>
<g id="a_node4"><a xlink:title="fn heap_max&lt;T: PartialOrd&gt;(input: &amp;mut [T], i: usize, heap_len: usize) &#160;{ &#160;&#160;&#160;&#160;let left = 2 * i + 1; &#160;&#160;&#160;&#160;let right = left + 1; &#160;&#160;&#160;&#160;&#160;let mut largest = i; &#160;&#160;&#160;&#160;if left &lt; heap_len &amp;&amp; input[left] &gt; input[la...">
<polygon fill="lightblue" stroke="black" points="835.5,-511 747.5,-511 747.5,-475 835.5,-475 835.5,-511"/>
<text text-anchor="middle" x="791.5" y="-489.3" font-family="Helvetica,sans-Serif" font-size="14.00">heap_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_len1(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_len1().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn test_selection_double_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_double_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="394.5,-4750 192.5,-4750 192.5,-4714 394.5,-4714 394.5,-4750"/>
<text text-anchor="middle" x="293.5" y="-4728.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_double_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<path fill="none" stroke="gray" d="M376.76,-4750.06C399.73,-4755.1 424.85,-4760.61 448.36,-4765.77"/>
<polygon fill="gray" stroke="gray" points="447.8,-4769.24 458.32,-4767.96 449.3,-4762.4 447.8,-4769.24"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/lomuto_partition(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/lomuto_partition().</title>
<g id="a_node89"><a xlink:title="fn lomuto_partition&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#45;&gt; usize &#160;{ &#160;&#160;&#160;&#160;let pivot = input.len() &#45; 1; &#160;&#160;&#160;&#160;let mut swap = 0; &#160;&#160;&#160;&#160;for i in 0..pivot { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if input[i] &lt; input[pivot] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if swap ...">
<polygon fill="lightblue" stroke="black" points="856.5,-349 726.5,-349 726.5,-313 856.5,-313 856.5,-349"/>
<text text-anchor="middle" x="791.5" y="-327.3" font-family="Helvetica,sans-Serif" font-size="14.00">lomuto_partition</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/lomuto_partition(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/lomuto_partition().</title>
<path fill="none" stroke="gray" d="M585.7,-331C621.67,-331 673.72,-331 716.34,-331"/>
<polygon fill="gray" stroke="gray" points="716.39,-334.5 726.39,-331 716.39,-327.5 716.39,-334.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/get_min_max(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/get_min_max().</title>
<g id="a_node8"><a xlink:title="fn get_min_max&lt;T: PartialOrd + Copy&gt;(input: &amp;[T]) &#45;&gt; [T; 2] &#160;{ &#160;&#160;&#160;&#160;let mut min = input[0]; &#160;&#160;&#160;&#160;let mut max = input[0]; &#160;&#160;&#160;&#160;for i in 1..input.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if input[i] &lt; min {min = input[i];} &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="846,-673 737,-673 737,-637 846,-637 846,-673"/>
<text text-anchor="middle" x="791.5" y="-651.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_min_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/get_min_max(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/get_min_max().</title>
<path fill="none" stroke="gray" d="M586.27,-655C625.23,-655 682.7,-655 726.77,-655"/>
<polygon fill="gray" stroke="gray" points="726.8,-658.5 736.8,-655 726.8,-651.5 726.8,-658.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_empty(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_empty().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn test_cocktail_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cocktail_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="370,-4102 217,-4102 217,-4066 370,-4066 370,-4102"/>
<text text-anchor="middle" x="293.5" y="-4080.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cocktail_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<path fill="none" stroke="gray" d="M370.27,-4101.27C381.65,-4104.27 393.18,-4107.54 404,-4111 432.84,-4120.22 464.32,-4132.51 489.77,-4143.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-4146.36 499.21,-4146.98 491.33,-4139.9 488.63,-4146.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/get_flag(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/get_flag().</title>
<g id="a_node10"><a xlink:title="fn get_flag(r: &amp;Vec&lt;usize&gt;, x: usize) &#45;&gt; usize &#160;{ &#160;&#160;&#160;&#160;(r[x &gt;&gt; 3] &gt;&gt; (x &amp; 7)) &amp; 1 }">
<polygon fill="lightblue" stroke="black" points="827.5,-3697 755.5,-3697 755.5,-3661 827.5,-3661 827.5,-3697"/>
<text text-anchor="middle" x="791.5" y="-3675.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_flag</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn test_selection() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![11, 20, 21, 40, 11, 60, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![5, 11, 11, 20, 21, 40, 60]); &#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="349,-4588 238,-4588 238,-4552 349,-4552 349,-4588"/>
<text text-anchor="middle" x="293.5" y="-4566.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<path fill="none" stroke="gray" d="M349.21,-4581.96C366.84,-4586.22 386.37,-4591.37 404,-4597 432.84,-4606.22 464.32,-4618.51 489.77,-4629.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-4632.36 499.21,-4632.98 491.33,-4625.9 488.63,-4632.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort().</title>
<g id="a_node12"><a xlink:title="fn sub_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T], mode: bool) &#160;{ &#160;&#160;&#160;&#160;if input.len() &gt; 1 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compare_and_swap(input, mode); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mid_point = input.len() / 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sub_sort(&amp;mut input[..mid_po...">
<polygon fill="lightblue" stroke="black" points="1072,-2158 996,-2158 996,-2122 1072,-2122 1072,-2158"/>
<text text-anchor="middle" x="1034" y="-2136.3" font-family="Helvetica,sans-Serif" font-size="14.00">sub_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/compare_and_swap(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/compare_and_swap().</title>
<g id="a_node87"><a xlink:title="fn compare_and_swap&lt;T: PartialOrd&gt;(input: &amp;mut [T], mode: bool) &#160;{ &#160;&#160;&#160;&#160;let mid_point = input.len() / 2; &#160;&#160;&#160;&#160;for i in 0..mid_point { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (input[i] &gt; input[mid_point + i]) == mode { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i...">
<polygon fill="lightblue" stroke="black" points="1316,-2158 1164,-2158 1164,-2122 1316,-2122 1316,-2158"/>
<text text-anchor="middle" x="1240" y="-2136.3" font-family="Helvetica,sans-Serif" font-size="14.00">compare_and_swap</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/compare_and_swap(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/compare_and_swap().</title>
<path fill="none" stroke="gray" d="M1072.42,-2140C1095.16,-2140 1125.18,-2140 1153.46,-2140"/>
<polygon fill="gray" stroke="gray" points="1153.79,-2143.5 1163.79,-2140 1153.79,-2136.5 1153.79,-2143.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_bool(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_bool().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_bool() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![false, true, false, false, true]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![false, false, false, tru...">
<polygon fill="lightblue" stroke="black" points="359.5,-2158 227.5,-2158 227.5,-2122 359.5,-2122 359.5,-2158"/>
<text text-anchor="middle" x="293.5" y="-2136.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_bool</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_bool().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_bool().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M359.78,-2140C398.03,-2140 445.91,-2140 482.78,-2140"/>
<polygon fill="gray" stroke="gray" points="482.87,-2143.5 492.87,-2140 482.87,-2136.5 482.87,-2143.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_len1(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_len1().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn test_comb_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comb_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="356,-3778 231,-3778 231,-3742 356,-3742 356,-3778"/>
<text text-anchor="middle" x="293.5" y="-3756.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_comb_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<path fill="none" stroke="gray" d="M356.01,-3773.62C371.77,-3777.53 388.61,-3782.08 404,-3787 432.84,-3796.22 464.32,-3808.51 489.77,-3819.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3822.36 499.21,-3822.98 491.33,-3815.9 488.63,-3822.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_len1(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_len1().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn test_cycle_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354.5,-3940 232.5,-3940 232.5,-3904 354.5,-3904 354.5,-3940"/>
<text text-anchor="middle" x="293.5" y="-3918.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cycle_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<path fill="none" stroke="gray" d="M354.58,-3935.27C370.75,-3939.26 388.15,-3943.94 404,-3949 432.84,-3958.22 464.32,-3970.51 489.77,-3981.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3984.36 499.21,-3984.98 491.33,-3977.9 488.63,-3984.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_empty(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_empty().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn test_slow_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;slow_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="359,-2482 228,-2482 228,-2446 359,-2446 359,-2482"/>
<text text-anchor="middle" x="293.5" y="-2460.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().</title>
<g id="a_node90"><a xlink:title="pub fn slow_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;slow_sort_sorting(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="582,-2536 501,-2536 501,-2500 582,-2500 582,-2536"/>
<text text-anchor="middle" x="541.5" y="-2514.3" font-family="Helvetica,sans-Serif" font-size="14.00">slow_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().</title>
<path fill="none" stroke="gray" d="M359.13,-2478.19C400.43,-2487.25 453.15,-2498.82 491.09,-2507.15"/>
<polygon fill="gray" stroke="gray" points="490.37,-2510.58 500.89,-2509.31 491.87,-2503.74 490.37,-2510.58"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort_lr(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort_lr().</title>
<g id="a_node17"><a xlink:title="right: usize) &#160;fn ksort_lr&lt;T: PartialOrd + Clone + Copy&gt;(input: &amp;mut [T], left: usize, { &#160;&#160;&#160;&#160;let key = input[left].clone(); &#160;&#160;&#160;&#160;// just init it, so no unsafe calls needed, otherwise use of uninit &#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="825.5,-160 757.5,-160 757.5,-124 825.5,-124 825.5,-160"/>
<text text-anchor="middle" x="791.5" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">ksort_lr</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_longer(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_longer().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn test_quick_dual_longer() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = [10, 20, 11, 24, 22, 21, 19]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, [10, 11, 19, 20, 21, 22, 24]);...">
<polygon fill="lightblue" stroke="black" points="381,-2860 206,-2860 206,-2824 381,-2824 381,-2860"/>
<text text-anchor="middle" x="293.5" y="-2838.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_dual_longer</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_longer().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_longer().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-2860.05C383.63,-2862.83 394.11,-2865.84 404,-2869 432.84,-2878.22 464.32,-2890.51 489.77,-2901.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-2904.36 499.21,-2904.98 491.33,-2897.9 488.63,-2904.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_len1(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_len1().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_batcher_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="396.5,-970 190.5,-970 190.5,-934 396.5,-934 396.5,-970"/>
<text text-anchor="middle" x="293.5" y="-948.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_batcher_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().</title>
<g id="a_node118"><a xlink:title="pub fn oddeven_batcher_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort_ranges(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="626.5,-1024 456.5,-1024 456.5,-988 626.5,-988 626.5,-1024"/>
<text text-anchor="middle" x="541.5" y="-1002.3" font-family="Helvetica,sans-Serif" font-size="14.00">oddeven_batcher_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().</title>
<path fill="none" stroke="gray" d="M376.76,-970.06C399.73,-975.1 424.85,-980.61 448.36,-985.77"/>
<polygon fill="gray" stroke="gray" points="447.8,-989.24 458.32,-987.96 449.3,-982.4 447.8,-989.24"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_big(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_big().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn test_weak_heap_big() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut array = [10, 20, 11, 24, 22, 21, 19, 9, 7, 8, 6, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;weak_heap_sort(&amp;mut array); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(array, [5, 6, 7, 8, 9, 10, 11, 19, 20, ...">
<polygon fill="lightblue" stroke="black" points="371,-3724 216,-3724 216,-3688 371,-3688 371,-3724"/>
<text text-anchor="middle" x="293.5" y="-3702.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_weak_heap_big</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_big().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_big().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M371.32,-3689.14C401.98,-3682.41 437.1,-3674.7 467.37,-3668.05"/>
<polygon fill="gray" stroke="gray" points="468.43,-3671.4 477.44,-3665.84 466.92,-3664.57 468.43,-3671.4"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_empty(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_empty().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_up_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="380,-4426 207,-4426 207,-4390 380,-4390 380,-4426"/>
<text text-anchor="middle" x="293.5" y="-4404.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_up_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-4426.05C383.63,-4428.83 394.11,-4431.84 404,-4435 432.84,-4444.22 464.32,-4456.51 489.77,-4467.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-4470.36 499.21,-4470.98 491.33,-4463.9 488.63,-4470.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_empty(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_empty().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;fn test_selection_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="374.5,-4696 212.5,-4696 212.5,-4660 374.5,-4660 374.5,-4696"/>
<text text-anchor="middle" x="293.5" y="-4674.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<path fill="none" stroke="gray" d="M374.71,-4669.2C407.21,-4665.63 444.26,-4661.56 475.09,-4658.18"/>
<polygon fill="gray" stroke="gray" points="475.73,-4661.63 485.28,-4657.06 474.96,-4654.67 475.73,-4661.63"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;fn new(n: usize) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { gap: n } &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="818.5,-4615 764.5,-4615 764.5,-4579 818.5,-4579 818.5,-4615"/>
<text text-anchor="middle" x="791.5" y="-4593.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_len1(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_len1().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;fn test_weak_heap_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;weak_heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="375.5,-3670 211.5,-3670 211.5,-3634 375.5,-3634 375.5,-3670"/>
<text text-anchor="middle" x="293.5" y="-3648.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_weak_heap_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M375.73,-3652C405.15,-3652 438.18,-3652 466.9,-3652"/>
<polygon fill="gray" stroke="gray" points="467.27,-3655.5 477.27,-3652 467.27,-3648.5 467.27,-3655.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_len1(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_len1().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn test_ksort_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ksort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354.5,-214 232.5,-214 232.5,-178 354.5,-178 354.5,-214"/>
<text text-anchor="middle" x="293.5" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_ksort_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M354.68,-182.79C401.55,-172.5 465.07,-158.56 504.39,-149.93"/>
<polygon fill="gray" stroke="gray" points="505.3,-153.31 514.32,-147.75 503.8,-146.47 505.3,-153.31"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;fn test_heap() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="335.5,-916 251.5,-916 251.5,-880 335.5,-880 335.5,-916"/>
<text text-anchor="middle" x="293.5" y="-894.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M335.67,-888.96C376.37,-880.03 438.92,-866.3 484.2,-856.36"/>
<polygon fill="gray" stroke="gray" points="485.14,-859.74 494.16,-854.17 483.64,-852.9 485.14,-859.74"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_empty(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_empty().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;fn test_insertion_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;insertion_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="374,-1834 213,-1834 213,-1798 374,-1798 374,-1834"/>
<text text-anchor="middle" x="293.5" y="-1812.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_insertion_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-1834.05C383.63,-1836.83 394.11,-1839.84 404,-1843 432.84,-1852.22 464.32,-1864.51 489.77,-1875.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-1878.36 499.21,-1878.98 491.33,-1871.9 488.63,-1878.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_len1(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_len1().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_up_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="373,-4534 214,-4534 214,-4498 373,-4498 373,-4534"/>
<text text-anchor="middle" x="293.5" y="-4512.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_up_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<path fill="none" stroke="gray" d="M373.01,-4507.38C404.09,-4503.97 439.55,-4500.08 469.81,-4496.76"/>
<polygon fill="gray" stroke="gray" points="470.3,-4500.23 479.86,-4495.66 469.54,-4493.27 470.3,-4500.23"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_empty(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_empty().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;fn test_selection_double_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_double_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="401.5,-4858 185.5,-4858 185.5,-4822 401.5,-4822 401.5,-4858"/>
<text text-anchor="middle" x="293.5" y="-4836.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_double_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<path fill="none" stroke="gray" d="M376.76,-4821.94C399.73,-4816.9 424.85,-4811.39 448.36,-4806.23"/>
<polygon fill="gray" stroke="gray" points="449.3,-4809.6 458.32,-4804.04 447.8,-4802.76 449.3,-4809.6"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_len1(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_len1().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;fn test_shell_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;shell_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="353,-4264 234,-4264 234,-4228 353,-4228 353,-4264"/>
<text text-anchor="middle" x="293.5" y="-4242.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_shell_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<path fill="none" stroke="gray" d="M353.19,-4257.12C369.93,-4261.18 387.96,-4266.43 404,-4273 440.89,-4288.1 479.67,-4312 506.43,-4329.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-4333.04 515.02,-4335.76 508.71,-4327.25 504.78,-4333.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_len1(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_len1().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn test_heap_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354,-430 233,-430 233,-394 354,-394 354,-430"/>
<text text-anchor="middle" x="293.5" y="-408.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<path fill="none" stroke="gray" d="M354.01,-425.13C370.34,-429.15 387.96,-433.88 404,-439 432.84,-448.22 464.32,-460.51 489.77,-471.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-474.36 499.21,-474.98 491.33,-467.9 488.63,-474.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble_empty(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble_empty().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn test_bubble_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bubble_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="368,-3400 219,-3400 219,-3364 368,-3364 368,-3400"/>
<text text-anchor="middle" x="293.5" y="-3378.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bubble_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<path fill="none" stroke="gray" d="M368.21,-3398.73C380.25,-3401.87 392.53,-3405.34 404,-3409 432.84,-3418.22 464.32,-3430.51 489.77,-3441.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3444.36 499.21,-3444.98 491.33,-3437.9 488.63,-3444.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_len1(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_len1().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;fn test_pancake_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pancake_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="365.5,-3076 221.5,-3076 221.5,-3040 365.5,-3040 365.5,-3076"/>
<text text-anchor="middle" x="293.5" y="-3054.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pancake_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<path fill="none" stroke="gray" d="M365.58,-3074.04C378.45,-3077.37 391.69,-3081.07 404,-3085 432.84,-3094.22 464.32,-3106.51 489.77,-3117.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3120.36 499.21,-3120.98 491.33,-3113.9 488.63,-3120.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge().</title>
<g id="a_node35"><a xlink:title="i: usize, j: usize) &#160;fn weak_heap_merge&lt;T: PartialOrd&gt;(input: &amp;mut [T], r: &amp;mut Vec&lt;usize&gt;, { &#160;&#160;&#160;&#160;if input[i] &lt; input[j] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tog_flag(r, j); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input.swap(i, j); &#160;&#160;&#160;&#160;} }">
<polygon fill="lightblue" stroke="black" points="864,-3643 719,-3643 719,-3607 864,-3607 864,-3643"/>
<text text-anchor="middle" x="791.5" y="-3621.3" font-family="Helvetica,sans-Serif" font-size="14.00">weak_heap_merge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tog_flag(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tog_flag().</title>
<g id="a_node122"><a xlink:title="fn tog_flag(r: &amp;mut Vec&lt;usize&gt;, x: usize) &#160;{ &#160;&#160;&#160;&#160;r[x &gt;&gt; 3] ^= 1 &lt;&lt; (x &amp; 7) }">
<polygon fill="lightblue" stroke="black" points="1070,-3643 998,-3643 998,-3607 1070,-3607 1070,-3643"/>
<text text-anchor="middle" x="1034" y="-3621.3" font-family="Helvetica,sans-Serif" font-size="14.00">tog_flag</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tog_flag(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tog_flag().</title>
<path fill="none" stroke="gray" d="M864.01,-3625C904.04,-3625 952.74,-3625 987.56,-3625"/>
<polygon fill="gray" stroke="gray" points="987.89,-3628.5 997.89,-3625 987.89,-3621.5 987.89,-3628.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees().</title>
<g id="a_node36"><a xlink:title="fn get_child_trees(i: usize, k: usize) &#45;&gt; [usize; 4] &#160;{ &#160;&#160;&#160;&#160;let tr = i &#45; 1; &#160;&#160;&#160;&#160;let kr = k &#45; 2; &#160;&#160;&#160;&#160;let tl = tr &#45; crate::LEO_NUMS[kr]; &#160;&#160;&#160;&#160;let kl = k &#45; 1; &#160;&#160;&#160;&#160;[tr, kr, tl, kl] }">
<polygon fill="lightblue" stroke="black" points="1094,-1564 974,-1564 974,-1528 1094,-1528 1094,-1564"/>
<text text-anchor="middle" x="1034" y="-1542.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_child_trees</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort_sorting(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort_sorting().</title>
<g id="a_node38"><a xlink:title="fn slow_sort_sorting&lt;T: PartialOrd&gt;(input: &amp;mut [T], start: usize, end: usize) &#160;{ &#160;&#160;&#160;&#160;if start &gt;= end {return;} &#160;&#160;&#160;&#160;&#160;let mid = (start + end) / 2; &#160;&#160;&#160;&#160;slow_sort_sorting(input, start, mid); &#160;&#160;&#160;&#160;slow_sor...">
<polygon fill="lightblue" stroke="black" points="860,-2536 723,-2536 723,-2500 860,-2500 860,-2536"/>
<text text-anchor="middle" x="791.5" y="-2514.3" font-family="Helvetica,sans-Serif" font-size="14.00">slow_sort_sorting</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_empty(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_empty().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn test_quick_dual_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="381,-2806 206,-2806 206,-2770 381,-2770 381,-2806"/>
<text text-anchor="middle" x="293.5" y="-2784.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_dual_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M381.22,-2805.67C389.08,-2808.37 396.79,-2811.47 404,-2815 447.28,-2836.21 489.62,-2872.91 515.39,-2897.57"/>
<polygon fill="gray" stroke="gray" points="513.22,-2900.35 522.83,-2904.81 518.1,-2895.33 513.22,-2900.35"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;fn test_gnome() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="342.5,-1672 244.5,-1672 244.5,-1636 342.5,-1636 342.5,-1672"/>
<text text-anchor="middle" x="293.5" y="-1650.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<path fill="none" stroke="gray" d="M342.59,-1664.38C361.85,-1668.92 384.14,-1674.65 404,-1681 432.84,-1690.22 464.32,-1702.51 489.77,-1713.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-1716.36 499.21,-1716.98 491.33,-1709.9 488.63,-1716.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_empty(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_empty().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn test_merge_bu_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="378.5,-3238 208.5,-3238 208.5,-3202 378.5,-3202 378.5,-3238"/>
<text text-anchor="middle" x="293.5" y="-3216.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_bu_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-3238.05C383.63,-3240.83 394.11,-3243.84 404,-3247 432.84,-3256.22 464.32,-3268.51 489.77,-3279.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3282.36 499.21,-3282.98 491.33,-3275.9 488.63,-3282.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_empty(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_empty().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;fn test_shell_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;shell_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="360,-4372 227,-4372 227,-4336 360,-4336 360,-4372"/>
<text text-anchor="middle" x="293.5" y="-4350.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_shell_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<path fill="none" stroke="gray" d="M360.1,-4354C400.69,-4354 452.03,-4354 489.56,-4354"/>
<polygon fill="gray" stroke="gray" points="489.75,-4357.5 499.75,-4354 489.75,-4350.5 489.75,-4357.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="348.5,-2644 238.5,-2644 238.5,-2608 348.5,-2608 348.5,-2644"/>
<text text-anchor="middle" x="293.5" y="-2622.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<path fill="none" stroke="gray" d="M348.65,-2637.82C366.43,-2642.11 386.19,-2647.31 404,-2653 432.84,-2662.22 464.32,-2674.51 489.77,-2685.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-2688.36 499.21,-2688.98 491.33,-2681.9 488.63,-2688.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn test_merge_bu() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![24, 20, 11, 13, 10]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 13, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="353,-3346 234,-3346 234,-3310 353,-3310 353,-3346"/>
<text text-anchor="middle" x="293.5" y="-3324.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_bu</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M353.11,-3321.57C380.05,-3318.61 412.73,-3315.02 443.21,-3311.68"/>
<polygon fill="gray" stroke="gray" points="443.89,-3315.12 453.45,-3310.55 443.12,-3308.17 443.89,-3315.12"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge().</title>
<g id="a_node119"><a xlink:title="fn merge&lt;T: PartialOrd + Copy&gt;(in1: &amp;[T], in2: &amp;[T], tmp: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;let mut left = 0; &#160;&#160;&#160;&#160;let mut right = 0; &#160;&#160;&#160;&#160;let mut index = 0; &#160;&#160;&#160;&#160;&#160;while left &lt; in1.len() &amp;&amp; right &lt; in2.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if...">
<polygon fill="lightblue" stroke="black" points="822,-3319 761,-3319 761,-3283 822,-3283 822,-3319"/>
<text text-anchor="middle" x="791.5" y="-3297.3" font-family="Helvetica,sans-Serif" font-size="14.00">merge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge().</title>
<path fill="none" stroke="gray" d="M629.59,-3301C670.89,-3301 718.22,-3301 750.79,-3301"/>
<polygon fill="gray" stroke="gray" points="750.83,-3304.5 760.83,-3301 750.83,-3297.5 750.83,-3304.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;fn test_cocktail() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![30, 10, 20, 11, 24, 44, 12, 11]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cocktail_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 11, 12, 20, 24, 30, ...">
<polygon fill="lightblue" stroke="black" points="344.5,-4210 242.5,-4210 242.5,-4174 344.5,-4174 344.5,-4210"/>
<text text-anchor="middle" x="293.5" y="-4188.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cocktail</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<path fill="none" stroke="gray" d="M344.58,-4186.5C383.64,-4182.22 438.07,-4176.24 479.64,-4171.68"/>
<polygon fill="gray" stroke="gray" points="480.09,-4175.15 489.65,-4170.58 479.32,-4168.19 480.09,-4175.15"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_empty(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_empty().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;fn test_cycle_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="361.5,-4048 225.5,-4048 225.5,-4012 361.5,-4012 361.5,-4048"/>
<text text-anchor="middle" x="293.5" y="-4026.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cycle_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<path fill="none" stroke="gray" d="M361.72,-4022.62C401.64,-4018.24 451.51,-4012.77 488.42,-4008.72"/>
<polygon fill="gray" stroke="gray" points="488.91,-4012.18 498.47,-4007.61 488.15,-4005.22 488.91,-4012.18"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_usize() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 15]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 15, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="363,-2104 224,-2104 224,-2068 363,-2068 363,-2104"/>
<text text-anchor="middle" x="293.5" y="-2082.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_usize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M363.02,-2101.04C400.84,-2109.34 447.26,-2119.53 483.15,-2127.41"/>
<polygon fill="gray" stroke="gray" points="482.45,-2130.84 492.97,-2129.57 483.95,-2124 482.45,-2130.84"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort_sorting(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort_sorting().</title>
<g id="a_node49"><a xlink:title="end: usize) &#160;fn stooge_sort_sorting&lt;T: PartialOrd&gt;(input: &amp;mut [T], start: usize, { &#160;&#160;&#160;&#160;if input[start] &gt; input[end] {input.swap(start, end);} &#160;&#160;&#160;&#160;if start &lt;= end { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (end &#45; start + 1) &gt; 2 { ...">
<polygon fill="lightblue" stroke="black" points="867.5,-1186 715.5,-1186 715.5,-1150 867.5,-1150 867.5,-1186"/>
<text text-anchor="middle" x="791.5" y="-1164.3" font-family="Helvetica,sans-Serif" font-size="14.00">stooge_sort_sorting</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_01(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_01().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;fn test_smooth_01() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![20, 10, 11, 13, 24, 9, 2, 1, 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smooth_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[1, 2, 8, 9, 10, 11, 13, 20, 24])...">
<polygon fill="lightblue" stroke="black" points="356.5,-1618 230.5,-1618 230.5,-1582 356.5,-1582 356.5,-1618"/>
<text text-anchor="middle" x="293.5" y="-1596.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_smooth_01</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M356.58,-1586.37C394.6,-1578.03 443.01,-1567.4 480.62,-1559.14"/>
<polygon fill="gray" stroke="gray" points="481.41,-1562.55 490.43,-1556.99 479.91,-1555.72 481.41,-1562.55"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn test_bubble() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![30, 10, 20, 11, 24, 44, 12, 11]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bubble_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 11, 12, 20, 24, 30, 44])...">
<polygon fill="lightblue" stroke="black" points="342.5,-3508 244.5,-3508 244.5,-3472 342.5,-3472 342.5,-3508"/>
<text text-anchor="middle" x="293.5" y="-3486.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bubble</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<path fill="none" stroke="gray" d="M342.52,-3484.73C382.51,-3480.34 439.62,-3474.07 482.23,-3469.4"/>
<polygon fill="gray" stroke="gray" points="482.63,-3472.87 492.19,-3468.3 481.86,-3465.91 482.63,-3472.87"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new().</title>
<path fill="none" stroke="gray" d="M561.14,-4372.26C604.96,-4415.2 714.61,-4522.64 764.75,-4571.77"/>
<polygon fill="gray" stroke="gray" points="762.39,-4574.36 771.98,-4578.86 767.29,-4569.36 762.39,-4574.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_len1(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_len1().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;fn test_slow_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;slow_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="352,-2590 235,-2590 235,-2554 352,-2554 352,-2590"/>
<text text-anchor="middle" x="293.5" y="-2568.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().</title>
<path fill="none" stroke="gray" d="M352.18,-2559.34C394.33,-2550.09 450.91,-2537.67 491.01,-2528.86"/>
<polygon fill="gray" stroke="gray" points="491.82,-2532.27 500.84,-2526.71 490.32,-2525.43 491.82,-2532.27"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;fn test_pancake() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 15]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pancake_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 15, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="347,-3184 240,-3184 240,-3148 347,-3148 347,-3184"/>
<text text-anchor="middle" x="293.5" y="-3162.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pancake</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<path fill="none" stroke="gray" d="M347.27,-3160.21C385.41,-3156.02 437.08,-3150.35 477.4,-3145.93"/>
<polygon fill="gray" stroke="gray" points="477.83,-3149.4 487.39,-3144.83 477.07,-3142.44 477.83,-3149.4"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_empty(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_empty().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;fn test_quick_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="362.5,-268 224.5,-268 224.5,-232 362.5,-232 362.5,-268"/>
<text text-anchor="middle" x="293.5" y="-246.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<path fill="none" stroke="gray" d="M362.66,-265.29C376.44,-268.81 390.76,-272.77 404,-277 432.84,-286.22 464.32,-298.51 489.77,-309.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-312.36 499.21,-312.98 491.33,-305.9 488.63,-312.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_merge(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_merge().</title>
<g id="a_node57"><a xlink:title="r: usize) &#160;fn oddeven_batcher_merge&lt;T: PartialOrd&gt;(input: &amp;mut [T], start:usize, end:usize, { &#160;&#160;&#160;&#160;let step = r * 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if step &lt; end &#45; start { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_merge(input, start, end, st...">
<polygon fill="lightblue" stroke="black" points="1128,-1024 940,-1024 940,-988 1128,-988 1128,-1024"/>
<text text-anchor="middle" x="1034" y="-1002.3" font-family="Helvetica,sans-Serif" font-size="14.00">oddeven_batcher_merge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;fn test_merge() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 13, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 13, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="340.5,-2320 246.5,-2320 246.5,-2284 340.5,-2284 340.5,-2320"/>
<text text-anchor="middle" x="293.5" y="-2298.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<path fill="none" stroke="gray" d="M340.7,-2311.93C360.38,-2316.54 383.48,-2322.45 404,-2329 432.84,-2338.22 464.32,-2350.51 489.77,-2361.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-2364.36 499.21,-2364.98 491.33,-2357.9 488.63,-2364.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_correct_gap_sequence(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_correct_gap_sequence().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;fn test_correct_gap_sequence() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gaps: Vec&lt;_&gt; = GapSequence::new(10).collect(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(gaps, &amp;[5, 2, 1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="643,-4858 440,-4858 440,-4822 643,-4822 643,-4858"/>
<text text-anchor="middle" x="541.5" y="-4836.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_correct_gap_sequence</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_correct_gap_sequence().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_correct_gap_sequence().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new().</title>
<path fill="none" stroke="gray" d="M627.6,-4821.96C633.02,-4819.37 638.21,-4816.4 643,-4813 712.52,-4763.67 759.4,-4670.54 779.46,-4624.37"/>
<polygon fill="gray" stroke="gray" points="782.75,-4625.57 783.44,-4615 776.31,-4622.84 782.75,-4625.57"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up().</title>
<g id="a_node60"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_up() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354.5,-4480 232.5,-4480 232.5,-4444 354.5,-4444 354.5,-4480"/>
<text text-anchor="middle" x="293.5" y="-4458.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_up</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<path fill="none" stroke="gray" d="M354.68,-4468.6C389.39,-4472.42 433.23,-4477.23 469.61,-4481.22"/>
<polygon fill="gray" stroke="gray" points="469.34,-4484.71 479.66,-4482.32 470.1,-4477.75 469.34,-4484.71"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_char(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_char().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_char() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![&#39;r&#39;, &#39;u&#39;, &#39;s&#39;, &#39;t&#39;, &#39;c&#39;]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![&#39;c&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="360.5,-2050 226.5,-2050 226.5,-2014 360.5,-2014 360.5,-2050"/>
<text text-anchor="middle" x="293.5" y="-2028.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_char</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_char().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_char().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M360.64,-2044.99C375.18,-2048.75 390.32,-2053.4 404,-2059 440.89,-2074.1 479.67,-2098 506.43,-2115.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-2119.04 515.02,-2121.76 508.71,-2113.25 504.78,-2119.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/get_flag(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/get_flag().</title>
<path fill="none" stroke="gray" d="M605.72,-3658.88C649.33,-3663.63 706.25,-3669.83 745.33,-3674.08"/>
<polygon fill="gray" stroke="gray" points="745.04,-3677.57 755.36,-3675.17 745.8,-3670.61 745.04,-3677.57"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge().</title>
<path fill="none" stroke="gray" d="M605.72,-3645.12C636.94,-3641.72 674.97,-3637.58 708.41,-3633.94"/>
<polygon fill="gray" stroke="gray" points="709.06,-3637.39 718.62,-3632.83 708.3,-3630.43 709.06,-3637.39"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_len1(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_len1().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;fn test_smooth_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smooth_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="362.5,-1564 224.5,-1564 224.5,-1528 362.5,-1528 362.5,-1564"/>
<text text-anchor="middle" x="293.5" y="-1542.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_smooth_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M362.7,-1546C399.45,-1546 444.41,-1546 479.93,-1546"/>
<polygon fill="gray" stroke="gray" points="480.15,-1549.5 490.15,-1546 480.15,-1542.5 480.15,-1549.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_len1(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_len1().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="366.5,-2752 220.5,-2752 220.5,-2716 366.5,-2716 366.5,-2752"/>
<text text-anchor="middle" x="293.5" y="-2730.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<path fill="none" stroke="gray" d="M366.65,-2726.08C401.34,-2722.27 442.58,-2717.75 476.18,-2714.06"/>
<polygon fill="gray" stroke="gray" points="476.79,-2717.51 486.35,-2712.94 476.03,-2710.56 476.79,-2717.51"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/largest_pancake(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/largest_pancake().</title>
<g id="a_node66"><a xlink:title="&#45;&gt; usize &#160;fn largest_pancake&lt;T: PartialOrd + Copy&gt;(input: &amp;[T], index: usize) { &#160;&#160;&#160;&#160;let mut pancake = input[index]; &#160;&#160;&#160;&#160;let mut largest = index; &#160;&#160;&#160;&#160;&#160;for i in 0..index { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if input[i] &gt; pancake ...">
<polygon fill="lightblue" stroke="black" points="855.5,-3130 727.5,-3130 727.5,-3094 855.5,-3094 855.5,-3130"/>
<text text-anchor="middle" x="791.5" y="-3108.3" font-family="Helvetica,sans-Serif" font-size="14.00">largest_pancake</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_stooge(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_stooge().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;fn test_stooge() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stooge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="341.5,-1132 245.5,-1132 245.5,-1096 341.5,-1096 341.5,-1132"/>
<text text-anchor="middle" x="293.5" y="-1110.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_stooge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().</title>
<g id="a_node117"><a xlink:title="pub fn stooge_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;stooge_sort_sorting(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="590,-1186 493,-1186 493,-1150 590,-1150 590,-1186"/>
<text text-anchor="middle" x="541.5" y="-1164.3" font-family="Helvetica,sans-Serif" font-size="14.00">stooge_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_stooge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_stooge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().</title>
<path fill="none" stroke="gray" d="M341.64,-1124.35C381.81,-1133.17 439.68,-1145.87 482.65,-1155.3"/>
<polygon fill="gray" stroke="gray" points="482.16,-1158.78 492.68,-1157.5 483.66,-1151.94 482.16,-1158.78"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;fn test_heap_bottom_up() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut array = [10, 20, 11, 24, 22, 21, 19]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_bottom_up_sort(&amp;mut array); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(array, [10, 11, 19, 20, 21, 22, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="376,-1294 211,-1294 211,-1258 376,-1258 376,-1294"/>
<text text-anchor="middle" x="293.5" y="-1272.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_bottom_up</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-1294.05C383.63,-1296.83 394.11,-1299.84 404,-1303 432.84,-1312.22 464.32,-1324.51 489.77,-1335.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-1338.36 499.21,-1338.98 491.33,-1331.9 488.63,-1338.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_small(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_small().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;fn test_weak_heap_small() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 13]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;weak_heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 13, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="378.5,-3616 208.5,-3616 208.5,-3580 378.5,-3580 378.5,-3616"/>
<text text-anchor="middle" x="293.5" y="-3594.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_weak_heap_small</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_small().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_small().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M376.76,-3616.06C406.12,-3622.5 438.97,-3629.71 467.5,-3635.98"/>
<polygon fill="gray" stroke="gray" points="466.88,-3639.42 477.4,-3638.15 468.38,-3632.59 466.88,-3639.42"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_two_elem(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_two_elem().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;fn test_quick_two_elem() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = [20, 10]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, [10, 20]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="373,-3022 214,-3022 214,-2986 373,-2986 373,-3022"/>
<text text-anchor="middle" x="293.5" y="-3000.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_two_elem</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_two_elem().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_two_elem().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-2985.95C383.63,-2983.17 394.11,-2980.16 404,-2977 432.84,-2967.78 464.32,-2955.49 489.77,-2944.96"/>
<polygon fill="gray" stroke="gray" points="491.33,-2948.1 499.21,-2941.02 488.63,-2941.64 491.33,-2948.1"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift().</title>
<g id="a_node71"><a xlink:title="fn hbu_sift&lt;T: PartialOrd&gt;(input: &amp;mut [T], start: usize, end: usize) &#160;{ &#160;&#160;&#160;&#160;let mut current = hbu_leaf_search(input, start, end); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while input[start] &gt; input[current] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current = (cur...">
<polygon fill="lightblue" stroke="black" points="827,-1375 756,-1375 756,-1339 827,-1339 827,-1375"/>
<text text-anchor="middle" x="791.5" y="-1353.3" font-family="Helvetica,sans-Serif" font-size="14.00">hbu_sift</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_leaf_search(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_leaf_search().</title>
<g id="a_node76"><a xlink:title="&#45;&gt; usize &#160;fn hbu_leaf_search&lt;T: PartialOrd&gt;(input: &amp;mut [T], start: usize, end: usize) { &#160;&#160;&#160;&#160;let mut current = start; &#160;&#160;&#160;&#160;&#160;loop { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let child = current * 2 + 1; // Left leaf &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (child +...">
<polygon fill="lightblue" stroke="black" points="1098,-1375 970,-1375 970,-1339 1098,-1339 1098,-1375"/>
<text text-anchor="middle" x="1034" y="-1353.3" font-family="Helvetica,sans-Serif" font-size="14.00">hbu_leaf_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_leaf_search(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_leaf_search().</title>
<path fill="none" stroke="gray" d="M827.21,-1357C861.73,-1357 915.74,-1357 959.76,-1357"/>
<polygon fill="gray" stroke="gray" points="959.86,-1360.5 969.86,-1357 959.86,-1353.5 959.86,-1360.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_len1(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_len1().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;fn test_merge_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="359,-2428 228,-2428 228,-2392 359,-2392 359,-2428"/>
<text text-anchor="middle" x="293.5" y="-2406.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<path fill="none" stroke="gray" d="M359.13,-2402.91C397.78,-2398.66 446.43,-2393.32 483.62,-2389.24"/>
<polygon fill="gray" stroke="gray" points="484.22,-2392.7 493.78,-2388.13 483.46,-2385.74 484.22,-2392.7"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_empty(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_empty().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;fn test_heap_bottom_up_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="401.5,-1402 185.5,-1402 185.5,-1366 401.5,-1366 401.5,-1402"/>
<text text-anchor="middle" x="293.5" y="-1380.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_bottom_up_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M401.68,-1372.24C417.15,-1370.54 432.95,-1368.8 448.09,-1367.14"/>
<polygon fill="gray" stroke="gray" points="448.9,-1370.57 458.46,-1366 448.14,-1363.62 448.9,-1370.57"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_len1(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_len1().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn test_slow_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stooge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="352,-1240 235,-1240 235,-1204 352,-1204 352,-1240"/>
<text text-anchor="middle" x="293.5" y="-1218.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().</title>
<path fill="none" stroke="gray" d="M352.18,-1209.34C391.5,-1200.71 443.37,-1189.32 482.72,-1180.68"/>
<polygon fill="gray" stroke="gray" points="483.67,-1184.06 492.69,-1178.5 482.17,-1177.22 483.67,-1184.06"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_len1(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_len1().</title>
<g id="a_node77"><a xlink:title=" &#160;&#160;&#160;fn test_heap_bottom_up_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="394.5,-1348 192.5,-1348 192.5,-1312 394.5,-1312 394.5,-1348"/>
<text text-anchor="middle" x="293.5" y="-1326.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_bottom_up_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M394.56,-1340.98C412.24,-1342.92 430.57,-1344.93 448.03,-1346.85"/>
<polygon fill="gray" stroke="gray" points="447.88,-1350.36 458.2,-1347.97 448.64,-1343.4 447.88,-1350.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort().</title>
<g id="a_node126"><a xlink:title="fn bit_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T], mode: bool) &#160;{ &#160;&#160;&#160;&#160;if input.len() &gt; 1 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mid_point = input.len() / 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bit_sort(&amp;mut input[..mid_point], true); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bit_sort(&amp;mut inpu...">
<polygon fill="lightblue" stroke="black" points="825.5,-2158 757.5,-2158 757.5,-2122 825.5,-2122 825.5,-2158"/>
<text text-anchor="middle" x="791.5" y="-2136.3" font-family="Helvetica,sans-Serif" font-size="14.00">bit_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort().</title>
<path fill="none" stroke="gray" d="M590.02,-2140C635.47,-2140 703.39,-2140 747.33,-2140"/>
<polygon fill="gray" stroke="gray" points="747.41,-2143.5 757.41,-2140 747.41,-2136.5 747.41,-2143.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/flip(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/flip().</title>
<g id="a_node80"><a xlink:title="fn flip&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T], index: usize) &#160;{ &#160;&#160;&#160;&#160;input[..=index].reverse(); }">
<polygon fill="lightblue" stroke="black" points="818.5,-3184 764.5,-3184 764.5,-3148 818.5,-3148 818.5,-3184"/>
<text text-anchor="middle" x="791.5" y="-3162.3" font-family="Helvetica,sans-Serif" font-size="14.00">flip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;fn test_shell() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![11, 20, 21, 40, 11, 60, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;shell_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![5, 11, 11, 20, 21, 40, 60]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="334.5,-4318 252.5,-4318 252.5,-4282 334.5,-4282 334.5,-4318"/>
<text text-anchor="middle" x="293.5" y="-4296.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_shell</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<path fill="none" stroke="gray" d="M334.57,-4308.8C376.85,-4318.08 443.59,-4332.73 489.57,-4342.82"/>
<polygon fill="gray" stroke="gray" points="489.11,-4346.3 499.63,-4345.03 490.61,-4339.46 489.11,-4346.3"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;fn test_quick_dual() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="355.5,-2968 231.5,-2968 231.5,-2932 355.5,-2932 355.5,-2968"/>
<text text-anchor="middle" x="293.5" y="-2946.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_dual</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M355.63,-2943.29C389.82,-2939.54 432.63,-2934.84 468.45,-2930.91"/>
<polygon fill="gray" stroke="gray" points="469.28,-2934.34 478.84,-2929.77 468.51,-2927.38 469.28,-2934.34"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_len1(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_len1().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;fn test_quick_dual_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="374,-2914 213,-2914 213,-2878 374,-2878 374,-2914"/>
<text text-anchor="middle" x="293.5" y="-2892.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_dual_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M374.03,-2904.73C404.42,-2908.06 438.87,-2911.85 468.51,-2915.1"/>
<polygon fill="gray" stroke="gray" points="468.46,-2918.61 478.78,-2916.23 469.23,-2911.66 468.46,-2918.61"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;fn test_comb() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![30, 10, 20, 11, 24, 44, 12, 11]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comb_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 11, 12, 20, 24, 30, 44]); &#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="337.5,-3886 249.5,-3886 249.5,-3850 337.5,-3850 337.5,-3886"/>
<text text-anchor="middle" x="293.5" y="-3864.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_comb</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<path fill="none" stroke="gray" d="M337.63,-3863.27C379.05,-3858.72 441.76,-3851.84 486.48,-3846.93"/>
<polygon fill="gray" stroke="gray" points="487.03,-3850.39 496.59,-3845.82 486.27,-3843.43 487.03,-3850.39"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_max(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_max().</title>
<path fill="none" stroke="gray" d="M584.01,-493C626.06,-493 691.27,-493 737.13,-493"/>
<polygon fill="gray" stroke="gray" points="737.19,-496.5 747.19,-493 737.19,-489.5 737.19,-496.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_empty(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_empty().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;u8&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="367,-1996 220,-1996 220,-1960 367,-1960 367,-1996"/>
<text text-anchor="middle" x="293.5" y="-1974.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M367,-1990.02C379.8,-1993.75 392.64,-1998.63 404,-2005 453.17,-2032.55 496.94,-2082.61 520.99,-2113.42"/>
<polygon fill="gray" stroke="gray" points="518.37,-2115.76 527.24,-2121.56 523.93,-2111.5 518.37,-2115.76"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort_lr(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort_lr().</title>
<path fill="none" stroke="gray" d="M568.57,-142C611.04,-142 695.58,-142 747.18,-142"/>
<polygon fill="gray" stroke="gray" points="747.35,-145.5 757.35,-142 747.35,-138.5 747.35,-145.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort_sorting(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort_sorting().</title>
<path fill="none" stroke="gray" d="M582.07,-2518C617.01,-2518 668.99,-2518 712.3,-2518"/>
<polygon fill="gray" stroke="gray" points="712.53,-2521.5 722.53,-2518 712.53,-2514.5 712.53,-2521.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_len1(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_len1().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="360.5,-1780 226.5,-1780 226.5,-1744 360.5,-1744 360.5,-1780"/>
<text text-anchor="middle" x="293.5" y="-1758.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<path fill="none" stroke="gray" d="M360.75,-1754.73C398.73,-1750.56 445.96,-1745.38 482.48,-1741.37"/>
<polygon fill="gray" stroke="gray" points="482.91,-1744.84 492.47,-1740.27 482.15,-1737.88 482.91,-1744.84"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize_pow_2(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize_pow_2().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_usize_pow_2() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 15]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 15, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="388.5,-2266 198.5,-2266 198.5,-2230 388.5,-2230 388.5,-2266"/>
<text text-anchor="middle" x="293.5" y="-2244.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_usize_pow_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize_pow_2().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize_pow_2().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M378.71,-2229.92C387.37,-2227.27 395.94,-2224.3 404,-2221 440.89,-2205.9 479.67,-2182 506.43,-2164.07"/>
<polygon fill="gray" stroke="gray" points="508.71,-2166.75 515.02,-2158.24 504.78,-2160.96 508.71,-2166.75"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sift(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sift().</title>
<g id="a_node93"><a xlink:title="end: usize) &#160;fn nheap_sift&lt;T: PartialOrd&gt;(input: &amp;mut [T], children: usize, start: usize, { &#160;&#160;&#160;&#160;let mut root = start; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let child = root * children + 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if child &gt; end {b...">
<polygon fill="lightblue" stroke="black" points="835.5,-862 747.5,-862 747.5,-826 835.5,-826 835.5,-862"/>
<text text-anchor="middle" x="791.5" y="-840.3" font-family="Helvetica,sans-Serif" font-size="14.00">nheap_sift</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_empty(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_empty().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_batcher_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="404,-1078 183,-1078 183,-1042 404,-1042 404,-1078"/>
<text text-anchor="middle" x="293.5" y="-1056.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_batcher_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().</title>
<path fill="none" stroke="gray" d="M376.76,-1041.94C399.73,-1036.9 424.85,-1031.39 448.36,-1026.23"/>
<polygon fill="gray" stroke="gray" points="449.3,-1029.6 458.32,-1024.04 447.8,-1022.76 449.3,-1029.6"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/largest_pancake(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/largest_pancake().</title>
<path fill="none" stroke="gray" d="M595.7,-3133.21C631.11,-3129.35 678.1,-3124.24 717.05,-3120"/>
<polygon fill="gray" stroke="gray" points="717.73,-3123.44 727.29,-3118.88 716.97,-3116.48 717.73,-3123.44"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/flip(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/flip().</title>
<path fill="none" stroke="gray" d="M595.7,-3144.79C643.59,-3150.01 712.67,-3157.53 754.4,-3162.07"/>
<polygon fill="gray" stroke="gray" points="754.07,-3165.55 764.39,-3163.16 754.83,-3158.6 754.07,-3165.55"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_len1(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_len1().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;fn test_cocktail_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cocktail_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="363,-4156 224,-4156 224,-4120 363,-4120 363,-4156"/>
<text text-anchor="middle" x="293.5" y="-4134.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cocktail_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<path fill="none" stroke="gray" d="M363.02,-4145.52C399.64,-4149.54 444.33,-4154.45 479.71,-4158.33"/>
<polygon fill="gray" stroke="gray" points="479.57,-4161.83 489.89,-4159.45 480.34,-4154.88 479.57,-4161.83"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_01(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_01().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;fn test_heap_01() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 13, 12]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 12, 13, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="348,-862 239,-862 239,-826 348,-826 348,-862"/>
<text text-anchor="middle" x="293.5" y="-840.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_01</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M348.18,-844C388.45,-844 443.44,-844 484.31,-844"/>
<polygon fill="gray" stroke="gray" points="484.38,-847.5 494.38,-844 484.38,-840.5 484.38,-847.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo().</title>
<g id="a_node100"><a xlink:title=" &#160;&#160;&#160;fn test_bingo() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 15]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bingo_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 15, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="338,-592 249,-592 249,-556 338,-556 338,-592"/>
<text text-anchor="middle" x="293.5" y="-570.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bingo</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<path fill="none" stroke="gray" d="M338.04,-583.31C358.28,-588 382.55,-594.15 404,-601 432.84,-610.22 464.32,-622.51 489.77,-633.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-636.36 499.21,-636.98 491.33,-629.9 488.63,-636.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_len1(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_len1().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;fn test_bingo_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bingo_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="356,-700 231,-700 231,-664 356,-664 356,-700"/>
<text text-anchor="middle" x="293.5" y="-678.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bingo_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<path fill="none" stroke="gray" d="M356.26,-675.22C396.5,-670.81 448.48,-665.1 486.96,-660.88"/>
<polygon fill="gray" stroke="gray" points="487.38,-664.35 496.94,-659.78 486.62,-657.39 487.38,-664.35"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;fn test_selection_double() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![11, 20, 21, 40, 11, 60, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_double_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![5, 11, 11, 20, 21...">
<polygon fill="lightblue" stroke="black" points="376,-4804 211,-4804 211,-4768 376,-4768 376,-4804"/>
<text text-anchor="middle" x="293.5" y="-4782.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_double</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<path fill="none" stroke="gray" d="M376.07,-4786C399.2,-4786 424.54,-4786 448.26,-4786"/>
<polygon fill="gray" stroke="gray" points="448.31,-4789.5 458.31,-4786 448.31,-4782.5 448.31,-4789.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_len1(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_len1().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;fn test_insertion_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;insertion_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="367,-1942 220,-1942 220,-1906 367,-1906 367,-1942"/>
<text text-anchor="middle" x="293.5" y="-1920.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_insertion_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<path fill="none" stroke="gray" d="M367.31,-1916.01C401.72,-1912.23 442.46,-1907.76 475.77,-1904.1"/>
<polygon fill="gray" stroke="gray" points="476.3,-1907.57 485.86,-1903 475.54,-1900.61 476.3,-1907.57"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_empty(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_empty().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;fn test_pancake_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pancake_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="372.5,-3130 214.5,-3130 214.5,-3094 372.5,-3094 372.5,-3130"/>
<text text-anchor="middle" x="293.5" y="-3108.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pancake_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<path fill="none" stroke="gray" d="M372.67,-3120.58C406.44,-3124.29 445.43,-3128.57 477.33,-3132.07"/>
<polygon fill="gray" stroke="gray" points="477.1,-3135.56 487.42,-3133.17 477.86,-3128.6 477.1,-3135.56"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_empty(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_empty().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="374,-2698 213,-2698 213,-2662 374,-2662 374,-2698"/>
<text text-anchor="middle" x="293.5" y="-2676.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<path fill="none" stroke="gray" d="M374.03,-2688.73C407.07,-2692.36 444.92,-2696.51 476.17,-2699.94"/>
<polygon fill="gray" stroke="gray" points="476.17,-2703.46 486.5,-2701.07 476.94,-2696.5 476.17,-2703.46"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_empty(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_empty().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;fn test_bingo_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bingo_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="363.5,-646 223.5,-646 223.5,-610 363.5,-610 363.5,-646"/>
<text text-anchor="middle" x="293.5" y="-624.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bingo_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<path fill="none" stroke="gray" d="M363.68,-635.59C402.61,-639.87 450.5,-645.12 486.62,-649.09"/>
<polygon fill="gray" stroke="gray" points="486.63,-652.61 496.96,-650.22 487.4,-645.65 486.63,-652.61"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_len1(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_len1().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;fn test_selection_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="367.5,-4642 219.5,-4642 219.5,-4606 367.5,-4606 367.5,-4642"/>
<text text-anchor="middle" x="293.5" y="-4620.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<path fill="none" stroke="gray" d="M367.64,-4632.03C401.78,-4635.78 442.09,-4640.2 475.2,-4643.83"/>
<polygon fill="gray" stroke="gray" points="474.9,-4647.32 485.22,-4644.93 475.66,-4640.36 474.9,-4647.32"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_empty(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_empty().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;fn test_merge_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="366,-2374 221,-2374 221,-2338 366,-2338 366,-2374"/>
<text text-anchor="middle" x="293.5" y="-2352.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<path fill="none" stroke="gray" d="M366.31,-2363.88C403.75,-2367.99 448.88,-2372.94 483.82,-2376.78"/>
<polygon fill="gray" stroke="gray" points="483.53,-2380.27 493.85,-2377.88 484.29,-2373.31 483.53,-2380.27"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/dual_pivot(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/dual_pivot().</title>
<g id="a_node136"><a xlink:title="end: usize) &#160;fn dual_pivot&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T], start: usize, { &#160;&#160;&#160;&#160;if start &gt;= end {return;} &#160;&#160;&#160;&#160;if input[start] &gt; input[end] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input.swap(start, end); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;let lpivot ...">
<polygon fill="lightblue" stroke="black" points="835.5,-2941 747.5,-2941 747.5,-2905 835.5,-2905 835.5,-2941"/>
<text text-anchor="middle" x="791.5" y="-2919.3" font-family="Helvetica,sans-Serif" font-size="14.00">dual_pivot</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/dual_pivot(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/dual_pivot().</title>
<path fill="none" stroke="gray" d="M604.12,-2923C644.94,-2923 697.96,-2923 737.01,-2923"/>
<polygon fill="gray" stroke="gray" points="737.13,-2926.5 747.13,-2923 737.13,-2919.5 737.13,-2926.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn test_heap() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="335.5,-538 251.5,-538 251.5,-502 335.5,-502 335.5,-538"/>
<text text-anchor="middle" x="293.5" y="-516.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<path fill="none" stroke="gray" d="M335.67,-515.48C377.77,-510.86 443.25,-503.67 488.8,-498.67"/>
<polygon fill="gray" stroke="gray" points="489.22,-502.15 498.78,-497.58 488.46,-495.19 489.22,-502.15"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_empty(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_empty().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;fn test_heap_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="361,-484 226,-484 226,-448 361,-448 361,-484"/>
<text text-anchor="middle" x="293.5" y="-462.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<path fill="none" stroke="gray" d="M361.07,-473.31C401.26,-477.72 451.71,-483.26 488.87,-487.33"/>
<polygon fill="gray" stroke="gray" points="488.66,-490.83 498.98,-488.44 489.43,-483.87 488.66,-490.83"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;fn test_slow() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;slow_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="333.5,-2536 253.5,-2536 253.5,-2500 333.5,-2500 333.5,-2536"/>
<text text-anchor="middle" x="293.5" y="-2514.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().</title>
<path fill="none" stroke="gray" d="M333.75,-2518C376.38,-2518 444.56,-2518 490.87,-2518"/>
<polygon fill="gray" stroke="gray" points="490.98,-2521.5 500.98,-2518 490.98,-2514.5 490.98,-2521.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_batcher() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="378.5,-1024 208.5,-1024 208.5,-988 378.5,-988 378.5,-1024"/>
<text text-anchor="middle" x="293.5" y="-1002.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_batcher</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().</title>
<path fill="none" stroke="gray" d="M378.82,-1006C400.53,-1006 424.03,-1006 446.21,-1006"/>
<polygon fill="gray" stroke="gray" points="446.3,-1009.5 456.3,-1006 446.3,-1002.5 446.3,-1009.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_empty(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_empty().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn test_slow_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stooge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="359,-1186 228,-1186 228,-1150 359,-1150 359,-1186"/>
<text text-anchor="middle" x="293.5" y="-1164.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().</title>
<path fill="none" stroke="gray" d="M359.13,-1168C397.39,-1168 445.45,-1168 482.49,-1168"/>
<polygon fill="gray" stroke="gray" points="482.62,-1171.5 492.62,-1168 482.62,-1164.5 482.62,-1171.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort_sorting(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort_sorting().</title>
<path fill="none" stroke="gray" d="M590.02,-1168C622.56,-1168 666.62,-1168 705.15,-1168"/>
<polygon fill="gray" stroke="gray" points="705.33,-1171.5 715.33,-1168 705.33,-1164.5 705.33,-1171.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges().</title>
<g id="a_node134"><a xlink:title="end:usize) &#160;fn oddeven_batcher_sort_ranges&lt;T: PartialOrd&gt;(input: &amp;mut [T], start:usize, { &#160;&#160;&#160;&#160;if end &gt;= start { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mid = start + (end &#45; start) / 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort_ranges(input, ...">
<polygon fill="lightblue" stroke="black" points="904,-1024 679,-1024 679,-988 904,-988 904,-1024"/>
<text text-anchor="middle" x="791.5" y="-1002.3" font-family="Helvetica,sans-Serif" font-size="14.00">oddeven_batcher_sort_ranges</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges().</title>
<path fill="none" stroke="gray" d="M626.81,-1006C640.25,-1006 654.4,-1006 668.5,-1006"/>
<polygon fill="gray" stroke="gray" points="668.76,-1009.5 678.76,-1006 668.76,-1002.5 668.76,-1009.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_empty(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_empty().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;fn test_heap_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="361,-808 226,-808 226,-772 361,-772 361,-808"/>
<text text-anchor="middle" x="293.5" y="-786.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M361.07,-804.61C399.57,-813.06 447.49,-823.58 484.12,-831.62"/>
<polygon fill="gray" stroke="gray" points="483.61,-835.1 494.13,-833.82 485.11,-828.26 483.61,-835.1"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;fn test_ksort() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = [10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ksort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, [10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="336,-160 251,-160 251,-124 336,-124 336,-160"/>
<text text-anchor="middle" x="293.5" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_ksort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M336.23,-142C383.44,-142 459.56,-142 504.34,-142"/>
<polygon fill="gray" stroke="gray" points="504.47,-145.5 514.47,-142 504.47,-138.5 504.47,-145.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_empty(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_empty().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;fn test_weak_heap_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;weak_heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="382.5,-3562 204.5,-3562 204.5,-3526 382.5,-3526 382.5,-3562"/>
<text text-anchor="middle" x="293.5" y="-3540.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_weak_heap_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M378.71,-3562.08C387.37,-3564.73 395.94,-3567.7 404,-3571 440.89,-3586.1 479.67,-3610 506.43,-3627.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-3631.04 515.02,-3633.76 508.71,-3625.25 504.78,-3631.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees().</title>
<path fill="none" stroke="gray" d="M592.7,-1550.1C618.48,-1552.01 650.4,-1554.06 679,-1555 778.95,-1558.29 804.06,-1558.48 904,-1555 923.4,-1554.32 944.41,-1553.08 963.73,-1551.72"/>
<polygon fill="gray" stroke="gray" points="964.24,-1555.2 973.96,-1550.99 963.74,-1548.21 964.24,-1555.2"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap().</title>
<g id="a_node130"><a xlink:title="fn restore_heap&lt;T: PartialOrd&gt;(input: &amp;mut [T], index: usize, heap: &amp;Vec&lt;usize&gt;) { &#160;&#160;&#160;&#160;// Insertion sorting &#160;&#160;&#160;&#160;let mut current = heap.len() &#45; 1; &#160;&#160;&#160;&#160;let mut i = index; &#160;&#160;&#160;&#160;let mut k = heap[current]; ...">
<polygon fill="lightblue" stroke="black" points="844.5,-1546 738.5,-1546 738.5,-1510 844.5,-1510 844.5,-1546"/>
<text text-anchor="middle" x="791.5" y="-1524.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore_heap</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap().</title>
<path fill="none" stroke="gray" d="M592.69,-1542.36C631.78,-1539.52 686.27,-1535.57 728.16,-1532.52"/>
<polygon fill="gray" stroke="gray" points="728.53,-1536.01 738.25,-1531.79 728.02,-1529.03 728.53,-1536.01"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_buble_len(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_buble_len().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;fn test_buble_len() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bubble_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="351.5,-3454 235.5,-3454 235.5,-3418 351.5,-3418 351.5,-3454"/>
<text text-anchor="middle" x="293.5" y="-3432.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_buble_len</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_buble_len().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_buble_len().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<path fill="none" stroke="gray" d="M351.56,-3442.26C390.86,-3446.58 442.91,-3452.29 482.43,-3456.63"/>
<polygon fill="gray" stroke="gray" points="482.13,-3460.11 492.45,-3457.73 482.89,-3453.16 482.13,-3460.11"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort().</title>
<path fill="none" stroke="gray" d="M825.69,-2140C867.14,-2140 938.33,-2140 985.54,-2140"/>
<polygon fill="gray" stroke="gray" points="985.81,-2143.5 995.81,-2140 985.81,-2136.5 985.81,-2143.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_len1(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_len1().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="360,-2212 227,-2212 227,-2176 360,-2176 360,-2212"/>
<text text-anchor="middle" x="293.5" y="-2190.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M360.1,-2179.6C398.35,-2171.2 446.15,-2160.71 482.93,-2152.64"/>
<polygon fill="gray" stroke="gray" points="483.98,-2155.99 492.99,-2150.43 482.48,-2149.15 483.98,-2155.99"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_empty(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_empty().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="368,-1726 219,-1726 219,-1690 368,-1690 368,-1726"/>
<text text-anchor="middle" x="293.5" y="-1704.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<path fill="none" stroke="gray" d="M368.31,-1716.1C404.73,-1720.1 448.05,-1724.85 482.12,-1728.59"/>
<polygon fill="gray" stroke="gray" points="482.06,-1732.11 492.38,-1729.72 482.83,-1725.15 482.06,-1732.11"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sift(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sift().</title>
<path fill="none" stroke="gray" d="M588.57,-844C630.58,-844 692.68,-844 736.9,-844"/>
<polygon fill="gray" stroke="gray" points="737.17,-847.5 747.17,-844 737.17,-840.5 737.17,-847.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees().</title>
<path fill="none" stroke="gray" d="M844.68,-1531.91C879.41,-1534.5 925.43,-1537.95 963.28,-1540.78"/>
<polygon fill="gray" stroke="gray" points="963.49,-1544.31 973.73,-1541.56 964.02,-1537.33 963.49,-1544.31"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;fn test_smooth() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![20, 10, 11, 13]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smooth_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[10, 11, 13, 20]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="344,-1510 243,-1510 243,-1474 344,-1474 344,-1510"/>
<text text-anchor="middle" x="293.5" y="-1488.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_smooth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M344.28,-1502.93C383.66,-1511.57 438.79,-1523.67 480.59,-1532.85"/>
<polygon fill="gray" stroke="gray" points="479.85,-1536.27 490.37,-1535 481.35,-1529.43 479.85,-1536.27"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_empty(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_empty().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;fn test_ksort_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ksort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="361.5,-106 225.5,-106 225.5,-70 361.5,-70 361.5,-106"/>
<text text-anchor="middle" x="293.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_ksort_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M361.72,-102.76C407.75,-112.86 467.01,-125.87 504.39,-134.07"/>
<polygon fill="gray" stroke="gray" points="503.8,-137.53 514.32,-136.25 505.3,-130.69 503.8,-137.53"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_len1(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_len1().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;fn test_quick_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="355.5,-376 231.5,-376 231.5,-340 355.5,-340 355.5,-376"/>
<text text-anchor="middle" x="293.5" y="-354.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<path fill="none" stroke="gray" d="M355.63,-351.29C396.12,-346.85 448.71,-341.07 487.44,-336.82"/>
<polygon fill="gray" stroke="gray" points="487.92,-340.29 497.48,-335.72 487.15,-333.33 487.92,-340.29"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_merge(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_merge().</title>
<path fill="none" stroke="gray" d="M904.3,-1006C912.76,-1006 921.28,-1006 929.68,-1006"/>
<polygon fill="gray" stroke="gray" points="929.86,-1009.5 939.86,-1006 929.86,-1002.5 929.86,-1009.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;fn test_cycle() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![11, 20, 21, 40, 11, 60, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![5, 11, 11, 20, 21, 40, 60]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="336,-3994 251,-3994 251,-3958 336,-3958 336,-3994"/>
<text text-anchor="middle" x="293.5" y="-3972.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cycle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<path fill="none" stroke="gray" d="M336.23,-3980.58C378.07,-3985.17 442.62,-3992.26 487.93,-3997.23"/>
<polygon fill="gray" stroke="gray" points="487.83,-4000.74 498.15,-3998.35 488.59,-3993.78 487.83,-4000.74"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift().</title>
<path fill="none" stroke="gray" d="M624.74,-1357C664.94,-1357 711.78,-1357 745.39,-1357"/>
<polygon fill="gray" stroke="gray" points="745.81,-1360.5 755.81,-1357 745.81,-1353.5 745.81,-1360.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_len1(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_len1().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;fn test_merge_bu_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="371,-3292 216,-3292 216,-3256 371,-3256 371,-3292"/>
<text text-anchor="middle" x="293.5" y="-3270.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_bu_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M371.32,-3282.43C394.02,-3284.92 419.17,-3287.68 442.99,-3290.3"/>
<polygon fill="gray" stroke="gray" points="442.78,-3293.8 453.1,-3291.41 443.55,-3286.84 442.78,-3293.8"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_empty(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_empty().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;fn test_comb_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comb_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="363,-3832 224,-3832 224,-3796 363,-3796 363,-3832"/>
<text text-anchor="middle" x="293.5" y="-3810.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_comb_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<path fill="none" stroke="gray" d="M363.02,-3821.52C401.97,-3825.8 450.05,-3831.07 486.34,-3835.06"/>
<polygon fill="gray" stroke="gray" points="486.4,-3838.58 496.72,-3836.2 487.16,-3831.62 486.4,-3838.58"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_empty(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_empty().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;fn test_smooth_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smooth_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="369.5,-1456 217.5,-1456 217.5,-1420 369.5,-1420 369.5,-1456"/>
<text text-anchor="middle" x="293.5" y="-1434.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_smooth_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M369.66,-1453.42C381.34,-1456.7 393.13,-1460.55 404,-1465 440.89,-1480.1 479.67,-1504 506.43,-1521.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-1525.04 515.02,-1527.76 508.71,-1519.25 504.78,-1525.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion().</title>
<g id="a_node142"><a xlink:title=" &#160;&#160;&#160;fn test_insertion() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;insertion_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="348.5,-1888 238.5,-1888 238.5,-1852 348.5,-1852 348.5,-1888"/>
<text text-anchor="middle" x="293.5" y="-1866.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_insertion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<path fill="none" stroke="gray" d="M348.79,-1875.96C386.28,-1880.07 436.3,-1885.56 475.85,-1889.9"/>
<polygon fill="gray" stroke="gray" points="475.6,-1893.4 485.92,-1891.01 476.37,-1886.44 475.6,-1893.4"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_len1(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_len1().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;fn test_heap_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354,-754 233,-754 233,-718 354,-718 354,-754"/>
<text text-anchor="middle" x="293.5" y="-732.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M354.05,-747.32C370.54,-751.36 388.24,-756.54 404,-763 440.89,-778.1 479.67,-802 506.43,-819.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-823.04 515.02,-825.76 508.71,-817.25 504.78,-823.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;fn test_quick() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="337,-322 250,-322 250,-286 337,-286 337,-322"/>
<text text-anchor="middle" x="293.5" y="-300.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<path fill="none" stroke="gray" d="M337.07,-308.67C378.66,-313.24 442.1,-320.2 487.06,-325.13"/>
<polygon fill="gray" stroke="gray" points="486.89,-328.64 497.21,-326.25 487.65,-321.68 486.89,-328.64"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_01(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_01().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;fn test_ksort_01() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = [10, 9, 20, 22, 11, 21, 12, 24, 4, 6, 3]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ksort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, [3, 4, 6, 9, 10, 11, 12, 20, 21, 22, ...">
<polygon fill="lightblue" stroke="black" points="348.5,-52 238.5,-52 238.5,-16 348.5,-16 348.5,-52"/>
<text text-anchor="middle" x="293.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_ksort_01</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M348.69,-44.04C366.65,-48.24 386.51,-53.84 404,-61 440.89,-76.1 479.67,-100 506.43,-117.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-121.04 515.02,-123.76 508.71,-115.25 504.78,-121.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci().</title>
<g id="a_node146"><a xlink:title="fn calculate_fibonacci(num: usize) &#160;{ &#160;&#160;&#160;&#160;println!(&#39; Fibonacci numbers:&#39; ); &#160;&#160;&#160;&#160;for i in leonardo_generate(0, 1, 0).take(num) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print!(&#39; {}, &#39; , i); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;println!(); }">
<polygon fill="lightblue" stroke="black" points="367,-5132 220,-5132 220,-5096 367,-5096 367,-5132"/>
<text text-anchor="middle" x="293.5" y="-5110.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_fibonacci</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate().</title>
<g id="a_node147"><a xlink:title="impl std::iter::Iterator&lt;Item = usize&gt; &#160;fn leonardo_generate(mut n0: usize, mut n1: usize, add: usize) &#45;&gt; { &#160;&#160;&#160;&#160;std::iter::from_fn(move || { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let n = n0; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n0 = n1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n1 += n + add;...">
<polygon fill="lightblue" stroke="black" points="614.5,-5159 468.5,-5159 468.5,-5123 614.5,-5123 614.5,-5159"/>
<text text-anchor="middle" x="541.5" y="-5137.3" font-family="Helvetica,sans-Serif" font-size="14.00">leonardo_generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate().</title>
<path fill="none" stroke="gray" d="M367.31,-5121.99C395.83,-5125.12 428.68,-5128.73 458.07,-5131.95"/>
<polygon fill="gray" stroke="gray" points="457.98,-5135.46 468.3,-5133.08 458.74,-5128.51 457.98,-5135.46"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo().</title>
<g id="a_node148"><a xlink:title="fn calculate_leonardo(num: usize) &#160;{ &#160;&#160;&#160;&#160;println!(&#39; Leonardo numbers:&#39; ); &#160;&#160;&#160;&#160;for i in leonardo_generate(1, 1, 1).take(num) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print!(&#39; {}, &#39; , i); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;println!(); }">
<polygon fill="lightblue" stroke="black" points="366,-5186 221,-5186 221,-5150 366,-5150 366,-5186"/>
<text text-anchor="middle" x="293.5" y="-5164.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_leonardo</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate().</title>
<path fill="none" stroke="gray" d="M366.31,-5160.12C395.11,-5156.96 428.46,-5153.3 458.23,-5150.03"/>
<polygon fill="gray" stroke="gray" points="458.61,-5153.51 468.17,-5148.94 457.85,-5146.55 458.61,-5153.51"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_powers_of_two(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_powers_of_two().</title>
<g id="a_node149"><a xlink:title="fn calculate_powers_of_two(input: usize) &#160;{ &#160;&#160;&#160;&#160;let mut powers = Vec::&lt;usize&gt;::with_capacity(input); &#160;&#160;&#160;&#160;for i in 1..input + 1 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;powers.push(2usize.pow(i as u32)); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;println!(&#39; {:?}&#39; ,...">
<polygon fill="lightblue" stroke="black" points="387,-5078 200,-5078 200,-5042 387,-5042 387,-5078"/>
<text text-anchor="middle" x="293.5" y="-5056.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_powers_of_two</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 main(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 main().</title>
<g id="a_node150"><a xlink:title="fn main() &#160;{ &#160;&#160;&#160;&#160;let mut input = String::new(); &#160;&#160;&#160;&#160;io::stdin().read_line(&amp;mut input).expect(&#39; Failed to read value&#39; ); &#160;&#160;&#160;&#160;input = input.to_string().trim().to_string(); &#160;&#160;&#160;&#160;println!(&#39; Maximum number:...">
<polygon fill="lightblue" stroke="black" points="108.5,-5132 54.5,-5132 54.5,-5096 108.5,-5096 108.5,-5132"/>
<text text-anchor="middle" x="81.5" y="-5110.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci().</title>
<path fill="none" stroke="gray" d="M108.67,-5114C134,-5114 173.74,-5114 209.81,-5114"/>
<polygon fill="gray" stroke="gray" points="209.87,-5117.5 219.87,-5114 209.87,-5110.5 209.87,-5117.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo().</title>
<path fill="none" stroke="gray" d="M108.7,-5122.09C127.16,-5127.68 152.5,-5135.14 175,-5141 186.55,-5144.01 198.79,-5147.02 210.83,-5149.88"/>
<polygon fill="gray" stroke="gray" points="210.35,-5153.36 220.88,-5152.24 211.95,-5146.55 210.35,-5153.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_powers_of_two(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_powers_of_two().</title>
<path fill="none" stroke="gray" d="M108.7,-5105.91C127.16,-5100.32 152.5,-5092.86 175,-5087 183.46,-5084.79 192.29,-5082.59 201.14,-5080.45"/>
<polygon fill="gray" stroke="gray" points="202.22,-5083.79 211.13,-5078.05 200.59,-5076.98 202.22,-5083.79"/>
</g>
</g>
</svg>
