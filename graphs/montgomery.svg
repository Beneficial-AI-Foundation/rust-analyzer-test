<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="1049pt" height="1196pt"
 viewBox="0.00 0.00 1049.00 1196.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1192)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1192 1045,-1192 1045,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="8,-889 8,-1180 557,-1180 557,-889 8,-889"/>
<text text-anchor="middle" x="282.5" y="-1164.8" font-family="Helvetica,sans-Serif" font-size="14.00">dalek_benchmarks.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="363.5,-507 363.5,-582 560.5,-582 560.5,-507 363.5,-507"/>
<text text-anchor="middle" x="462" y="-566.8" font-family="Helvetica,sans-Serif" font-size="14.00">pippenger.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" points="312,-590 312,-881 1033,-881 1033,-590 312,-590"/>
<text text-anchor="middle" x="672.5" y="-865.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" points="417,-424 417,-499 507,-499 507,-424 417,-424"/>
<text text-anchor="middle" x="462" y="-483.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" points="70,-311 70,-386 230,-386 230,-311 70,-311"/>
<text text-anchor="middle" x="150" y="-370.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" points="410,-174 410,-249 514,-249 514,-174 410,-174"/>
<text text-anchor="middle" x="462" y="-233.8" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" points="374,-257 374,-386 550,-386 550,-257 374,-257"/>
<text text-anchor="middle" x="462" y="-370.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightgrey" stroke="lightgrey" points="367,-91 367,-166 557,-166 557,-91 367,-91"/>
<text text-anchor="middle" x="462" y="-150.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightgrey" stroke="lightgrey" points="394,-8 394,-83 531,-83 531,-8 394,-8"/>
<text text-anchor="middle" x="462.5" y="-67.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="white" stroke="black" points="273,-987 27,-987 27,-951 273,-951 273,-987"/>
<text text-anchor="middle" x="150" y="-965.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="720,-634 663,-634 663,-598 720,-598 720,-634"/>
<text text-anchor="middle" x="691.5" y="-612.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M273.18,-965.09C390.58,-958.77 556.92,-942.22 604,-899 653.87,-853.22 620.11,-815.71 640,-751 651.61,-713.25 668.1,-670.73 679.04,-643.67"/>
<polygon fill="gray" stroke="gray" points="682.41,-644.69 682.94,-634.1 675.92,-642.04 682.41,-644.69"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="white" stroke="black" points="273,-933 27,-933 27,-897 273,-897 273,-933"/>
<text text-anchor="middle" x="150" y="-911.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M273.09,-914.24C389.74,-911.03 554.87,-899.22 604,-859 643.15,-826.95 623.13,-798.7 640,-751 653.17,-713.76 669.29,-671.12 679.73,-643.9"/>
<polygon fill="gray" stroke="gray" points="683.11,-644.86 683.43,-634.27 676.57,-642.35 683.11,-644.86"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;fn consttime_variable_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = &amp;constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="284,-1095 16,-1095 16,-1059 284,-1059 284,-1095"/>
<text text-anchor="middle" x="150" y="-1073.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_variable_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M248.99,-1058.98C380.32,-1034.61 597.82,-993.46 604,-987 640.66,-948.66 626.64,-802.34 640,-751 649.89,-712.99 666.64,-670.85 678.11,-643.92"/>
<polygon fill="gray" stroke="gray" points="681.48,-644.96 682.23,-634.39 675.05,-642.18 681.48,-644.96"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;fn scalar_arith&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Scalar inversion&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64...">
<polygon fill="white" stroke="black" points="510.5,-1093 413.5,-1093 413.5,-1057 510.5,-1057 510.5,-1093"/>
<text text-anchor="middle" x="462" y="-1071.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_arith</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M510.81,-1076.86C541.93,-1075.33 580.9,-1067.71 604,-1042 647.55,-993.53 624.48,-814.28 640,-751 649.4,-712.69 666.37,-670.37 678.03,-643.51"/>
<polygon fill="gray" stroke="gray" points="681.23,-644.91 682.06,-634.34 674.83,-642.09 681.23,-644.91"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn batch_scalar_inversion&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for batch_size in &amp;BATCH_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new(&#39; Batch scalar inve...">
<polygon fill="white" stroke="black" points="549,-1148 375,-1148 375,-1112 549,-1112 549,-1148"/>
<text text-anchor="middle" x="462" y="-1126.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_scalar_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub fn batch_invert(inputs: &amp;mut [Scalar]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This code is essentially identical to the FieldElement &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// implementation, and is documented there. &#160;Unfortunately, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="743,-796 640,-796 640,-760 743,-760 743,-796"/>
<text text-anchor="middle" x="691.5" y="-774.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M549.17,-1128.17C569.23,-1123.9 589.07,-1115.99 604,-1102 647.64,-1061.1 676.95,-877.17 686.82,-806.12"/>
<polygon fill="gray" stroke="gray" points="690.3,-806.49 688.18,-796.11 683.37,-805.54 690.3,-806.49"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn montgomery_ladder&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Montgomery pseudomultiplication&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = constants::X25519_BASEPOINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="228.5,-1041 71.5,-1041 71.5,-1005 228.5,-1005 228.5,-1041"/>
<text text-anchor="middle" x="150" y="-1019.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_ladder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M228.66,-1014.31C351.04,-999.89 577.63,-970.06 604,-944 666.06,-882.66 616.63,-835.07 640,-751 650.58,-712.95 667.31,-670.5 678.59,-643.54"/>
<polygon fill="gray" stroke="gray" points="681.95,-644.58 682.62,-634.01 675.5,-641.86 681.95,-644.58"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn scalar_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; scalar benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_arith(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;batch_scalar_inversion(...">
<polygon fill="white" stroke="black" points="211.5,-1149 88.5,-1149 88.5,-1113 211.5,-1113 211.5,-1149"/>
<text text-anchor="middle" x="150" y="-1127.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<path fill="none" stroke="gray" d="M211.51,-1120.07C267.08,-1110.03 348.85,-1095.26 403.46,-1085.39"/>
<polygon fill="gray" stroke="gray" points="404.11,-1088.83 413.33,-1083.61 402.86,-1081.95 404.11,-1088.83"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<path fill="none" stroke="gray" d="M211.51,-1130.8C255.03,-1130.66 314.62,-1130.47 364.65,-1130.31"/>
<polygon fill="gray" stroke="gray" points="364.85,-1133.81 374.84,-1130.28 364.83,-1126.81 364.85,-1133.81"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn test_vartime_pippenger() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Reuse points across different tests &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut n = 512; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = Scalar::from(2128506u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = Scalar::from(4443282u64).in...">
<polygon fill="white" stroke="black" points="552.5,-551 371.5,-551 371.5,-515 552.5,-515 552.5,-551"/>
<text text-anchor="middle" x="462" y="-529.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_vartime_pippenger</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M512.36,-551.01C554.71,-566.46 614.81,-588.39 653.23,-602.4"/>
<polygon fill="gray" stroke="gray" points="652.38,-605.82 662.98,-605.96 654.78,-599.24 652.38,-605.82"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Uses the addition chain from &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://briansmith.org/ecc&#45;inversion&#45;addition&#45;chains&#45;01#curve25519_scalar_inversion &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightblue" stroke="black" points="1025,-683 872,-683 872,-647 1025,-647 1025,-683"/>
<text text-anchor="middle" x="948.5" y="-661.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" d="M733.19,-759.97C777.74,-740.23 849.24,-708.54 897.26,-687.26"/>
<polygon fill="gray" stroke="gray" points="898.81,-690.4 906.54,-683.15 895.97,-684 898.81,-690.4"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_with_a_zero_input_panics() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut xs = vec![Scalar::ONE; 16]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xs[3] = Scalar::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should panic in debug mode. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::batch_invert(&amp;mut...">
<polygon fill="white" stroke="black" points="604,-850 320,-850 320,-814 604,-814 604,-850"/>
<text text-anchor="middle" x="462" y="-828.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_with_a_zero_input_panics</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M564.58,-813.98C577.89,-811.2 591.31,-808.19 604,-805 612.43,-802.89 621.24,-800.43 629.89,-797.87"/>
<polygon fill="gray" stroke="gray" points="630.98,-801.2 639.54,-794.96 628.96,-794.5 630.98,-801.2"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn test_pippenger_radix() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use core::iter; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// For each valid radix it tests that 1000 random&#45;ish scalars can be restored &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// from the produced representation precisely. &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="543.5,-688 380.5,-688 380.5,-652 543.5,-652 543.5,-688"/>
<text text-anchor="middle" x="462" y="-666.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pippenger_radix</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M543.5,-656.22C563.38,-652.37 584.54,-647.88 604,-643 620.27,-638.92 638,-633.55 653.14,-628.68"/>
<polygon fill="gray" stroke="gray" points="654.26,-631.99 662.68,-625.57 652.09,-625.34 654.26,-631.99"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_montgomery().montgomery_invert().from_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="836,-634 779,-634 779,-598 836,-598 836,-634"/>
<text text-anchor="middle" x="807.5" y="-612.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<path fill="none" stroke="gray" d="M720.1,-616C734.69,-616 752.83,-616 768.71,-616"/>
<polygon fill="gray" stroke="gray" points="768.76,-619.5 778.76,-616 768.76,-612.5 768.76,-619.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" d="M836.29,-625.8C850.8,-630.91 869.15,-637.38 886.75,-643.58"/>
<polygon fill="gray" stroke="gray" points="885.82,-646.97 896.41,-646.99 888.14,-640.36 885.82,-646.97"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn invert() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let inv_X = X.invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(inv_X, XINV); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let should_be_one = inv_X * X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(should_be_one, Scalar::ONE); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="490.5,-634 433.5,-634 433.5,-598 490.5,-598 490.5,-634"/>
<text text-anchor="middle" x="462" y="-612.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M490.9,-616C531.51,-616 607.05,-616 652.65,-616"/>
<polygon fill="gray" stroke="gray" points="652.73,-619.5 662.73,-616 652.73,-612.5 652.73,-619.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Scalar::ONE, Scalar::batch_invert(&amp;mut [])); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="539,-796 385,-796 385,-760 539,-760 539,-796"/>
<text text-anchor="middle" x="462" y="-774.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M539.07,-778C568.64,-778 602.03,-778 629.92,-778"/>
<polygon fill="gray" stroke="gray" points="629.93,-781.5 639.93,-778 629.93,-774.5 629.93,-781.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_consistency() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut x = Scalar::from(1u64); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut v1: Vec&lt;_&gt; = (0..16) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let tmp = x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x + x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="557.5,-742 366.5,-742 366.5,-706 557.5,-706 557.5,-742"/>
<text text-anchor="middle" x="462" y="-720.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_consistency</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M557.75,-740.61C573.27,-743.77 589.13,-747.27 604,-751 612.43,-753.11 621.24,-755.57 629.89,-758.13"/>
<polygon fill="gray" stroke="gray" points="628.96,-761.5 639.54,-761.04 630.98,-754.8 628.96,-761.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M557.61,-713.52C573.62,-709.63 589.67,-704.29 604,-697 629.92,-683.81 653.58,-660.49 669.59,-642.25"/>
<polygon fill="gray" stroke="gray" points="672.56,-644.16 676.38,-634.28 667.23,-639.62 672.56,-644.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="499,-468 425,-468 425,-432 499,-432 499,-468"/>
<text text-anchor="middle" x="462" y="-446.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M499,-457.63C529.22,-465.35 572.4,-479.54 604,-503 635.27,-526.21 660.83,-563.69 675.85,-589.05"/>
<polygon fill="gray" stroke="gray" points="672.87,-590.89 680.9,-597.8 678.94,-587.39 672.87,-590.89"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node19"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="222,-355 78,-355 78,-319 222,-319 222,-355"/>
<text text-anchor="middle" x="150" y="-333.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M196.77,-355C228.6,-366.79 272.28,-381.53 312,-390 375.79,-403.61 551.25,-381.63 604,-420 659.44,-460.32 679.89,-544.17 686.99,-587.98"/>
<polygon fill="gray" stroke="gray" points="683.54,-588.58 688.49,-597.95 690.47,-587.54 683.54,-588.58"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;pub fn from_blinding_scalar(scalar: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_inv: scalar.invert(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="542,-355 382,-355 382,-319 542,-319 542,-355"/>
<text text-anchor="middle" x="462" y="-333.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_blinding_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M222.12,-337C266.5,-337 324.01,-337 371.48,-337"/>
<polygon fill="gray" stroke="gray" points="371.76,-340.5 381.76,-337 371.76,-333.5 371.76,-340.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="507.5,-301 416.5,-301 416.5,-265 507.5,-265 507.5,-301"/>
<text text-anchor="middle" x="462" y="-279.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M222.12,-324.61C278.09,-314.86 354.95,-301.47 406.21,-292.54"/>
<polygon fill="gray" stroke="gray" points="406.86,-295.98 416.11,-290.82 405.65,-289.09 406.86,-295.98"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;pub fn inverse_of&lt;D2: Domain&gt;(other: &amp;KeyPair&lt;D2&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_ne!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D2::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; You must provide a new domain for an inverse key&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="506,-218 418,-218 418,-182 506,-182 506,-218"/>
<text text-anchor="middle" x="462" y="-196.3" font-family="Helvetica,sans-Serif" font-size="14.00">inverse_of</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M506.05,-205.34C537.6,-211.51 579.1,-224.75 604,-253 648.51,-303.49 677.75,-511.15 687.19,-587.59"/>
<polygon fill="gray" stroke="gray" points="683.76,-588.38 688.44,-597.88 690.71,-587.53 683.76,-588.38"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M542.18,-353.76C564.43,-361.68 587.12,-373.22 604,-390 659.7,-445.37 680.18,-540.38 687.17,-587.62"/>
<polygon fill="gray" stroke="gray" points="683.74,-588.32 688.57,-597.75 690.67,-587.36 683.74,-588.32"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M507.78,-280.08C538.53,-280.55 578.29,-286.41 604,-310 645.42,-347.99 675.67,-519.12 686.32,-587.57"/>
<polygon fill="gray" stroke="gray" points="682.89,-588.28 687.86,-597.64 689.81,-587.22 682.89,-588.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="497,-135 427,-135 427,-99 497,-99 497,-135"/>
<text text-anchor="middle" x="462" y="-113.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M497.14,-120.43C529.58,-125.56 577.25,-138.33 604,-170 658.17,-234.13 682.06,-499.99 688.57,-587.75"/>
<polygon fill="gray" stroke="gray" points="685.09,-588.05 689.3,-597.77 692.07,-587.55 685.09,-588.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="497,-52 427,-52 427,-16 497,-16 497,-52"/>
<text text-anchor="middle" x="462" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M497.04,-37.21C529.63,-42.19 577.64,-54.84 604,-87 667.9,-164.95 685.6,-489.78 689.53,-587.84"/>
<polygon fill="gray" stroke="gray" points="686.03,-588.03 689.91,-597.89 693.03,-587.76 686.03,-588.03"/>
</g>
</g>
</svg>
