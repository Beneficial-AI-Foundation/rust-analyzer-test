digraph dependencies {
  node [shape=box];
  "aead" -> "crypto_common";
  "aead" -> "generic_array";
  "aead" -> "crypto_common";
  "aead" -> "crypto_common";
  "aead" -> "generic_array";
  "aead" -> "generic_array";
  "aes" -> "cfg_if";
  "aes" -> "cipher";
  "aes" -> "cpufeatures";
  "aes" -> "zeroize";
  "aes" -> "cfg_if";
  "aes" -> "cfg_if";
  "aes" -> "cipher";
  "aes" -> "cipher";
  "aes" -> "cpufeatures";
  "aes" -> "cpufeatures";
  "aes" -> "zeroize";
  "aes" -> "zeroize";
  "aes_gcm_siv" -> "aead";
  "aes_gcm_siv" -> "aes";
  "aes_gcm_siv" -> "cipher";
  "aes_gcm_siv" -> "ctr";
  "aes_gcm_siv" -> "polyval";
  "aes_gcm_siv" -> "subtle";
  "aes_gcm_siv" -> "zeroize";
  "aes_gcm_siv" -> "aead";
  "aes_gcm_siv" -> "aead";
  "aes_gcm_siv" -> "aes";
  "aes_gcm_siv" -> "aes";
  "aes_gcm_siv" -> "cipher";
  "aes_gcm_siv" -> "cipher";
  "aes_gcm_siv" -> "ctr";
  "aes_gcm_siv" -> "ctr";
  "aes_gcm_siv" -> "polyval";
  "aes_gcm_siv" -> "polyval";
  "aes_gcm_siv" -> "subtle";
  "aes_gcm_siv" -> "subtle";
  "aes_gcm_siv" -> "zeroize";
  "aes_gcm_siv" -> "zeroize";
  "anyhow" -> "build_script_build";
  "anyhow" -> "build_script_build";
  "anyhow" -> "build_script_build";
  "build-script-build" -> "build_script_build";
  "async_trait" -> "proc_macro2";
  "async_trait" -> "quote";
  "async_trait" -> "syn";
  "async_trait" -> "proc_macro2";
  "async_trait" -> "proc_macro2";
  "async_trait" -> "quote";
  "async_trait" -> "quote";
  "async_trait" -> "syn";
  "async_trait" -> "syn";
  "block_buffer" -> "generic_array";
  "block_buffer" -> "generic_array";
  "block_buffer" -> "generic_array";
  "block_padding" -> "generic_array";
  "block_padding" -> "generic_array";
  "block_padding" -> "generic_array";
  "cbc" -> "cipher";
  "cbc" -> "cipher";
  "cbc" -> "cipher";
  "cc" -> "jobserver";
  "cc" -> "libc";
  "cc" -> "shlex";
  "cipher" -> "crypto_common";
  "cipher" -> "inout";
  "cipher" -> "zeroize";
  "cipher" -> "crypto_common";
  "cipher" -> "crypto_common";
  "cipher" -> "inout";
  "cipher" -> "inout";
  "cipher" -> "zeroize";
  "cipher" -> "zeroize";
  "crossbeam_deque" -> "crossbeam_epoch";
  "crossbeam_deque" -> "crossbeam_utils";
  "crossbeam_deque" -> "crossbeam_epoch";
  "crossbeam_deque" -> "crossbeam_epoch";
  "crossbeam_deque" -> "crossbeam_utils";
  "crossbeam_deque" -> "crossbeam_utils";
  "crossbeam_epoch" -> "crossbeam_utils";
  "crossbeam_epoch" -> "crossbeam_utils";
  "crossbeam_epoch" -> "crossbeam_utils";
  "crossbeam_utils" -> "build_script_build";
  "crossbeam_utils" -> "build_script_build";
  "build-script-build" -> "build_script_build";
  "crypto_common" -> "generic_array";
  "crypto_common" -> "rand_core";
  "crypto_common" -> "typenum";
  "crypto_common" -> "generic_array";
  "crypto_common" -> "generic_array";
  "crypto_common" -> "rand_core";
  "crypto_common" -> "rand_core";
  "crypto_common" -> "typenum";
  "crypto_common" -> "typenum";
  "ctr" -> "cipher";
  "ctr" -> "cipher";
  "ctr" -> "cipher";
  "curve25519_dalek" -> "cfg_if";
  "curve25519_dalek" -> "cpufeatures";
  "curve25519_dalek" -> "build_script_build";
  "curve25519_dalek" -> "curve25519_dalek_derive";
  "curve25519_dalek" -> "digest";
  "curve25519_dalek" -> "subtle";
  "curve25519_dalek" -> "zeroize";
  "curve25519_dalek" -> "cfg_if";
  "curve25519_dalek" -> "cfg_if";
  "curve25519_dalek" -> "cpufeatures";
  "curve25519_dalek" -> "cpufeatures";
  "curve25519_dalek" -> "build_script_build";
  "curve25519_dalek" -> "curve25519_dalek_derive";
  "curve25519_dalek" -> "curve25519_dalek_derive";
  "curve25519_dalek" -> "digest";
  "curve25519_dalek" -> "digest";
  "curve25519_dalek" -> "subtle";
  "curve25519_dalek" -> "subtle";
  "curve25519_dalek" -> "zeroize";
  "curve25519_dalek" -> "zeroize";
  "build-script-build" -> "rustc_version";
  "build-script-build" -> "build_script_build";
  "curve25519_dalek_derive" -> "proc_macro2";
  "curve25519_dalek_derive" -> "quote";
  "curve25519_dalek_derive" -> "syn";
  "curve25519_dalek_derive" -> "proc_macro2";
  "curve25519_dalek_derive" -> "proc_macro2";
  "curve25519_dalek_derive" -> "quote";
  "curve25519_dalek_derive" -> "quote";
  "curve25519_dalek_derive" -> "syn";
  "curve25519_dalek_derive" -> "syn";
  "derive_where" -> "proc_macro2";
  "derive_where" -> "quote";
  "derive_where" -> "syn";
  "derive_where" -> "proc_macro2";
  "derive_where" -> "proc_macro2";
  "derive_where" -> "quote";
  "derive_where" -> "quote";
  "derive_where" -> "syn";
  "derive_where" -> "syn";
  "derive_more" -> "derive_more_impl";
  "derive_more" -> "derive_more_impl";
  "derive_more" -> "derive_more_impl";
  "derive_more_impl" -> "proc_macro2";
  "derive_more_impl" -> "quote";
  "derive_more_impl" -> "syn";
  "derive_more_impl" -> "proc_macro2";
  "derive_more_impl" -> "proc_macro2";
  "derive_more_impl" -> "quote";
  "derive_more_impl" -> "quote";
  "derive_more_impl" -> "syn";
  "derive_more_impl" -> "syn";
  "digest" -> "block_buffer";
  "digest" -> "crypto_common";
  "digest" -> "subtle";
  "digest" -> "block_buffer";
  "digest" -> "block_buffer";
  "digest" -> "crypto_common";
  "digest" -> "crypto_common";
  "digest" -> "subtle";
  "digest" -> "subtle";
  "displaydoc" -> "proc_macro2";
  "displaydoc" -> "quote";
  "displaydoc" -> "syn";
  "displaydoc" -> "proc_macro2";
  "displaydoc" -> "proc_macro2";
  "displaydoc" -> "quote";
  "displaydoc" -> "quote";
  "displaydoc" -> "syn";
  "displaydoc" -> "syn";
  "generic_array" -> "build_script_build";
  "generic_array" -> "typenum";
  "generic_array" -> "build_script_build";
  "generic_array" -> "typenum";
  "generic_array" -> "typenum";
  "build-script-build" -> "version_check";
  "build-script-build" -> "build_script_build";
  "getrandom" -> "cfg_if";
  "getrandom" -> "libc";
  "getrandom" -> "cfg_if";
  "getrandom" -> "cfg_if";
  "getrandom" -> "libc";
  "getrandom" -> "libc";
  "getrandom" -> "cfg_if";
  "getrandom" -> "build_script_build";
  "getrandom" -> "libc";
  "build-script-build" -> "build_script_build";
  "ghash" -> "opaque_debug";
  "ghash" -> "polyval";
  "ghash" -> "zeroize";
  "ghash" -> "opaque_debug";
  "ghash" -> "opaque_debug";
  "ghash" -> "polyval";
  "ghash" -> "polyval";
  "ghash" -> "zeroize";
  "ghash" -> "zeroize";
  "hkdf" -> "hmac";
  "hkdf" -> "hmac";
  "hkdf" -> "hmac";
  "hmac" -> "digest";
  "hmac" -> "digest";
  "hmac" -> "digest";
  "indexmap" -> "equivalent";
  "indexmap" -> "hashbrown";
  "indexmap" -> "equivalent";
  "indexmap" -> "hashbrown";
  "indexmap" -> "equivalent";
  "indexmap" -> "equivalent";
  "indexmap" -> "hashbrown";
  "indexmap" -> "hashbrown";
  "inout" -> "block_padding";
  "inout" -> "generic_array";
  "inout" -> "block_padding";
  "inout" -> "block_padding";
  "inout" -> "generic_array";
  "inout" -> "generic_array";
  "itertools" -> "either";
  "itertools" -> "either";
  "itertools" -> "either";
  "itertools" -> "either";
  "jobserver" -> "libc";
  "libc" -> "build_script_build";
  "libc" -> "build_script_build";
  "libc" -> "build_script_build";
  "build-script-build" -> "build_script_build";
  "libsignal_core" -> "curve25519_dalek";
  "libsignal_core" -> "derive_more";
  "libsignal_core" -> "displaydoc";
  "libsignal_core" -> "num_enum";
  "libsignal_core" -> "rand";
  "libsignal_core" -> "sha2";
  "libsignal_core" -> "subtle";
  "libsignal_core" -> "uuid";
  "libsignal_core" -> "x25519_dalek";
  "libsignal_core" -> "curve25519_dalek";
  "libsignal_core" -> "curve25519_dalek";
  "libsignal_core" -> "derive_more";
  "libsignal_core" -> "derive_more";
  "libsignal_core" -> "displaydoc";
  "libsignal_core" -> "displaydoc";
  "libsignal_core" -> "num_enum";
  "libsignal_core" -> "num_enum";
  "libsignal_core" -> "rand";
  "libsignal_core" -> "rand";
  "libsignal_core" -> "sha2";
  "libsignal_core" -> "sha2";
  "libsignal_core" -> "subtle";
  "libsignal_core" -> "subtle";
  "libsignal_core" -> "uuid";
  "libsignal_core" -> "uuid";
  "libsignal_core" -> "x25519_dalek";
  "libsignal_core" -> "x25519_dalek";
  "libsignal_protocol" -> "aes";
  "libsignal_protocol" -> "aes";
  "libsignal_protocol" -> "aes_gcm_siv";
  "libsignal_protocol" -> "aes_gcm_siv";
  "libsignal_protocol" -> "arrayref";
  "libsignal_protocol" -> "arrayref";
  "libsignal_protocol" -> "assert_matches";
  "libsignal_protocol" -> "assert_matches";
  "libsignal_protocol" -> "async_trait";
  "libsignal_protocol" -> "async_trait";
  "libsignal_protocol" -> "ctr";
  "libsignal_protocol" -> "ctr";
  "libsignal_protocol" -> "derive_where";
  "libsignal_protocol" -> "derive_where";
  "libsignal_protocol" -> "derive_more";
  "libsignal_protocol" -> "derive_more";
  "libsignal_protocol" -> "displaydoc";
  "libsignal_protocol" -> "displaydoc";
  "libsignal_protocol" -> "hex";
  "libsignal_protocol" -> "hex";
  "libsignal_protocol" -> "hkdf";
  "libsignal_protocol" -> "hkdf";
  "libsignal_protocol" -> "hmac";
  "libsignal_protocol" -> "hmac";
  "libsignal_protocol" -> "indexmap";
  "libsignal_protocol" -> "indexmap";
  "libsignal_protocol" -> "itertools";
  "libsignal_protocol" -> "itertools";
  "libsignal_protocol" -> "libsignal_core";
  "libsignal_protocol" -> "libsignal_core";
  "libsignal_protocol" -> "build_script_build";
  "libsignal_protocol" -> "log";
  "libsignal_protocol" -> "log";
  "libsignal_protocol" -> "num_enum";
  "libsignal_protocol" -> "num_enum";
  "libsignal_protocol" -> "pqcrypto_kyber";
  "libsignal_protocol" -> "pqcrypto_kyber";
  "libsignal_protocol" -> "pqcrypto_traits";
  "libsignal_protocol" -> "pqcrypto_traits";
  "libsignal_protocol" -> "prost";
  "libsignal_protocol" -> "prost";
  "libsignal_protocol" -> "rand";
  "libsignal_protocol" -> "rand";
  "libsignal_protocol" -> "rayon";
  "libsignal_protocol" -> "rayon";
  "libsignal_protocol" -> "serde";
  "libsignal_protocol" -> "serde";
  "libsignal_protocol" -> "sha2";
  "libsignal_protocol" -> "sha2";
  "libsignal_protocol" -> "signal_crypto";
  "libsignal_protocol" -> "signal_crypto";
  "libsignal_protocol" -> "subtle";
  "libsignal_protocol" -> "subtle";
  "libsignal_protocol" -> "thiserror";
  "libsignal_protocol" -> "thiserror";
  "libsignal_protocol" -> "uuid";
  "libsignal_protocol" -> "uuid";
  "libsignal_protocol" -> "zerocopy";
  "libsignal_protocol" -> "zerocopy";
  "build-script-build" -> "prost_build";
  "build-script-build" -> "build_script_build";
  "num_enum" -> "num_enum_derive";
  "num_enum" -> "num_enum_derive";
  "num_enum" -> "num_enum_derive";
  "num_enum_derive" -> "proc_macro_crate";
  "num_enum_derive" -> "proc_macro2";
  "num_enum_derive" -> "quote";
  "num_enum_derive" -> "syn";
  "num_enum_derive" -> "proc_macro_crate";
  "num_enum_derive" -> "proc_macro_crate";
  "num_enum_derive" -> "proc_macro2";
  "num_enum_derive" -> "proc_macro2";
  "num_enum_derive" -> "quote";
  "num_enum_derive" -> "quote";
  "num_enum_derive" -> "syn";
  "num_enum_derive" -> "syn";
  "petgraph" -> "fixedbitset";
  "petgraph" -> "indexmap";
  "polyval" -> "cfg_if";
  "polyval" -> "cpufeatures";
  "polyval" -> "opaque_debug";
  "polyval" -> "universal_hash";
  "polyval" -> "cfg_if";
  "polyval" -> "cfg_if";
  "polyval" -> "cpufeatures";
  "polyval" -> "cpufeatures";
  "polyval" -> "opaque_debug";
  "polyval" -> "opaque_debug";
  "polyval" -> "universal_hash";
  "polyval" -> "universal_hash";
  "ppv_lite86" -> "zerocopy";
  "ppv_lite86" -> "zerocopy";
  "ppv_lite86" -> "zerocopy";
  "pqcrypto_internals" -> "getrandom";
  "pqcrypto_internals" -> "libc";
  "pqcrypto_internals" -> "build_script_build";
  "pqcrypto_internals" -> "getrandom";
  "pqcrypto_internals" -> "getrandom";
  "pqcrypto_internals" -> "libc";
  "pqcrypto_internals" -> "libc";
  "pqcrypto_internals" -> "build_script_build";
  "build-script-build" -> "cc";
  "build-script-build" -> "dunce";
  "build-script-build" -> "build_script_build";
  "pqcrypto_kyber" -> "libc";
  "pqcrypto_kyber" -> "pqcrypto_internals";
  "pqcrypto_kyber" -> "build_script_build";
  "pqcrypto_kyber" -> "pqcrypto_traits";
  "pqcrypto_kyber" -> "libc";
  "pqcrypto_kyber" -> "libc";
  "pqcrypto_kyber" -> "pqcrypto_internals";
  "pqcrypto_kyber" -> "pqcrypto_internals";
  "pqcrypto_kyber" -> "build_script_build";
  "pqcrypto_kyber" -> "pqcrypto_traits";
  "pqcrypto_kyber" -> "pqcrypto_traits";
  "build-script-build" -> "cc";
  "build-script-build" -> "glob";
  "build-script-build" -> "build_script_build";
  "build-script-build" -> "build_script_build";
  "prettyplease" -> "build_script_build";
  "prettyplease" -> "proc_macro2";
  "prettyplease" -> "syn";
  "build-script-build" -> "build_script_build";
  "proc_macro_crate" -> "toml_edit";
  "proc_macro_crate" -> "toml_edit";
  "proc_macro_crate" -> "toml_edit";
  "proc_macro_crate" -> "toml_edit";
  "proc_macro2" -> "build_script_build";
  "proc_macro2" -> "unicode_ident";
  "proc_macro2" -> "build_script_build";
  "proc_macro2" -> "unicode_ident";
  "proc_macro2" -> "build_script_build";
  "proc_macro2" -> "unicode_ident";
  "proc_macro2" -> "unicode_ident";
  "build-script-build" -> "build_script_build";
  "prost" -> "bytes";
  "prost" -> "prost_derive";
  "prost" -> "bytes";
  "prost" -> "prost_derive";
  "prost" -> "bytes";
  "prost" -> "bytes";
  "prost" -> "prost_derive";
  "prost" -> "prost_derive";
  "prost_build" -> "heck";
  "prost_build" -> "itertools";
  "prost_build" -> "log";
  "prost_build" -> "multimap";
  "prost_build" -> "once_cell";
  "prost_build" -> "petgraph";
  "prost_build" -> "prettyplease";
  "prost_build" -> "prost";
  "prost_build" -> "prost_types";
  "prost_build" -> "regex";
  "prost_build" -> "syn";
  "prost_build" -> "tempfile";
  "prost_derive" -> "anyhow";
  "prost_derive" -> "itertools";
  "prost_derive" -> "proc_macro2";
  "prost_derive" -> "quote";
  "prost_derive" -> "syn";
  "prost_derive" -> "anyhow";
  "prost_derive" -> "anyhow";
  "prost_derive" -> "itertools";
  "prost_derive" -> "proc_macro2";
  "prost_derive" -> "proc_macro2";
  "prost_derive" -> "quote";
  "prost_derive" -> "quote";
  "prost_derive" -> "syn";
  "prost_derive" -> "syn";
  "prost_types" -> "prost";
  "quote" -> "proc_macro2";
  "quote" -> "proc_macro2";
  "quote" -> "proc_macro2";
  "quote" -> "proc_macro2";
  "rand" -> "libc";
  "rand" -> "rand_chacha";
  "rand" -> "rand_core";
  "rand" -> "libc";
  "rand" -> "libc";
  "rand" -> "rand_chacha";
  "rand" -> "rand_chacha";
  "rand" -> "rand_core";
  "rand" -> "rand_core";
  "rand_chacha" -> "ppv_lite86";
  "rand_chacha" -> "rand_core";
  "rand_chacha" -> "ppv_lite86";
  "rand_chacha" -> "ppv_lite86";
  "rand_chacha" -> "rand_core";
  "rand_chacha" -> "rand_core";
  "rand_core" -> "getrandom";
  "rand_core" -> "getrandom";
  "rand_core" -> "getrandom";
  "rayon" -> "either";
  "rayon" -> "rayon_core";
  "rayon" -> "either";
  "rayon" -> "either";
  "rayon" -> "rayon_core";
  "rayon" -> "rayon_core";
  "rayon_core" -> "crossbeam_deque";
  "rayon_core" -> "crossbeam_utils";
  "rayon_core" -> "build_script_build";
  "rayon_core" -> "crossbeam_deque";
  "rayon_core" -> "crossbeam_deque";
  "rayon_core" -> "crossbeam_utils";
  "rayon_core" -> "crossbeam_utils";
  "rayon_core" -> "build_script_build";
  "build-script-build" -> "build_script_build";
  "regex" -> "regex_automata";
  "regex" -> "regex_syntax";
  "regex_automata" -> "regex_syntax";
  "rustc_version" -> "semver";
  "rustix" -> "bitflags";
  "rustix" -> "linux_raw_sys";
  "rustix" -> "build_script_build";
  "build-script-build" -> "build_script_build";
  "semver" -> "build_script_build";
  "build-script-build" -> "build_script_build";
  "serde" -> "build_script_build";
  "serde" -> "serde_derive";
  "serde" -> "build_script_build";
  "serde" -> "serde_derive";
  "serde" -> "serde_derive";
  "build-script-build" -> "build_script_build";
  "serde_derive" -> "proc_macro2";
  "serde_derive" -> "quote";
  "serde_derive" -> "syn";
  "serde_derive" -> "proc_macro2";
  "serde_derive" -> "proc_macro2";
  "serde_derive" -> "quote";
  "serde_derive" -> "quote";
  "serde_derive" -> "syn";
  "serde_derive" -> "syn";
  "sha1" -> "cfg_if";
  "sha1" -> "cpufeatures";
  "sha1" -> "digest";
  "sha1" -> "cfg_if";
  "sha1" -> "cfg_if";
  "sha1" -> "cpufeatures";
  "sha1" -> "cpufeatures";
  "sha1" -> "digest";
  "sha1" -> "digest";
  "sha2" -> "cfg_if";
  "sha2" -> "cpufeatures";
  "sha2" -> "digest";
  "sha2" -> "cfg_if";
  "sha2" -> "cfg_if";
  "sha2" -> "cpufeatures";
  "sha2" -> "cpufeatures";
  "sha2" -> "digest";
  "sha2" -> "digest";
  "signal_crypto" -> "aes";
  "signal_crypto" -> "cbc";
  "signal_crypto" -> "ctr";
  "signal_crypto" -> "displaydoc";
  "signal_crypto" -> "ghash";
  "signal_crypto" -> "hmac";
  "signal_crypto" -> "sha1";
  "signal_crypto" -> "sha2";
  "signal_crypto" -> "subtle";
  "signal_crypto" -> "thiserror";
  "signal_crypto" -> "aes";
  "signal_crypto" -> "aes";
  "signal_crypto" -> "cbc";
  "signal_crypto" -> "cbc";
  "signal_crypto" -> "ctr";
  "signal_crypto" -> "ctr";
  "signal_crypto" -> "displaydoc";
  "signal_crypto" -> "displaydoc";
  "signal_crypto" -> "ghash";
  "signal_crypto" -> "ghash";
  "signal_crypto" -> "hmac";
  "signal_crypto" -> "hmac";
  "signal_crypto" -> "sha1";
  "signal_crypto" -> "sha1";
  "signal_crypto" -> "sha2";
  "signal_crypto" -> "sha2";
  "signal_crypto" -> "subtle";
  "signal_crypto" -> "subtle";
  "signal_crypto" -> "thiserror";
  "signal_crypto" -> "thiserror";
  "syn" -> "proc_macro2";
  "syn" -> "quote";
  "syn" -> "unicode_ident";
  "syn" -> "proc_macro2";
  "syn" -> "quote";
  "syn" -> "unicode_ident";
  "syn" -> "proc_macro2";
  "syn" -> "proc_macro2";
  "syn" -> "quote";
  "syn" -> "quote";
  "syn" -> "unicode_ident";
  "syn" -> "unicode_ident";
  "tempfile" -> "cfg_if";
  "tempfile" -> "fastrand";
  "tempfile" -> "getrandom";
  "tempfile" -> "once_cell";
  "tempfile" -> "rustix";
  "thiserror" -> "build_script_build";
  "thiserror" -> "thiserror_impl";
  "thiserror" -> "build_script_build";
  "thiserror" -> "thiserror_impl";
  "thiserror" -> "thiserror_impl";
  "build-script-build" -> "build_script_build";
  "thiserror_impl" -> "proc_macro2";
  "thiserror_impl" -> "quote";
  "thiserror_impl" -> "syn";
  "thiserror_impl" -> "proc_macro2";
  "thiserror_impl" -> "proc_macro2";
  "thiserror_impl" -> "quote";
  "thiserror_impl" -> "quote";
  "thiserror_impl" -> "syn";
  "thiserror_impl" -> "syn";
  "toml_edit" -> "indexmap";
  "toml_edit" -> "toml_datetime";
  "toml_edit" -> "winnow";
  "toml_edit" -> "indexmap";
  "toml_edit" -> "toml_datetime";
  "toml_edit" -> "winnow";
  "toml_edit" -> "indexmap";
  "toml_edit" -> "toml_datetime";
  "toml_edit" -> "toml_datetime";
  "toml_edit" -> "winnow";
  "toml_edit" -> "winnow";
  "typenum" -> "build_script_build";
  "typenum" -> "build_script_build";
  "build-script-build" -> "build_script_build";
  "universal_hash" -> "crypto_common";
  "universal_hash" -> "subtle";
  "universal_hash" -> "crypto_common";
  "universal_hash" -> "crypto_common";
  "universal_hash" -> "subtle";
  "universal_hash" -> "subtle";
  "x25519_dalek" -> "curve25519_dalek";
  "x25519_dalek" -> "rand_core";
  "x25519_dalek" -> "zeroize";
  "x25519_dalek" -> "curve25519_dalek";
  "x25519_dalek" -> "curve25519_dalek";
  "x25519_dalek" -> "rand_core";
  "x25519_dalek" -> "rand_core";
  "x25519_dalek" -> "zeroize";
  "x25519_dalek" -> "zeroize";
  "zerocopy" -> "byteorder";
  "zerocopy" -> "zerocopy_derive";
  "zerocopy" -> "byteorder";
  "zerocopy" -> "byteorder";
  "zerocopy" -> "zerocopy_derive";
  "zerocopy" -> "zerocopy_derive";
  "zerocopy_derive" -> "proc_macro2";
  "zerocopy_derive" -> "quote";
  "zerocopy_derive" -> "syn";
  "zerocopy_derive" -> "proc_macro2";
  "zerocopy_derive" -> "proc_macro2";
  "zerocopy_derive" -> "quote";
  "zerocopy_derive" -> "quote";
  "zerocopy_derive" -> "syn";
  "zerocopy_derive" -> "syn";
  "zeroize" -> "zeroize_derive";
  "zeroize" -> "zeroize_derive";
  "zeroize" -> "zeroize_derive";
  "zeroize_derive" -> "proc_macro2";
  "zeroize_derive" -> "quote";
  "zeroize_derive" -> "syn";
  "zeroize_derive" -> "proc_macro2";
  "zeroize_derive" -> "proc_macro2";
  "zeroize_derive" -> "quote";
  "zeroize_derive" -> "quote";
  "zeroize_derive" -> "syn";
  "zeroize_derive" -> "syn";
}
