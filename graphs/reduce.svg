<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="4058pt" height="9075pt"
 viewBox="0.00 0.00 4058.00 9075.47" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 9071.47)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-9071.47 4054,-9071.47 4054,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="691,-3830.23 691,-4121.23 1723.5,-4121.23 1723.5,-3830.23 691,-3830.23"/>
<text text-anchor="middle" x="1207.25" y="-4106.03" font-family="Helvetica,sans-Serif" font-size="14.00">dalek_benchmarks.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2660.5,-2968.23 2660.5,-3043.23 2857.5,-3043.23 2857.5,-2968.23 2660.5,-2968.23"/>
<text text-anchor="middle" x="2759" y="-3028.03" font-family="Helvetica,sans-Serif" font-size="14.00">pippenger.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3738.5,-2311.23 3738.5,-2494.23 4042,-2494.23 4042,-2311.23 3738.5,-2311.23"/>
<text text-anchor="middle" x="3890.25" y="-2479.03" font-family="Helvetica,sans-Serif" font-size="14.00">field.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3020.5,-2772.23 3020.5,-2901.23 3224.5,-2901.23 3224.5,-2772.23 3020.5,-2772.23"/>
<text text-anchor="middle" x="3122.5" y="-2886.03" font-family="Helvetica,sans-Serif" font-size="14.00">constants.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2543,-880.23 2543,-2305.23 3453.5,-2305.23 3453.5,-880.23 2543,-880.23"/>
<text text-anchor="middle" x="2998.25" y="-2290.03" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3270,-3049.23 3270,-3340.23 3829,-3340.23 3829,-3049.23 3270,-3049.23"/>
<text text-anchor="middle" x="3549.5" y="-3325.03" font-family="Helvetica,sans-Serif" font-size="14.00">field.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3349,-8817.23 3349,-8892.23 3480,-8892.23 3480,-8817.23 3349,-8817.23"/>
<text text-anchor="middle" x="3414.5" y="-8877.03" font-family="Helvetica,sans-Serif" font-size="14.00">jacobi_quartic.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3034,-3216.23 3034,-3291.23 3211,-3291.23 3211,-3216.23 3034,-3216.23"/>
<text text-anchor="middle" x="3122.5" y="-3276.03" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_constants.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1776.5,-8572.23 1776.5,-8809.23 3519.5,-8809.23 3519.5,-8572.23 1776.5,-8572.23"/>
<text text-anchor="middle" x="2648" y="-8794.03" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_ristretto.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2123.5,-119.23 2123.5,-842.23 3172,-842.23 3172,-119.23 2123.5,-119.23"/>
<text text-anchor="middle" x="2647.75" y="-827.03" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1748,-3456.23 1748,-4199.23 3221,-4199.23 3221,-3456.23 1748,-3456.23"/>
<text text-anchor="middle" x="2484.5" y="-4184.03" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1506,-1527.23 1506,-1656.23 1969.5,-1656.23 1969.5,-1527.23 1506,-1527.23"/>
<text text-anchor="middle" x="1737.75" y="-1641.03" font-family="Helvetica,sans-Serif" font-size="14.00">hazmat.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1860.5,-2129.23 1860.5,-2312.23 2362,-2312.23 2362,-2129.23 1860.5,-2129.23"/>
<text text-anchor="middle" x="2111.25" y="-2297.03" font-family="Helvetica,sans-Serif" font-size="14.00">signing.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1846.5,-2320.23 1846.5,-2503.23 2820.5,-2503.23 2820.5,-2320.23 1846.5,-2320.23"/>
<text text-anchor="middle" x="2333.5" y="-2488.03" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1457,-2930.23 1457,-3059.23 2001,-3059.23 2001,-2930.23 1457,-2930.23"/>
<text text-anchor="middle" x="1729" y="-3044.03" font-family="Helvetica,sans-Serif" font-size="14.00">ed25519.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1491,-2421.23 1491,-2550.23 1694,-2550.23 1694,-2421.23 1491,-2421.23"/>
<text text-anchor="middle" x="1592.5" y="-2535.03" font-family="Helvetica,sans-Serif" font-size="14.00">validation_criteria.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1492.5,-2237.23 1492.5,-2312.23 1692.5,-2312.23 1692.5,-2237.23 1492.5,-2237.23"/>
<text text-anchor="middle" x="1592.5" y="-2297.03" font-family="Helvetica,sans-Serif" font-size="14.00">x25519.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1517,-1028.23 1517,-1103.23 2007,-1103.23 2007,-1028.23 1517,-1028.23"/>
<text text-anchor="middle" x="1762" y="-1088.03" font-family="Helvetica,sans-Serif" font-size="14.00">x25519.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2271,-1028.23 2271,-1157.23 2359,-1157.23 2359,-1028.23 2271,-1028.23"/>
<text text-anchor="middle" x="2315" y="-1142.03" font-family="Helvetica,sans-Serif" font-size="14.00">x25519.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2139.5,-945.23 2139.5,-1020.23 2490.5,-1020.23 2490.5,-945.23 2139.5,-945.23"/>
<text text-anchor="middle" x="2315" y="-1005.03" font-family="Helvetica,sans-Serif" font-size="14.00">x25519_tests.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1099.5,-4808.23 1099.5,-5045.23 1312.5,-5045.23 1312.5,-4808.23 1099.5,-4808.23"/>
<text text-anchor="middle" x="1206" y="-5030.03" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightgrey" stroke="lightgrey" points="8,-4386.23 8,-4731.23 546,-4731.23 546,-4386.23 8,-4386.23"/>
<text text-anchor="middle" x="277" y="-4716.03" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1154,-3118.23 1154,-3193.23 1258,-3193.23 1258,-3118.23 1154,-3118.23"/>
<text text-anchor="middle" x="1206" y="-3178.03" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1116,-3251.23 1116,-3420.23 2083.5,-3420.23 2083.5,-3251.23 1116,-3251.23"/>
<text text-anchor="middle" x="1599.75" y="-3405.03" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1818,-3114.23 1818,-3243.23 2398,-3243.23 2398,-3114.23 1818,-3114.23"/>
<text text-anchor="middle" x="2108" y="-3228.03" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1501,-2558.23 1501,-2633.23 1998,-2633.23 1998,-2558.23 1501,-2558.23"/>
<text text-anchor="middle" x="1749.5" y="-2618.03" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1758.5,-2709.23 1758.5,-2892.23 2823.5,-2892.23 2823.5,-2709.23 1758.5,-2709.23"/>
<text text-anchor="middle" x="2291" y="-2877.03" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightgrey" stroke="lightgrey" points="164,-6931.23 164,-7006.23 390,-7006.23 390,-6931.23 164,-6931.23"/>
<text text-anchor="middle" x="277" y="-6991.03" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightgrey" stroke="lightgrey" points="619.5,-7882.23 619.5,-8011.23 1261,-8011.23 1261,-7882.23 619.5,-7882.23"/>
<text text-anchor="middle" x="940.25" y="-7996.03" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightgrey" stroke="lightgrey" points="717.5,-7745.23 717.5,-7874.23 803.5,-7874.23 803.5,-7745.23 717.5,-7745.23"/>
<text text-anchor="middle" x="760.5" y="-7859.03" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1140.5,-5595.23 1140.5,-5724.23 1664.5,-5724.23 1664.5,-5595.23 1140.5,-5595.23"/>
<text text-anchor="middle" x="1402.5" y="-5709.03" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1492,-7213.23 1492,-7308.23 2372,-7308.23 2372,-7213.23 1492,-7213.23"/>
<text text-anchor="middle" x="1932" y="-7293.03" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1493,-3114.23 1493,-3243.23 1692,-3243.23 1692,-3114.23 1493,-3114.23"/>
<text text-anchor="middle" x="1592.5" y="-3228.03" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1126.5,-8019.23 1126.5,-8384.23 2371.5,-8384.23 2371.5,-8019.23 1126.5,-8019.23"/>
<text text-anchor="middle" x="1749" y="-8369.03" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightgrey" stroke="lightgrey" points="231.5,-5274.23 231.5,-5403.23 1278,-5403.23 1278,-5274.23 231.5,-5274.23"/>
<text text-anchor="middle" x="754.75" y="-5388.03" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1052.5,-5053.23 1052.5,-5236.23 1649.5,-5236.23 1649.5,-5053.23 1052.5,-5053.23"/>
<text text-anchor="middle" x="1351" y="-5221.03" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightgrey" stroke="lightgrey" points="715,-6618.23 715,-6693.23 1286,-6693.23 1286,-6618.23 715,-6618.23"/>
<text text-anchor="middle" x="1000.5" y="-6678.03" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1100,-4387.23 1100,-4732.23 2030,-4732.23 2030,-4387.23 1100,-4387.23"/>
<text text-anchor="middle" x="1565" y="-4717.03" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1545.5,-6534.23 1545.5,-6663.23 1640.5,-6663.23 1640.5,-6534.23 1545.5,-6534.23"/>
<text text-anchor="middle" x="1593" y="-6648.03" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1556.5,-6838.23 1556.5,-6967.23 1628.5,-6967.23 1628.5,-6838.23 1556.5,-6838.23"/>
<text text-anchor="middle" x="1592.5" y="-6952.03" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1532,-6671.23 1532,-6800.23 1654,-6800.23 1654,-6671.23 1532,-6671.23"/>
<text text-anchor="middle" x="1593" y="-6785.03" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1544,-7316.23 1544,-7391.23 1641,-7391.23 1641,-7316.23 1544,-7316.23"/>
<text text-anchor="middle" x="1592.5" y="-7376.03" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightgrey" stroke="lightgrey" points="124,-4946.23 124,-5129.23 430,-5129.23 430,-4946.23 124,-4946.23"/>
<text text-anchor="middle" x="277" y="-5114.03" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1105.5,-6128.23 1105.5,-6365.23 1306.5,-6365.23 1306.5,-6128.23 1105.5,-6128.23"/>
<text text-anchor="middle" x="1206" y="-6350.03" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1135.5,-7000.23 1135.5,-7237.23 1276.5,-7237.23 1276.5,-7000.23 1135.5,-7000.23"/>
<text text-anchor="middle" x="1206" y="-7222.03" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1134,-5883.23 1134,-6120.23 1278,-6120.23 1278,-5883.23 1134,-5883.23"/>
<text text-anchor="middle" x="1206" y="-6105.03" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1130.5,-6373.23 1130.5,-6610.23 1282.5,-6610.23 1282.5,-6373.23 1130.5,-6373.23"/>
<text text-anchor="middle" x="1206.5" y="-6595.03" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1149,-3610.23 1149,-3685.23 1263,-3685.23 1263,-3610.23 1149,-3610.23"/>
<text text-anchor="middle" x="1206" y="-3670.03" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightgrey" stroke="lightgrey" points="677,-5000.23 677,-5129.23 844,-5129.23 844,-5000.23 677,-5000.23"/>
<text text-anchor="middle" x="760.5" y="-5114.03" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightgrey" stroke="lightgrey" points="601.5,-4141.23 601.5,-4594.23 919.5,-4594.23 919.5,-4141.23 601.5,-4141.23"/>
<text text-anchor="middle" x="760.5" y="-4579.03" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightgrey" stroke="lightgrey" points="566,-6823.23 566,-7330.23 955,-7330.23 955,-6823.23 566,-6823.23"/>
<text text-anchor="middle" x="760.5" y="-7315.03" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust52" class="cluster">
<title>cluster_51</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1488.5,-7543.23 1488.5,-7672.23 1696.5,-7672.23 1696.5,-7543.23 1488.5,-7543.23"/>
<text text-anchor="middle" x="1592.5" y="-7657.03" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust53" class="cluster">
<title>cluster_52</title>
<polygon fill="lightgrey" stroke="lightgrey" points="706,-7557.23 706,-7632.23 816,-7632.23 816,-7557.23 706,-7557.23"/>
<text text-anchor="middle" x="761" y="-7617.03" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust54" class="cluster">
<title>cluster_53</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1095.5,-5732.23 1095.5,-5807.23 1635.5,-5807.23 1635.5,-5732.23 1095.5,-5732.23"/>
<text text-anchor="middle" x="1365.5" y="-5792.03" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust55" class="cluster">
<title>cluster_54</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1514.5,-7680.23 1514.5,-7755.23 1670.5,-7755.23 1670.5,-7680.23 1514.5,-7680.23"/>
<text text-anchor="middle" x="1592.5" y="-7740.03" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_struct.rs</text>
</g>
<g id="clust56" class="cluster">
<title>cluster_55</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1167,-7245.23 1167,-7806.23 1245,-7806.23 1245,-7245.23 1167,-7245.23"/>
<text text-anchor="middle" x="1206" y="-7791.03" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust57" class="cluster">
<title>cluster_56</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1156,-5458.23 1156,-5587.23 1256,-5587.23 1256,-5458.23 1156,-5458.23"/>
<text text-anchor="middle" x="1206" y="-5572.03" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust58" class="cluster">
<title>cluster_57</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1122,-3693.23 1122,-3822.23 1635.5,-3822.23 1635.5,-3693.23 1122,-3693.23"/>
<text text-anchor="middle" x="1378.75" y="-3807.03" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust59" class="cluster">
<title>cluster_58</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1522,-6373.23 1522,-6448.23 1663,-6448.23 1663,-6373.23 1522,-6373.23"/>
<text text-anchor="middle" x="1592.5" y="-6433.03" font-family="Helvetica,sans-Serif" font-size="14.00">uid_struct.rs</text>
</g>
<g id="clust60" class="cluster">
<title>cluster_59</title>
<polygon fill="lightgrey" stroke="lightgrey" points="975,-6701.23 975,-6992.23 1437,-6992.23 1437,-6701.23 975,-6701.23"/>
<text text-anchor="middle" x="1206" y="-6977.03" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust61" class="cluster">
<title>cluster_60</title>
<polygon fill="lightgrey" stroke="lightgrey" points="611,-6018.23 611,-6147.23 910,-6147.23 910,-6018.23 611,-6018.23"/>
<text text-anchor="middle" x="760.5" y="-6132.03" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust62" class="cluster">
<title>cluster_61</title>
<polygon fill="lightgrey" stroke="lightgrey" points="140.5,-4195.23 140.5,-4378.23 413.5,-4378.23 413.5,-4195.23 140.5,-4195.23"/>
<text text-anchor="middle" x="277" y="-4363.03" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust63" class="cluster">
<title>cluster_62</title>
<polygon fill="lightgrey" stroke="lightgrey" points="149.5,-5137.23 149.5,-5266.23 404.5,-5266.23 404.5,-5137.23 149.5,-5137.23"/>
<text text-anchor="middle" x="277" y="-5251.03" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust64" class="cluster">
<title>cluster_63</title>
<polygon fill="lightgrey" stroke="lightgrey" points="666.5,-7467.23 666.5,-7542.23 854.5,-7542.23 854.5,-7467.23 666.5,-7467.23"/>
<text text-anchor="middle" x="760.5" y="-7527.03" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn scalar_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; scalar benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_arith(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;batch_scalar_inversion(...">
<polygon fill="white" stroke="black" points="822,-3928.23 699,-3928.23 699,-3892.23 822,-3892.23 822,-3928.23"/>
<text text-anchor="middle" x="760.5" y="-3906.53" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn edwards_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; edwards benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;decompress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1276,-3928.23 1136,-3928.23 1136,-3892.23 1276,-3892.23 1276,-3928.23"/>
<text text-anchor="middle" x="1206" y="-3906.53" font-family="Helvetica,sans-Serif" font-size="14.00">edwards_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<path fill="none" stroke="gray" d="M822.24,-3910.23C901.08,-3910.23 1038.84,-3910.23 1125.81,-3910.23"/>
<polygon fill="gray" stroke="gray" points="1125.9,-3913.73 1135.9,-3910.23 1125.9,-3906.73 1125.9,-3913.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn ristretto_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; ristretto benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;decompress(&amp;mut g); &#160;...">
<polygon fill="white" stroke="black" points="1274.5,-4009.23 1137.5,-4009.23 1137.5,-3973.23 1274.5,-3973.23 1274.5,-4009.23"/>
<text text-anchor="middle" x="1206" y="-3987.53" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches().</title>
<path fill="none" stroke="gray" d="M822.24,-3921.32C901.54,-3935.8 1040.44,-3961.17 1127.32,-3977.04"/>
<polygon fill="gray" stroke="gray" points="1126.92,-3980.52 1137.38,-3978.88 1128.18,-3973.64 1126.92,-3980.52"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn montgomery_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; montgomery benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;montgomery_ladder(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consttime_...">
<polygon fill="white" stroke="black" points="1291.5,-3874.23 1120.5,-3874.23 1120.5,-3838.23 1291.5,-3838.23 1291.5,-3874.23"/>
<text text-anchor="middle" x="1206" y="-3852.53" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<path fill="none" stroke="gray" d="M822.22,-3902.4C864.94,-3896.93 923.45,-3889.51 975,-3883.23 1019.43,-3877.81 1068.71,-3872 1110.22,-3867.16"/>
<polygon fill="gray" stroke="gray" points="1110.79,-3870.62 1120.32,-3865.98 1109.98,-3863.66 1110.79,-3870.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/compress(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/compress().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn compress&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = &amp;constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; EdwardsPoint compression&#39; , move |b| b.iter(|| B.compress()...">
<polygon fill="white" stroke="black" points="1634,-3928.23 1551,-3928.23 1551,-3892.23 1634,-3892.23 1634,-3928.23"/>
<text text-anchor="middle" x="1592.5" y="-3906.53" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/compress(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/compress().</title>
<path fill="none" stroke="gray" d="M1276.18,-3910.23C1352.38,-3910.23 1473.07,-3910.23 1540.9,-3910.23"/>
<polygon fill="gray" stroke="gray" points="1540.92,-3913.73 1550.92,-3910.23 1540.92,-3906.73 1540.92,-3913.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/compress(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/compress().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;fn compress&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; RistrettoPoint compression&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = &amp;constants::RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b.ite...">
<polygon fill="white" stroke="black" points="1634,-4036.23 1551,-4036.23 1551,-4000.23 1634,-4000.23 1634,-4036.23"/>
<text text-anchor="middle" x="1592.5" y="-4014.53" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;pub fn compress(&amp;self) &#45;&gt; CompressedRistretto { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut X = self.0.X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut Y = self.0.Y; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = &amp;self.0.Z; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let T = &amp;self.0.T; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let u1 = &amp;(Z + &amp;Y) * &amp;(Z ...">
<polygon fill="white" stroke="black" points="2800.5,-4060.23 2717.5,-4060.23 2717.5,-4024.23 2800.5,-4024.23 2800.5,-4060.23"/>
<text text-anchor="middle" x="2759" y="-4038.53" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1634.17,-4015.1C1663.37,-4015.26 1701.33,-4020.83 1723.5,-4045.23 1757.17,-4082.29 1710.72,-4235.8 1748,-4269.23 1874.91,-4383.01 2386.39,-4381.08 2515,-4269.23 2582.72,-4210.32 2479.09,-4132.24 2543,-4069.23 2585.64,-4027.18 2658.38,-4026.99 2707.3,-4032.85"/>
<polygon fill="gray" stroke="gray" points="2706.98,-4036.34 2717.36,-4034.18 2707.9,-4029.4 2706.98,-4036.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/compress(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/compress().</title>
<path fill="none" stroke="gray" d="M1274.86,-3995.99C1350.93,-4001.33 1472.56,-4009.87 1540.81,-4014.67"/>
<polygon fill="gray" stroke="gray" points="1540.66,-4018.16 1550.88,-4015.37 1541.15,-4011.18 1540.66,-4018.16"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/elligator(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/elligator().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn elligator&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; RistrettoPoint Elligator&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b.iter(|| RistrettoPoint::from_uniform_bytes_single_elligator(&amp;[0...">
<polygon fill="white" stroke="black" points="1629,-4090.23 1556,-4090.23 1556,-4054.23 1629,-4054.23 1629,-4090.23"/>
<text text-anchor="middle" x="1592.5" y="-4068.53" font-family="Helvetica,sans-Serif" font-size="14.00">elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/elligator(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/elligator().</title>
<path fill="none" stroke="gray" d="M1274.59,-4006.1C1324.86,-4017.1 1395.16,-4032.34 1457,-4045.23 1486.54,-4051.38 1519.78,-4058.06 1545.82,-4063.23"/>
<polygon fill="gray" stroke="gray" points="1545.3,-4066.69 1555.79,-4065.2 1546.66,-4059.83 1545.3,-4066.69"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/decompress(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/decompress().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn decompress&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; RistrettoPoint decompression&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B_comp = &amp;constants::RISTRETTO_BASEPOINT_COMPRESSED; &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1643,-3982.23 1542,-3982.23 1542,-3946.23 1643,-3946.23 1643,-3982.23"/>
<text text-anchor="middle" x="1592.5" y="-3960.53" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/decompress(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/ristretto_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/decompress().</title>
<path fill="none" stroke="gray" d="M1274.86,-3986.46C1347.55,-3981.36 1461.83,-3973.33 1531.39,-3968.45"/>
<polygon fill="gray" stroke="gray" points="1532.01,-3971.91 1541.74,-3967.72 1531.52,-3964.93 1532.01,-3971.91"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes_single_elligator(bytes: &amp;[u8; 32]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::elligator_ristretto_flavor(&amp;FieldElement::from_bytes(bytes)) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2050.5,-8726.23 1784.5,-8726.23 1784.5,-8690.23 2050.5,-8690.23 2050.5,-8726.23"/>
<text text-anchor="middle" x="1917.5" y="-8704.53" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="gray" d="M1604.07,-4090.34C1630.6,-4136.96 1699.57,-4265.67 1723.5,-4383.23 1735.41,-4441.72 1709.14,-8635.91 1748,-8681.23 1755.61,-8690.1 1764.87,-8696.88 1775.1,-8702"/>
<polygon fill="gray" stroke="gray" points="1773.76,-8705.23 1784.32,-8706.08 1776.59,-8698.83 1773.76,-8705.23"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="white" stroke="black" points="1715.5,-3874.23 1469.5,-3874.23 1469.5,-3838.23 1715.5,-3838.23 1715.5,-3874.23"/>
<text text-anchor="middle" x="1592.5" y="-3852.53" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<path fill="none" stroke="gray" d="M1291.86,-3856.23C1340.89,-3856.23 1403.64,-3856.23 1459.03,-3856.23"/>
<polygon fill="gray" stroke="gray" points="1459.29,-3859.73 1469.29,-3856.23 1459.29,-3852.73 1459.29,-3859.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;pub fn mul_base(scalar: &amp;Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EdwardsPoint::mul_base(scalar).to_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3164,-478.23 3081,-478.23 3081,-442.23 3164,-442.23 3164,-478.23"/>
<text text-anchor="middle" x="3122.5" y="-456.53" font-family="Helvetica,sans-Serif" font-size="14.00">mul_base</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base(). -->
<g id="edge448" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base().</title>
<path fill="none" stroke="gray" d="M1711.14,-3838.03C1715.7,-3834.64 1719.86,-3830.73 1723.5,-3826.23 1753.18,-3789.46 1733.15,-2170.09 1748,-2125.23 1828.09,-1883.3 2002.68,-1901.91 2083.5,-1660.23 2110.67,-1578.96 2053.8,-178.19 2115,-118.23 2392.54,153.71 2642.66,-100.27 2967,-314.23 3019.82,-349.07 3071.2,-402.74 3099.37,-434.38"/>
<polygon fill="gray" stroke="gray" points="3096.78,-436.74 3106.01,-441.93 3102.03,-432.11 3096.78,-436.74"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (s_encoding_is_canonical, s_is_negative, s) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!s_encoding_is_canonical | s_is_negative).into...">
<polygon fill="white" stroke="black" points="2809.5,-4006.23 2708.5,-4006.23 2708.5,-3970.23 2809.5,-3970.23 2809.5,-4006.23"/>
<text text-anchor="middle" x="2759" y="-3984.53" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge454" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto_benches/decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M1643.18,-3966.34C1668.8,-3969.37 1699.59,-3976.2 1723.5,-3991.23 1738.67,-4000.76 1733.82,-4012.28 1748,-4023.23 1888.03,-4131.31 1941.59,-4142.32 2115,-4177.23 2289.28,-4212.31 2379.01,-4291.73 2515,-4177.23 2570.89,-4130.16 2490.15,-4065.68 2543,-4015.23 2583.64,-3976.42 2650.06,-3973.71 2698.33,-3978.18"/>
<polygon fill="gray" stroke="gray" points="2698.03,-3981.67 2708.34,-3979.23 2698.76,-3974.71 2698.03,-3981.67"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;pub fn compress(&amp;self) &#45;&gt; CompressedEdwardsY { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recip = self.Z.invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = &amp;self.X * &amp;recip; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = &amp;self.Y * &amp;recip; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s: [u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s = y....">
<polygon fill="white" stroke="black" points="3164,-2085.23 3081,-2085.23 3081,-2049.23 3164,-2049.23 3164,-2085.23"/>
<text text-anchor="middle" x="3122.5" y="-2063.53" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge489" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M1634.24,-3913.68C1663.67,-3913.73 1701.9,-3908.28 1723.5,-3883.23 1786.13,-3810.56 1681.07,-3520.95 1748,-3452.23 1800.2,-3398.63 2027.04,-3473.31 2083.5,-3424.23 2131.31,-3382.67 2067.43,-3327.06 2115,-3285.23 2182.05,-3226.26 2426.17,-3256.26 2515,-3247.23 2716.03,-3226.78 2829.41,-3346.21 2967,-3198.23 3044.44,-3114.93 2955.23,-2278.44 3003,-2175.23 3019.56,-2139.44 3054.08,-2110.19 3081.61,-2091.2"/>
<polygon fill="gray" stroke="gray" points="3083.91,-2093.87 3090.28,-2085.39 3080.02,-2088.05 3083.91,-2093.87"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn test_vartime_pippenger() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Reuse points across different tests &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut n = 512; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = Scalar::from(2128506u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = Scalar::from(4443282u64).in...">
<polygon fill="white" stroke="black" points="2849.5,-3012.23 2668.5,-3012.23 2668.5,-2976.23 2849.5,-2976.23 2849.5,-3012.23"/>
<text text-anchor="middle" x="2759" y="-2990.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_vartime_pippenger</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge490" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2849.56,-3004.21C2891.33,-3003.61 2938.09,-2994.43 2967,-2962.23 3025.48,-2897.09 2965.82,-2254.47 3003,-2175.23 3019.8,-2139.41 3054.47,-2110.08 3081.99,-2091.07"/>
<polygon fill="gray" stroke="gray" points="3084.29,-2093.74 3090.64,-2085.26 3080.39,-2087.93 3084.29,-2093.74"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[`&amp;FieldElement51`][Neg]neg(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[`&amp;FieldElement51`][Neg]neg().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn neg(self) &#45;&gt; FieldElement51 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut output = *self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output.negate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3800.5,-2463.23 3746.5,-2463.23 3746.5,-2427.23 3800.5,-2427.23 3800.5,-2463.23"/>
<text text-anchor="middle" x="3773.5" y="-2441.53" font-family="Helvetica,sans-Serif" font-size="14.00">neg</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]negate(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]negate().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;pub fn negate(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// See commentary in the Sub impl &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let neg = FieldElement51::reduce([ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;36028797018963664u64 &#45; self.0[0], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;36028797018963952u64 &#45; sel...">
<polygon fill="white" stroke="black" points="3928,-2463.23 3863,-2463.23 3863,-2427.23 3928,-2427.23 3928,-2463.23"/>
<text text-anchor="middle" x="3895.5" y="-2441.53" font-family="Helvetica,sans-Serif" font-size="14.00">negate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[`&amp;FieldElement51`][Neg]neg().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]negate(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[`&amp;FieldElement51`][Neg]neg().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]negate().</title>
<path fill="none" stroke="gray" d="M3800.54,-2445.23C3815.72,-2445.23 3835.23,-2445.23 3852.54,-2445.23"/>
<polygon fill="gray" stroke="gray" points="3852.97,-2448.73 3862.97,-2445.23 3852.97,-2441.73 3852.97,-2448.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn as_bytes(&amp;self) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Let h = limbs[0] + limbs[1]*2^51 + ... + limbs[4]*2^204. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Write h = pq + r with 0 &lt;= r &lt; p. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// We want to co...">
<polygon fill="white" stroke="black" points="3934,-2409.23 3857,-2409.23 3857,-2373.23 3934,-2373.23 3934,-2409.23"/>
<text text-anchor="middle" x="3895.5" y="-2387.53" font-family="Helvetica,sans-Serif" font-size="14.00">as_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn reduce(mut limbs: [u64; 5]) &#45;&gt; FieldElement51 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const LOW_51_BIT_MASK: u64 = (1u64 &lt;&lt; 51) &#45; 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Since the input limbs are bounded by 2^64, the biggest &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// carry&#45;out is...">
<polygon fill="lightblue" stroke="black" points="4034,-2409.23 3970,-2409.23 3970,-2373.23 4034,-2373.23 4034,-2409.23"/>
<text text-anchor="middle" x="4002" y="-2387.53" font-family="Helvetica,sans-Serif" font-size="14.00">reduce</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce().</title>
<path fill="none" stroke="gray" d="M3934.23,-2391.23C3942.54,-2391.23 3951.38,-2391.23 3959.83,-2391.23"/>
<polygon fill="gray" stroke="gray" points="3959.86,-2394.73 3969.86,-2391.23 3959.86,-2387.73 3959.86,-2394.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[`&amp;FieldElement51`][`Sub&lt;&amp;FieldElement51&gt;`]sub(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[`&amp;FieldElement51`][`Sub&lt;&amp;FieldElement51&gt;`]sub().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn sub(self, _rhs: &amp;&#39;b FieldElement51) &#45;&gt; FieldElement51 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// To avoid underflow, first add a multiple of p. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Choose 16*p = p &lt;&lt; 4 to be larger than 54&#45;bit _rhs. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3922.5,-2355.23 3868.5,-2355.23 3868.5,-2319.23 3922.5,-2319.23 3922.5,-2355.23"/>
<text text-anchor="middle" x="3895.5" y="-2333.53" font-family="Helvetica,sans-Serif" font-size="14.00">sub</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[`&amp;FieldElement51`][`Sub&lt;&amp;FieldElement51&gt;`]sub().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[`&amp;FieldElement51`][`Sub&lt;&amp;FieldElement51&gt;`]sub().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce().</title>
<path fill="none" stroke="gray" d="M3922.6,-2350.71C3934.08,-2356.65 3947.83,-2363.75 3960.59,-2370.34"/>
<polygon fill="gray" stroke="gray" points="3959.16,-2373.55 3969.65,-2375.03 3962.38,-2367.33 3959.16,-2373.55"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]negate().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce(). -->
<g id="edge452" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]negate().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce().</title>
<path fill="none" stroke="gray" d="M3928.14,-2428.88C3938.46,-2423.54 3950.07,-2417.55 3960.93,-2411.93"/>
<polygon fill="gray" stroke="gray" points="3962.55,-2415.03 3969.83,-2407.33 3959.34,-2408.81 3962.55,-2415.03"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 constants/test/test_sqrt_minus_one(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 constants/test/test_sqrt_minus_one().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn test_sqrt_minus_one() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let minus_one = FieldElement::MINUS_ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sqrt_m1_sq = &amp;constants::SQRT_M1 * &amp;constants::SQRT_M1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(minus_one, sqrt_m1_sq); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a...">
<polygon fill="white" stroke="black" points="3202,-2816.23 3043,-2816.23 3043,-2780.23 3202,-2780.23 3202,-2816.23"/>
<text text-anchor="middle" x="3122.5" y="-2794.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_sqrt_minus_one</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn is_negative(&amp;self) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bytes = self.as_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(bytes[0] &amp; 1).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3821,-3201.23 3726,-3201.23 3726,-3165.23 3821,-3165.23 3821,-3201.23"/>
<text text-anchor="middle" x="3773.5" y="-3179.53" font-family="Helvetica,sans-Serif" font-size="14.00">is_negative</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 constants/test/test_sqrt_minus_one().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 constants/test/test_sqrt_minus_one().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M3202.02,-2813.34C3215.52,-2816.73 3229.28,-2820.68 3242,-2825.23 3451.46,-2900.01 3526.06,-2897.92 3690,-3048.23 3699.08,-3056.55 3735.91,-3119.44 3757.17,-3156.38"/>
<polygon fill="gray" stroke="gray" points="3754.19,-3158.23 3762.21,-3165.16 3760.26,-3154.74 3754.19,-3158.23"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 constants/test/test_sqrt_constants_sign(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 constants/test/test_sqrt_constants_sign().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn test_sqrt_constants_sign() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let minus_one = FieldElement::MINUS_ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (was_nonzero_square, invsqrt_m1) = minus_one.invsqrt(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(bool::from(was_nonzero_square))...">
<polygon fill="white" stroke="black" points="3216.5,-2870.23 3028.5,-2870.23 3028.5,-2834.23 3216.5,-2834.23 3216.5,-2870.23"/>
<text text-anchor="middle" x="3122.5" y="-2848.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_sqrt_constants_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn invsqrt(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FieldElement::sqrt_ratio_i(&amp;FieldElement::ONE, self) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3447,-3147.23 3382,-3147.23 3382,-3111.23 3447,-3111.23 3447,-3147.23"/>
<text text-anchor="middle" x="3414.5" y="-3125.53" font-family="Helvetica,sans-Serif" font-size="14.00">invsqrt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 constants/test/test_sqrt_constants_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 constants/test/test_sqrt_constants_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" d="M3128.38,-2870.28C3142.04,-2917.04 3185.26,-3042.57 3270,-3102.23 3299.58,-3123.05 3340.76,-3129.04 3371.42,-3130.28"/>
<polygon fill="gray" stroke="gray" points="3371.71,-3133.78 3381.8,-3130.53 3371.88,-3126.79 3371.71,-3133.78"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;pub fn to_montgomery(&amp;self) &#45;&gt; MontgomeryPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// We have u = (1+y)/(1&#45;y) = (Z+Y)/(Z&#45;Y). &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The denominator is zero only when y=1, the identity point of &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// the...">
<polygon fill="white" stroke="black" points="2822,-924.23 2696,-924.23 2696,-888.23 2822,-888.23 2822,-924.23"/>
<text text-anchor="middle" x="2759" y="-902.53" font-family="Helvetica,sans-Serif" font-size="14.00">to_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M2822.44,-910.9C2938.28,-918.19 3180.34,-926.48 3242,-874.23 3283.45,-839.1 3227.73,-789.36 3270,-755.23 3366.65,-677.18 3740.71,-662.83 3829,-750.23 3892.73,-813.32 3815.42,-2284.77 3857,-2364.23 3857.16,-2364.53 3857.33,-2364.84 3857.5,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.78,-2367.34 3863.65,-2373.13 3860.32,-2363.07 3854.78,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_projective_niels_vs_basepoint2(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_projective_niels_vs_basepoint2().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn basepoint_plus_basepoint_projective_niels_vs_basepoint2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp = constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp_added = (&amp;bp + &amp;bp.as_projective_niels()).as_extended(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2967,-1842.23 2551,-1842.23 2551,-1806.23 2967,-1806.23 2967,-1842.23"/>
<text text-anchor="middle" x="2759" y="-1820.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_plus_basepoint_projective_niels_vs_basepoint2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_projective_niels_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_projective_niels_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2950.06,-1842.38C2955.9,-1845.03 2961.56,-1847.97 2967,-1851.23 3041.77,-1896.02 3090.37,-1992.46 3110.67,-2039.83"/>
<polygon fill="gray" stroke="gray" points="3107.48,-2041.28 3114.57,-2049.15 3113.94,-2038.58 3107.48,-2041.28"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_projective_extended_round_trip(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_projective_extended_round_trip().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;fn basepoint_projective_extended_round_trip() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;constants::ED25519_BASEPOINT_POINT &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.as_projective() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.as_extended() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="2913.5,-1788.23 2604.5,-1788.23 2604.5,-1752.23 2913.5,-1752.23 2913.5,-1788.23"/>
<text text-anchor="middle" x="2759" y="-1766.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_projective_extended_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_projective_extended_round_trip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_projective_extended_round_trip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2913.69,-1773.99C2932.65,-1779.04 2950.97,-1786.48 2967,-1797.23 3054.85,-1856.1 3098.7,-1982.87 3114.46,-2039.23"/>
<polygon fill="gray" stroke="gray" points="3111.09,-2040.17 3117.08,-2048.9 3117.85,-2038.34 3111.09,-2040.17"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_table_basepoint_function_correct(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_table_basepoint_function_correct().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn basepoint_table_basepoint_function_correct() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp = ED25519_BASEPOINT_TABLE.basepoint(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(bp.compress(), constants::ED25519_BASEPOINT_COMPRESSED); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2918.5,-1734.23 2599.5,-1734.23 2599.5,-1698.23 2918.5,-1698.23 2918.5,-1734.23"/>
<text text-anchor="middle" x="2759" y="-1712.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_table_basepoint_function_correct</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_table_basepoint_function_correct().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_table_basepoint_function_correct().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2918.7,-1720.1C2936.01,-1725.29 2952.55,-1732.74 2967,-1743.23 3068.32,-1816.75 3105.76,-1974.38 3117.19,-2038.86"/>
<polygon fill="gray" stroke="gray" points="3113.8,-2039.8 3118.92,-2049.08 3120.7,-2038.63 3113.8,-2039.8"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/to_affine_niels_clears_denominators(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/to_affine_niels_clears_denominators().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;fn to_affine_niels_clears_denominators() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// construct a point as aB so it has denominators (ie. Z != 1) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aB = ED25519_BASEPOINT_TABLE * &amp;A_SCALAR; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aB_affine_niels ...">
<polygon fill="white" stroke="black" points="2892,-1680.23 2626,-1680.23 2626,-1644.23 2892,-1644.23 2892,-1680.23"/>
<text text-anchor="middle" x="2759" y="-1658.53" font-family="Helvetica,sans-Serif" font-size="14.00">to_affine_niels_clears_denominators</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/to_affine_niels_clears_denominators().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/to_affine_niels_clears_denominators().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2892.08,-1658.81C2918.96,-1663.52 2945.54,-1672.7 2967,-1689.23 3082.13,-1777.89 3111.95,-1966.91 3119.26,-2038.73"/>
<polygon fill="gray" stroke="gray" points="3115.78,-2039.21 3120.21,-2048.84 3122.75,-2038.55 3115.78,-2039.21"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_decompression_compression(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_decompression_compression().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;fn basepoint_decompression_compression() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_X = FieldElement::from_bytes(&amp;BASE_X_COORD_BYTES); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp = constants::ED25519_BASEPOINT_COMPRESSED &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;...">
<polygon fill="white" stroke="black" points="2904.5,-2166.23 2613.5,-2166.23 2613.5,-2130.23 2904.5,-2130.23 2904.5,-2166.23"/>
<text text-anchor="middle" x="2759" y="-2144.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_decompression_compression</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_decompression_compression().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_decompression_compression().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2904.62,-2133.25C2925.68,-2129.94 2946.99,-2125.97 2967,-2121.23 3002.67,-2112.76 3041.64,-2099.11 3071.51,-2087.65"/>
<polygon fill="gray" stroke="gray" points="3072.82,-2090.9 3080.88,-2084.02 3070.29,-2084.37 3072.82,-2090.9"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (is_valid_y_coord, X, Y, Z) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_valid_y_coord.into() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(decompress::step_2(sel...">
<polygon fill="white" stroke="black" points="3173,-2274.23 3072,-2274.23 3072,-2238.23 3173,-2238.23 3173,-2274.23"/>
<text text-anchor="middle" x="3122.5" y="-2252.53" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_decompression_compression().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_decompression_compression().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" d="M2904.66,-2151.04C2926.64,-2155.91 2948.23,-2163.55 2967,-2175.23 2991.5,-2190.46 2979.25,-2212.86 3003,-2229.23 3020.17,-2241.06 3041.73,-2247.78 3061.75,-2251.57"/>
<polygon fill="gray" stroke="gray" points="3061.29,-2255.04 3071.73,-2253.25 3062.45,-2248.14 3061.29,-2255.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/scalar_mul_vs_ed25519py(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/scalar_mul_vs_ed25519py().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;fn scalar_mul_vs_ed25519py() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aB = constants::ED25519_BASEPOINT_POINT * A_SCALAR; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(aB.compress(), A_TIMES_BASEPOINT); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2859,-1626.23 2659,-1626.23 2659,-1590.23 2859,-1590.23 2859,-1626.23"/>
<text text-anchor="middle" x="2759" y="-1604.53" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_mul_vs_ed25519py</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/scalar_mul_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/scalar_mul_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2859.12,-1600.34C2896.46,-1602.34 2937.09,-1611.11 2967,-1635.23 3096.4,-1739.55 3117.5,-1960.86 3120.88,-2039.1"/>
<polygon fill="gray" stroke="gray" points="3117.38,-2039.3 3121.25,-2049.16 3124.38,-2039.04 3117.38,-2039.3"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/scalarmult_extended_point_works_both_ways(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/scalarmult_extended_point_works_both_ways().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;fn scalarmult_extended_point_works_both_ways() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G: EdwardsPoint = constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s: Scalar = A_SCALAR; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P1 = G * s; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P2 = s * G...">
<polygon fill="white" stroke="black" points="2924.5,-1572.23 2593.5,-1572.23 2593.5,-1536.23 2924.5,-1536.23 2924.5,-1572.23"/>
<text text-anchor="middle" x="2759" y="-1550.53" font-family="Helvetica,sans-Serif" font-size="14.00">scalarmult_extended_point_works_both_ways</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/scalarmult_extended_point_works_both_ways().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/scalarmult_extended_point_works_both_ways().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2924.56,-1557.7C2939.98,-1563.15 2954.49,-1570.76 2967,-1581.23 3110.48,-1701.19 3122.37,-1954.09 3122.14,-2038.85"/>
<polygon fill="gray" stroke="gray" points="3118.64,-2038.97 3122.05,-2049 3125.64,-2039.04 3118.64,-2038.97"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_one_vs_basepoint(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_one_vs_basepoint().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn basepoint_mult_one_vs_basepoint() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp = ED25519_BASEPOINT_TABLE * &amp;Scalar::ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed = bp.compress(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(compressed, constants::ED25519_BASEPOINT_...">
<polygon fill="white" stroke="black" points="2885.5,-1518.23 2632.5,-1518.23 2632.5,-1482.23 2885.5,-1482.23 2885.5,-1518.23"/>
<text text-anchor="middle" x="2759" y="-1496.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_mult_one_vs_basepoint</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_one_vs_basepoint().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_one_vs_basepoint().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2885.68,-1493.81C2915.15,-1498.09 2944.48,-1507.83 2967,-1527.23 3047.38,-1596.45 3102.73,-1938.06 3117.54,-2039.06"/>
<polygon fill="gray" stroke="gray" points="3114.09,-2039.72 3118.99,-2049.11 3121.02,-2038.71 3114.09,-2039.72"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]nonspec_map_to_curve(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]nonspec_map_to_curve().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;pub fn nonspec_map_to_curve&lt;D&gt;(bytes: &amp;[u8]) &#45;&gt; EdwardsPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash = D::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hash.update(bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="3212,-962.23 3033,-962.23 3033,-926.23 3212,-926.23 3212,-962.23"/>
<text text-anchor="middle" x="3122.5" y="-940.53" font-family="Helvetica,sans-Serif" font-size="14.00">nonspec_map_to_curve</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode().</title>
<g id="a_node73"><a xlink:title="pub(crate) fn elligator_encode(r_0: &amp;FieldElement) &#45;&gt; MontgomeryPoint { &#160;&#160;&#160;&#160;let one = FieldElement::ONE; &#160;&#160;&#160;&#160;let d_1 = &amp;one + &amp;r_0.square2(); /* 2r^2 */ &#160;&#160;&#160;&#160;&#160;let d = &amp;MONTGOMERY_A_NEG * &amp;(d_1.invert()...">
<polygon fill="white" stroke="black" points="2824,-631.23 2694,-631.23 2694,-595.23 2824,-595.23 2824,-631.23"/>
<text text-anchor="middle" x="2759" y="-609.53" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_encode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]nonspec_map_to_curve().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]nonspec_map_to_curve().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode().</title>
<path fill="none" stroke="gray" d="M3090.1,-926.1C3063.07,-908.9 3025.05,-880.61 3003,-846.23 2969.48,-793.95 3006.75,-758.93 2967,-711.23 2933.09,-670.53 2878.42,-645.65 2833.77,-631.14"/>
<polygon fill="gray" stroke="gray" points="2834.71,-627.77 2824.12,-628.12 2832.61,-634.45 2834.71,-627.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;pub fn to_edwards(&amp;self, sign: u8) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// To decompress the Montgomery u coordinate to an &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// `EdwardsPoint`, we apply the birational map to obtain the &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2806.5,-756.23 2711.5,-756.23 2711.5,-720.23 2806.5,-720.23 2806.5,-756.23"/>
<text text-anchor="middle" x="2759" y="-734.53" font-family="Helvetica,sans-Serif" font-size="14.00">to_edwards</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]nonspec_map_to_curve().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]nonspec_map_to_curve().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<path fill="none" stroke="gray" d="M3089.68,-926.09C3023.95,-888.64 2873.29,-802.79 2800.64,-761.39"/>
<polygon fill="gray" stroke="gray" points="2802.19,-758.24 2791.76,-756.33 2798.72,-764.32 2802.19,-758.24"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_vs_nonprecomputed_multiscalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let static_scalars = (0..128) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| Scalar::random(&amp;mut rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2959,-1464.23 2559,-1464.23 2559,-1428.23 2959,-1428.23 2959,-1464.23"/>
<text text-anchor="middle" x="2759" y="-1442.53" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_vs_nonprecomputed_multiscalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2955.46,-1464.29C2959.47,-1467.02 2963.33,-1469.99 2967,-1473.23 3054.67,-1550.59 3105.57,-1931.85 3118.31,-2039.11"/>
<polygon fill="gray" stroke="gray" points="3114.85,-2039.64 3119.49,-2049.17 3121.81,-2038.83 3114.85,-2039.64"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/extended_point_equality_handles_scaling(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/extended_point_equality_handles_scaling().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn extended_point_equality_handles_scaling() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut two_bytes = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;two_bytes[0] = 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id1 = EdwardsPoint::identity(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id2 = EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2910.5,-1032.23 2607.5,-1032.23 2607.5,-996.23 2910.5,-996.23 2910.5,-1032.23"/>
<text text-anchor="middle" x="2759" y="-1010.53" font-family="Helvetica,sans-Serif" font-size="14.00">extended_point_equality_handles_scaling</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][ConstantTimeEq]ct_eq(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][ConstantTimeEq]ct_eq().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn ct_eq(&amp;self, other: &amp;EdwardsPoint) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// We would like to check that the point (X/Z, Y/Z) is equal to &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// the point (X&#39;/Z&#39;, Y&#39;/Z&#39;) without converting into affine &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3149.5,-1016.23 3095.5,-1016.23 3095.5,-980.23 3149.5,-980.23 3149.5,-1016.23"/>
<text text-anchor="middle" x="3122.5" y="-994.53" font-family="Helvetica,sans-Serif" font-size="14.00">ct_eq</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/extended_point_equality_handles_scaling().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][ConstantTimeEq]ct_eq(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/extended_point_equality_handles_scaling().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M2910.69,-1007.56C2974.85,-1004.72 3044.21,-1001.65 3085.2,-999.83"/>
<polygon fill="gray" stroke="gray" points="3085.4,-1003.33 3095.23,-999.39 3085.09,-996.33 3085.4,-1003.33"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][Debug]fmt(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][Debug]fmt().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;fn fmt(&amp;self, f: &amp;mut core::fmt::Formatter&lt;&#39;_&gt;) &#45;&gt; core::fmt::Result { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; EdwardsPoint{{&#10;tX: {:?},&#10;tY: {:?},&#10;tZ: {:?},&#10;tT: {:?}&#10;}}&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3149.5,-2220.23 3095.5,-2220.23 3095.5,-2184.23 3149.5,-2184.23 3149.5,-2220.23"/>
<text text-anchor="middle" x="3122.5" y="-2198.53" font-family="Helvetica,sans-Serif" font-size="14.00">fmt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_1( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;repr: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;) &#45;&gt; (Choice, FieldElement, FieldElement, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = FieldElement::from_bytes(repr.as_bytes()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = Fi...">
<polygon fill="white" stroke="black" points="3445.5,-2274.23 3383.5,-2274.23 3383.5,-2238.23 3445.5,-2238.23 3445.5,-2274.23"/>
<text text-anchor="middle" x="3414.5" y="-2252.53" font-family="Helvetica,sans-Serif" font-size="14.00">step_1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<path fill="none" stroke="gray" d="M3149.75,-2207.11C3200.62,-2216.59 3312.94,-2237.5 3373.29,-2248.74"/>
<polygon fill="gray" stroke="gray" points="3372.75,-2252.2 3383.22,-2250.59 3374.03,-2245.32 3372.75,-2252.2"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M3125.54,-2049.06C3142.82,-1895.22 3264.24,-816.01 3270,-810.23 3313.95,-766.13 3784.59,-728.59 3829,-772.23 3892.1,-834.22 3815.98,-2285.85 3857,-2364.23 3857.16,-2364.53 3857.33,-2364.84 3857.5,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.78,-2367.34 3863.65,-2373.13 3860.32,-2363.07 3854.78,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M3164.22,-2073.47C3245.91,-2087.8 3432.14,-2129.79 3551,-2229.23 3854.52,-2483.13 3613.37,-2722.87 3726,-3102.23 3731.79,-3121.72 3743.06,-3141.55 3753.06,-3156.71"/>
<polygon fill="gray" stroke="gray" points="3750.22,-3158.76 3758.75,-3165.06 3756.01,-3154.82 3750.22,-3158.76"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn sqrt_ratio_i(u: &amp;FieldElement, v: &amp;FieldElement) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Using the same trick as in ed25519 decoding, we merge the &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// inversion, the square roo...">
<polygon fill="white" stroke="black" points="3685,-3155.23 3592,-3155.23 3592,-3119.23 3685,-3119.23 3685,-3155.23"/>
<text text-anchor="middle" x="3638.5" y="-3133.53" font-family="Helvetica,sans-Serif" font-size="14.00">sqrt_ratio_i</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" d="M3432.55,-2274.47C3462.88,-2308.23 3525.43,-2384.08 3551,-2461.23 3595.89,-2596.65 3517.3,-2977.74 3587,-3102.23 3589.08,-3105.94 3591.74,-3109.35 3594.75,-3112.46"/>
<polygon fill="gray" stroke="gray" points="3592.5,-3115.14 3602.3,-3119.16 3597.14,-3109.9 3592.5,-3115.14"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_tables_unreduced_scalar(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_tables_unreduced_scalar().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn basepoint_tables_unreduced_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = &amp;constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a = crate::scalar::test::LARGEST_UNREDUCED_SCALAR; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let table_radix16 = EdwardsBas...">
<polygon fill="white" stroke="black" points="2890.5,-1410.23 2627.5,-1410.23 2627.5,-1374.23 2890.5,-1374.23 2890.5,-1410.23"/>
<text text-anchor="middle" x="2759" y="-1388.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_tables_unreduced_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_tables_unreduced_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_tables_unreduced_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2890.6,-1385.79C2918.57,-1390.41 2946,-1400.31 2967,-1419.23 3062.01,-1504.8 3108.16,-1925.98 3118.97,-2039.18"/>
<polygon fill="gray" stroke="gray" points="3115.48,-2039.52 3119.9,-2049.15 3122.45,-2038.86 3115.48,-2039.52"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_vs_basepoint2(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_vs_basepoint2().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;fn basepoint_plus_basepoint_vs_basepoint2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp = constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp_added = bp + bp; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(bp_added.compress(), BASE2_CMPRSSD); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2910,-1356.23 2608,-1356.23 2608,-1320.23 2910,-1320.23 2910,-1356.23"/>
<text text-anchor="middle" x="2759" y="-1334.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_plus_basepoint_vs_basepoint2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2910.03,-1335.63C2931.08,-1341.24 2950.97,-1350.53 2967,-1365.23 3069.25,-1458.96 3110.42,-1919.28 3119.49,-2038.82"/>
<polygon fill="gray" stroke="gray" points="3116.01,-2039.29 3120.25,-2049 3123,-2038.77 3116.01,-2039.29"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vartime_vs_consttime(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vartime_vs_consttime().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn multiscalar_mul_vartime_vs_consttime() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let A = A_TIMES_BASEPOINT.decompress().unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result_vartime = EdwardsPoint::vartime_multiscalar_mul( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2901,-2112.23 2617,-2112.23 2617,-2076.23 2901,-2076.23 2901,-2112.23"/>
<text text-anchor="middle" x="2759" y="-2090.53" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_mul_vartime_vs_consttime</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vartime_vs_consttime().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vartime_vs_consttime().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2901.06,-2083.69C2960.86,-2079.22 3026.75,-2074.3 3070.78,-2071.01"/>
<polygon fill="gray" stroke="gray" points="3071.22,-2074.49 3080.93,-2070.26 3070.7,-2067.51 3071.22,-2074.49"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vartime_vs_consttime().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vartime_vs_consttime().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" d="M2901.25,-2091.39C2925.15,-2096.57 2948.26,-2105.78 2967,-2121.23 3006.04,-2153.41 2965.52,-2195.24 3003,-2229.23 3018.99,-2243.72 3041.11,-2250.94 3061.92,-2254.39"/>
<polygon fill="gray" stroke="gray" points="3061.61,-2257.88 3071.99,-2255.8 3062.57,-2250.95 3061.61,-2257.88"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_two_vs_basepoint2(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_two_vs_basepoint2().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;fn basepoint_mult_two_vs_basepoint2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let two = Scalar::from(2u64); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp2 = EdwardsPoint::mul_base(&amp;two); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(bp2.compress(), BASE2_CMPRSSD); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2889.5,-1302.23 2628.5,-1302.23 2628.5,-1266.23 2889.5,-1266.23 2889.5,-1302.23"/>
<text text-anchor="middle" x="2759" y="-1280.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_mult_two_vs_basepoint2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_two_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_two_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2889.7,-1277.08C2918.13,-1281.62 2945.97,-1291.66 2967,-1311.23 3076.59,-1413.21 3112.59,-1913.37 3119.96,-2038.7"/>
<polygon fill="gray" stroke="gray" points="3116.49,-2039.22 3120.55,-2049.01 3123.47,-2038.82 3116.49,-2039.22"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_vs_ed25519py(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_vs_ed25519py().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;fn basepoint_mult_vs_ed25519py() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aB = EdwardsPoint::mul_base(&amp;A_SCALAR); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(aB.compress(), A_TIMES_BASEPOINT); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2875,-1248.23 2643,-1248.23 2643,-1212.23 2875,-1212.23 2875,-1248.23"/>
<text text-anchor="middle" x="2759" y="-1226.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_mult_vs_ed25519py</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_mult_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2875.07,-1221C2908.45,-1224.22 2942.48,-1234.1 2967,-1257.23 3084.02,-1367.57 3114.65,-1908.25 3120.38,-2038.81"/>
<polygon fill="gray" stroke="gray" points="3116.9,-2039.32 3120.82,-2049.16 3123.9,-2039.02 3116.9,-2039.32"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<path fill="none" stroke="gray" d="M3173.02,-2256.23C3229.48,-2256.23 3320.68,-2256.23 3373.05,-2256.23"/>
<polygon fill="gray" stroke="gray" points="3373.29,-2259.73 3383.29,-2256.23 3373.29,-2252.73 3373.29,-2259.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn ct_eq(&amp;self, other: &amp;FieldElement) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_bytes().ct_eq(&amp;other.as_bytes()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3800.5,-3093.23 3746.5,-3093.23 3746.5,-3057.23 3800.5,-3057.23 3800.5,-3093.23"/>
<text text-anchor="middle" x="3773.5" y="-3071.53" font-family="Helvetica,sans-Serif" font-size="14.00">ct_eq</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][ConstantTimeEq]ct_eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][ConstantTimeEq]ct_eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M3133.58,-1016.54C3196.85,-1132.39 3541.23,-1777 3690,-2347.23 3759.41,-2613.26 3770.42,-2949.03 3772.17,-3047.13"/>
<polygon fill="gray" stroke="gray" points="3768.67,-3047.2 3772.33,-3057.15 3775.67,-3047.09 3768.67,-3047.2"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/double_scalar_mul_basepoint_vs_ed25519py(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/double_scalar_mul_basepoint_vs_ed25519py().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn double_scalar_mul_basepoint_vs_ed25519py() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let A = A_TIMES_BASEPOINT.decompress().unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EdwardsPoint::vartime_double_scalar_mul_ba...">
<polygon fill="white" stroke="black" points="2923.5,-2274.23 2594.5,-2274.23 2594.5,-2238.23 2923.5,-2238.23 2923.5,-2274.23"/>
<text text-anchor="middle" x="2759" y="-2252.53" font-family="Helvetica,sans-Serif" font-size="14.00">double_scalar_mul_basepoint_vs_ed25519py</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/double_scalar_mul_basepoint_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/double_scalar_mul_basepoint_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2923.69,-2248.43C2938.97,-2243.75 2953.69,-2237.5 2967,-2229.23 2991.5,-2214 2984.2,-2197.1 3003,-2175.23 3030.01,-2143.79 3065.68,-2112.39 3090.81,-2091.62"/>
<polygon fill="gray" stroke="gray" points="3093.05,-2094.3 3098.57,-2085.26 3088.62,-2088.89 3093.05,-2094.3"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/double_scalar_mul_basepoint_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/double_scalar_mul_basepoint_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" d="M2923.56,-2256.23C2972.78,-2256.23 3023.71,-2256.23 3061.59,-2256.23"/>
<polygon fill="gray" stroke="gray" points="3061.91,-2259.73 3071.91,-2256.23 3061.91,-2252.73 3061.91,-2259.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_double_vs_basepoint2(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_double_vs_basepoint2().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn basepoint_double_vs_basepoint2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;constants::ED25519_BASEPOINT_POINT.double().compress(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BASE2_CMPRSSD &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2881.5,-1194.23 2636.5,-1194.23 2636.5,-1158.23 2881.5,-1158.23 2881.5,-1194.23"/>
<text text-anchor="middle" x="2759" y="-1172.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_double_vs_basepoint2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_double_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_double_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2881.7,-1167.54C2912.97,-1171.37 2944.18,-1181.46 2967,-1203.23 3091.41,-1321.89 3116.54,-1902.67 3120.75,-2038.69"/>
<polygon fill="gray" stroke="gray" points="3117.26,-2039.19 3121.05,-2049.09 3124.26,-2038.99 3117.26,-2039.19"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_affine_niels_vs_basepoint2(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_affine_niels_vs_basepoint2().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;fn basepoint_plus_basepoint_affine_niels_vs_basepoint2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp = constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp_affine_niels = bp.as_affine_niels(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp_added = (&amp;bp + &amp;b...">
<polygon fill="white" stroke="black" points="2952.5,-1140.23 2565.5,-1140.23 2565.5,-1104.23 2952.5,-1104.23 2952.5,-1140.23"/>
<text text-anchor="middle" x="2759" y="-1118.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_plus_basepoint_affine_niels_vs_basepoint2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_affine_niels_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_plus_basepoint_affine_niels_vs_basepoint2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2952.78,-1137.71C2957.8,-1141.12 2962.56,-1144.95 2967,-1149.23 3098.86,-1276.29 3118.34,-1897.74 3121.07,-2038.74"/>
<polygon fill="gray" stroke="gray" points="3117.58,-2039.18 3121.26,-2049.11 3124.58,-2039.05 3117.58,-2039.18"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/compressed_identity(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/compressed_identity().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;fn compressed_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EdwardsPoint::identity().compress(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CompressedEdwardsY::identity() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2839,-2058.23 2679,-2058.23 2679,-2022.23 2839,-2022.23 2839,-2058.23"/>
<text text-anchor="middle" x="2759" y="-2036.53" font-family="Helvetica,sans-Serif" font-size="14.00">compressed_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/compressed_identity().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/compressed_identity().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2839.33,-2046.15C2909.87,-2051.42 3010.86,-2058.96 3070.95,-2063.45"/>
<polygon fill="gray" stroke="gray" points="3070.72,-2066.94 3080.96,-2064.2 3071.25,-2059.96 3070.72,-2066.94"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/test_precomputed_basepoint_mult(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/test_precomputed_basepoint_mult().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn test_precomputed_basepoint_mult() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aB_1 = ED25519_BASEPOINT_TABLE * &amp;A_SCALAR; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aB_2 = constants::ED25519_BASEPOINT_POINT * A_SCALAR; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(aB_1.compress(),...">
<polygon fill="white" stroke="black" points="2886.5,-2004.23 2631.5,-2004.23 2631.5,-1968.23 2886.5,-1968.23 2886.5,-2004.23"/>
<text text-anchor="middle" x="2759" y="-1982.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_precomputed_basepoint_mult</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/test_precomputed_basepoint_mult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/test_precomputed_basepoint_mult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2886.64,-1998.53C2913.37,-2002.3 2941.26,-2007.12 2967,-2013.23 3002.67,-2021.69 3041.64,-2035.34 3071.51,-2046.8"/>
<polygon fill="gray" stroke="gray" points="3070.29,-2050.08 3080.88,-2050.43 3072.82,-2043.55 3070.29,-2050.08"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][`PartialEq&lt;Self&gt;`]eq(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][`PartialEq&lt;Self&gt;`]eq().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;fn eq(&amp;self, other: &amp;EdwardsPoint) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.ct_eq(other).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2786,-978.23 2732,-978.23 2732,-942.23 2786,-942.23 2786,-978.23"/>
<text text-anchor="middle" x="2759" y="-956.53" font-family="Helvetica,sans-Serif" font-size="14.00">eq</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][`PartialEq&lt;Self&gt;`]eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][ConstantTimeEq]ct_eq(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][`PartialEq&lt;Self&gt;`]eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M2786.29,-962.99C2849.94,-969.68 3012.42,-986.76 3085.24,-994.41"/>
<polygon fill="gray" stroke="gray" points="3085,-997.91 3095.31,-995.47 3085.73,-990.95 3085,-997.91"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_tables(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_tables().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;fn basepoint_tables() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = &amp;constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a = A_SCALAR; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let table_radix16 = EdwardsBasepointTableRadix16::create(P); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let table_radix...">
<polygon fill="white" stroke="black" points="2826,-1950.23 2692,-1950.23 2692,-1914.23 2826,-1914.23 2826,-1950.23"/>
<text text-anchor="middle" x="2759" y="-1928.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_tables</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_tables().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint_tables().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2826.31,-1932.87C2867.94,-1935.19 2922.06,-1941.8 2967,-1959.23 3016.65,-1978.48 3065.59,-2016.88 3094.68,-2042.32"/>
<polygon fill="gray" stroke="gray" points="3092.54,-2045.1 3102.34,-2049.12 3097.19,-2039.86 3092.54,-2045.1"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint16_vs_mul_by_pow_2_4(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint16_vs_mul_by_pow_2_4().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;fn basepoint16_vs_mul_by_pow_2_4() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp16 = constants::ED25519_BASEPOINT_POINT.mul_by_pow_2(4); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(bp16.compress(), BASE16_CMPRSSD); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2883.5,-1896.23 2634.5,-1896.23 2634.5,-1860.23 2883.5,-1860.23 2883.5,-1896.23"/>
<text text-anchor="middle" x="2759" y="-1874.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint16_vs_mul_by_pow_2_4</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint16_vs_mul_by_pow_2_4().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge461" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/basepoint16_vs_mul_by_pow_2_4().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2883.68,-1880.57C2912.16,-1884.79 2941.55,-1892.32 2967,-1905.23 3028.83,-1936.59 3079.51,-2002.9 3104.56,-2040.23"/>
<polygon fill="gray" stroke="gray" points="3101.94,-2042.62 3110.36,-2049.06 3107.79,-2038.78 3101.94,-2042.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vs_ed25519py(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vs_ed25519py().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn multiscalar_mul_vs_ed25519py() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let A = A_TIMES_BASEPOINT.decompress().unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = EdwardsPoint::vartime_multiscalar_mul( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[A_SCALAR, B_S...">
<polygon fill="white" stroke="black" points="2876.5,-2220.23 2641.5,-2220.23 2641.5,-2184.23 2876.5,-2184.23 2876.5,-2220.23"/>
<text text-anchor="middle" x="2759" y="-2198.53" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_mul_vs_ed25519py</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge482" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2876.6,-2196.91C2906.76,-2192.88 2938.7,-2186.2 2967,-2175.23 3016.65,-2155.98 3065.59,-2117.57 3094.68,-2092.13"/>
<polygon fill="gray" stroke="gray" points="3097.19,-2094.59 3102.34,-2085.33 3092.54,-2089.35 3097.19,-2094.59"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge483" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime/multiscalar_mul_vs_ed25519py().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" d="M2876.72,-2216.55C2906.21,-2220.42 2937.8,-2224.77 2967,-2229.23 2998.42,-2234.02 3033.31,-2240.05 3061.98,-2245.2"/>
<polygon fill="gray" stroke="gray" points="3061.38,-2248.65 3071.84,-2246.98 3062.62,-2241.76 3061.38,-2248.65"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/elligator_signal_test_vectors(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/elligator_signal_test_vectors().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;fn elligator_signal_test_vectors() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for vector in test_vectors().iter() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = hex::decode(vector[0]).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let output = hex::decode(vector[1]).unwrap()...">
<polygon fill="white" stroke="black" points="2865,-1086.23 2653,-1086.23 2653,-1050.23 2865,-1050.23 2865,-1086.23"/>
<text text-anchor="middle" x="2759" y="-1064.53" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_signal_test_vectors</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/elligator_signal_test_vectors().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]nonspec_map_to_curve(). -->
<g id="edge499" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/elligator_signal_test_vectors().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]nonspec_map_to_curve().</title>
<path fill="none" stroke="gray" d="M2865.22,-1073.48C2900.23,-1070.53 2937.72,-1061.81 2967,-1041.23 2995.62,-1021.11 2975.36,-992.67 3003,-971.23 3009.21,-966.41 3016.13,-962.42 3023.41,-959.12"/>
<polygon fill="gray" stroke="gray" points="3024.85,-962.31 3032.8,-955.3 3022.22,-955.82 3024.85,-962.31"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/elligator_signal_test_vectors().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge500" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/elligator_signal_test_vectors().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2865.03,-1057.76C2901.69,-1059.79 2940.3,-1069.26 2967,-1095.23 3106.24,-1230.63 3120.02,-1892.02 3121.36,-2038.47"/>
<polygon fill="gray" stroke="gray" points="3117.86,-2038.88 3121.44,-2048.85 3124.86,-2038.83 3117.86,-2038.88"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M3678.33,-3119.13C3697,-3110.42 3719.22,-3100.06 3737.38,-3091.6"/>
<polygon fill="gray" stroke="gray" points="3738.89,-3094.76 3746.47,-3087.36 3735.93,-3088.41 3738.89,-3094.76"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M3685.27,-3153.06C3695.18,-3156.48 3705.77,-3160.15 3716.03,-3163.7"/>
<polygon fill="gray" stroke="gray" points="3715.15,-3167.09 3725.74,-3167.05 3717.43,-3160.48 3715.15,-3167.09"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][`PartialEq&lt;Self&gt;`]eq(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][`PartialEq&lt;Self&gt;`]eq().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;fn eq(&amp;self, other: &amp;FieldElement) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.ct_eq(other).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3665.5,-3093.23 3611.5,-3093.23 3611.5,-3057.23 3665.5,-3057.23 3665.5,-3093.23"/>
<text text-anchor="middle" x="3638.5" y="-3071.53" font-family="Helvetica,sans-Serif" font-size="14.00">eq</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][`PartialEq&lt;Self&gt;`]eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][`PartialEq&lt;Self&gt;`]eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M3665.78,-3075.23C3685.91,-3075.23 3713.91,-3075.23 3736.18,-3075.23"/>
<polygon fill="gray" stroke="gray" points="3736.28,-3078.73 3746.28,-3075.23 3736.28,-3071.73 3736.28,-3078.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M3775.91,-3057.06C3783.81,-2956.94 3823.36,-2474.88 3857,-2418.23 3857.18,-2417.93 3857.36,-2417.63 3857.54,-2417.34"/>
<polygon fill="gray" stroke="gray" points="3860.33,-2419.46 3864,-2409.52 3854.94,-2415 3860.33,-2419.46"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/encoding_is_canonical(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/encoding_is_canonical().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;fn encoding_is_canonical() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Encode 1 wrongly as 1 + (2^255 &#45; 19) = 2^255 &#45; 18 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one_encoded_wrongly_bytes: [u8; 32] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, ...">
<polygon fill="white" stroke="black" points="3499.5,-3093.23 3329.5,-3093.23 3329.5,-3057.23 3499.5,-3057.23 3499.5,-3093.23"/>
<text text-anchor="middle" x="3414.5" y="-3071.53" font-family="Helvetica,sans-Serif" font-size="14.00">encoding_is_canonical</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/encoding_is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/encoding_is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M3421.49,-3057.11C3453.86,-2960.25 3610.74,-2504.78 3726,-2418.23 3760.39,-2392.4 3809.96,-2387.18 3846.44,-2387.5"/>
<polygon fill="gray" stroke="gray" points="3846.75,-2391.01 3856.83,-2387.75 3846.91,-2384.01 3846.75,-2391.01"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M3790.98,-3165.18C3803.97,-3149.73 3821.14,-3126.23 3829,-3102.23 3852.68,-3029.94 3820.94,-2485.2 3857,-2418.23 3857.16,-2417.92 3857.33,-2417.62 3857.51,-2417.32"/>
<polygon fill="gray" stroke="gray" points="3860.33,-2419.4 3863.73,-2409.36 3854.81,-2415.09 3860.33,-2419.4"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn is_zero(&amp;self) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let zero = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bytes = self.as_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes.ct_eq(&amp;zero) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3805.5,-3309.23 3741.5,-3309.23 3741.5,-3273.23 3805.5,-3273.23 3805.5,-3309.23"/>
<text text-anchor="middle" x="3773.5" y="-3287.53" font-family="Helvetica,sans-Serif" font-size="14.00">is_zero</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M3791.02,-3273.19C3804.02,-3257.75 3821.2,-3234.25 3829,-3210.23 3856.18,-3126.47 3815.48,-2495.88 3857,-2418.23 3857.16,-2417.92 3857.33,-2417.62 3857.5,-2417.32"/>
<polygon fill="gray" stroke="gray" points="3860.32,-2419.39 3863.71,-2409.35 3854.8,-2415.09 3860.32,-2419.39"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/batch_invert_a_matches_nonbatched(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/batch_invert_a_matches_nonbatched().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_a_matches_nonbatched() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a = FieldElement::from_bytes(&amp;A_BYTES); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ap58 = FieldElement::from_bytes(&amp;AP58_BYTES); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let asq = FieldElement::from_bytes(&amp;A...">
<polygon fill="white" stroke="black" points="3551,-3309.23 3278,-3309.23 3278,-3273.23 3551,-3273.23 3551,-3309.23"/>
<text text-anchor="middle" x="3414.5" y="-3287.53" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_a_matches_nonbatched</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn batch_invert(inputs: &amp;mut [FieldElement]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Montgomery’s Trick and Fast Implementation of Masked AES &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Genelle, Prouff and Quisquater &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Section 3.2 &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3690,-3309.23 3587,-3309.23 3587,-3273.23 3690,-3273.23 3690,-3309.23"/>
<text text-anchor="middle" x="3638.5" y="-3287.53" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/batch_invert_a_matches_nonbatched().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/batch_invert_a_matches_nonbatched().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert().</title>
<path fill="none" stroke="gray" d="M3551.03,-3291.23C3559.92,-3291.23 3568.59,-3291.23 3576.79,-3291.23"/>
<polygon fill="gray" stroke="gray" points="3576.91,-3294.73 3586.91,-3291.23 3576.91,-3287.73 3576.91,-3294.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" d="M3447.31,-3130.37C3482.31,-3131.63 3539.23,-3133.68 3581.69,-3135.21"/>
<polygon fill="gray" stroke="gray" points="3581.76,-3138.72 3591.88,-3135.58 3582.01,-3131.72 3581.76,-3138.72"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/sqrt_ratio_behavior(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/sqrt_ratio_behavior().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;fn sqrt_ratio_behavior() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let zero = FieldElement::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one = FieldElement::ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let i = constants::SQRT_M1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let two = &amp;one + &amp;one; // 2 is nonsquare mod p. &#160;...">
<polygon fill="white" stroke="black" points="3489.5,-3201.23 3339.5,-3201.23 3339.5,-3165.23 3489.5,-3165.23 3489.5,-3201.23"/>
<text text-anchor="middle" x="3414.5" y="-3179.53" font-family="Helvetica,sans-Serif" font-size="14.00">sqrt_ratio_behavior</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/sqrt_ratio_behavior().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge433" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/sqrt_ratio_behavior().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" d="M3489.75,-3168.7C3509.66,-3164.73 3531.16,-3160.38 3551,-3156.23 3560.93,-3154.15 3571.49,-3151.88 3581.7,-3149.65"/>
<polygon fill="gray" stroke="gray" points="3582.73,-3153.01 3591.75,-3147.45 3581.23,-3146.17 3582.73,-3153.01"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/sqrt_ratio_behavior().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge432" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/sqrt_ratio_behavior().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M3489.9,-3183.23C3557.13,-3183.23 3654.63,-3183.23 3715.75,-3183.23"/>
<polygon fill="gray" stroke="gray" points="3715.98,-3186.73 3725.98,-3183.23 3715.98,-3179.73 3715.98,-3186.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero(). -->
<g id="edge453" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero().</title>
<path fill="none" stroke="gray" d="M3690.16,-3291.23C3703.72,-3291.23 3718.2,-3291.23 3731.19,-3291.23"/>
<polygon fill="gray" stroke="gray" points="3731.23,-3294.73 3741.23,-3291.23 3731.23,-3287.73 3731.23,-3294.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/batch_invert_empty(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/batch_invert_empty().</title>
<g id="a_node60"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FieldElement::batch_invert(&amp;mut []); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3491.5,-3255.23 3337.5,-3255.23 3337.5,-3219.23 3491.5,-3219.23 3491.5,-3255.23"/>
<text text-anchor="middle" x="3414.5" y="-3233.53" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert(). -->
<g id="edge471" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert().</title>
<path fill="none" stroke="gray" d="M3491.78,-3250.96C3511.19,-3254.85 3531.94,-3259.37 3551,-3264.23 3559.53,-3266.4 3568.46,-3268.91 3577.21,-3271.51"/>
<polygon fill="gray" stroke="gray" points="3576.4,-3274.92 3586.99,-3274.47 3578.43,-3268.23 3576.4,-3274.92"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_inv(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut out = FieldElement::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Special case: s = 0. &#160;If s is zero, either t = 1 or t = &#45;1. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// If t=1, ...">
<polygon fill="white" stroke="black" points="3465,-8861.23 3364,-8861.23 3364,-8825.23 3465,-8825.23 3465,-8861.23"/>
<text text-anchor="middle" x="3414.5" y="-8839.53" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_inv</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M3465.31,-8846.35C3495.04,-8845.25 3530.83,-8838.13 3551,-8813.23 3586.82,-8769.01 3584.22,-4773.06 3587,-4716.23 3595.49,-4542.41 3673.74,-3322.21 3726,-3156.23 3732.11,-3136.83 3743.39,-3117 3753.31,-3101.82"/>
<polygon fill="gray" stroke="gray" points="3756.26,-3103.7 3758.94,-3093.45 3750.45,-3099.79 3756.26,-3103.7"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M3465.1,-8846.17C3494.74,-8845.01 3530.52,-8837.87 3551,-8813.23 3842.13,-8462.93 3676.63,-5171.51 3690,-4716.23 3694.74,-4554.91 3682.49,-3419.63 3726,-3264.23 3731.48,-3244.65 3742.75,-3224.81 3752.82,-3209.67"/>
<polygon fill="gray" stroke="gray" points="3755.77,-3211.56 3758.56,-3201.34 3750,-3207.59 3755.77,-3211.56"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero().</title>
<path fill="none" stroke="gray" d="M3465.04,-8846.13C3494.67,-8844.94 3530.44,-8837.81 3551,-8813.23 3739.52,-8587.81 3770.08,-3735.55 3772.35,-3319.6"/>
<polygon fill="gray" stroke="gray" points="3775.85,-3319.36 3772.41,-3309.34 3768.85,-3319.32 3775.85,-3319.36"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" d="M3363.62,-8847.92C3325.26,-8848.22 3275.96,-8840.79 3256,-8804.23 3246.62,-8787.04 3246.62,-3182.41 3256,-3165.23 3277.29,-3126.23 3332.34,-3121.58 3371.57,-3123.79"/>
<polygon fill="gray" stroke="gray" points="3371.45,-3127.29 3381.67,-3124.52 3371.95,-3120.3 3371.45,-3127.29"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_constants/test/test_lizard_constants(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_constants/test/test_lizard_constants().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;fn test_lizard_constants() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (_, sqrt_id) = FieldElement::sqrt_ratio_i( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;(&amp;constants::SQRT_M1 * &amp;constants::EDWARDS_D), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;FieldElement::ONE, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a...">
<polygon fill="white" stroke="black" points="3203,-3260.23 3042,-3260.23 3042,-3224.23 3203,-3224.23 3203,-3260.23"/>
<text text-anchor="middle" x="3122.5" y="-3238.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard_constants</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_constants/test/test_lizard_constants().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_constants/test/test_lizard_constants().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" d="M3148.97,-3260.3C3177.06,-3279.03 3224.35,-3307.09 3270,-3318.23 3391.33,-3347.82 3445.35,-3384.83 3551,-3318.23 3565.06,-3309.36 3606.23,-3213.12 3626.28,-3164.7"/>
<polygon fill="gray" stroke="gray" points="3629.53,-3166 3630.1,-3155.42 3623.06,-3163.33 3629.53,-3166"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_constants/test/test_lizard_constants().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_constants/test/test_lizard_constants().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" d="M3158.32,-3224.16C3182.25,-3211.42 3214.54,-3193.6 3242,-3176.23 3254.92,-3168.05 3255.93,-3162.22 3270,-3156.23 3302.5,-3142.36 3342.15,-3135.59 3371.53,-3132.3"/>
<polygon fill="gray" stroke="gray" points="3372.27,-3135.74 3381.86,-3131.24 3371.55,-3128.78 3372.27,-3135.74"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;fn test_lizard_encode_helper(data: &amp;[u8; 16], result: &amp;[u8; 32]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p = RistrettoPoint::lizard_encode::&lt;Sha256&gt;(data); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_bytes = p.compress().to_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(&amp;p_...">
<polygon fill="white" stroke="black" points="2412.5,-8618.23 2217.5,-8618.23 2217.5,-8582.23 2412.5,-8582.23 2412.5,-8618.23"/>
<text text-anchor="middle" x="2315" y="-8596.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard_encode_helper</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_encode&lt;D: Digest&gt;(data: &amp;[u8; 16]) &#45;&gt; RistrettoPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut fe_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let digest...">
<polygon fill="white" stroke="black" points="2814.5,-8724.23 2703.5,-8724.23 2703.5,-8688.23 2814.5,-8688.23 2814.5,-8724.23"/>
<text text-anchor="middle" x="2759" y="-8702.53" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_encode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="gray" d="M2359.14,-8618.29C2404.21,-8636.45 2477.38,-8663.87 2543,-8679.23 2592.68,-8690.85 2650.07,-8697.74 2693.05,-8701.64"/>
<polygon fill="gray" stroke="gray" points="2692.83,-8705.14 2703.1,-8702.53 2693.44,-8698.16 2692.83,-8705.14"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_decode&lt;D: Digest&gt;(&amp;self) &#45;&gt; Option&lt;[u8; 16]&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut result: [u8; 16] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h: [u8; 32] =...">
<polygon fill="white" stroke="black" points="2814.5,-8616.23 2703.5,-8616.23 2703.5,-8580.23 2814.5,-8580.23 2814.5,-8616.23"/>
<text text-anchor="middle" x="2759" y="-8594.53" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_decode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="gray" d="M2412.73,-8599.79C2497.78,-8599.4 2619.21,-8598.85 2693.09,-8598.52"/>
<polygon fill="gray" stroke="gray" points="2693.21,-8602.02 2703.19,-8598.47 2693.18,-8595.02 2693.21,-8602.02"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M2342.85,-8582.21C2388.49,-8549.77 2479.7,-8476.59 2515,-8388.23 2537.53,-8331.82 2502.67,-4060.64 2543,-4015.23 2580.74,-3972.72 2648.82,-3970.99 2698.29,-3976.7"/>
<polygon fill="gray" stroke="gray" points="2697.87,-3980.17 2708.23,-3977.98 2698.76,-3973.23 2697.87,-3980.17"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2386.09,-8582.2C2431.46,-8566.5 2487.11,-8538.75 2515,-8492.23 2546.58,-8439.53 2502.21,-4115.16 2543,-4069.23 2583.08,-4024.09 2657.37,-4024.93 2707.25,-4031.84"/>
<polygon fill="gray" stroke="gray" points="2706.78,-4035.31 2717.19,-4033.34 2707.83,-4028.39 2706.78,-4035.31"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]encode_253_bits(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]encode_253_bits().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;pub fn encode_253_bits(data: &amp;[u8; 32]) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if data.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return None; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let fe = FieldElement::from_bytes(data); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p...">
<polygon fill="white" stroke="black" points="1984,-8672.23 1851,-8672.23 1851,-8636.23 1984,-8636.23 1984,-8672.23"/>
<text text-anchor="middle" x="1917.5" y="-8650.53" font-family="Helvetica,sans-Serif" font-size="14.00">encode_253_bits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_ristretto_flavor(r_0: &amp;FieldElement) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let i = &amp;constants::SQRT_M1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let d = &amp;constants::EDWARDS_D; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one_minus_d_sq = &amp;constants...">
<polygon fill="white" stroke="black" points="3213,-4168.23 3032,-4168.23 3032,-4132.23 3213,-4132.23 3213,-4168.23"/>
<text text-anchor="middle" x="3122.5" y="-4146.53" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]encode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]encode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" d="M1984.12,-8663.97C2014.44,-8668.72 2050.89,-8674.8 2083.5,-8681.23 2289.14,-8721.73 2334.76,-8763.52 2543,-8787.23 2636.62,-8797.88 2899.27,-8852.73 2967,-8787.23 3055.33,-8701.79 3115.68,-4563.6 3121.1,-4178.83"/>
<polygon fill="gray" stroke="gray" points="3124.61,-4178.6 3121.25,-4168.55 3117.61,-4178.5 3124.61,-4178.6"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" d="M1949.74,-8726.23C2090.59,-8804.79 2672.39,-9101.24 2967,-8816.23 3055.89,-8730.23 3115.76,-4564.14 3121.11,-4178.73"/>
<polygon fill="gray" stroke="gray" points="3124.61,-4178.71 3121.25,-4168.67 3117.61,-4178.62 3124.61,-4178.71"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" d="M2814.52,-8716.45C2862.18,-8721.91 2929.47,-8720.53 2967,-8679.23 3128.27,-8501.75 3122.49,-4553.23 3121.58,-4178.69"/>
<polygon fill="gray" stroke="gray" points="3125.08,-4178.64 3121.55,-4168.65 3118.08,-4178.66 3125.08,-4178.64"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;fn to_jacobi_quartic_ristretto(self) &#45;&gt; [JacobiPoint; 4] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x2 = self.0.X.square(); // X^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y2 = self.0.Y.square(); // Y^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y4 = y2.square(); // Y^4 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let z2...">
<polygon fill="white" stroke="black" points="3511.5,-8724.23 3317.5,-8724.23 3317.5,-8688.23 3511.5,-8688.23 3511.5,-8724.23"/>
<text text-anchor="middle" x="3414.5" y="-8702.53" font-family="Helvetica,sans-Serif" font-size="14.00">to_jacobi_quartic_ristretto</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero().</title>
<path fill="none" stroke="gray" d="M3416.69,-8688.2C3438.16,-8362.44 3743.85,-3725.81 3770.63,-3319.6"/>
<polygon fill="gray" stroke="gray" points="3774.13,-3319.76 3771.29,-3309.55 3767.14,-3319.3 3774.13,-3319.76"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" d="M3413.69,-8688.18C3403.02,-8448.61 3289.56,-5870.14 3256,-3786.23 3255.44,-3751.73 3239.47,-3195.51 3256,-3165.23 3277.29,-3126.23 3332.34,-3121.58 3371.57,-3123.79"/>
<polygon fill="gray" stroke="gray" points="3371.45,-3127.29 3381.67,-3124.52 3371.95,-3120.3 3371.45,-3127.29"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M2761.01,-8580.08C2773.56,-8353.95 2900.02,-6059.17 2967,-4203.23 2969.88,-4123.53 2972.1,-2841.74 3003,-2768.23 3123.07,-2482.52 3282.89,-2446.87 3587,-2387.23 3692.62,-2366.51 3721.89,-2367.7 3829,-2378.23 3834.84,-2378.8 3840.93,-2379.65 3846.94,-2380.66"/>
<polygon fill="gray" stroke="gray" points="3846.47,-2384.13 3856.93,-2382.46 3847.72,-2377.24 3846.47,-2384.13"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;pub fn elligator_ristretto_flavor_inverse(&amp;self) &#45;&gt; (u8, [FieldElement; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Elligator2 computes a Point from a FieldElement in two steps: first &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// it computes a (s,t) on the J...">
<polygon fill="white" stroke="black" points="3242,-8724.23 3003,-8724.23 3003,-8688.23 3242,-8688.23 3242,-8724.23"/>
<text text-anchor="middle" x="3122.5" y="-8702.53" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor_inverse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" d="M2814.74,-8600.12C2857.14,-8602.82 2916.89,-8609.38 2967,-8625.23 3010.1,-8638.86 3055.47,-8664.13 3085.8,-8682.83"/>
<polygon fill="gray" stroke="gray" points="3083.99,-8685.83 3094.33,-8688.16 3087.7,-8679.9 3083.99,-8685.83"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;pub fn decode_253_bits(&amp;self) &#45;&gt; (u8, [[u8; 32]; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut ret = [[0u8; 32]; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (mask, fes) = self.elligator_ristretto_flavor_inverse(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2825.5,-8670.23 2692.5,-8670.23 2692.5,-8634.23 2825.5,-8634.23 2825.5,-8670.23"/>
<text text-anchor="middle" x="2759" y="-8648.53" font-family="Helvetica,sans-Serif" font-size="14.00">decode_253_bits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M2825.82,-8663.83C2872.54,-8667.91 2932.81,-8663.93 2967,-8625.23 3020.86,-8564.26 2981.41,-2846.66 3003,-2768.23 3058.66,-2565.97 3185.05,-2563.12 3242,-2361.23 3253.2,-2321.52 3240.55,-905.12 3270,-876.23 3292.28,-854.36 3526.8,-856.5 3551,-876.23 4074.3,-1302.86 3489.93,-1797.55 3857,-2364.23 3857.26,-2364.63 3857.53,-2365.03 3857.81,-2365.43"/>
<polygon fill="gray" stroke="gray" points="3855.36,-2367.94 3864.61,-2373.12 3860.61,-2363.31 3855.36,-2367.94"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" d="M2825.83,-8660.07C2866.56,-8665.11 2919.89,-8672.04 2967,-8679.23 2981.57,-8681.45 2996.89,-8683.94 3011.99,-8686.48"/>
<polygon fill="gray" stroke="gray" points="3011.43,-8689.94 3021.87,-8688.16 3012.6,-8683.04 3011.43,-8689.94"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<path fill="none" stroke="gray" d="M3142.64,-8724.44C3169.1,-8748.57 3219.35,-8790.7 3270,-8813.23 3296.29,-8824.92 3327.35,-8832.13 3353.83,-8836.55"/>
<polygon fill="gray" stroke="gray" points="3353.32,-8840.01 3363.74,-8838.11 3354.41,-8833.09 3353.32,-8840.01"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<path fill="none" stroke="gray" d="M3242.29,-8706.23C3263.8,-8706.23 3286.1,-8706.23 3307.22,-8706.23"/>
<polygon fill="gray" stroke="gray" points="3307.49,-8709.73 3317.49,-8706.23 3307.49,-8702.73 3307.49,-8709.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_elligator_inv(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_elligator_inv().</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;fn test_elligator_inv() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut fe_bytes = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if i == 0 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test for first ...">
<polygon fill="white" stroke="black" points="2826,-8778.23 2692,-8778.23 2692,-8742.23 2826,-8742.23 2826,-8778.23"/>
<text text-anchor="middle" x="2759" y="-8756.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_elligator_inv</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge457" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" d="M2826.29,-8752.32C2866.96,-8747.29 2920.07,-8740.38 2967,-8733.23 2981.57,-8731 2996.89,-8728.51 3011.99,-8725.97"/>
<polygon fill="gray" stroke="gray" points="3012.6,-8729.41 3021.87,-8724.29 3011.43,-8722.51 3012.6,-8729.41"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge456" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" d="M2826,-8771.59C2872.49,-8775.46 2932.4,-8771.32 2967,-8733.23 3048.66,-8643.32 3115.06,-4558.28 3121.06,-4178.46"/>
<polygon fill="gray" stroke="gray" points="3124.56,-4178.37 3121.22,-4168.32 3117.56,-4178.26 3124.56,-4178.37"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;fn test_lizard_encode() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;test_lizard_encode_helper( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xf0, 0xb7, 0xe3, 0x44, 0x84, 0xf7, 0x4c,...">
<polygon fill="white" stroke="black" points="1989.5,-8618.23 1845.5,-8618.23 1845.5,-8582.23 1989.5,-8582.23 1989.5,-8618.23"/>
<text text-anchor="middle" x="1917.5" y="-8596.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard_encode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper(). -->
<g id="edge467" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/test/test_lizard_encode_helper().</title>
<path fill="none" stroke="gray" d="M1989.66,-8600.23C2050.29,-8600.23 2138.29,-8600.23 2207.34,-8600.23"/>
<polygon fill="gray" stroke="gray" points="2207.39,-8603.73 2217.39,-8600.23 2207.39,-8596.73 2207.39,-8603.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M2824.45,-610.44C2941.66,-605.61 3197.58,-596.23 3413.5,-596.23 3413.5,-596.23 3413.5,-596.23 3639.5,-596.23 3724.39,-596.23 3772.36,-556.99 3829,-620.23 3893.65,-692.41 3812.13,-2278.34 3857,-2364.23 3857.16,-2364.53 3857.33,-2364.84 3857.5,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.77,-2367.34 3863.65,-2373.13 3860.32,-2363.07 3854.77,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" d="M2806.37,-631.28C2917.49,-675.61 3193.39,-792.29 3242,-876.23 3281.91,-945.13 3254.19,-2231.19 3270,-2309.23 3288.84,-2402.23 3527.89,-3028 3587,-3102.23 3590,-3105.99 3593.51,-3109.52 3597.26,-3112.77"/>
<polygon fill="gray" stroke="gray" points="3595.19,-3115.59 3605.2,-3119.05 3599.53,-3110.1 3595.19,-3115.59"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_elligator_zero_zero(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_elligator_zero_zero().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn montgomery_elligator_zero_zero() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let zero = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let fe = FieldElement::from_bytes(&amp;zero); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let eg = elligator_encode(&amp;fe); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(eg.to_bytes(), zero...">
<polygon fill="white" stroke="black" points="2435.5,-541.23 2194.5,-541.23 2194.5,-505.23 2435.5,-505.23 2435.5,-541.23"/>
<text text-anchor="middle" x="2315" y="-519.53" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_elligator_zero_zero</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_elligator_zero_zero().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_elligator_zero_zero().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode().</title>
<path fill="none" stroke="gray" d="M2435.61,-524.39C2463.04,-528.65 2491.13,-536.48 2515,-550.23 2532.57,-560.34 2525.38,-576.2 2543,-586.23 2585.38,-610.34 2639.96,-616.96 2683.52,-617.61"/>
<polygon fill="gray" stroke="gray" points="2683.75,-621.12 2693.77,-617.66 2683.79,-614.12 2683.75,-621.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/basepoint_montgomery_to_edwards(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/basepoint_montgomery_to_edwards().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;fn basepoint_montgomery_to_edwards() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// sign bit = 0 =&gt; basepoint &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;constants::ED25519_BASEPOINT_POINT, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;constants::X25519_BASEPOINT.to_edwards(0...">
<polygon fill="white" stroke="black" points="2448,-595.23 2182,-595.23 2182,-559.23 2448,-559.23 2448,-595.23"/>
<text text-anchor="middle" x="2315" y="-573.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_montgomery_to_edwards</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/basepoint_montgomery_to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/basepoint_montgomery_to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<path fill="none" stroke="gray" d="M2448.14,-580.59C2471.48,-585.17 2494.75,-592.57 2515,-604.23 2532.57,-614.34 2527.1,-627.66 2543,-640.23 2590.93,-678.1 2655.84,-705.07 2701.77,-721.01"/>
<polygon fill="gray" stroke="gray" points="2700.67,-724.33 2711.27,-724.24 2702.93,-717.7 2700.67,-724.33"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/basepoint_edwards_to_montgomery(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/basepoint_edwards_to_montgomery().</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;fn basepoint_edwards_to_montgomery() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;constants::ED25519_BASEPOINT_POINT.to_montgomery(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;constants::X25519_BASEPOINT &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2448,-703.23 2182,-703.23 2182,-667.23 2448,-667.23 2448,-703.23"/>
<text text-anchor="middle" x="2315" y="-681.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_edwards_to_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/basepoint_edwards_to_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/basepoint_edwards_to_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M2448.16,-680.51C2472.85,-685.5 2496.63,-695.12 2515,-712.23 2559.52,-753.69 2501.42,-801.8 2543,-846.23 2579.39,-885.11 2638.66,-899.53 2685.77,-904.56"/>
<polygon fill="gray" stroke="gray" points="2685.64,-908.06 2695.92,-905.52 2686.3,-901.09 2685.64,-908.06"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_to_edwards_rejects_twist(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_to_edwards_rejects_twist().</title>
<g id="a_node77"><a xlink:title=" &#160;&#160;&#160;fn montgomery_to_edwards_rejects_twist() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one = FieldElement::ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// u = 2 corresponds to a point on the twist. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let two = MontgomeryPoint((&amp;one + &amp;one).as_bytes()); ...">
<polygon fill="white" stroke="black" points="2457,-325.23 2173,-325.23 2173,-289.23 2457,-289.23 2457,-325.23"/>
<text text-anchor="middle" x="2315" y="-303.53" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_to_edwards_rejects_twist</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_to_edwards_rejects_twist().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_to_edwards_rejects_twist().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M2452.01,-289.21C2473.11,-286.29 2494.65,-283.23 2515,-280.23 2785.05,-240.32 2848.52,-183.23 3121.5,-183.23 3121.5,-183.23 3121.5,-183.23 3639.5,-183.23 3775.76,-183.23 3783.51,-295.79 3829,-424.23 3864.99,-525.83 3807.17,-2268.65 3857,-2364.23 3857.16,-2364.53 3857.33,-2364.84 3857.5,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.77,-2367.34 3863.64,-2373.13 3860.32,-2363.07 3854.77,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_to_edwards_rejects_twist().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_to_edwards_rejects_twist().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<path fill="none" stroke="gray" d="M2457.11,-302.61C2478.94,-308.13 2499.39,-317.92 2515,-334.23 2562.22,-383.55 2503.48,-584.54 2543,-640.23 2579.84,-692.13 2651,-717.12 2701.34,-728.75"/>
<polygon fill="gray" stroke="gray" points="2700.6,-732.17 2711.12,-730.9 2702.11,-725.33 2700.6,-732.17"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/identity_in_different_models(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/identity_in_different_models().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;fn identity_in_different_models() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(EdwardsPoint::identity().to_montgomery() == MontgomeryPoint::identity()); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2420.5,-811.23 2209.5,-811.23 2209.5,-775.23 2420.5,-775.23 2420.5,-811.23"/>
<text text-anchor="middle" x="2315" y="-789.53" font-family="Helvetica,sans-Serif" font-size="14.00">identity_in_different_models</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/identity_in_different_models().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/identity_in_different_models().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M2386.52,-811.26C2468.61,-832.24 2603.45,-866.72 2686.12,-887.85"/>
<polygon fill="gray" stroke="gray" points="2685.38,-891.27 2695.93,-890.36 2687.11,-884.49 2685.38,-891.27"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_bits_be() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Make a random prime&#45;order point P &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_edwards = rand_prime_order_po...">
<polygon fill="white" stroke="black" points="2412.5,-649.23 2217.5,-649.23 2217.5,-613.23 2412.5,-613.23 2412.5,-649.23"/>
<text text-anchor="middle" x="2315" y="-627.53" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_bits_be</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M2412.53,-621.37C2449.15,-622.96 2488.39,-631.96 2515,-658.23 2575.12,-717.57 2487.09,-782.9 2543,-846.23 2578.36,-886.28 2638,-900.6 2685.51,-905.28"/>
<polygon fill="gray" stroke="gray" points="2685.49,-908.79 2695.76,-906.16 2686.09,-901.81 2685.49,-908.79"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;pub fn mul_bits_be(&amp;self, bits: impl Iterator&lt;Item = bool&gt;) &#45;&gt; MontgomeryPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Algorithm 8 of Costello&#45;Smith 2017 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let affine_u = FieldElement::from_bytes(&amp;self.0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="2808.5,-523.23 2709.5,-523.23 2709.5,-487.23 2808.5,-487.23 2808.5,-523.23"/>
<text text-anchor="middle" x="2759" y="-501.53" font-family="Helvetica,sans-Serif" font-size="14.00">mul_bits_be</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be().</title>
<path fill="none" stroke="gray" d="M2412.53,-637.74C2447.97,-635.41 2486.38,-626.78 2515,-604.23 2541.97,-582.98 2515.93,-553.34 2543,-532.23 2586.94,-497.95 2652.02,-494.3 2699.06,-497.31"/>
<polygon fill="gray" stroke="gray" points="2698.87,-500.81 2709.1,-498.07 2699.4,-493.83 2698.87,-500.81"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][ConstantTimeEq]ct_eq(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][ConstantTimeEq]ct_eq().</title>
<g id="a_node80"><a xlink:title=" &#160;&#160;&#160;fn ct_eq(&amp;self, other: &amp;MontgomeryPoint) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let self_fe = FieldElement::from_bytes(&amp;self.0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let other_fe = FieldElement::from_bytes(&amp;other.0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self_fe.ct_eq(&amp;oth...">
<polygon fill="white" stroke="black" points="2786,-577.23 2732,-577.23 2732,-541.23 2786,-541.23 2786,-577.23"/>
<text text-anchor="middle" x="2759" y="-555.53" font-family="Helvetica,sans-Serif" font-size="14.00">ct_eq</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][ConstantTimeEq]ct_eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][ConstantTimeEq]ct_eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M2786.29,-560.13C2901.31,-565.68 3362.9,-604.73 3551,-876.23 3757.46,-1174.23 3697.94,-2136.78 3726,-2498.23 3742.36,-2708.92 3763.22,-2962.8 3770.15,-3046.75"/>
<polygon fill="gray" stroke="gray" points="3766.66,-3047.12 3770.98,-3056.79 3773.64,-3046.54 3766.66,-3047.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[`&amp;MontgomeryPoint`][`Mul&lt;&amp;Scalar&gt;`]mul(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[`&amp;MontgomeryPoint`][`Mul&lt;&amp;Scalar&gt;`]mul().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;fn mul(self, scalar: &amp;Scalar) &#45;&gt; MontgomeryPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// We multiply by the integer representation of the given Scalar. By scalar invariant #1, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// the MSB is 0, so we can skip it. &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2342,-379.23 2288,-379.23 2288,-343.23 2342,-343.23 2342,-379.23"/>
<text text-anchor="middle" x="2315" y="-357.53" font-family="Helvetica,sans-Serif" font-size="14.00">mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[`&amp;MontgomeryPoint`][`Mul&lt;&amp;Scalar&gt;`]mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[`&amp;MontgomeryPoint`][`Mul&lt;&amp;Scalar&gt;`]mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be().</title>
<path fill="none" stroke="gray" d="M2342.07,-356.69C2383.76,-351.02 2465.75,-346.57 2515,-388.23 2546.99,-415.28 2510.88,-451.33 2543,-478.23 2586,-514.22 2651.82,-517.46 2699.3,-513.87"/>
<polygon fill="gray" stroke="gray" points="2699.79,-517.34 2709.44,-512.98 2699.18,-510.37 2699.79,-517.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[ProjectivePoint]as_affine(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[ProjectivePoint]as_affine().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;pub fn as_affine(&amp;self) &#45;&gt; MontgomeryPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let u = &amp;self.U * &amp;self.W.invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MontgomeryPoint(u.as_bytes()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3161.5,-532.23 3083.5,-532.23 3083.5,-496.23 3161.5,-496.23 3161.5,-532.23"/>
<text text-anchor="middle" x="3122.5" y="-510.53" font-family="Helvetica,sans-Serif" font-size="14.00">as_affine</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[ProjectivePoint]as_affine(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[ProjectivePoint]as_affine().</title>
<path fill="none" stroke="gray" d="M2808.75,-506.44C2878.05,-508.16 3004.24,-511.31 3073.26,-513.02"/>
<polygon fill="gray" stroke="gray" points="3073.33,-516.53 3083.42,-513.28 3073.51,-509.53 3073.33,-516.53"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][`PartialEq&lt;Self&gt;`]eq(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][`PartialEq&lt;Self&gt;`]eq().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;fn eq(&amp;self, other: &amp;MontgomeryPoint) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.ct_eq(other).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2342,-433.23 2288,-433.23 2288,-397.23 2342,-397.23 2342,-433.23"/>
<text text-anchor="middle" x="2315" y="-411.53" font-family="Helvetica,sans-Serif" font-size="14.00">eq</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][`PartialEq&lt;Self&gt;`]eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][ConstantTimeEq]ct_eq(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][`PartialEq&lt;Self&gt;`]eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M2342.07,-410.69C2383.76,-405.02 2465.75,-400.57 2515,-442.23 2546.99,-469.28 2510.88,-505.33 2543,-532.23 2593.28,-574.32 2674.77,-571.61 2721.66,-565.59"/>
<polygon fill="gray" stroke="gray" points="2722.26,-569.04 2731.67,-564.19 2721.28,-562.11 2722.26,-569.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;fn montgomery_ladder_matches_edwards_scalarmult() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_edwards = rand_prime_order_point(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2498.5,-757.23 2131.5,-757.23 2131.5,-721.23 2498.5,-721.23 2498.5,-757.23"/>
<text text-anchor="middle" x="2315" y="-735.53" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_ladder_matches_edwards_scalarmult</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M2498.68,-755.03C2504.4,-758.32 2509.87,-762.04 2515,-766.23 2544.18,-790.04 2515.52,-820.46 2543,-846.23 2581.46,-882.28 2639.74,-896.96 2685.93,-902.8"/>
<polygon fill="gray" stroke="gray" points="2685.55,-906.28 2695.89,-903.95 2686.36,-899.32 2685.55,-906.28"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M2806.57,-729.24C2854.57,-717.43 2927.76,-691.8 2967,-640.23 3023.54,-565.91 2932.95,-494.97 3003,-433.23 3140.02,-312.46 3230.86,-414.23 3413.5,-414.23 3413.5,-414.23 3413.5,-414.23 3639.5,-414.23 3738.48,-414.23 3780.12,-445.15 3829,-531.23 3879.29,-619.79 3809.88,-2273.94 3857,-2364.23 3857.16,-2364.53 3857.33,-2364.84 3857.5,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.77,-2367.34 3863.64,-2373.13 3860.32,-2363.07 3854.77,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" d="M2806.81,-754.49C2856.51,-774.55 2932.54,-813.85 2967,-876.23 3003.36,-942.04 2955.33,-2171.07 3003,-2229.23 3017.15,-2246.48 3039.83,-2254.09 3061.58,-2257.07"/>
<polygon fill="gray" stroke="gray" points="3061.49,-2260.58 3071.8,-2258.16 3062.23,-2253.62 3061.49,-2260.58"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M3080.89,-458.26C3054.73,-459.35 3022.13,-465.56 3003,-487.23 2896.86,-607.43 3069.6,-722.99 2967,-846.23 2934.5,-885.26 2878.27,-899.76 2832.61,-904.78"/>
<polygon fill="gray" stroke="gray" points="2832.07,-901.32 2822.45,-905.77 2832.74,-908.29 2832.07,-901.32"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/identity_in_different_coordinates(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/identity_in_different_coordinates().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;fn identity_in_different_coordinates() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id_projective = ProjectivePoint::identity(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id_montgomery = id_projective.as_affine(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(id_montgomery == Montgomer...">
<polygon fill="white" stroke="black" points="2879.5,-469.23 2638.5,-469.23 2638.5,-433.23 2879.5,-433.23 2879.5,-469.23"/>
<text text-anchor="middle" x="2759" y="-447.53" font-family="Helvetica,sans-Serif" font-size="14.00">identity_in_different_coordinates</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/identity_in_different_coordinates().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[ProjectivePoint]as_affine(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/identity_in_different_coordinates().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[ProjectivePoint]as_affine().</title>
<path fill="none" stroke="gray" d="M2879.69,-464.45C2908.39,-468.28 2938.87,-472.89 2967,-478.23 2983.2,-481.3 2986.96,-483.39 3003,-487.23 3026.12,-492.75 3051.84,-498.64 3073.39,-503.51"/>
<polygon fill="gray" stroke="gray" points="3072.77,-506.95 3083.3,-505.73 3074.31,-500.12 3072.77,-506.95"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base_clamped(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base_clamped().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub fn mul_base_clamped(bytes: [u8; 32]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// See reasoning in Self::mul_clamped why it is OK to make an unreduced Scalar here. We &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// note that fixed&#45;base multiplication is...">
<polygon fill="white" stroke="black" points="2833.5,-359.23 2684.5,-359.23 2684.5,-323.23 2833.5,-323.23 2833.5,-359.23"/>
<text text-anchor="middle" x="2759" y="-337.53" font-family="Helvetica,sans-Serif" font-size="14.00">mul_base_clamped</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base_clamped().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base_clamped().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base().</title>
<path fill="none" stroke="gray" d="M2814.9,-359.3C2884.65,-382.26 3004.04,-421.56 3071.41,-443.74"/>
<polygon fill="gray" stroke="gray" points="3070.37,-447.08 3080.96,-446.88 3072.56,-440.43 3070.37,-447.08"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_elligator_correct(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_elligator_correct().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;fn montgomery_elligator_correct() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bytes: Vec&lt;u8&gt; = (0u8..32u8).collect(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bits_in: [u8; 32] = (&amp;bytes[..]).try_into().expect(&#39; Range invariant broken&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let fe ...">
<polygon fill="white" stroke="black" points="2426.5,-487.23 2203.5,-487.23 2203.5,-451.23 2426.5,-451.23 2426.5,-487.23"/>
<text text-anchor="middle" x="2315" y="-465.53" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_elligator_correct</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_elligator_correct().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode(). -->
<g id="edge438" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_elligator_correct().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/elligator_encode().</title>
<path fill="none" stroke="gray" d="M2426.73,-462.83C2458.27,-466.3 2490.64,-475.63 2515,-496.23 2546.99,-523.28 2510.88,-559.33 2543,-586.23 2581.48,-618.44 2638.24,-624.42 2683.78,-622.75"/>
<polygon fill="gray" stroke="gray" points="2684.1,-626.23 2693.91,-622.24 2683.75,-619.24 2684.1,-626.23"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][Hash]hash(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][Hash]hash().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Do a round trip through a `FieldElement`. `as_bytes` is guaranteed to give a canonical &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// 32&#45;byte encoding &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let canonical_bytes...">
<polygon fill="white" stroke="black" points="2342,-163.23 2288,-163.23 2288,-127.23 2342,-127.23 2342,-163.23"/>
<text text-anchor="middle" x="2315" y="-141.53" font-family="Helvetica,sans-Serif" font-size="14.00">hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][Hash]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge477" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint][Hash]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M2342.08,-145.23C2442.64,-145.23 2814.89,-145.23 3121.5,-145.23 3121.5,-145.23 3121.5,-145.23 3639.5,-145.23 3727.71,-145.23 3776.25,-133.52 3829,-204.23 3900.76,-300.42 3801.6,-2257.77 3857,-2364.23 3857.16,-2364.53 3857.32,-2364.84 3857.49,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.77,-2367.34 3863.64,-2373.14 3860.32,-2363.07 3854.77,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[ProjectivePoint]as_affine().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge478" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[ProjectivePoint]as_affine().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M3161.79,-511.62C3295.52,-503.43 3738.57,-484.22 3829,-582.23 3896.14,-654.99 3811.17,-2276.46 3857,-2364.23 3857.16,-2364.53 3857.33,-2364.84 3857.5,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.77,-2367.34 3863.65,-2373.13 3860.32,-2363.07 3854.77,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_bits_be_twist() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Make a random point P on the curve or its twist &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_montgomer...">
<polygon fill="white" stroke="black" points="2432.5,-271.23 2197.5,-271.23 2197.5,-235.23 2432.5,-235.23 2432.5,-271.23"/>
<text text-anchor="middle" x="2315" y="-249.53" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_bits_be_twist</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be(). -->
<g id="edge496" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_bits_be().</title>
<path fill="none" stroke="gray" d="M2432.51,-244.9C2462.93,-248.64 2493.24,-258.59 2515,-280.23 2578.02,-342.89 2479.67,-415.87 2543,-478.23 2583.42,-518.02 2650.81,-520.31 2699.37,-515.46"/>
<polygon fill="gray" stroke="gray" points="2699.89,-518.92 2709.44,-514.33 2699.11,-511.97 2699.89,-518.92"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/mul_base_clamped(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/mul_base_clamped().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn mul_base_clamped() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test agreement on a large integer. Even after clamping, this is not reduced mod l. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_bytes = [0xff; 32]; ...">
<polygon fill="white" stroke="black" points="2389.5,-217.23 2240.5,-217.23 2240.5,-181.23 2389.5,-181.23 2389.5,-217.23"/>
<text text-anchor="middle" x="2315" y="-195.53" font-family="Helvetica,sans-Serif" font-size="14.00">mul_base_clamped</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/mul_base_clamped().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base_clamped(). -->
<g id="edge497" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/mul_base_clamped().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]mul_base_clamped().</title>
<path fill="none" stroke="gray" d="M2389.91,-203.82C2427.89,-207.54 2474.56,-214.23 2515,-226.23 2590.51,-248.63 2672.06,-291.47 2718.87,-318.06"/>
<polygon fill="gray" stroke="gray" points="2717.34,-321.22 2727.76,-323.16 2720.82,-315.15 2717.34,-321.22"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/encodings_of_small_multiples_of_basepoint(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/encodings_of_small_multiples_of_basepoint().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;fn encodings_of_small_multiples_of_basepoint() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Table of encodings of i*basepoint &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Generated using ristretto.sage &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CompressedRistretto([...">
<polygon fill="white" stroke="black" points="2473.5,-3878.23 2156.5,-3878.23 2156.5,-3842.23 2473.5,-3842.23 2473.5,-3878.23"/>
<text text-anchor="middle" x="2315" y="-3856.53" font-family="Helvetica,sans-Serif" font-size="14.00">encodings_of_small_multiples_of_basepoint</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/encodings_of_small_multiples_of_basepoint().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/encodings_of_small_multiples_of_basepoint().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2473.84,-3867.08C2489.01,-3872.95 2503.13,-3881.1 2515,-3892.23 2555.9,-3930.57 2501.44,-3977.59 2543,-4015.23 2587.12,-4055.19 2658.85,-4056.06 2707.19,-4050.9"/>
<polygon fill="gray" stroke="gray" points="2707.62,-4054.38 2717.14,-4049.72 2706.79,-4047.43 2707.62,-4054.38"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes(bytes: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This follows the one&#45;way map construction from the Ristretto RFC: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://datatracker.ietf.org/doc/html/draft&#45;...">
<polygon fill="white" stroke="black" points="2836.5,-4168.23 2681.5,-4168.23 2681.5,-4132.23 2836.5,-4132.23 2836.5,-4168.23"/>
<text text-anchor="middle" x="2759" y="-4146.53" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" d="M2836.66,-4150.23C2890.53,-4150.23 2963.1,-4150.23 3021.51,-4150.23"/>
<polygon fill="gray" stroke="gray" points="3021.87,-4153.73 3031.87,-4150.23 3021.87,-4146.73 3021.87,-4153.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][`PartialEq&lt;Self&gt;`]eq(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][`PartialEq&lt;Self&gt;`]eq().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;fn eq(&amp;self, other: &amp;RistrettoPoint) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.ct_eq(other).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1944.5,-3556.23 1890.5,-3556.23 1890.5,-3520.23 1944.5,-3520.23 1944.5,-3556.23"/>
<text text-anchor="middle" x="1917.5" y="-3534.53" font-family="Helvetica,sans-Serif" font-size="14.00">eq</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][ConstantTimeEq]ct_eq(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][ConstantTimeEq]ct_eq().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;fn ct_eq(&amp;self, other: &amp;RistrettoPoint) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let X1Y2 = &amp;self.0.X * &amp;other.0.Y; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y1X2 = &amp;self.0.Y * &amp;other.0.X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let X1X2 = &amp;self.0.X * &amp;other.0.X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y1Y...">
<polygon fill="white" stroke="black" points="2342,-3500.23 2288,-3500.23 2288,-3464.23 2342,-3464.23 2342,-3500.23"/>
<text text-anchor="middle" x="2315" y="-3478.53" font-family="Helvetica,sans-Serif" font-size="14.00">ct_eq</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][`PartialEq&lt;Self&gt;`]eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][ConstantTimeEq]ct_eq(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][`PartialEq&lt;Self&gt;`]eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M1944.55,-3534.28C1982.16,-3528.61 2053.88,-3517.88 2115,-3509.23 2171.88,-3501.17 2237.98,-3492.3 2277.87,-3487"/>
<polygon fill="gray" stroke="gray" points="2278.46,-3490.45 2287.91,-3485.67 2277.54,-3483.51 2278.46,-3490.45"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/compress_id(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/compress_id().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;fn compress_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = RistrettoPoint::identity(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(id.compress(), CompressedRistretto::identity()); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2366.5,-4006.23 2263.5,-4006.23 2263.5,-3970.23 2366.5,-3970.23 2366.5,-4006.23"/>
<text text-anchor="middle" x="2315" y="-3984.53" font-family="Helvetica,sans-Serif" font-size="14.00">compress_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/compress_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/compress_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2366.7,-3994.42C2451.79,-4004.82 2622.34,-4025.65 2707.38,-4036.04"/>
<polygon fill="gray" stroke="gray" points="2706.96,-4039.52 2717.31,-4037.25 2707.81,-4032.57 2706.96,-4039.52"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/one_way_map(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/one_way_map().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;fn one_way_map() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// These inputs are from &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://datatracker.ietf.org/doc/html/draft&#45;irtf&#45;cfrg&#45;ristretto255&#45;decaf448&#45;04#appendix&#45;A.3 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let test_vectors: &amp;[([u8; 64], Co...">
<polygon fill="white" stroke="black" points="2372,-4060.23 2258,-4060.23 2258,-4024.23 2372,-4024.23 2372,-4060.23"/>
<text text-anchor="middle" x="2315" y="-4038.53" font-family="Helvetica,sans-Serif" font-size="14.00">one_way_map</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/one_way_map().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/one_way_map().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="gray" d="M2372.04,-4036.65C2414.91,-4035.29 2473.53,-4040.01 2515,-4069.23 2537.1,-4084.79 2520.82,-4107.77 2543,-4123.23 2579.85,-4148.91 2629.1,-4156.51 2671.16,-4157.31"/>
<polygon fill="gray" stroke="gray" points="2671.39,-4160.81 2681.41,-4157.37 2671.43,-4153.81 2671.39,-4160.81"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/one_way_map().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/one_way_map().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2372.43,-4042.23C2459.14,-4042.23 2623.81,-4042.23 2707.08,-4042.23"/>
<polygon fill="gray" stroke="gray" points="2707.3,-4045.73 2717.3,-4042.23 2707.3,-4038.73 2707.3,-4045.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][Debug]fmt(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][Debug]fmt().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;fn fmt(&amp;self, f: &amp;mut core::fmt::Formatter&lt;&#39;_&gt;) &#45;&gt; core::fmt::Result { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let coset = self.coset4(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; RistrettoPoint: coset &#10;{:?}&#10;{:?}&#10;{:?}&#10;{:?...">
<polygon fill="white" stroke="black" points="2786,-4114.23 2732,-4114.23 2732,-4078.23 2786,-4078.23 2786,-4114.23"/>
<text text-anchor="middle" x="2759" y="-4092.53" font-family="Helvetica,sans-Serif" font-size="14.00">fmt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_2(s: FieldElement) &#45;&gt; (Choice, Choice, Choice, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Step 2. &#160;Compute (X:Y:Z:T). &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one = FieldElement::ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ss = s.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3153.5,-4114.23 3091.5,-4114.23 3091.5,-4078.23 3153.5,-4078.23 3153.5,-4114.23"/>
<text text-anchor="middle" x="3122.5" y="-4092.53" font-family="Helvetica,sans-Serif" font-size="14.00">step_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<path fill="none" stroke="gray" d="M2786.29,-4096.23C2848.7,-4096.23 3006.13,-4096.23 3080.89,-4096.23"/>
<polygon fill="gray" stroke="gray" points="3081.29,-4099.73 3091.29,-4096.23 3081.29,-4092.73 3081.29,-4099.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_1(repr: &amp;CompressedRistretto) &#45;&gt; (Choice, Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Step 1. Check s for validity: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// 1.a) s must be 32 bytes (we get this from the type system) ...">
<polygon fill="white" stroke="black" points="3153.5,-4033.23 3091.5,-4033.23 3091.5,-3997.23 3153.5,-3997.23 3153.5,-4033.23"/>
<text text-anchor="middle" x="3122.5" y="-4011.53" font-family="Helvetica,sans-Serif" font-size="14.00">step_1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1().</title>
<path fill="none" stroke="gray" d="M2786.13,-4094.56C2825.7,-4091.64 2903,-4084.41 2967,-4069.23 3006.91,-4059.75 3050.95,-4043.79 3081.76,-4031.67"/>
<polygon fill="gray" stroke="gray" points="3083.28,-4034.83 3091.28,-4027.88 3080.69,-4028.33 3083.28,-4034.83"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_hash(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_hash().</title>
<g id="a_node100"><a xlink:title=" &#160;&#160;&#160;pub fn from_hash&lt;D&gt;(hash: D) &#45;&gt; RistrettoPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// dealing with generic arrays is clumsy, until const generics land &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="2359.5,-4168.23 2270.5,-4168.23 2270.5,-4132.23 2359.5,-4132.23 2359.5,-4168.23"/>
<text text-anchor="middle" x="2315" y="-4146.53" font-family="Helvetica,sans-Serif" font-size="14.00">from_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="gray" d="M2359.59,-4150.23C2431.77,-4150.23 2577.44,-4150.23 2671.22,-4150.23"/>
<polygon fill="gray" stroke="gray" points="2671.26,-4153.73 2681.26,-4150.23 2671.26,-4146.73 2671.26,-4153.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/elligator_vs_ristretto_sage(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/elligator_vs_ristretto_sage().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;fn elligator_vs_ristretto_sage() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test vectors extracted from ristretto.sage. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Notice that all of the byte sequences have bit 255 set to 0; this is because &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2413.5,-3716.23 2216.5,-3716.23 2216.5,-3680.23 2413.5,-3680.23 2413.5,-3716.23"/>
<text text-anchor="middle" x="2315" y="-3694.53" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_vs_ristretto_sage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/elligator_vs_ristretto_sage().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/elligator_vs_ristretto_sage().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" d="M2413.64,-3704.67C2446.4,-3708.61 2482.77,-3714.97 2515,-3725.23 2730.96,-3793.93 2829.11,-3781.38 2967,-3961.23 3011.88,-4019.76 2950.99,-4070.93 3003,-4123.23 3008.7,-4128.96 3015.35,-4133.58 3022.54,-4137.29"/>
<polygon fill="gray" stroke="gray" points="3021.34,-4140.6 3031.9,-4141.53 3024.23,-4134.22 3021.34,-4140.6"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/elligator_vs_ristretto_sage().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/elligator_vs_ristretto_sage().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2413.74,-3687.71C2450.31,-3689.26 2489.2,-3698.41 2515,-3725.23 2559.89,-3771.88 2497.88,-3968.79 2543,-4015.23 2584.85,-4058.3 2658.12,-4058.15 2707.34,-4051.94"/>
<polygon fill="gray" stroke="gray" points="2708.04,-4055.37 2717.46,-4050.53 2707.07,-4048.44 2708.04,-4055.37"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][ConstantTimeEq]ct_eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][ConstantTimeEq]ct_eq().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" d="M2342.3,-3484.97C2442.63,-3493.81 2803.77,-3510.45 2967,-3313.23 3044.39,-3219.72 2914.39,-2851.17 3003,-2768.23 3182.09,-2600.58 3333.32,-2721.1 3551,-2834.23 3648.75,-2885.03 3725.48,-2997.09 3756.96,-3048.5"/>
<polygon fill="gray" stroke="gray" points="3753.98,-3050.32 3762.14,-3057.08 3759.97,-3046.71 3753.98,-3050.32"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_negative_s_fails(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_negative_s_fails().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;fn decompress_negative_s_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// constants::d is neg, so decompression should fail as |d| != d. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bad_compressed = CompressedRistretto(constants::EDWARDS_D.as_bytes()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2423.5,-3554.23 2206.5,-3554.23 2206.5,-3518.23 2423.5,-3518.23 2423.5,-3554.23"/>
<text text-anchor="middle" x="2315" y="-3532.53" font-family="Helvetica,sans-Serif" font-size="14.00">decompress_negative_s_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_negative_s_fails().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_negative_s_fails().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M2423.74,-3547.36C2457.75,-3544.85 2492.33,-3534.9 2515,-3509.23 2563.41,-3454.4 2492.12,-928.77 2543,-876.23 2597.08,-820.38 3183.54,-897.47 3242,-846.23 3295.96,-798.93 3215.04,-733.35 3270,-687.23 3365.19,-607.34 3745.2,-610.46 3829,-702.23 3891.27,-770.42 3814.21,-2282.39 3857,-2364.23 3857.16,-2364.53 3857.33,-2364.84 3857.5,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.78,-2367.34 3863.65,-2373.13 3860.32,-2363.07 3854.78,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_negative_s_fails().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_negative_s_fails().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M2423.62,-3533.2C2455.22,-3536.77 2488.4,-3545.3 2515,-3563.23 2662.07,-3662.37 2730.84,-3882.29 2751.24,-3960.2"/>
<polygon fill="gray" stroke="gray" points="2747.93,-3961.4 2753.8,-3970.22 2754.71,-3959.67 2747.93,-3961.4"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().</title>
<g id="a_node104"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_vs_nonprecomputed_multiscalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let static_scalars = (0..128) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| Scalar::random(&amp;mut rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2515,-3952.23 2115,-3952.23 2115,-3916.23 2515,-3916.23 2515,-3952.23"/>
<text text-anchor="middle" x="2315" y="-3930.53" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_vs_nonprecomputed_multiscalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2500.74,-3952.45C2505.67,-3955.1 2510.44,-3958.01 2515,-3961.23 2537.1,-3976.79 2520.82,-3999.77 2543,-4015.23 2591.06,-4048.72 2660.21,-4051.46 2707,-4048.46"/>
<polygon fill="gray" stroke="gray" points="2707.51,-4051.93 2717.22,-4047.69 2706.98,-4044.95 2707.51,-4051.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[BatchCompressState][`From&lt;&amp;RistrettoPoint&gt;`]from(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[BatchCompressState][`From&lt;&amp;RistrettoPoint&gt;`]from().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn from(P: &amp;&#39;a RistrettoPoint) &#45;&gt; BatchCompressState { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let XX = P.0.X.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let YY = P.0.Y.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ZZ = P.0.Z.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1944.5,-3502.23 1890.5,-3502.23 1890.5,-3466.23 1944.5,-3466.23 1944.5,-3502.23"/>
<text text-anchor="middle" x="1917.5" y="-3480.53" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[BatchCompressState][`From&lt;&amp;RistrettoPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[BatchCompressState][`From&lt;&amp;RistrettoPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M1944.8,-3483.37C1982.73,-3480.55 2051.72,-3469.14 2083.5,-3424.23 2136.59,-3349.19 2050.5,-180.72 2115,-115.23 2315.58,88.46 2472.13,-99.23 2758,-99.23 2758,-99.23 2758,-99.23 3639.5,-99.23 3725.86,-99.23 3774.69,-75.08 3829,-142.23 3867.82,-190.22 3828.51,-2309.47 3857,-2364.23 3857.16,-2364.53 3857.32,-2364.84 3857.49,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.77,-2367.34 3863.64,-2373.14 3860.32,-2363.07 3854.77,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[BatchCompressState][`From&lt;&amp;RistrettoPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[BatchCompressState][`From&lt;&amp;RistrettoPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M1944.6,-3485.65C1979.55,-3486.23 2041.97,-3482.43 2083.5,-3452.23 2106.91,-3435.2 2091.4,-3411.98 2115,-3395.23 2428.23,-3172.9 2708.46,-3534.3 2967,-3250.23 3039.3,-3170.79 2924.27,-2841.29 3003,-2768.23 3182.81,-2601.35 3333.32,-2721.1 3551,-2834.23 3625.79,-2873.09 3646.81,-2890.85 3690,-2963.23 3722.7,-3018.02 3701.9,-3043.14 3726,-3102.23 3733.73,-3121.18 3745.14,-3141.13 3754.73,-3156.49"/>
<polygon fill="gray" stroke="gray" points="3751.8,-3158.41 3760.12,-3164.97 3757.7,-3154.65 3751.8,-3158.41"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[BatchCompressState][`From&lt;&amp;RistrettoPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[BatchCompressState][`From&lt;&amp;RistrettoPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]batch_invert().</title>
<path fill="none" stroke="gray" d="M1944.76,-3479.89C2068.3,-3459.61 2592.48,-3375.23 2758,-3375.23 2758,-3375.23 2758,-3375.23 3123.5,-3375.23 3313.8,-3375.23 3371.05,-3413.12 3551,-3351.23 3572.93,-3343.68 3594.37,-3328.88 3610.42,-3315.86"/>
<polygon fill="gray" stroke="gray" points="3612.87,-3318.37 3618.29,-3309.27 3608.38,-3313 3612.87,-3318.37"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;fn random_roundtrip() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = RistrettoPoint::mul_base(&amp;Scalar::random(&amp;mut rng)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed_P = P.compress();...">
<polygon fill="white" stroke="black" points="2386,-3770.23 2244,-3770.23 2244,-3734.23 2386,-3734.23 2386,-3770.23"/>
<text text-anchor="middle" x="2315" y="-3748.53" font-family="Helvetica,sans-Serif" font-size="14.00">random_roundtrip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M2386.41,-3746.88C2427.19,-3747.21 2477.67,-3753.82 2515,-3779.23 2536.06,-3793.56 2526.16,-3810.12 2543,-3829.23 2594.21,-3887.35 2670.02,-3937.26 2716.59,-3964.97"/>
<polygon fill="gray" stroke="gray" points="2715.1,-3968.15 2725.5,-3970.21 2718.65,-3962.12 2715.1,-3968.15"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2386.19,-3742.08C2429.25,-3740.08 2482.24,-3745.91 2515,-3779.23 2589.06,-3854.54 2468.57,-3940.28 2543,-4015.23 2585.2,-4057.71 2658.04,-4057.8 2707.11,-4051.79"/>
<polygon fill="gray" stroke="gray" points="2707.76,-4055.24 2717.2,-4050.43 2706.82,-4048.3 2707.76,-4055.24"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/basepoint_roundtrip(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/basepoint_roundtrip().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;fn basepoint_roundtrip() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp_compressed_ristretto = constants::RISTRETTO_BASEPOINT_POINT.compress(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bp_recaf = bp_compressed_ristretto.decompress().unwrap().0; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//...">
<polygon fill="white" stroke="black" points="2393,-3662.23 2237,-3662.23 2237,-3626.23 2393,-3626.23 2393,-3662.23"/>
<text text-anchor="middle" x="2315" y="-3640.53" font-family="Helvetica,sans-Serif" font-size="14.00">basepoint_roundtrip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/basepoint_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/basepoint_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2393.09,-3644.77C2535.83,-3641.04 2838.44,-3609.81 2967,-3419.23 3044.33,-3304.59 2945.31,-2300.9 3003,-2175.23 3019.45,-2139.39 3053.98,-2110.14 3081.55,-2091.16"/>
<polygon fill="gray" stroke="gray" points="3083.85,-2093.83 3090.22,-2085.37 3079.96,-2088.01 3083.85,-2093.83"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/basepoint_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/basepoint_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M2393.21,-3641.17C2432.06,-3642.86 2478.51,-3650.05 2515,-3671.23 2635.69,-3741.27 2716.79,-3897.07 2745.97,-3960.53"/>
<polygon fill="gray" stroke="gray" points="2742.89,-3962.22 2750.2,-3969.89 2749.27,-3959.34 2742.89,-3962.22"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/basepoint_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/basepoint_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2393.46,-3633.4C2435.33,-3632.19 2484.54,-3639.09 2515,-3671.23 2567.76,-3726.89 2489.97,-3959.82 2543,-4015.23 2584.53,-4058.61 2657.87,-4058.39 2707.2,-4052.07"/>
<polygon fill="gray" stroke="gray" points="2707.93,-4055.5 2717.34,-4050.64 2706.95,-4048.57 2707.93,-4055.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M3153.66,-4093.63C3181.39,-4093.09 3221.27,-4097.39 3242,-4123.23 3283.75,-4175.25 3222.69,-8879.19 3270,-8926.23 3314.28,-8970.25 3504.24,-8967.61 3551,-8926.23 3646.3,-8841.87 3681.76,-7916.23 3690,-7789.23 3698.14,-7663.79 3693.13,-3385.55 3726,-3264.23 3731.32,-3244.6 3742.58,-3224.77 3752.69,-3209.64"/>
<polygon fill="gray" stroke="gray" points="3755.64,-3211.53 3758.46,-3201.31 3749.89,-3207.54 3755.64,-3211.53"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero().</title>
<path fill="none" stroke="gray" d="M3153.66,-4093.62C3181.39,-4093.09 3221.27,-4097.39 3242,-4123.23 3284.07,-4175.64 3222.34,-8914.84 3270,-8962.23 3358.56,-9050.28 3455.89,-9043.17 3551,-8962.23 3845.19,-8711.86 3655.71,-8489.01 3690,-8104.23 3780.12,-7092.9 3773.49,-3665.3 3772.58,-3319.43"/>
<polygon fill="gray" stroke="gray" points="3776.08,-3319.25 3772.55,-3309.26 3769.08,-3319.27 3776.08,-3319.25"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" d="M3153.6,-4091.62C3181.7,-4085.56 3222.2,-4071.96 3242,-4042.23 3296.59,-3960.24 3205.93,-3231.03 3270,-3156.23 3294.4,-3127.73 3338.54,-3123.16 3371.45,-3124.37"/>
<polygon fill="gray" stroke="gray" points="3371.52,-3127.88 3381.7,-3124.95 3371.91,-3120.89 3371.52,-3127.88"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" d="M3213.12,-4139.8C3223.62,-4135.8 3233.58,-4130.42 3242,-4123.23 3247.05,-4118.92 3562.8,-3325.11 3626.41,-3165.13"/>
<polygon fill="gray" stroke="gray" points="3629.79,-3166.11 3630.23,-3155.52 3623.28,-3163.52 3629.79,-3166.11"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M3123.97,-4168.51C3132.23,-4489.64 3246.9,-8933.82 3270,-8956.23 3359.65,-9043.18 3453.59,-9034.38 3551,-8956.23 3773.3,-8777.88 3657.92,-8613.41 3690,-8330.23 3721.68,-8050.56 3652.52,-3535.92 3726,-3264.23 3731.31,-3244.6 3742.57,-3224.77 3752.68,-3209.64"/>
<polygon fill="gray" stroke="gray" points="3755.63,-3211.52 3758.45,-3201.31 3749.88,-3207.54 3755.63,-3211.52"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]random(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]random().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;pub fn random&lt;R: CryptoRngCore + ?Sized&gt;(rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut uniform_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.fill_bytes(&amp;mut uniform_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;...">
<polygon fill="white" stroke="black" points="2350.5,-4114.23 2279.5,-4114.23 2279.5,-4078.23 2350.5,-4078.23 2350.5,-4114.23"/>
<text text-anchor="middle" x="2315" y="-4092.53" font-family="Helvetica,sans-Serif" font-size="14.00">random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="gray" d="M2350.68,-4100.46C2419.08,-4108.82 2573.21,-4127.65 2671.03,-4139.6"/>
<polygon fill="gray" stroke="gray" points="2670.85,-4143.1 2681.2,-4140.84 2671.7,-4136.16 2670.85,-4143.1"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M3126.82,-3997.19C3141.7,-3915.99 3203.2,-3576.01 3242,-3295.23 3257.31,-3184.47 3236.68,-3151.95 3270,-3045.23 3358.6,-2761.45 3375.13,-2664.77 3587,-2456.23 3666.97,-2377.51 3716.94,-2378.26 3829,-2384.23 3834.78,-2384.53 3840.83,-2384.99 3846.83,-2385.53"/>
<polygon fill="gray" stroke="gray" points="3846.51,-2389.02 3856.8,-2386.5 3847.19,-2382.05 3846.51,-2389.02"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M3153.77,-4019.72C3182,-4025.7 3222.59,-4039.24 3242,-4069.23 3278.43,-4125.51 3222.46,-8848.96 3270,-8896.23 3314.28,-8940.25 3505.45,-8938.94 3551,-8896.23 3726.82,-8731.33 3681.02,-6972.11 3690,-6731.23 3697.17,-6538.74 3675.41,-3450.08 3726,-3264.23 3731.34,-3244.61 3742.6,-3224.77 3752.71,-3209.64"/>
<polygon fill="gray" stroke="gray" points="3755.66,-3211.53 3758.47,-3201.32 3749.9,-3207.55 3755.66,-3211.53"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_id(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_id().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn decompress_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed_id = CompressedRistretto::identity(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = compressed_id.decompress().unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut identity_in_coset = false; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for P in ...">
<polygon fill="white" stroke="black" points="2375,-3608.23 2255,-3608.23 2255,-3572.23 2375,-3572.23 2375,-3608.23"/>
<text text-anchor="middle" x="2315" y="-3586.53" font-family="Helvetica,sans-Serif" font-size="14.00">decompress_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2375.17,-3592.2C2416.42,-3591.25 2471.61,-3585.2 2515,-3563.23 2530.98,-3555.13 2529.02,-3545.43 2543,-3534.23 2715.31,-3396.12 2855.83,-3466.02 2967,-3275.23 3028.56,-3169.57 2951.78,-2286.27 3003,-2175.23 3019.52,-2139.42 3054.04,-2110.17 3081.59,-2091.18"/>
<polygon fill="gray" stroke="gray" points="3083.89,-2093.85 3090.25,-2085.38 3080,-2088.04 3083.89,-2093.85"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/decompress_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M2375.22,-3585.79C2417.28,-3585.47 2473.42,-3590.99 2515,-3617.23 2648.75,-3701.62 2724.3,-3889.42 2748.95,-3960.36"/>
<polygon fill="gray" stroke="gray" points="2745.68,-3961.62 2752.22,-3969.96 2752.3,-3959.36 2745.68,-3961.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<path fill="none" stroke="gray" d="M2809.9,-3987.7C2852.99,-3988.87 2916.15,-3994.52 2967,-4015.23 2985.52,-4022.77 2985.8,-4032.02 3003,-4042.23 3028.29,-4057.23 3058.48,-4070.93 3082.05,-4080.78"/>
<polygon fill="gray" stroke="gray" points="3080.81,-4084.05 3091.39,-4084.62 3083.47,-4077.58 3080.81,-4084.05"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1().</title>
<path fill="none" stroke="gray" d="M2809.51,-3991.92C2881.64,-3997.31 3014.29,-4007.22 3080.97,-4012.2"/>
<polygon fill="gray" stroke="gray" points="3080.86,-4015.7 3091.09,-4012.95 3081.38,-4008.72 3080.86,-4015.7"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/double_and_compress_1024_random_points(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/double_and_compress_1024_random_points().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;fn double_and_compress_1024_random_points() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut points: Vec&lt;RistrettoPoint&gt; = (0..1024) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| RistrettoPoint::random(&amp;mut rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2079,-4014.23 1756,-4014.23 1756,-3978.23 2079,-3978.23 2079,-4014.23"/>
<text text-anchor="middle" x="1917.5" y="-3992.53" font-family="Helvetica,sans-Serif" font-size="14.00">double_and_compress_1024_random_points</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/double_and_compress_1024_random_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]random(). -->
<g id="edge480" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/double_and_compress_1024_random_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]random().</title>
<path fill="none" stroke="gray" d="M1959.06,-4014.31C1998.22,-4031.04 2059.57,-4055.35 2115,-4069.23 2167.11,-4082.27 2228.59,-4089.39 2269.27,-4093"/>
<polygon fill="gray" stroke="gray" points="2269.15,-4096.5 2279.41,-4093.86 2269.74,-4089.52 2269.15,-4096.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/double_and_compress_1024_random_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge479" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/double_and_compress_1024_random_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1947.75,-3978.16C1984.98,-3956.32 2052.04,-3920.82 2115,-3907.23 2158.44,-3897.85 2479.85,-3880.03 2515,-3907.23 2554.22,-3937.57 2505.75,-3982.49 2543,-4015.23 2587.62,-4054.44 2659,-4055.55 2707.15,-4050.64"/>
<polygon fill="gray" stroke="gray" points="2707.81,-4054.09 2717.35,-4049.48 2707.02,-4047.14 2707.81,-4054.09"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/scalarmult_ristrettopoint_works_both_ways(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/scalarmult_ristrettopoint_works_both_ways().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;fn scalarmult_ristrettopoint_works_both_ways() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = constants::RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(999u64); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P1 = P * s; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P2 = s * P; &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2472,-3824.23 2158,-3824.23 2158,-3788.23 2472,-3788.23 2472,-3824.23"/>
<text text-anchor="middle" x="2315" y="-3802.53" font-family="Helvetica,sans-Serif" font-size="14.00">scalarmult_ristrettopoint_works_both_ways</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/scalarmult_ristrettopoint_works_both_ways().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge481" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/scalarmult_ristrettopoint_works_both_ways().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2472.01,-3807.15C2488,-3812.88 2502.81,-3821.25 2515,-3833.23 2573.38,-3890.58 2484.33,-3958.16 2543,-4015.23 2585.93,-4056.98 2658.59,-4057.25 2707.42,-4051.48"/>
<polygon fill="gray" stroke="gray" points="2708,-4054.93 2717.46,-4050.17 2707.09,-4047.99 2708,-4054.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes(). -->
<g id="edge495" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes().</title>
<path fill="none" stroke="gray" d="M2800.87,-4050.72C2848.52,-4057.95 2925.96,-4060.94 2967,-4015.23 3027.51,-3947.83 2948.73,-2457.74 3003,-2385.23 3069.79,-2295.99 3175.34,-2398.56 3242,-2309.23 3290.55,-2244.16 3212.05,-905.08 3270,-848.23 3314.34,-804.73 3784.68,-804.71 3829,-848.23 3889.11,-907.24 3817.91,-2289.61 3857,-2364.23 3857.16,-2364.53 3857.33,-2364.84 3857.5,-2365.14"/>
<polygon fill="gray" stroke="gray" points="3854.78,-2367.34 3863.65,-2373.13 3860.32,-2363.07 3854.78,-2367.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative(). -->
<g id="edge493" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative().</title>
<path fill="none" stroke="gray" d="M2800.56,-4033.7C2848.29,-4026.32 2926.17,-4023.08 2967,-4069.23 3054.32,-4167.92 2941.71,-8696.56 3003,-8813.23 3122.68,-9041.05 3338.97,-9146.08 3551,-9000.23 3693.33,-8902.32 3658.02,-8807 3690,-8637.23 3745.26,-8343.88 3648.13,-3552.4 3726,-3264.23 3731.3,-3244.6 3742.57,-3224.76 3752.68,-3209.64"/>
<polygon fill="gray" stroke="gray" points="3755.63,-3211.52 3758.45,-3201.31 3749.88,-3207.54 3755.63,-3211.52"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge494" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" d="M2800.7,-4050.56C2848.17,-4057.64 2925.44,-4060.47 2967,-4015.23 3027.42,-3949.45 2945.16,-3280.28 3003,-3212.23 3095.32,-3103.6 3287.03,-3112.68 3371.72,-3122.88"/>
<polygon fill="gray" stroke="gray" points="3371.39,-3126.37 3381.75,-3124.16 3372.27,-3119.42 3371.39,-3126.37"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().</title>
<g id="a_node117"><a xlink:title="pub fn raw_sign&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;esk: &amp;ExpandedSecretKey, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Signature where &#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, { &#160;&#160;&#160;&#160;esk.raw_sign::&lt;CtxDig...">
<polygon fill="white" stroke="black" points="1956.5,-1571.23 1878.5,-1571.23 1878.5,-1535.23 1956.5,-1535.23 1956.5,-1571.23"/>
<text text-anchor="middle" x="1917.5" y="-1549.53" font-family="Helvetica,sans-Serif" font-size="14.00">raw_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_sign&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, &#160;&#160;&#160;&#160;) &#45;&gt; Signature &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2354,-2173.23 2276,-2173.23 2276,-2137.23 2354,-2137.23 2354,-2173.23"/>
<text text-anchor="middle" x="2315" y="-2151.53" font-family="Helvetica,sans-Serif" font-size="14.00">raw_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<path fill="none" stroke="gray" d="M1956.8,-1549.45C1993.25,-1547.97 2047.72,-1551.54 2083.5,-1580.23 2263.89,-1724.87 2303.86,-2032.09 2312.04,-2126.82"/>
<polygon fill="gray" stroke="gray" points="2308.57,-2127.36 2312.87,-2137.05 2315.55,-2126.8 2308.57,-2127.36"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify().</title>
<g id="a_node118"><a xlink:title="pub fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;vk: &amp;VerifyingKey, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, ) &#45;&gt; Result&lt;(), SignatureError&gt; where &#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, { &#160;&#160;&#160;&#160;vk.raw...">
<polygon fill="white" stroke="black" points="1961.5,-1625.23 1873.5,-1625.23 1873.5,-1589.23 1961.5,-1589.23 1961.5,-1625.23"/>
<text text-anchor="middle" x="1917.5" y="-1603.53" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="white" stroke="black" points="2359,-2418.23 2271,-2418.23 2271,-2382.23 2359,-2382.23 2359,-2418.23"/>
<text text-anchor="middle" x="2315" y="-2396.53" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" d="M1925.57,-1625.25C1951.08,-1691.02 2039.23,-1924.77 2083.5,-2125.23 2095.48,-2179.47 2075.89,-2333.78 2115,-2373.23 2152.35,-2410.89 2215.6,-2413.33 2260.76,-2409.1"/>
<polygon fill="gray" stroke="gray" points="2261.4,-2412.55 2270.97,-2408 2260.65,-2405.59 2261.4,-2412.55"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;fn sign_verify_nonspec() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Generate the keypair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let esk = ExpandedSecretKey::random(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vk = VerifyingKey::from(&amp;esk); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let msg = ...">
<polygon fill="white" stroke="black" points="1671,-1625.23 1514,-1625.23 1514,-1589.23 1671,-1589.23 1671,-1625.23"/>
<text text-anchor="middle" x="1592.5" y="-1603.53" font-family="Helvetica,sans-Serif" font-size="14.00">sign_verify_nonspec</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign(). -->
<g id="edge435" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().</title>
<path fill="none" stroke="gray" d="M1671.27,-1593.41C1695.81,-1589.12 1723.02,-1584.41 1748,-1580.23 1788.51,-1573.44 1834.57,-1566.08 1868.28,-1560.77"/>
<polygon fill="gray" stroke="gray" points="1869,-1564.2 1878.33,-1559.18 1867.91,-1557.28 1869,-1564.2"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify(). -->
<g id="edge437" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify().</title>
<path fill="none" stroke="gray" d="M1671.28,-1607.23C1730.6,-1607.23 1810.76,-1607.23 1863.04,-1607.23"/>
<polygon fill="gray" stroke="gray" points="1863.1,-1610.73 1873.1,-1607.23 1863.1,-1603.73 1863.1,-1610.73"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;&amp;ExpandedSecretKey&gt;`]from(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;&amp;ExpandedSecretKey&gt;`]from().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;fn from(expanded_secret_key: &amp;ExpandedSecretKey) &#45;&gt; VerifyingKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;VerifyingKey::from(EdwardsPoint::mul_base(&amp;expanded_secret_key.scalar)) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1944.5,-2418.23 1890.5,-2418.23 1890.5,-2382.23 1944.5,-2382.23 1944.5,-2418.23"/>
<text text-anchor="middle" x="1917.5" y="-2396.53" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;&amp;ExpandedSecretKey&gt;`]from(). -->
<g id="edge436" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;&amp;ExpandedSecretKey&gt;`]from().</title>
<path fill="none" stroke="gray" d="M1597.49,-1625.36C1613.87,-1700.15 1677.36,-1992.01 1723.5,-2233.23 1729.43,-2264.25 1725.51,-2351.05 1748,-2373.23 1782.62,-2407.35 1842.08,-2408.82 1880.31,-2405.48"/>
<polygon fill="gray" stroke="gray" points="1880.91,-2408.94 1890.5,-2404.43 1880.19,-2401.98 1880.91,-2408.94"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(secret_key: &amp;SecretKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let verifying_key = VerifyingKey::from(&amp;ExpandedSecretKey::from(secret_key)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;secret_key: *secret_key, &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1964.5,-2281.23 1870.5,-2281.23 1870.5,-2245.23 1964.5,-2245.23 1964.5,-2281.23"/>
<text text-anchor="middle" x="1917.5" y="-2259.53" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;&amp;ExpandedSecretKey&gt;`]from(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;&amp;ExpandedSecretKey&gt;`]from().</title>
<path fill="none" stroke="gray" d="M1870.21,-2273.55C1835.28,-2282.22 1787.2,-2296.39 1748,-2316.23 1741.97,-2319.28 1738.8,-2319.2 1735.75,-2325.23 1727.92,-2340.69 1727.92,-2348.76 1735.75,-2364.23 1760.82,-2413.75 1834.67,-2412.87 1880.15,-2407.03"/>
<polygon fill="gray" stroke="gray" points="1880.82,-2410.47 1890.23,-2405.6 1879.83,-2403.54 1880.82,-2410.47"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2338.75,-2173.43C2377.76,-2203.35 2461.17,-2261.74 2543,-2283.23 2634.13,-2307.15 2890.56,-2338.32 2967,-2283.23 3008.05,-2253.64 2975.41,-2217.64 3003,-2175.23 3025.05,-2141.33 3060.24,-2111.12 3086.55,-2091.34"/>
<polygon fill="gray" stroke="gray" points="3088.78,-2094.04 3094.75,-2085.29 3084.63,-2088.4 3088.78,-2094.04"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;pub fn verify_strict( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verifying_key.verify_strict(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1966.5,-2227.23 1868.5,-2227.23 1868.5,-2191.23 1966.5,-2191.23 1966.5,-2227.23"/>
<text text-anchor="middle" x="1917.5" y="-2205.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_strict</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;pub fn verify_strict( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature = InternalSignature::try_from(signa...">
<polygon fill="white" stroke="black" points="2364,-2472.23 2266,-2472.23 2266,-2436.23 2364,-2436.23 2364,-2472.23"/>
<text text-anchor="middle" x="2315" y="-2450.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_strict</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" d="M1966.72,-2203.33C2003.73,-2201.68 2053.41,-2206.18 2083.5,-2236.23 2144.37,-2297.02 2053.3,-2367.27 2115,-2427.23 2151.53,-2462.73 2211.19,-2466.5 2255.68,-2463.2"/>
<polygon fill="gray" stroke="gray" points="2256.12,-2466.67 2265.78,-2462.31 2255.51,-2459.7 2256.12,-2466.67"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;fn try_sign(&amp;self, message: &amp;[u8]) &#45;&gt; Result&lt;Signature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expanded: ExpandedSecretKey = (&amp;self.secret_key).into(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(expanded.raw_sign::&lt;Sha512&gt;(message, &amp;self...">
<polygon fill="white" stroke="black" points="1953.5,-2173.23 1881.5,-2173.23 1881.5,-2137.23 1953.5,-2137.23 1953.5,-2173.23"/>
<text text-anchor="middle" x="1917.5" y="-2151.53" font-family="Helvetica,sans-Serif" font-size="14.00">try_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<path fill="none" stroke="gray" d="M1953.6,-2155.23C2024.43,-2155.23 2184.6,-2155.23 2265.42,-2155.23"/>
<polygon fill="gray" stroke="gray" points="2265.81,-2158.73 2275.81,-2155.23 2265.81,-2151.73 2265.81,-2158.73"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;ed25519::Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.raw_verify::&lt;Sha512&gt;(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1945.5,-2472.23 1889.5,-2472.23 1889.5,-2436.23 1945.5,-2436.23 1945.5,-2472.23"/>
<text text-anchor="middle" x="1917.5" y="-2450.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" d="M1945.52,-2450.5C1983.39,-2445.28 2054.44,-2435.49 2115,-2427.23 2164.42,-2420.48 2220.74,-2412.84 2260.82,-2407.42"/>
<polygon fill="gray" stroke="gray" points="2261.47,-2410.86 2270.91,-2406.05 2260.53,-2403.92 2261.47,-2410.86"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]to_montgomery(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]to_montgomery().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;pub fn to_montgomery(&amp;self) &#45;&gt; MontgomeryPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.point.to_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1980.5,-2364.23 1854.5,-2364.23 1854.5,-2328.23 1980.5,-2328.23 1980.5,-2364.23"/>
<text text-anchor="middle" x="1917.5" y="-2342.53" font-family="Helvetica,sans-Serif" font-size="14.00">to_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]to_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]to_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M1980.79,-2352.49C2016.43,-2352.35 2058.82,-2345.12 2083.5,-2316.23 2133.13,-2258.13 2061.83,-996.1 2115,-941.23 2153.97,-901.01 2525.78,-902.31 2685.58,-904.77"/>
<polygon fill="gray" stroke="gray" points="2685.74,-908.27 2695.8,-904.93 2685.85,-901.27 2685.74,-908.27"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;EdwardsPoint&gt;`]from(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;EdwardsPoint&gt;`]from().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;fn from(point: EdwardsPoint) &#45;&gt; VerifyingKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;VerifyingKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compressed: point.compress(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2342,-2364.23 2288,-2364.23 2288,-2328.23 2342,-2328.23 2342,-2364.23"/>
<text text-anchor="middle" x="2315" y="-2342.53" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;&amp;ExpandedSecretKey&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;EdwardsPoint&gt;`]from(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;&amp;ExpandedSecretKey&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;EdwardsPoint&gt;`]from().</title>
<path fill="none" stroke="gray" d="M1944.56,-2396.63C1982.19,-2391.44 2053.93,-2381.56 2115,-2373.23 2171.92,-2365.45 2238.01,-2356.5 2277.88,-2351.11"/>
<polygon fill="gray" stroke="gray" points="2278.48,-2354.56 2287.92,-2349.75 2277.54,-2347.62 2278.48,-2354.56"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;EdwardsPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`From&lt;EdwardsPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2342.24,-2348.83C2451.56,-2359.1 2869.57,-2392.52 2967,-2313.23 3016.16,-2273.21 2970.22,-2229.48 3003,-2175.23 3023.78,-2140.83 3058.81,-2110.88 3085.41,-2091.3"/>
<polygon fill="gray" stroke="gray" points="3087.65,-2094 3093.72,-2085.32 3083.56,-2088.32 3087.65,-2094"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="white" stroke="black" points="2812.5,-2418.23 2705.5,-2418.23 2705.5,-2382.23 2812.5,-2382.23 2812.5,-2418.23"/>
<text text-anchor="middle" x="2759" y="-2396.53" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2812.54,-2404.3C2859.52,-2404.88 2926.96,-2397.65 2967,-2357.23 3025.03,-2298.64 2962.5,-2247.05 3003,-2175.23 3022.62,-2140.44 3057.47,-2110.72 3084.31,-2091.32"/>
<polygon fill="gray" stroke="gray" points="3086.56,-2094.01 3092.72,-2085.39 3082.53,-2088.29 3086.56,-2094.01"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" d="M2359.19,-2400.23C2437.73,-2400.23 2604.23,-2400.23 2695.29,-2400.23"/>
<polygon fill="gray" stroke="gray" points="2695.47,-2403.73 2705.47,-2400.23 2695.47,-2396.73 2695.47,-2403.73"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" d="M2364.36,-2469.17C2481.68,-2502.19 2785.1,-2567.84 2967,-2427.23 3010.38,-2393.69 2966.71,-2350.33 3003,-2309.23 3018.52,-2291.64 3041,-2279.6 3062.22,-2271.49"/>
<polygon fill="gray" stroke="gray" points="3063.62,-2274.71 3071.86,-2268.04 3061.26,-2268.12 3063.62,-2274.71"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" d="M2364.14,-2448.34C2444.61,-2438.51 2606.36,-2418.75 2695.5,-2407.86"/>
<polygon fill="gray" stroke="gray" points="2695.97,-2411.33 2705.48,-2406.64 2695.13,-2404.38 2695.97,-2411.33"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pub_key: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature_r: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h = Sha512::defa...">
<polygon fill="white" stroke="black" points="1993,-2974.23 1842,-2974.23 1842,-2938.23 1993,-2938.23 1993,-2974.23"/>
<text text-anchor="middle" x="1917.5" y="-2952.53" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M1993.14,-2956.69C2227.05,-2957.79 2932.35,-2958.27 2967,-2924.23 3026.43,-2865.83 2967.52,-2250.61 3003,-2175.23 3019.85,-2139.43 3054.51,-2110.1 3082.01,-2091.08"/>
<polygon fill="gray" stroke="gray" points="3084.31,-2093.75 3090.66,-2085.27 3080.41,-2087.94 3084.31,-2093.75"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/serialize_signature(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/serialize_signature().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;fn serialize_signature(r: &amp;EdwardsPoint, s: &amp;Scalar) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[&amp;r.compress().as_bytes()[..], &amp;s.as_bytes()[..]].concat() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1990.5,-3028.23 1844.5,-3028.23 1844.5,-2992.23 1990.5,-2992.23 1990.5,-3028.23"/>
<text text-anchor="middle" x="1917.5" y="-3006.53" font-family="Helvetica,sans-Serif" font-size="14.00">serialize_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/serialize_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/serialize_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M1990.82,-3011.24C2103.28,-3013.46 2326.73,-3020.45 2515,-3042.23 2527.56,-3043.68 2530.41,-3046.11 2543,-3047.23 2589.93,-3051.38 2933.01,-3079.84 2967,-3047.23 3036.97,-2980.09 2962,-2263.11 3003,-2175.23 3019.72,-2139.38 3054.4,-2110.04 3081.94,-2091.04"/>
<polygon fill="gray" stroke="gray" points="3084.24,-2093.72 3090.6,-2085.24 3080.35,-2087.9 3084.24,-2093.72"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;fn repudiation() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message1 = b&#39; Send 100 USD to Alice&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message2 = b&#39; Send 100000 USD to Alice&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s: Scalar = non_null_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pubkey = WEA...">
<polygon fill="white" stroke="black" points="1640,-3028.23 1545,-3028.23 1545,-2992.23 1640,-2992.23 1640,-3028.23"/>
<text text-anchor="middle" x="1592.5" y="-3006.53" font-family="Helvetica,sans-Serif" font-size="14.00">repudiation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M1640.28,-3010.62C1667.2,-3008.57 1700.19,-3001.88 1723.5,-2983.23 1744.08,-2966.76 1726.04,-2943.8 1748,-2929.23 1804.45,-2891.76 2918.55,-2943.58 2967,-2896.23 3024.36,-2840.16 2968.78,-2247.77 3003,-2175.23 3019.88,-2139.45 3054.54,-2110.11 3082.03,-2091.09"/>
<polygon fill="gray" stroke="gray" points="3084.33,-2093.76 3090.68,-2085.28 3080.43,-2087.95 3084.33,-2093.76"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" d="M1640.26,-3020.06C1670.79,-3026.07 1711.58,-3033.33 1748,-3037.23 1815.36,-3044.44 2917.98,-3115.98 2967,-3069.23 3028.18,-3010.88 2955.35,-2379.06 3003,-2309.23 3016.67,-2289.2 3039.77,-2276.64 3061.97,-2268.82"/>
<polygon fill="gray" stroke="gray" points="3063.31,-2272.07 3071.73,-2265.65 3061.14,-2265.41 3063.31,-2272.07"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1640.19,-3013.61C1668.66,-3012.92 1703.33,-3006.62 1723.5,-2983.23 1785.85,-2910.91 1698.41,-2635.83 1748,-2554.23 1777.4,-2505.85 1839.77,-2478.12 1879.83,-2464.62"/>
<polygon fill="gray" stroke="gray" points="1881.06,-2467.9 1889.5,-2461.5 1878.91,-2461.24 1881.06,-2467.9"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" d="M1640.26,-3013.39C1668.57,-3012.57 1703.05,-3006.22 1723.5,-2983.23 1764.72,-2936.89 1704.5,-2749.43 1748,-2705.23 1800.58,-2651.8 2015.32,-2701.37 2083.5,-2670.23 2178.6,-2626.79 2259.88,-2528.27 2295.19,-2480.79"/>
<polygon fill="gray" stroke="gray" points="2298.15,-2482.67 2301.24,-2472.54 2292.5,-2478.53 2298.15,-2482.67"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().</title>
<path fill="none" stroke="gray" d="M1640.12,-3001.9C1670.76,-2996.47 1711.75,-2989.3 1748,-2983.23 1775.21,-2978.67 1804.91,-2973.86 1831.7,-2969.57"/>
<polygon fill="gray" stroke="gray" points="1832.49,-2972.99 1841.81,-2967.96 1831.38,-2966.08 1832.49,-2972.99"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/serialize_signature(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/serialize_signature().</title>
<path fill="none" stroke="gray" d="M1640.12,-3010.23C1690.76,-3010.23 1772.65,-3010.23 1834.17,-3010.23"/>
<polygon fill="gray" stroke="gray" points="1834.24,-3013.73 1844.24,-3010.23 1834.24,-3006.73 1834.24,-3013.73"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;fn against_reference_implementation() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TestGolden &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut line: String; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut lineno: usize = 0; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let f = File::open(&#39; TESTVECTORS&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if f.is_err() {...">
<polygon fill="white" stroke="black" points="1720,-2974.23 1465,-2974.23 1465,-2938.23 1720,-2938.23 1720,-2974.23"/>
<text text-anchor="middle" x="1592.5" y="-2952.53" font-family="Helvetica,sans-Serif" font-size="14.00">against_reference_implementation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M1603.2,-2938.19C1628.28,-2890.62 1695.22,-2757.13 1723.5,-2637.23 1739.92,-2567.59 1703.51,-2372.25 1748,-2316.23 1774.58,-2282.75 1822.18,-2270.02 1860.02,-2265.36"/>
<polygon fill="gray" stroke="gray" points="1860.83,-2268.79 1870.4,-2264.25 1860.09,-2261.83 1860.83,-2268.79"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" d="M1597.35,-2938.21C1609.33,-2887 1651.11,-2740.16 1748,-2675.23 1872.66,-2591.68 1944.81,-2694.54 2083.5,-2637.23 2171.12,-2601.02 2252.81,-2521.16 2291.14,-2479.95"/>
<polygon fill="gray" stroke="gray" points="2293.81,-2482.22 2298,-2472.49 2288.66,-2477.48 2293.81,-2482.22"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().</title>
<g id="a_node135"><a xlink:title="fn check_validation_criteria() { &#160;&#160;&#160;&#160;let verify_allowed_edgecases = Set::from_iter(VERIFY_ALLOWED_EDGECASES.to_vec()); &#160;&#160;&#160;&#160;let verify_strict_allowed_edgecases = Set::from_iter(VERIFY_STRICT_ALLOWED_ED...">
<polygon fill="white" stroke="black" points="1686,-2519.23 1499,-2519.23 1499,-2483.23 1686,-2483.23 1686,-2519.23"/>
<text text-anchor="middle" x="1592.5" y="-2497.53" font-family="Helvetica,sans-Serif" font-size="14.00">check_validation_criteria</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge446" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1686.06,-2487.76C1750.36,-2478.4 1832.6,-2466.43 1879.44,-2459.62"/>
<polygon fill="gray" stroke="gray" points="1880.04,-2463.07 1889.43,-2458.16 1879.03,-2456.14 1880.04,-2463.07"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge447" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" d="M1686.35,-2506.76C1785.1,-2511.35 1945.75,-2515.13 2083.5,-2501.23 2142.93,-2495.23 2209.7,-2480.74 2256.02,-2469.42"/>
<polygon fill="gray" stroke="gray" points="2257,-2472.78 2265.87,-2466.99 2255.32,-2465.99 2257,-2472.78"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().</title>
<g id="a_node136"><a xlink:title="fn find_validation_criteria() { &#160;&#160;&#160;&#160;let mut verify_allowed_edgecases = Set::new(); &#160;&#160;&#160;&#160;let mut verify_strict_allowed_edgecases = Set::new(); &#160;&#160;&#160;&#160;&#160;// Counts the number of times a signature with a re&#45;en...">
<polygon fill="white" stroke="black" points="1679,-2465.23 1506,-2465.23 1506,-2429.23 1679,-2429.23 1679,-2465.23"/>
<text text-anchor="middle" x="1592.5" y="-2443.53" font-family="Helvetica,sans-Serif" font-size="14.00">find_validation_criteria</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge474" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1679.21,-2449.08C1744.33,-2450.49 1830.71,-2452.37 1879.26,-2453.42"/>
<polygon fill="gray" stroke="gray" points="1879.24,-2456.92 1889.31,-2453.64 1879.39,-2449.92 1879.24,-2456.92"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge475" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" d="M1679.02,-2464.05C1693.89,-2467.25 1709.18,-2470.7 1723.5,-2474.23 1734.5,-2476.93 1736.78,-2479.66 1748,-2481.23 1932.09,-2507.01 2152.79,-2480.02 2255.75,-2464.12"/>
<polygon fill="gray" stroke="gray" points="2256.31,-2467.57 2265.64,-2462.57 2255.22,-2460.66 2256.31,-2467.57"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().</title>
<g id="a_node137"><a xlink:title="fn ed25519_to_x25519_dh() { &#160;&#160;&#160;&#160;// Keys from RFC8032 test vectors (from section 7.1) &#160;&#160;&#160;&#160;let ed_secret_key_a = hex!(&#39; 9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60&#39; ); &#160;&#160;&#160;&#160;let ed_se...">
<polygon fill="white" stroke="black" points="1684.5,-2281.23 1500.5,-2281.23 1500.5,-2245.23 1684.5,-2245.23 1684.5,-2281.23"/>
<text text-anchor="middle" x="1592.5" y="-2259.53" font-family="Helvetica,sans-Serif" font-size="14.00">ed25519_to_x25519_dh</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="edge450" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M1684.76,-2263.23C1741.07,-2263.23 1811.53,-2263.23 1859.89,-2263.23"/>
<polygon fill="gray" stroke="gray" points="1860.16,-2266.73 1870.16,-2263.23 1860.16,-2259.73 1860.16,-2266.73"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]to_montgomery(). -->
<g id="edge451" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]to_montgomery().</title>
<path fill="none" stroke="gray" d="M1639.92,-2281.25C1670.3,-2292.52 1711.08,-2306.67 1748,-2316.23 1779.27,-2324.32 1814.37,-2330.95 1844.4,-2335.9"/>
<polygon fill="gray" stroke="gray" points="1843.95,-2339.37 1854.38,-2337.51 1845.07,-2332.46 1843.95,-2339.37"/>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;StaticSecret&gt;`]from(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;StaticSecret&gt;`]from().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;fn from(secret: &amp;&#39;a StaticSecret) &#45;&gt; PublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKey(EdwardsPoint::mul_base_clamped(secret.0).to_montgomery()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2342,-1126.23 2288,-1126.23 2288,-1090.23 2342,-1090.23 2342,-1126.23"/>
<text text-anchor="middle" x="2315" y="-1104.53" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;StaticSecret&gt;`]from(). -->
<g id="edge449" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;StaticSecret&gt;`]from().</title>
<path fill="none" stroke="gray" d="M1611.75,-2244.97C1681.08,-2174.81 1931.88,-1913.76 2083.5,-1660.23 2195.96,-1472.18 2279.61,-1219.17 2305.55,-1135.99"/>
<polygon fill="gray" stroke="gray" points="2308.95,-1136.86 2308.56,-1126.27 2302.26,-1134.79 2308.95,-1136.86"/>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519_benches(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519_benches().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;name = x25519_benches; &#160;&#160;&#160;&#160;config = Criterion::default(); &#160;&#160;&#160;&#160;targets = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bench_diffie_hellman, } criterion_main! { &#160;&#160;&#160;&#160;x25519_benches, }">
<polygon fill="white" stroke="black" points="1660,-1072.23 1525,-1072.23 1525,-1036.23 1660,-1036.23 1660,-1072.23"/>
<text text-anchor="middle" x="1592.5" y="-1050.53" font-family="Helvetica,sans-Serif" font-size="14.00">x25519_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 bench_diffie_hellman(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 bench_diffie_hellman().</title>
<g id="a_node139"><a xlink:title="fn bench_diffie_hellman(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let bob_secret = EphemeralSecret::random_from_rng(OsRng); &#160;&#160;&#160;&#160;let bob_public = PublicKey::from(&amp;bob_secret); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; diffie_hellman&#39; , ...">
<polygon fill="white" stroke="black" points="1999,-1072.23 1836,-1072.23 1836,-1036.23 1999,-1036.23 1999,-1072.23"/>
<text text-anchor="middle" x="1917.5" y="-1050.53" font-family="Helvetica,sans-Serif" font-size="14.00">bench_diffie_hellman</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519_benches().&#45;&gt;rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 bench_diffie_hellman(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519_benches().&#45;&gt;rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 bench_diffie_hellman().</title>
<path fill="none" stroke="gray" d="M1660.03,-1054.23C1707.92,-1054.23 1773.08,-1054.23 1825.73,-1054.23"/>
<polygon fill="gray" stroke="gray" points="1825.75,-1057.73 1835.75,-1054.23 1825.75,-1050.73 1825.75,-1057.73"/>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;EphemeralSecret&gt;`]from(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;EphemeralSecret&gt;`]from().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;fn from(secret: &amp;&#39;a EphemeralSecret) &#45;&gt; PublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKey(EdwardsPoint::mul_base_clamped(secret.0).to_montgomery()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2342,-1072.23 2288,-1072.23 2288,-1036.23 2342,-1036.23 2342,-1072.23"/>
<text text-anchor="middle" x="2315" y="-1050.53" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 bench_diffie_hellman().&#45;&gt;rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;EphemeralSecret&gt;`]from(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 bench_diffie_hellman().&#45;&gt;rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;EphemeralSecret&gt;`]from().</title>
<path fill="none" stroke="gray" d="M1999.01,-1054.23C2084.2,-1054.23 2214.82,-1054.23 2277.7,-1054.23"/>
<polygon fill="gray" stroke="gray" points="2277.91,-1057.73 2287.91,-1054.23 2277.91,-1050.73 2277.91,-1057.73"/>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;EphemeralSecret&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;EphemeralSecret&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M2342.13,-1058.32C2383.91,-1063.29 2466.02,-1066.41 2515,-1024.23 2547.06,-996.61 2510.6,-960.44 2543,-933.23 2581.97,-900.5 2639.78,-894.82 2685.65,-896.74"/>
<polygon fill="gray" stroke="gray" points="2685.66,-900.25 2695.84,-897.3 2686.04,-893.26 2685.66,-900.25"/>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;StaticSecret&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 x25519/impl#[PublicKey][`From&lt;&amp;StaticSecret&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M2342.29,-1113.34C2384.68,-1119.93 2468.09,-1125.75 2515,-1081.23 2563.55,-1035.14 2494.22,-979.07 2543,-933.23 2580.42,-898.06 2639.05,-892.72 2685.64,-895.39"/>
<polygon fill="gray" stroke="gray" points="2685.46,-898.89 2695.69,-896.1 2685.96,-891.91 2685.46,-898.89"/>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 byte_basepoint_matches_edwards_scalar_mul(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 byte_basepoint_matches_edwards_scalar_mul().</title>
<g id="a_node142"><a xlink:title="fn byte_basepoint_matches_edwards_scalar_mul() { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0x37; 32]; &#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_bytes[i] += 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = x25519(scalar_bytes, X25519_BASEPOINT_...">
<polygon fill="white" stroke="black" points="2482.5,-989.23 2147.5,-989.23 2147.5,-953.23 2482.5,-953.23 2482.5,-989.23"/>
<text text-anchor="middle" x="2315" y="-967.53" font-family="Helvetica,sans-Serif" font-size="14.00">byte_basepoint_matches_edwards_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 byte_basepoint_matches_edwards_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo x25519&#45;dalek 2.0.0 byte_basepoint_matches_edwards_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M2434.56,-953.19C2461.07,-948.87 2489.03,-944.09 2515,-939.23 2527.51,-936.88 2530.45,-935.35 2543,-933.23 2590.29,-925.21 2643.8,-918.48 2685.6,-913.74"/>
<polygon fill="gray" stroke="gray" points="2686.15,-917.2 2695.7,-912.61 2685.37,-910.25 2686.15,-917.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node143"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="1304.5,-4906.23 1107.5,-4906.23 1107.5,-4870.23 1304.5,-4870.23 1304.5,-4906.23"/>
<text text-anchor="middle" x="1206" y="-4884.53" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<g id="a_node202"><a xlink:title=" &#160;&#160;&#160;pub fn hash(&amp;self) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*Self::hash_from_scalars(&amp;self.scalars).compress().as_bytes() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1619.5,-5151.23 1565.5,-5151.23 1565.5,-5115.23 1619.5,-5115.23 1619.5,-5151.23"/>
<text text-anchor="middle" x="1592.5" y="-5129.53" font-family="Helvetica,sans-Serif" font-size="14.00">hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="gray" d="M1304.64,-4873.91C1350.88,-4872.89 1403.24,-4881.04 1437,-4915.23 1466.99,-4945.59 1428.27,-5074.67 1457,-5106.23 1481.38,-5133.01 1524.26,-5137.5 1555.05,-5136.73"/>
<polygon fill="gray" stroke="gray" points="1555.56,-5140.21 1565.39,-5136.27 1555.24,-5133.22 1555.56,-5140.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node144"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="1270.5,-5014.23 1141.5,-5014.23 1141.5,-4978.23 1270.5,-4978.23 1270.5,-5014.23"/>
<text text-anchor="middle" x="1206" y="-4992.53" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node205"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="1619.5,-5205.23 1565.5,-5205.23 1565.5,-5169.23 1619.5,-5169.23 1619.5,-5205.23"/>
<text text-anchor="middle" x="1592.5" y="-5183.53" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M1270.57,-4993.07C1322.68,-4994.14 1394.53,-5004.65 1437,-5049.23 1471.58,-5085.52 1421.91,-5124.43 1457,-5160.23 1482.28,-5186.01 1524.8,-5190.72 1555.26,-5190.28"/>
<polygon fill="gray" stroke="gray" points="1555.61,-5193.77 1565.49,-5189.93 1555.38,-5186.77 1555.61,-5193.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node145"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="1270.5,-4960.23 1141.5,-4960.23 1141.5,-4924.23 1270.5,-4924.23 1270.5,-4960.23"/>
<text text-anchor="middle" x="1206" y="-4938.53" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="gray" d="M1270.66,-4930.63C1322.47,-4925.15 1393.83,-4927.26 1437,-4969.23 1481.12,-5012.12 1414.66,-5061.57 1457,-5106.23 1481.85,-5132.43 1524.44,-5137.07 1555.05,-5136.49"/>
<polygon fill="gray" stroke="gray" points="1555.46,-5139.98 1565.32,-5136.09 1555.2,-5132.98 1555.46,-5139.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node146"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="1272.5,-4852.23 1139.5,-4852.23 1139.5,-4816.23 1272.5,-4816.23 1272.5,-4852.23"/>
<text text-anchor="middle" x="1206" y="-4830.53" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node206"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="1641.5,-5097.23 1543.5,-5097.23 1543.5,-5061.23 1641.5,-5061.23 1641.5,-5097.23"/>
<text text-anchor="middle" x="1592.5" y="-5075.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge476" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="gray" d="M1272.72,-4828.22C1321.35,-4826.88 1387.47,-4831.84 1437,-4861.23 1512.42,-4905.98 1560.71,-5003.52 1580.8,-5051.48"/>
<polygon fill="gray" stroke="gray" points="1577.64,-5052.99 1584.66,-5060.92 1584.12,-5050.34 1577.64,-5052.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node147"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="475,-4538.23 79,-4538.23 79,-4502.23 475,-4502.23 475,-4538.23"/>
<text text-anchor="middle" x="277" y="-4516.53" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node251"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="787.5,-4347.23 733.5,-4347.23 733.5,-4311.23 787.5,-4311.23 787.5,-4347.23"/>
<text text-anchor="middle" x="760.5" y="-4325.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M475.11,-4530.57C501.5,-4523.81 526.23,-4512.13 546,-4493.23 590.47,-4450.69 522.35,-4399.6 566,-4356.23 607.12,-4315.36 679.58,-4317.03 723.21,-4322.65"/>
<polygon fill="gray" stroke="gray" points="722.98,-4326.15 733.38,-4324.1 723.97,-4319.22 722.98,-4326.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node148"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="416.5,-4646.23 137.5,-4646.23 137.5,-4610.23 416.5,-4610.23 416.5,-4646.23"/>
<text text-anchor="middle" x="277" y="-4624.53" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node249"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="833.5,-5044.23 687.5,-5044.23 687.5,-5008.23 833.5,-5008.23 833.5,-5044.23"/>
<text text-anchor="middle" x="760.5" y="-5022.53" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M416.7,-4618.07C460.96,-4620.88 508.22,-4630.77 546,-4655.23 673.87,-4738 733.85,-4926.07 752.68,-4997.75"/>
<polygon fill="gray" stroke="gray" points="749.39,-4999.02 755.25,-5007.84 756.17,-4997.29 749.39,-4999.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node149"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="534,-4484.23 20,-4484.23 20,-4448.23 534,-4448.23 534,-4484.23"/>
<text text-anchor="middle" x="277" y="-4462.53" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node256"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="853,-4293.23 668,-4293.23 668,-4257.23 853,-4257.23 853,-4293.23"/>
<text text-anchor="middle" x="760.5" y="-4271.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M534.07,-4449.35C538.21,-4446.23 542.2,-4442.86 546,-4439.23 590.47,-4396.69 522.35,-4345.6 566,-4302.23 589.88,-4278.5 624.32,-4269.11 657.54,-4266.51"/>
<polygon fill="gray" stroke="gray" points="658.03,-4269.99 667.8,-4265.91 657.62,-4263 658.03,-4269.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<g id="a_node258"><a xlink:title=" &#160;&#160;&#160;pub fn compress( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GroupSendEndorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: self.reserved, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="802,-4401.23 719,-4401.23 719,-4365.23 802,-4365.23 802,-4401.23"/>
<text text-anchor="middle" x="760.5" y="-4379.53" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<path fill="none" stroke="gray" d="M529.21,-4448.09C534.96,-4445.39 540.56,-4442.44 546,-4439.23 559.48,-4431.26 552.68,-4418.45 566,-4410.23 608.98,-4383.71 667.41,-4378.9 708.79,-4379.52"/>
<polygon fill="gray" stroke="gray" points="708.83,-4383.03 718.92,-4379.79 709.02,-4376.03 708.83,-4383.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node150"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="413,-4430.23 141,-4430.23 141,-4394.23 413,-4394.23 413,-4430.23"/>
<text text-anchor="middle" x="277" y="-4408.53" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node248"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="1255,-3654.23 1157,-3654.23 1157,-3618.23 1255,-3618.23 1255,-3654.23"/>
<text text-anchor="middle" x="1206" y="-3632.53" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="gray" d="M382.44,-4430.24C439.04,-4433.58 505.49,-4425.91 546,-4382.23 588.03,-4336.89 529,-3875.74 566,-3826.23 704.62,-3640.73 1016.89,-3629.13 1146.7,-3632.91"/>
<polygon fill="gray" stroke="gray" points="1146.72,-3636.41 1156.83,-3633.25 1146.96,-3629.42 1146.72,-3636.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node151"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="418,-4700.23 136,-4700.23 136,-4664.23 418,-4664.23 418,-4700.23"/>
<text text-anchor="middle" x="277" y="-4678.53" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node250"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="836,-5098.23 685,-5098.23 685,-5062.23 836,-5062.23 836,-5098.23"/>
<text text-anchor="middle" x="760.5" y="-5076.53" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="gray" d="M306.28,-4700.47C362.18,-4738.2 486.57,-4830.65 546,-4942.23 569.57,-4986.47 529.86,-5018.49 566,-5053.23 594.4,-5080.52 636.85,-5088.61 674.76,-5089.3"/>
<polygon fill="gray" stroke="gray" points="674.79,-5092.8 684.8,-5089.31 674.8,-5085.8 674.79,-5092.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node152"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="538,-4592.23 16,-4592.23 16,-4556.23 538,-4556.23 538,-4592.23"/>
<text text-anchor="middle" x="277" y="-4570.53" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node252"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="854,-4455.23 667,-4455.23 667,-4419.23 854,-4419.23 854,-4455.23"/>
<text text-anchor="middle" x="760.5" y="-4433.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="gray" d="M534.76,-4556.06C538.64,-4553.32 542.39,-4550.38 546,-4547.23 574.59,-4522.28 537.89,-4489.71 566,-4464.23 590.48,-4442.03 624.35,-4432.82 656.92,-4429.92"/>
<polygon fill="gray" stroke="gray" points="657.24,-4433.41 666.97,-4429.22 656.75,-4426.42 657.24,-4433.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<path fill="none" stroke="gray" d="M535.72,-4556.09C539.27,-4553.33 542.7,-4550.38 546,-4547.23 590.47,-4504.69 522.35,-4453.6 566,-4410.23 602.86,-4373.59 664.91,-4371.14 708.8,-4375.07"/>
<polygon fill="gray" stroke="gray" points="708.67,-4378.58 718.98,-4376.13 709.39,-4371.62 708.67,-4378.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node153"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="1233,-3162.23 1179,-3162.23 1179,-3126.23 1233,-3126.23 1233,-3162.23"/>
<text text-anchor="middle" x="1206" y="-3140.53" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="gray" d="M1207.84,-3126.17C1217.21,-2929.39 1304.2,-1187.69 1457,-1024.23 1624.46,-845.08 2437.37,-884.39 2685.76,-900.92"/>
<polygon fill="gray" stroke="gray" points="2685.55,-904.41 2695.76,-901.59 2686.02,-897.43 2685.55,-904.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" d="M1233.16,-3139.59C1278.55,-3131.79 1374.88,-3116.3 1457,-3110.23 1477.92,-3108.68 2951.92,-3105.81 2967,-3091.23 3029.52,-3030.76 2954.02,-2381.11 3003,-2309.23 3016.65,-2289.19 3039.76,-2276.63 3061.96,-2268.81"/>
<polygon fill="gray" stroke="gray" points="3063.29,-2272.06 3071.72,-2265.64 3061.13,-2265.4 3063.29,-2272.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="1667.5,-3349.23 1517.5,-3349.23 1517.5,-3313.23 1667.5,-3313.23 1667.5,-3349.23"/>
<text text-anchor="middle" x="1592.5" y="-3327.53" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M1233.01,-3148.88C1280.24,-3158.66 1380.43,-3185.72 1437,-3247.23 1455.17,-3266.99 1436.74,-3286.61 1457,-3304.23 1471.09,-3316.48 1489.17,-3323.76 1507.47,-3327.96"/>
<polygon fill="gray" stroke="gray" points="1506.84,-3331.41 1517.33,-3329.94 1508.22,-3324.54 1506.84,-3331.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1656.5,-3295.23 1528.5,-3295.23 1528.5,-3259.23 1656.5,-3259.23 1656.5,-3295.23"/>
<text text-anchor="middle" x="1592.5" y="-3273.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M1233.09,-3156.72C1277.96,-3177.82 1373.05,-3220.78 1457,-3247.23 1476.62,-3253.41 1498.23,-3258.82 1518.28,-3263.28"/>
<polygon fill="gray" stroke="gray" points="1517.78,-3266.75 1528.3,-3265.46 1519.27,-3259.91 1517.78,-3266.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node154"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="2075.5,-3349.23 1759.5,-3349.23 1759.5,-3313.23 2075.5,-3313.23 2075.5,-3349.23"/>
<text text-anchor="middle" x="1917.5" y="-3327.53" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node162"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="2390,-3212.23 2240,-3212.23 2240,-3176.23 2390,-3176.23 2390,-3212.23"/>
<text text-anchor="middle" x="2315" y="-3190.53" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M2068.54,-3313.22C2073.74,-3310.56 2078.76,-3307.57 2083.5,-3304.23 2107.16,-3287.55 2092.19,-3265.04 2115,-3247.23 2147.59,-3221.77 2191.35,-3208.5 2229.54,-3201.6"/>
<polygon fill="gray" stroke="gray" points="2230.35,-3205.01 2239.63,-3199.89 2229.19,-3198.11 2230.35,-3205.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M1667.6,-3331.23C1692.18,-3331.23 1720.62,-3331.23 1749.29,-3331.23"/>
<polygon fill="gray" stroke="gray" points="1749.44,-3334.73 1759.44,-3331.23 1749.44,-3327.73 1749.44,-3334.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="2064,-3295.23 1771,-3295.23 1771,-3259.23 2064,-3259.23 2064,-3295.23"/>
<text text-anchor="middle" x="1917.5" y="-3273.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node159"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="2379,-3158.23 2251,-3158.23 2251,-3122.23 2379,-3122.23 2379,-3158.23"/>
<text text-anchor="middle" x="2315" y="-3136.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M2064.19,-3259.93C2071.04,-3256.33 2077.54,-3252.12 2083.5,-3247.23 2113.03,-3222.97 2084.94,-3190.81 2115,-3167.23 2150.02,-3139.75 2199.61,-3132.96 2240.53,-3133.06"/>
<polygon fill="gray" stroke="gray" points="2240.67,-3136.57 2250.73,-3133.23 2240.78,-3129.57 2240.67,-3136.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M1656.54,-3277.23C1686.42,-3277.23 1723.55,-3277.23 1760.32,-3277.23"/>
<polygon fill="gray" stroke="gray" points="1760.68,-3280.73 1770.68,-3277.23 1760.68,-3273.73 1760.68,-3280.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="1288,-3367.23 1124,-3367.23 1124,-3331.23 1288,-3331.23 1288,-3367.23"/>
<text text-anchor="middle" x="1206" y="-3345.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M1288.19,-3360.67C1390.12,-3373.27 1570.21,-3389.71 1723.5,-3373.23 1762.61,-3369.02 1805.42,-3360.15 1840.77,-3351.64"/>
<polygon fill="gray" stroke="gray" points="1841.65,-3355.03 1850.53,-3349.25 1839.99,-3348.23 1841.65,-3355.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M1288.07,-3345.43C1352.38,-3342.42 1441.98,-3338.23 1507.14,-3335.18"/>
<polygon fill="gray" stroke="gray" points="1507.55,-3338.66 1517.37,-3334.7 1507.22,-3331.67 1507.55,-3338.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M1288.05,-3352.88C1336.96,-3354.9 1400.55,-3357.21 1457,-3358.23 1516.21,-3359.29 1673.72,-3390.31 1723.5,-3358.23 1745.65,-3343.95 1727.05,-3320.21 1748,-3304.23 1752.42,-3300.86 1757.09,-3297.83 1761.96,-3295.13"/>
<polygon fill="gray" stroke="gray" points="1763.58,-3298.23 1770.92,-3290.59 1760.42,-3291.99 1763.58,-3298.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M1288.07,-3334.04C1356.18,-3321.29 1452.66,-3303.22 1518.42,-3290.91"/>
<polygon fill="gray" stroke="gray" points="1519.11,-3294.34 1528.29,-3289.06 1517.82,-3287.46 1519.11,-3294.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2379.08,-3143.86C2526.7,-3150.88 2888.14,-3158.93 2967,-3075.23 3035.63,-3002.38 2960.75,-2265.95 3003,-2175.23 3019.7,-2139.36 3054.38,-2110.04 3081.93,-2091.04"/>
<polygon fill="gray" stroke="gray" points="3084.23,-2093.71 3090.59,-2085.24 3080.33,-2087.89 3084.23,-2093.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<path fill="none" stroke="gray" d="M2338.64,-3122.04C2382.66,-3085.08 2478.65,-2996.14 2515,-2896.23 2553.94,-2789.19 2482.55,-942.76 2543,-846.23 2577.61,-790.96 2649.94,-762.94 2701.13,-749.48"/>
<polygon fill="gray" stroke="gray" points="2702.23,-752.82 2711.07,-746.98 2700.52,-746.03 2702.23,-752.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node160"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2009,-3212.23 1826,-3212.23 1826,-3176.23 2009,-3176.23 2009,-3212.23"/>
<text text-anchor="middle" x="1917.5" y="-3190.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M2009.48,-3181.69C2042.69,-3177.13 2080.54,-3171.93 2115,-3167.23 2156.52,-3161.56 2202.92,-3155.26 2240.47,-3150.17"/>
<polygon fill="gray" stroke="gray" points="2241.37,-3153.58 2250.81,-3148.77 2240.43,-3146.65 2241.37,-3153.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M2009.24,-3194.23C2075.59,-3194.23 2164.94,-3194.23 2229.72,-3194.23"/>
<polygon fill="gray" stroke="gray" points="2229.9,-3197.73 2239.9,-3194.23 2229.9,-3190.73 2229.9,-3197.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node161"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="1975,-3158.23 1860,-3158.23 1860,-3122.23 1975,-3122.23 1975,-3158.23"/>
<text text-anchor="middle" x="1917.5" y="-3136.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M1975.17,-3140.23C2045.08,-3140.23 2164.07,-3140.23 2240.83,-3140.23"/>
<polygon fill="gray" stroke="gray" points="2240.9,-3143.73 2250.9,-3140.23 2240.9,-3136.73 2240.9,-3143.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2384.51,-3212.28C2518.65,-3243.01 2815.98,-3287.6 2967,-3126.23 3039.25,-3049.02 2958.46,-2271.13 3003,-2175.23 3019.66,-2139.35 3054.35,-2110.02 3081.91,-2091.03"/>
<polygon fill="gray" stroke="gray" points="3084.21,-2093.7 3090.57,-2085.23 3080.31,-2087.88 3084.21,-2093.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node163"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="1676,-2602.23 1509,-2602.23 1509,-2566.23 1676,-2566.23 1676,-2602.23"/>
<text text-anchor="middle" x="1592.5" y="-2580.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node164"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="1990,-2602.23 1845,-2602.23 1845,-2566.23 1990,-2566.23 1990,-2602.23"/>
<text text-anchor="middle" x="1917.5" y="-2580.53" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<path fill="none" stroke="gray" d="M1676.26,-2584.23C1724.95,-2584.23 1786.27,-2584.23 1834.78,-2584.23"/>
<polygon fill="gray" stroke="gray" points="1834.92,-2587.73 1844.92,-2584.23 1834.92,-2580.73 1834.92,-2587.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node168"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="2371.5,-2753.23 2258.5,-2753.23 2258.5,-2717.23 2371.5,-2717.23 2371.5,-2753.23"/>
<text text-anchor="middle" x="2315" y="-2731.53" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="gray" d="M1965.81,-2602.29C2038.76,-2630.14 2178.46,-2683.48 2256.91,-2713.43"/>
<polygon fill="gray" stroke="gray" points="2256.04,-2716.84 2266.63,-2717.14 2258.54,-2710.3 2256.04,-2716.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().</title>
<g id="a_node165"><a xlink:title="fn proof_to_hash(gamma: &amp;EdwardsPoint) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;let mut hasher = Sha512::new(); &#160;&#160;&#160;&#160;hasher.update([SUITE_ID, DOMAIN_SEPARATOR_PROOF]); &#160;&#160;&#160;&#160;hasher.update(gamma.mul_by_cofactor().compress().0);...">
<polygon fill="white" stroke="black" points="2815.5,-2753.23 2702.5,-2753.23 2702.5,-2717.23 2815.5,-2717.23 2815.5,-2753.23"/>
<text text-anchor="middle" x="2759" y="-2731.53" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2811.1,-2717.18C2860.18,-2696.92 2931.89,-2658.97 2967,-2600.23 3064.25,-2437.51 2919.16,-2345.24 3003,-2175.23 3020.55,-2139.63 3055.31,-2110.19 3082.66,-2091.08"/>
<polygon fill="gray" stroke="gray" points="3084.94,-2093.76 3091.25,-2085.25 3081.01,-2087.97 3084.94,-2093.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node166"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2008.5,-2807.23 1826.5,-2807.23 1826.5,-2771.23 2008.5,-2771.23 2008.5,-2807.23"/>
<text text-anchor="middle" x="1917.5" y="-2785.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="gray" d="M2008.74,-2776.9C2081.67,-2766.95 2182.63,-2753.16 2248.12,-2744.22"/>
<polygon fill="gray" stroke="gray" points="2248.88,-2747.65 2258.32,-2742.83 2247.94,-2740.71 2248.88,-2747.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;fn test_encode_to_curve_try_and_increment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let got = encode_to_curve_try_and_increment(&amp;v.pk, v.alpha) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.compress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.0...">
<polygon fill="white" stroke="black" points="2068.5,-2861.23 1766.5,-2861.23 1766.5,-2825.23 2068.5,-2825.23 2068.5,-2861.23"/>
<text text-anchor="middle" x="1917.5" y="-2839.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2068.66,-2854.58C2328.41,-2870.63 2845.53,-2885.63 2967,-2762.23 3012.84,-2715.66 2974.78,-2234.16 3003,-2175.23 3020.08,-2139.54 3054.72,-2110.2 3082.15,-2091.14"/>
<polygon fill="gray" stroke="gray" points="3084.45,-2093.82 3090.78,-2085.33 3080.53,-2088.02 3084.45,-2093.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" d="M2340.49,-2717.03C2380.69,-2688.01 2464.11,-2631.39 2543,-2600.23 2722.43,-2529.34 2838.14,-2650.8 2967,-2507.23 3016.57,-2452 2969.4,-2241.39 3003,-2175.23 3020.97,-2139.84 3055.68,-2110.37 3082.91,-2091.2"/>
<polygon fill="gray" stroke="gray" points="3085.18,-2093.89 3091.45,-2085.35 3081.23,-2088.11 3085.18,-2093.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" d="M2371.52,-2727.46C2521.5,-2705.97 2926.3,-2644.39 2967,-2600.23 3055.32,-2504.4 2925.52,-2414.01 3003,-2309.23 3017.3,-2289.89 3040.26,-2277.46 3062.19,-2269.55"/>
<polygon fill="gray" stroke="gray" points="3063.45,-2272.82 3071.82,-2266.32 3061.23,-2266.18 3063.45,-2272.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().</title>
<path fill="none" stroke="gray" d="M2371.53,-2735.23C2453.16,-2735.23 2605.26,-2735.23 2692.32,-2735.23"/>
<polygon fill="gray" stroke="gray" points="2692.35,-2738.73 2702.35,-2735.23 2692.35,-2731.73 2692.35,-2738.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node169"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="1990.5,-2753.23 1844.5,-2753.23 1844.5,-2717.23 1990.5,-2717.23 1990.5,-2753.23"/>
<text text-anchor="middle" x="1917.5" y="-2731.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="gray" d="M1990.58,-2735.23C2064.06,-2735.23 2177.06,-2735.23 2248.18,-2735.23"/>
<polygon fill="gray" stroke="gray" points="2248.36,-2738.73 2258.36,-2735.23 2248.36,-2731.73 2248.36,-2738.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node170"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="304,-6975.23 250,-6975.23 250,-6939.23 304,-6939.23 304,-6975.23"/>
<text text-anchor="middle" x="277" y="-6953.53" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="gray" d="M281.2,-6939.03C298.97,-6840.67 391.09,-6364.08 566,-6014.23 703.82,-5738.56 707.64,-5607.55 975,-5454.23 1064.52,-5402.89 1364.78,-5480.94 1437,-5407.23 1475.54,-5367.89 1420.41,-5201.38 1457,-5160.23 1481.06,-5133.16 1524,-5128.72 1554.89,-5129.58"/>
<polygon fill="gray" stroke="gray" points="1555.11,-5133.09 1565.27,-5130.08 1555.45,-5126.1 1555.11,-5133.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node264"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="903.5,-6975.23 617.5,-6975.23 617.5,-6939.23 903.5,-6939.23 903.5,-6975.23"/>
<text text-anchor="middle" x="760.5" y="-6953.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M304.23,-6957.23C360.85,-6957.23 498.2,-6957.23 607.34,-6957.23"/>
<polygon fill="gray" stroke="gray" points="607.47,-6960.73 617.47,-6957.23 607.47,-6953.73 607.47,-6960.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node267"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="927,-7299.23 594,-7299.23 594,-7263.23 927,-7263.23 927,-7299.23"/>
<text text-anchor="middle" x="760.5" y="-7277.53" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="gray" d="M289.28,-6975.55C323.35,-7029.09 431.18,-7185.79 566,-7254.23 571.76,-7257.15 577.73,-7259.78 583.85,-7262.16"/>
<polygon fill="gray" stroke="gray" points="582.98,-7265.57 593.58,-7265.69 585.37,-7258.99 582.98,-7265.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node171"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="893.5,-7926.23 627.5,-7926.23 627.5,-7890.23 893.5,-7890.23 893.5,-7926.23"/>
<text text-anchor="middle" x="760.5" y="-7904.53" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node174"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="1253,-7926.23 1159,-7926.23 1159,-7890.23 1253,-7890.23 1253,-7926.23"/>
<text text-anchor="middle" x="1206" y="-7904.53" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="gray" d="M893.66,-7908.23C978.67,-7908.23 1084.78,-7908.23 1148.6,-7908.23"/>
<polygon fill="gray" stroke="gray" points="1148.85,-7911.73 1158.85,-7908.23 1148.85,-7904.73 1148.85,-7911.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node172"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="892,-7980.23 629,-7980.23 629,-7944.23 892,-7944.23 892,-7980.23"/>
<text text-anchor="middle" x="760.5" y="-7958.53" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node173"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="1250.5,-7980.23 1161.5,-7980.23 1161.5,-7944.23 1250.5,-7944.23 1250.5,-7980.23"/>
<text text-anchor="middle" x="1206" y="-7958.53" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="gray" d="M892.17,-7962.23C978.57,-7962.23 1087.31,-7962.23 1151.19,-7962.23"/>
<polygon fill="gray" stroke="gray" points="1151.43,-7965.73 1161.43,-7962.23 1151.43,-7958.73 1151.43,-7965.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;pub fn restore(self, responses2_bytes: &amp;[Vec&lt;u8&gt;]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if responses2_bytes.len() != self.server_ids.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(Error::NumServers { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1950,-8063.23 1885,-8063.23 1885,-8027.23 1950,-8027.23 1950,-8063.23"/>
<text text-anchor="middle" x="1917.5" y="-8041.53" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="gray" d="M1250.58,-7967.32C1378.14,-7982.25 1749.63,-8025.71 1874.78,-8040.35"/>
<polygon fill="gray" stroke="gray" points="1874.41,-8043.83 1884.74,-8041.51 1875.22,-8036.87 1874.41,-8043.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node190"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1619.5,-8191.23 1565.5,-8191.23 1565.5,-8155.23 1619.5,-8155.23 1619.5,-8191.23"/>
<text text-anchor="middle" x="1592.5" y="-8169.53" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="gray" d="M1250.93,-7958.87C1303.24,-7957.5 1389.48,-7964.01 1437,-8015.23 1477.06,-8058.4 1416.34,-8103.62 1457,-8146.23 1481.93,-8172.35 1524.51,-8177 1555.09,-8176.45"/>
<polygon fill="gray" stroke="gray" points="1555.49,-8179.94 1565.36,-8176.06 1555.23,-8172.94 1555.49,-8179.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node192"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="1629.5,-8137.23 1555.5,-8137.23 1555.5,-8101.23 1629.5,-8101.23 1629.5,-8137.23"/>
<text text-anchor="middle" x="1592.5" y="-8115.53" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="gray" d="M1250.52,-7959.71C1302.03,-7959.22 1387.07,-7966.65 1437,-8015.23 1462.34,-8039.88 1431.31,-8067.93 1457,-8092.23 1480.27,-8114.23 1516.21,-8120.57 1545.09,-8121.62"/>
<polygon fill="gray" stroke="gray" points="1545.31,-8125.13 1555.37,-8121.79 1545.43,-8118.13 1545.31,-8125.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node185"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="1619.5,-8083.23 1565.5,-8083.23 1565.5,-8047.23 1619.5,-8047.23 1619.5,-8083.23"/>
<text text-anchor="middle" x="1592.5" y="-8061.53" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="gray" d="M1253.08,-7906.02C1300.99,-7905.43 1377.22,-7909.37 1437,-7935.23 1491.94,-7958.98 1542.32,-8008.88 1569.78,-8039.48"/>
<polygon fill="gray" stroke="gray" points="1567.35,-8042 1576.59,-8047.19 1572.59,-8037.37 1567.35,-8042"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node175"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="793,-7843.23 728,-7843.23 728,-7807.23 793,-7807.23 793,-7843.23"/>
<text text-anchor="middle" x="760.5" y="-7821.53" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="gray" d="M793.24,-7825.27C835.52,-7827.05 910.16,-7836.42 955,-7878.23 974.64,-7896.53 954.04,-7918.45 975,-7935.23 1024.48,-7974.84 1100.23,-7975.9 1151.14,-7970.87"/>
<polygon fill="gray" stroke="gray" points="1151.74,-7974.33 1161.29,-7969.76 1150.97,-7967.37 1151.74,-7974.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node176"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="795.5,-7789.23 725.5,-7789.23 725.5,-7753.23 795.5,-7753.23 795.5,-7789.23"/>
<text text-anchor="middle" x="760.5" y="-7767.53" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="gray" d="M795.53,-7765.57C838.26,-7760.54 911.24,-7759.13 955,-7798.23 981.69,-7822.07 948.31,-7852.39 975,-7876.23 1021.93,-7918.15 1097.14,-7920.84 1148.7,-7916.56"/>
<polygon fill="gray" stroke="gray" points="1149.05,-7920.04 1158.68,-7915.62 1148.39,-7913.08 1149.05,-7920.04"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node177"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="1656.5,-5639.23 1528.5,-5639.23 1528.5,-5603.23 1656.5,-5603.23 1656.5,-5639.23"/>
<text text-anchor="middle" x="1592.5" y="-5617.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node180"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="2364,-7257.23 2266,-7257.23 2266,-7221.23 2364,-7221.23 2364,-7257.23"/>
<text text-anchor="middle" x="2315" y="-7235.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1656.73,-5618.8C1681.2,-5621.38 1707.19,-5629.11 1723.5,-5648.23 1761.12,-5692.31 1726.71,-6115.33 1748,-6169.23 1832.49,-6383.14 1969.82,-6363.29 2083.5,-6563.23 2215.39,-6795.2 2288.43,-7114.88 2308.35,-7210.87"/>
<polygon fill="gray" stroke="gray" points="2304.98,-7211.86 2310.42,-7220.96 2311.84,-7210.46 2304.98,-7211.86"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node178"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="1619.5,-5693.23 1565.5,-5693.23 1565.5,-5657.23 1619.5,-5657.23 1619.5,-5693.23"/>
<text text-anchor="middle" x="1592.5" y="-5671.53" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node182"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="1945.5,-7257.23 1889.5,-7257.23 1889.5,-7221.23 1945.5,-7221.23 1945.5,-7257.23"/>
<text text-anchor="middle" x="1917.5" y="-7235.53" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1619.58,-5677.68C1650.15,-5682.09 1699.66,-5694.34 1723.5,-5728.23 1760.36,-5780.62 1740.94,-6240.56 1748,-6304.23 1788.1,-6665.92 1884.24,-7098.66 1910.04,-7211.33"/>
<polygon fill="gray" stroke="gray" points="1906.66,-7212.26 1912.31,-7221.22 1913.48,-7210.69 1906.66,-7212.26"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node179"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="1263.5,-5666.23 1148.5,-5666.23 1148.5,-5630.23 1263.5,-5630.23 1263.5,-5666.23"/>
<text text-anchor="middle" x="1206" y="-5644.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge472" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="gray" d="M1263.73,-5644.24C1331.27,-5639.5 1444.2,-5631.57 1518.27,-5626.37"/>
<polygon fill="gray" stroke="gray" points="1518.72,-5629.84 1528.45,-5625.65 1518.23,-5622.86 1518.72,-5629.84"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge473" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="gray" d="M1263.73,-5652.21C1343.84,-5657.83 1487.82,-5667.95 1555.06,-5672.67"/>
<polygon fill="gray" stroke="gray" points="1554.95,-5676.17 1565.17,-5673.38 1555.44,-5669.18 1554.95,-5676.17"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2317.87,-7221.11C2334.45,-7060.1 2456.85,-5857.05 2515,-4878.23 2517.67,-4833.33 2512.67,-4102.43 2543,-4069.23 2583.71,-4024.66 2657.84,-4025.35 2707.51,-4032.08"/>
<polygon fill="gray" stroke="gray" points="2707.01,-4035.54 2717.41,-4033.54 2708.03,-4028.61 2707.01,-4035.54"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node181"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="1685,-7277.23 1500,-7277.23 1500,-7241.23 1685,-7241.23 1685,-7277.23"/>
<text text-anchor="middle" x="1592.5" y="-7255.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1685.39,-7264.07C1705.98,-7264.97 1727.73,-7265.77 1748,-7266.23 1897.07,-7269.6 1934.64,-7274.91 2083.5,-7266.23 2142.21,-7262.8 2208.9,-7254.5 2255.39,-7248"/>
<polygon fill="gray" stroke="gray" points="2256.17,-7251.43 2265.58,-7246.56 2255.19,-7244.5 2256.17,-7251.43"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1685.19,-7253.55C1749.52,-7249.56 1832.15,-7244.45 1879.23,-7241.53"/>
<polygon fill="gray" stroke="gray" points="1879.51,-7245.02 1889.28,-7240.91 1879.08,-7238.04 1879.51,-7245.02"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1945.66,-7252.39C2039.92,-7295.97 2355.79,-7424.05 2515,-7266.23 2578.07,-7203.7 2483.95,-4135.56 2543,-4069.23 2583.13,-4024.14 2657.41,-4024.96 2707.27,-4031.86"/>
<polygon fill="gray" stroke="gray" points="2706.8,-4035.33 2717.21,-4033.36 2707.84,-4028.4 2706.8,-4035.33"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1945.68,-7239.23C2009.24,-7239.23 2168.74,-7239.23 2255.53,-7239.23"/>
<polygon fill="gray" stroke="gray" points="2255.74,-7242.73 2265.74,-7239.23 2255.74,-7235.73 2255.74,-7242.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node183"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="1684,-3158.23 1501,-3158.23 1501,-3122.23 1684,-3122.23 1684,-3158.23"/>
<text text-anchor="middle" x="1592.5" y="-3136.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M1684.12,-3146.03C1698.6,-3150.42 1712.43,-3157.13 1723.5,-3167.23 1750.98,-3192.28 1720.16,-3222.57 1748,-3247.23 1752.31,-3251.04 1756.93,-3254.45 1761.79,-3257.5"/>
<polygon fill="gray" stroke="gray" points="1760.37,-3260.71 1770.79,-3262.59 1763.81,-3254.62 1760.37,-3260.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node184"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="1679,-3212.23 1506,-3212.23 1506,-3176.23 1679,-3176.23 1679,-3212.23"/>
<text text-anchor="middle" x="1592.5" y="-3190.53" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M1665.49,-3212.27C1686.21,-3220.26 1707.5,-3231.52 1723.5,-3247.23 1743.18,-3266.54 1726.25,-3287.28 1748,-3304.23 1749.45,-3305.35 1750.92,-3306.44 1752.42,-3307.49"/>
<polygon fill="gray" stroke="gray" points="1750.97,-3310.71 1761.29,-3313.11 1754.71,-3304.8 1750.97,-3310.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1619.58,-8062.63C1649.21,-8061.26 1696.88,-8064.1 1723.5,-8092.23 1773.56,-8145.1 1692.79,-8206.74 1748,-8254.23 1877.84,-8365.9 2404.31,-8309.91 2515,-8179.23 2588.79,-8092.11 2467.18,-4154.58 2543,-4069.23 2583.09,-4024.1 2657.38,-4024.93 2707.25,-4031.84"/>
<polygon fill="gray" stroke="gray" points="2706.78,-4035.31 2717.2,-4033.34 2707.83,-4028.39 2706.78,-4035.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node193"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1992.5,-8137.23 1842.5,-8137.23 1842.5,-8101.23 1992.5,-8101.23 1992.5,-8137.23"/>
<text text-anchor="middle" x="1917.5" y="-8115.53" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="gray" d="M1619.66,-8069.6C1665.32,-8077.23 1761.43,-8093.3 1831.97,-8105.09"/>
<polygon fill="gray" stroke="gray" points="1831.74,-8108.6 1842.18,-8106.8 1832.9,-8101.7 1831.74,-8108.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<g id="a_node194"><a xlink:title="fn auth_secret(input: &amp;[u8; 64], auth_pt: &amp;RistrettoPoint) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;Kdf::make( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_SVR_MasterAuthorizationKey_20240823&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;auth_pt.compress().to_bytes(), ...">
<polygon fill="white" stroke="black" points="2363.5,-8082.23 2266.5,-8082.23 2266.5,-8046.23 2363.5,-8046.23 2363.5,-8082.23"/>
<text text-anchor="middle" x="2315" y="-8060.53" font-family="Helvetica,sans-Serif" font-size="14.00">auth_secret</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="gray" d="M1619.73,-8066.78C1650.46,-8068.51 1702.9,-8071.2 1748,-8072.23 1897.07,-8075.6 1934.41,-8074.81 2083.5,-8072.23 2142.31,-8071.21 2209.52,-8068.72 2256.13,-8066.79"/>
<polygon fill="gray" stroke="gray" points="2256.49,-8070.28 2266.34,-8066.36 2256.2,-8063.28 2256.49,-8070.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<g id="a_node186"><a xlink:title="fn to_ristretto_pt(b: &amp;[u8]) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;CompressedRistretto::from_slice(b).ok()?.decompress() }">
<polygon fill="white" stroke="black" points="1974,-8245.23 1861,-8245.23 1861,-8209.23 1974,-8209.23 1974,-8245.23"/>
<text text-anchor="middle" x="1917.5" y="-8223.53" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M1974.19,-8234.69C2095.74,-8247.44 2384.39,-8257.75 2515,-8091.23 2584.88,-8002.14 2467.8,-4099.87 2543,-4015.23 2580.75,-3972.73 2648.83,-3970.99 2698.29,-3976.7"/>
<polygon fill="gray" stroke="gray" points="2697.87,-3980.18 2708.23,-3977.98 2698.76,-3973.24 2697.87,-3980.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="1277.5,-8164.23 1134.5,-8164.23 1134.5,-8128.23 1277.5,-8128.23 1277.5,-8164.23"/>
<text text-anchor="middle" x="1206" y="-8142.53" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="gray" d="M1277.52,-8130.7C1327.57,-8119.76 1396.36,-8104.86 1457,-8092.23 1490.39,-8085.27 1528.51,-8077.65 1555.62,-8072.28"/>
<polygon fill="gray" stroke="gray" points="1556.31,-8075.71 1565.44,-8070.34 1554.95,-8068.84 1556.31,-8075.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="gray" d="M1237.6,-8128.09C1283.42,-8102.11 1373.43,-8055.51 1457,-8038.23 1608.04,-8007 1793,-8026.92 1874.51,-8038.56"/>
<polygon fill="gray" stroke="gray" points="1874.46,-8042.08 1884.86,-8040.07 1875.47,-8035.16 1874.46,-8042.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node189"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1629.5,-8245.23 1555.5,-8245.23 1555.5,-8209.23 1629.5,-8209.23 1629.5,-8245.23"/>
<text text-anchor="middle" x="1592.5" y="-8223.53" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="gray" d="M1277.52,-8161.75C1327.57,-8172.69 1396.36,-8187.59 1457,-8200.23 1486.33,-8206.34 1519.31,-8212.96 1545.28,-8218.12"/>
<polygon fill="gray" stroke="gray" points="1544.73,-8221.58 1555.22,-8220.09 1546.09,-8214.71 1544.73,-8221.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="gray" d="M1277.52,-8151.18C1359.5,-8156.93 1491.64,-8166.21 1555.14,-8170.67"/>
<polygon fill="gray" stroke="gray" points="1555.23,-8174.19 1565.45,-8171.4 1555.72,-8167.2 1555.23,-8174.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<g id="a_node191"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore1(&amp;mut self, req_bytes: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.inner &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1629.5,-8353.23 1555.5,-8353.23 1555.5,-8317.23 1629.5,-8317.23 1629.5,-8353.23"/>
<text text-anchor="middle" x="1592.5" y="-8331.53" font-family="Helvetica,sans-Serif" font-size="14.00">restore1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<path fill="none" stroke="gray" d="M1228.49,-8164.26C1269.9,-8198.01 1364.79,-8270.69 1457,-8308.23 1485.14,-8319.68 1518.63,-8326.42 1545.16,-8330.31"/>
<polygon fill="gray" stroke="gray" points="1544.94,-8333.81 1555.32,-8331.71 1545.89,-8326.87 1544.94,-8333.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="gray" d="M1277.52,-8141.27C1355.42,-8135.8 1478.6,-8127.15 1545.15,-8122.48"/>
<polygon fill="gray" stroke="gray" points="1545.6,-8125.96 1555.33,-8121.77 1545.11,-8118.97 1545.6,-8125.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="gray" d="M1950.2,-8046.75C2016.62,-8049.94 2171.27,-8057.37 2255.98,-8061.44"/>
<polygon fill="gray" stroke="gray" points="2256.04,-8064.95 2266.2,-8061.93 2256.38,-8057.95 2256.04,-8064.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="gray" d="M1629.61,-8227.23C1683.08,-8227.23 1784.18,-8227.23 1850.95,-8227.23"/>
<polygon fill="gray" stroke="gray" points="1850.95,-8230.73 1860.95,-8227.23 1850.95,-8223.73 1850.95,-8230.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1619.6,-8170.86C1649.02,-8169.74 1696.27,-8172.86 1723.5,-8200.23 1762.2,-8239.12 1705.53,-8286.49 1748,-8321.23 1809.69,-8371.68 2494.74,-8316.6 2515,-8295.23 2595.76,-8210.02 2465.04,-4157 2543,-4069.23 2583.08,-4024.1 2657.38,-4024.93 2707.25,-4031.84"/>
<polygon fill="gray" stroke="gray" points="2706.78,-4035.31 2717.19,-4033.34 2707.83,-4028.39 2706.78,-4035.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<g id="a_node195"><a xlink:title="fn input_hash_pt(input: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(input) }">
<polygon fill="white" stroke="black" points="1974.5,-8191.23 1860.5,-8191.23 1860.5,-8155.23 1974.5,-8155.23 1974.5,-8191.23"/>
<text text-anchor="middle" x="1917.5" y="-8169.53" font-family="Helvetica,sans-Serif" font-size="14.00">input_hash_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="gray" d="M1619.66,-8173.23C1669.4,-8173.23 1779.01,-8173.23 1850.21,-8173.23"/>
<polygon fill="gray" stroke="gray" points="1850.43,-8176.73 1860.43,-8173.23 1850.43,-8169.73 1850.43,-8176.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="gray" d="M1601.14,-8353.43C1619.42,-8394.27 1670.04,-8492.53 1748,-8530.23 1825.18,-8567.55 2458.63,-8510.82 2515,-8446.23 2664.49,-8274.93 2749.43,-4543.47 2757.39,-4178.83"/>
<polygon fill="gray" stroke="gray" points="2760.89,-4178.66 2757.61,-4168.59 2753.89,-4178.51 2760.89,-4178.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1629.92,-8350.46C1768.96,-8405.92 2270.78,-8581.01 2515,-8329.23 2556.2,-8286.75 2503.71,-4113.46 2543,-4069.23 2583.08,-4024.1 2657.37,-4024.93 2707.25,-4031.84"/>
<polygon fill="gray" stroke="gray" points="2706.78,-4035.31 2717.19,-4033.34 2707.83,-4028.39 2706.78,-4035.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="gray" d="M1629.56,-8329.66C1655.92,-8325.13 1692.35,-8317.9 1723.5,-8308.23 1775.01,-8292.23 1831.66,-8267.56 1870.19,-8249.64"/>
<polygon fill="gray" stroke="gray" points="1872,-8252.66 1879.57,-8245.24 1869.03,-8246.32 1872,-8252.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1629.61,-8116.43C1659.07,-8116.27 1699.59,-8121.25 1723.5,-8146.23 1770.51,-8195.35 1696.22,-8253.17 1748,-8297.23 1819.45,-8358.01 2504.52,-8268.65 2515,-8257.23 2593.66,-8171.51 2465.74,-4156.2 2543,-4069.23 2583.08,-4024.1 2657.38,-4024.93 2707.25,-4031.84"/>
<polygon fill="gray" stroke="gray" points="2706.78,-4035.31 2717.19,-4033.34 2707.83,-4028.39 2706.78,-4035.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="gray" d="M1629.74,-8118.23C1658.1,-8119.3 1697.04,-8125.06 1723.5,-8146.23 1744.08,-8162.69 1727.05,-8184.24 1748,-8200.23 1776.92,-8222.3 1816.87,-8229.41 1850.61,-8230.83"/>
<polygon fill="gray" stroke="gray" points="1850.77,-8234.34 1860.86,-8231.1 1850.95,-8227.34 1850.77,-8234.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="gray" d="M1629.61,-8119.23C1678.21,-8119.23 1766.14,-8119.23 1831.89,-8119.23"/>
<polygon fill="gray" stroke="gray" points="1832.24,-8122.73 1842.24,-8119.23 1832.24,-8115.73 1832.24,-8122.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="gray" d="M1629.69,-8125.7C1660.98,-8131.26 1707.45,-8139.43 1748,-8146.23 1781.6,-8151.85 1819.02,-8157.87 1850.04,-8162.8"/>
<polygon fill="gray" stroke="gray" points="1849.88,-8166.32 1860.3,-8164.42 1850.97,-8159.4 1849.88,-8166.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="gray" d="M1992.89,-8108.88C2069.35,-8098.25 2186.77,-8081.92 2256.43,-8072.23"/>
<polygon fill="gray" stroke="gray" points="2256.93,-8075.7 2266.35,-8070.85 2255.96,-8068.76 2256.93,-8075.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2322.66,-8045.97C2352.56,-7962.93 2474.68,-7612.04 2515,-7312.23 2521,-7267.58 2513.05,-4102.87 2543,-4069.23 2583.13,-4024.14 2657.41,-4024.96 2707.27,-4031.86"/>
<polygon fill="gray" stroke="gray" points="2706.8,-4035.33 2717.21,-4033.36 2707.84,-4028.4 2706.8,-4035.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge431" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="gray" d="M1974.84,-8174.14C2109.22,-8175.01 2442.75,-8169.11 2515,-8091.23 2656.6,-7938.58 2748.32,-4525.2 2757.28,-4178.56"/>
<polygon fill="gray" stroke="gray" points="2760.78,-4178.45 2757.54,-4168.36 2753.78,-4178.27 2760.78,-4178.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<g id="a_node196"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new(req: &amp;svrb::request4::Create) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auth_commitment: to_ristretto_pt(&amp;req.auth_commitment) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode auth_commitment&#39; )...">
<polygon fill="white" stroke="black" points="1619.5,-8299.23 1565.5,-8299.23 1565.5,-8263.23 1619.5,-8263.23 1619.5,-8299.23"/>
<text text-anchor="middle" x="1592.5" y="-8277.53" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge492" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="gray" d="M1619.66,-8276.85C1669.47,-8268.52 1779.32,-8250.16 1850.52,-8238.26"/>
<polygon fill="gray" stroke="gray" points="1851.44,-8241.65 1860.73,-8236.55 1850.29,-8234.75 1851.44,-8241.65"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node197"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="1270,-5372.23 1142,-5372.23 1142,-5336.23 1270,-5336.23 1270,-5372.23"/>
<text text-anchor="middle" x="1206" y="-5350.53" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M1270.28,-5357C1318.11,-5356.73 1384.29,-5351.18 1437,-5327.23 1494.11,-5301.27 1544.71,-5246.29 1571.43,-5213.48"/>
<polygon fill="gray" stroke="gray" points="1574.18,-5215.65 1577.7,-5205.65 1568.72,-5211.27 1574.18,-5215.65"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node198"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="1269,-5318.23 1143,-5318.23 1143,-5282.23 1269,-5282.23 1269,-5318.23"/>
<text text-anchor="middle" x="1206" y="-5296.53" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="gray" d="M1269.21,-5300.58C1321.02,-5297.43 1393.16,-5284.51 1437,-5240.23 1462.78,-5214.18 1430.48,-5185.53 1457,-5160.23 1482.97,-5135.44 1524.99,-5130.48 1555.15,-5130.6"/>
<polygon fill="gray" stroke="gray" points="1555.2,-5134.1 1565.28,-5130.82 1555.36,-5127.1 1555.2,-5134.1"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node199"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="832,-5318.23 689,-5318.23 689,-5282.23 832,-5282.23 832,-5318.23"/>
<text text-anchor="middle" x="760.5" y="-5296.53" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="gray" d="M832.16,-5309.32C873.74,-5314.64 927.34,-5321.42 975,-5327.23 1027.32,-5333.6 1086.36,-5340.53 1131.53,-5345.77"/>
<polygon fill="gray" stroke="gray" points="1131.19,-5349.25 1141.53,-5346.93 1132,-5342.3 1131.19,-5349.25"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="gray" d="M832.26,-5300.23C914.55,-5300.23 1049.65,-5300.23 1132.62,-5300.23"/>
<polygon fill="gray" stroke="gray" points="1132.72,-5303.73 1142.72,-5300.23 1132.72,-5296.73 1132.72,-5303.73"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="gray" d="M795.84,-5282.22C841.44,-5256.2 920.25,-5203.42 955,-5133.23 971.25,-5100.41 948.33,-4829.32 975,-4804.23 1012.38,-4769.05 1399.52,-4769.15 1437,-4804.23 1486.1,-4850.19 1412.68,-5055.63 1457,-5106.23 1481.04,-5133.67 1524.47,-5137.94 1555.47,-5136.94"/>
<polygon fill="gray" stroke="gray" points="1555.66,-5140.43 1565.47,-5136.42 1555.3,-5133.44 1555.66,-5140.43"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M798.96,-5318.25C905.11,-5366.59 1214.62,-5488.41 1437,-5381.23 1509.45,-5346.31 1558.43,-5259.06 1579.62,-5214.44"/>
<polygon fill="gray" stroke="gray" points="1582.8,-5215.89 1583.83,-5205.34 1576.45,-5212.94 1582.8,-5215.89"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="gray" d="M796.28,-5282.02C842,-5255.96 920.53,-5203.31 955,-5133.23 972.68,-5097.28 945.9,-4800.76 975,-4773.23 1012.29,-4737.95 1393.28,-4746.32 1437,-4773.23 1538.58,-4835.73 1575.8,-4987.9 1587.18,-5051.04"/>
<polygon fill="gray" stroke="gray" points="1583.76,-5051.81 1588.9,-5061.07 1590.66,-5050.63 1583.76,-5051.81"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node200"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="314.5,-5318.23 239.5,-5318.23 239.5,-5282.23 314.5,-5282.23 314.5,-5318.23"/>
<text text-anchor="middle" x="277" y="-5296.53" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="gray" d="M314.59,-5300.23C391.76,-5300.23 572.81,-5300.23 678.63,-5300.23"/>
<polygon fill="gray" stroke="gray" points="678.63,-5303.73 688.63,-5300.23 678.63,-5296.73 678.63,-5303.73"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node201"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1351.5,-5151.23 1060.5,-5151.23 1060.5,-5115.23 1351.5,-5115.23 1351.5,-5151.23"/>
<text text-anchor="middle" x="1206" y="-5129.53" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="gray" d="M1351.54,-5133.23C1425.05,-5133.23 1508.48,-5133.23 1555.07,-5133.23"/>
<polygon fill="gray" stroke="gray" points="1555.26,-5136.73 1565.26,-5133.23 1555.26,-5129.73 1555.26,-5136.73"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M1351.63,-5148.95C1379.98,-5152.38 1409.45,-5156.2 1437,-5160.23 1477.67,-5166.16 1524.09,-5174.48 1555.34,-5180.31"/>
<polygon fill="gray" stroke="gray" points="1554.85,-5183.78 1565.33,-5182.19 1556.15,-5176.9 1554.85,-5183.78"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="gray" d="M1351.63,-5117.5C1379.98,-5114.07 1409.45,-5110.25 1437,-5106.23 1468.94,-5101.56 1504.42,-5095.43 1533.32,-5090.19"/>
<polygon fill="gray" stroke="gray" points="1534.04,-5093.62 1543.25,-5088.38 1532.78,-5086.73 1534.04,-5093.62"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1619.59,-5136.06C1649.46,-5137.7 1697.58,-5135.15 1723.5,-5106.23 1761.64,-5063.67 1710.85,-4893.65 1748,-4850.23 1848.06,-4733.25 1935.26,-4805.71 2083.5,-4764.23 2276.51,-4710.22 2391.67,-4791.21 2515,-4633.23 2553.61,-4583.77 2500.34,-4115.23 2543,-4069.23 2583.84,-4025.19 2657.35,-4025.58 2706.91,-4032.11"/>
<polygon fill="gray" stroke="gray" points="2706.7,-4035.61 2717.1,-4033.58 2707.7,-4028.68 2706.7,-4035.61"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node203"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="1272.5,-5097.23 1139.5,-5097.23 1139.5,-5061.23 1272.5,-5061.23 1272.5,-5097.23"/>
<text text-anchor="middle" x="1206" y="-5075.53" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="gray" d="M1272.56,-5085.93C1318.65,-5090.89 1381.7,-5098.15 1437,-5106.23 1477.67,-5112.16 1524.09,-5120.48 1555.34,-5126.31"/>
<polygon fill="gray" stroke="gray" points="1554.85,-5129.78 1565.33,-5128.19 1556.15,-5122.9 1554.85,-5129.78"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node204"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="1333,-5205.23 1079,-5205.23 1079,-5169.23 1333,-5169.23 1333,-5205.23"/>
<text text-anchor="middle" x="1206" y="-5183.53" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="gray" d="M1333.1,-5173.72C1366.9,-5169.74 1403.38,-5165.13 1437,-5160.23 1477.67,-5154.29 1524.09,-5145.97 1555.34,-5140.14"/>
<polygon fill="gray" stroke="gray" points="1556.15,-5143.55 1565.33,-5138.26 1554.85,-5136.67 1556.15,-5143.55"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M1333.17,-5187.23C1410.84,-5187.23 1504.9,-5187.23 1555.35,-5187.23"/>
<polygon fill="gray" stroke="gray" points="1555.43,-5190.73 1565.43,-5187.23 1555.43,-5183.73 1555.43,-5190.73"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="gray" d="M1333.14,-5196.36C1369.84,-5193.06 1407.85,-5183.15 1437,-5160.23 1457.12,-5144.4 1437.54,-5122.85 1457,-5106.23 1477.86,-5088.4 1507.18,-5081.15 1533.13,-5078.57"/>
<polygon fill="gray" stroke="gray" points="1533.56,-5082.05 1543.26,-5077.77 1533.01,-5075.07 1533.56,-5082.05"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1619.75,-5183.36C1747.08,-5163.07 2302.76,-5056.08 2515,-4708.23 2552.02,-4647.56 2494.83,-4121.48 2543,-4069.23 2583.83,-4024.94 2657.69,-4025.49 2707.29,-4032.11"/>
<polygon fill="gray" stroke="gray" points="2707.08,-4035.62 2717.48,-4033.6 2708.1,-4028.69 2707.08,-4035.62"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1601.27,-5205.3C1624.9,-5261.31 1696.02,-5437.46 1723.5,-5591.23 1768.73,-5844.34 1722.52,-5913.37 1748,-6169.23 1789.52,-6586.1 1886.38,-7087.72 1910.82,-7210.9"/>
<polygon fill="gray" stroke="gray" points="1907.45,-7211.88 1912.83,-7221.01 1914.31,-7210.52 1907.45,-7211.88"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge484" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M1596.17,-5060.96C1605.39,-5005.28 1641.35,-4837.04 1748,-4764.23 1809.79,-4722.04 2025.51,-4783.49 2083.5,-4736.23 2121.93,-4704.91 2080.44,-4664.77 2115,-4629.23 2245.32,-4495.21 2400.81,-4647.22 2515,-4499.23 2580.81,-4413.93 2469.42,-4093.92 2543,-4015.23 2581.62,-3973.92 2649.01,-3971.81 2698.07,-3977.11"/>
<polygon fill="gray" stroke="gray" points="2697.89,-3980.62 2708.24,-3978.34 2698.73,-3973.67 2697.89,-3980.62"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge485" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1641.61,-5078.04C1668.65,-5079.87 1701.32,-5086.59 1723.5,-5106.23 2097.01,-5436.82 1950.76,-5688.41 2083.5,-6169.23 2196.28,-6577.74 2287.49,-7086.54 2309.12,-7210.86"/>
<polygon fill="gray" stroke="gray" points="2305.73,-7211.8 2310.89,-7221.06 2312.63,-7210.61 2305.73,-7211.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node207"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="1278,-6662.23 1134,-6662.23 1134,-6626.23 1278,-6626.23 1278,-6662.23"/>
<text text-anchor="middle" x="1206" y="-6640.53" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node211"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="1619.5,-4647.23 1565.5,-4647.23 1565.5,-4611.23 1619.5,-4611.23 1619.5,-4647.23"/>
<text text-anchor="middle" x="1592.5" y="-4625.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M1278.15,-6656.88C1330.27,-6661.64 1398.4,-6657.63 1437,-6614.23 1465.89,-6581.74 1450.02,-5092.14 1457,-5049.23 1481.86,-4896.48 1551.31,-4723.11 1579.44,-4656.91"/>
<polygon fill="gray" stroke="gray" points="1582.72,-4658.15 1583.43,-4647.58 1576.28,-4655.39 1582.72,-4658.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<g id="a_node212"><a xlink:title=" &#160;&#160;&#160;pub fn to_token(&amp;self, client_key: &amp;ClientDecryptionKey) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.R * client_key.a_inv; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::to_token_raw(P) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1630,-4539.23 1555,-4539.23 1555,-4503.23 1630,-4503.23 1630,-4539.23"/>
<text text-anchor="middle" x="1592.5" y="-4517.53" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="gray" d="M1278.19,-6656.91C1330.33,-6661.7 1398.46,-6657.69 1437,-6614.23 1475.08,-6571.28 1420.42,-4592.45 1457,-4548.23 1477.78,-4523.11 1514.78,-4517.13 1544.72,-4517.01"/>
<polygon fill="gray" stroke="gray" points="1544.92,-4520.51 1554.98,-4517.19 1545.04,-4513.51 1544.92,-4520.51"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node216"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="1625.5,-4593.23 1559.5,-4593.23 1559.5,-4557.23 1625.5,-4557.23 1625.5,-4593.23"/>
<text text-anchor="middle" x="1592.5" y="-4571.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M1278.19,-6656.91C1330.32,-6661.69 1398.46,-6657.68 1437,-6614.23 1474.09,-6572.41 1421.37,-4645.29 1457,-4602.23 1478.9,-4575.77 1518.8,-4570.55 1549.48,-4571.04"/>
<polygon fill="gray" stroke="gray" points="1549.37,-4574.54 1559.49,-4571.4 1549.62,-4567.54 1549.37,-4574.54"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<g id="a_node217"><a xlink:title=" &#160;&#160;&#160;pub fn verify(&amp;self, point: &amp;RistrettoPoint, token: &amp;[u8]) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.sk_prime * point; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected = Endorsement::to_token_raw(P); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1620.5,-4485.23 1564.5,-4485.23 1564.5,-4449.23 1620.5,-4449.23 1620.5,-4485.23"/>
<text text-anchor="middle" x="1592.5" y="-4463.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="gray" d="M1278.19,-6656.92C1330.33,-6661.7 1398.47,-6657.69 1437,-6614.23 1476.06,-6570.16 1419.47,-4539.61 1457,-4494.23 1480.05,-4466.36 1523.07,-4462.05 1554.27,-4463.16"/>
<polygon fill="gray" stroke="gray" points="1554.17,-4466.66 1564.34,-4463.71 1554.55,-4459.67 1554.17,-4466.66"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<g id="a_node228"><a xlink:title=" &#160;&#160;&#160;fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut point_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut point_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;point_byte...">
<polygon fill="white" stroke="black" points="1633,-7360.23 1552,-7360.23 1552,-7324.23 1633,-7324.23 1633,-7360.23"/>
<text text-anchor="middle" x="1592.5" y="-7338.53" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="gray" d="M1278.21,-6639.6C1330.71,-6640.47 1399.32,-6651.42 1437,-6697.23 1480.44,-6750.02 1413.38,-7259.58 1457,-7312.23 1477.21,-7336.62 1512.49,-7343.8 1541.84,-7345.06"/>
<polygon fill="gray" stroke="gray" points="1541.87,-7348.56 1551.95,-7345.27 1542.02,-7341.56 1541.87,-7348.56"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node208"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="798,-6662.23 723,-6662.23 723,-6626.23 798,-6626.23 798,-6662.23"/>
<text text-anchor="middle" x="760.5" y="-6640.53" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="gray" d="M798.17,-6644.23C869.13,-6644.23 1026.73,-6644.23 1123.62,-6644.23"/>
<polygon fill="gray" stroke="gray" points="1123.67,-6647.73 1133.67,-6644.23 1123.67,-6640.73 1123.67,-6647.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node209"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="1277.5,-4647.23 1134.5,-4647.23 1134.5,-4611.23 1277.5,-4611.23 1277.5,-4647.23"/>
<text text-anchor="middle" x="1206" y="-4625.53" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M1277.52,-4629.23C1359.5,-4629.23 1491.64,-4629.23 1555.14,-4629.23"/>
<polygon fill="gray" stroke="gray" points="1555.45,-4632.73 1565.45,-4629.23 1555.45,-4625.73 1555.45,-4632.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M1277.6,-4621.98C1323.17,-4617.04 1383.69,-4610.01 1437,-4602.23 1475.13,-4596.66 1518.31,-4589 1549.31,-4583.26"/>
<polygon fill="gray" stroke="gray" points="1550.14,-4586.66 1559.33,-4581.39 1548.86,-4579.78 1550.14,-4586.66"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="gray" d="M1277.55,-4615.54C1329.71,-4609.93 1398.16,-4612.89 1437,-4656.23 1486.24,-4711.17 1410.64,-7254.83 1457,-7312.23 1476.9,-7336.87 1512.19,-7344.04 1541.63,-7345.23"/>
<polygon fill="gray" stroke="gray" points="1541.7,-7348.73 1551.76,-7345.42 1541.83,-7341.73 1541.7,-7348.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().</title>
<g id="a_node210"><a xlink:title=" &#160;&#160;&#160;fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter&lt;&#39;_&gt;) &#45;&gt; std::fmt::Result { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.compress().fmt(f) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1233,-4431.23 1179,-4431.23 1179,-4395.23 1233,-4395.23 1233,-4431.23"/>
<text text-anchor="middle" x="1206" y="-4409.53" font-family="Helvetica,sans-Serif" font-size="14.00">fmt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<g id="a_node219"><a xlink:title=" &#160;&#160;&#160;pub fn compress(self) &#45;&gt; Endorsement&lt;CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Endorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: self.R.compress(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1634,-4431.23 1551,-4431.23 1551,-4395.23 1634,-4395.23 1634,-4431.23"/>
<text text-anchor="middle" x="1592.5" y="-4409.53" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="gray" d="M1233.13,-4413.23C1296.18,-4413.23 1457.6,-4413.23 1540.57,-4413.23"/>
<polygon fill="gray" stroke="gray" points="1540.77,-4416.73 1550.77,-4413.23 1540.77,-4409.73 1540.77,-4416.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1619.72,-4637.12C1742.36,-4672.23 2263.95,-4801.47 2515,-4541.23 2587.95,-4465.6 2471.18,-4145.92 2543,-4069.23 2584.05,-4025.39 2657.51,-4025.73 2707,-4032.19"/>
<polygon fill="gray" stroke="gray" points="2706.78,-4035.69 2717.17,-4033.65 2707.77,-4028.76 2706.78,-4035.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1600.62,-4647.29C1622.97,-4704.88 1692.15,-4889.69 1723.5,-5049.23 1895.06,-5922.25 1914.21,-7021.19 1916.26,-7210.76"/>
<polygon fill="gray" stroke="gray" points="1912.76,-7211.03 1916.37,-7221 1919.76,-7210.96 1912.76,-7211.03"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node218"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="2022,-4533.23 1813,-4533.23 1813,-4497.23 2022,-4497.23 2022,-4533.23"/>
<text text-anchor="middle" x="1917.5" y="-4511.53" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="gray" d="M1619.83,-4625.49C1646.41,-4621.32 1688.42,-4613.62 1723.5,-4602.23 1776.67,-4584.95 1834.79,-4557.49 1873.21,-4538.05"/>
<polygon fill="gray" stroke="gray" points="1875.22,-4540.95 1882.54,-4533.29 1872.04,-4534.71 1875.22,-4540.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<g id="a_node215"><a xlink:title=" &#160;&#160;&#160;fn to_token_raw(unblinded_endorsement: RistrettoPoint) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Skip the Sho for this, we&#39;re hashing a single point into a single bitstring. We don&#39;t &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// need domain separa...">
<polygon fill="white" stroke="black" points="1971,-4479.23 1864,-4479.23 1864,-4443.23 1971,-4443.23 1971,-4479.23"/>
<text text-anchor="middle" x="1917.5" y="-4457.53" font-family="Helvetica,sans-Serif" font-size="14.00">to_token_raw</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="gray" d="M1630.28,-4513.95C1656.35,-4508.7 1692.14,-4501.32 1723.5,-4494.23 1734.43,-4491.75 1737.01,-4490.45 1748,-4488.23 1782.85,-4481.18 1822.06,-4474.8 1853.88,-4470.02"/>
<polygon fill="gray" stroke="gray" points="1854.56,-4473.46 1863.93,-4468.53 1853.53,-4466.54 1854.56,-4473.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node213"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="1256.5,-4485.23 1155.5,-4485.23 1155.5,-4449.23 1256.5,-4449.23 1256.5,-4485.23"/>
<text text-anchor="middle" x="1206" y="-4463.53" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M1256.59,-4457.66C1308.5,-4450.75 1389,-4449.31 1437,-4494.23 1472.64,-4527.58 1422.74,-4567.45 1457,-4602.23 1482.27,-4627.88 1524.6,-4632.65 1555.02,-4632.25"/>
<polygon fill="gray" stroke="gray" points="1555.36,-4635.74 1565.24,-4631.93 1555.14,-4628.75 1555.36,-4635.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="gray" d="M1256.91,-4472.27C1303.57,-4477.17 1375.14,-4485.2 1437,-4494.23 1473.31,-4499.53 1514.21,-4506.73 1544.8,-4512.36"/>
<polygon fill="gray" stroke="gray" points="1544.29,-4515.83 1554.76,-4514.21 1545.56,-4508.94 1544.29,-4515.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M1256.55,-4459.19C1307.3,-4453.84 1385.81,-4453.96 1437,-4494.23 1457.12,-4510.05 1437.54,-4531.6 1457,-4548.23 1482.32,-4569.86 1520.1,-4575.92 1549.19,-4576.96"/>
<polygon fill="gray" stroke="gray" points="1549.41,-4580.46 1559.47,-4577.13 1549.53,-4573.46 1549.41,-4580.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="gray" d="M1256.87,-4467.23C1334.96,-4467.23 1484.33,-4467.23 1553.99,-4467.23"/>
<polygon fill="gray" stroke="gray" points="1554.07,-4470.73 1564.07,-4467.23 1554.07,-4463.73 1554.07,-4470.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="gray" d="M1256.91,-4462.18C1303.57,-4457.28 1375.14,-4449.26 1437,-4440.23 1471.86,-4435.14 1510.94,-4428.3 1541.08,-4422.77"/>
<polygon fill="gray" stroke="gray" points="1541.74,-4426.21 1550.94,-4420.96 1540.47,-4419.33 1541.74,-4426.21"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="gray" d="M1256.75,-4456.31C1309.98,-4447.88 1392.74,-4444.82 1437,-4494.23 1489.23,-4552.53 1407.83,-7251.32 1457,-7312.23 1476.9,-7336.87 1512.19,-7344.05 1541.63,-7345.23"/>
<polygon fill="gray" stroke="gray" points="1541.7,-7348.74 1551.76,-7345.42 1541.83,-7341.74 1541.7,-7348.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<g id="a_node214"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(self) &#45;&gt; Result&lt;Endorsement&lt;RistrettoPoint&gt;, VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self.R.decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(R) =&gt; Ok(Endorsement { R }), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Veri...">
<polygon fill="white" stroke="black" points="1256.5,-4701.23 1155.5,-4701.23 1155.5,-4665.23 1256.5,-4665.23 1256.5,-4701.23"/>
<text text-anchor="middle" x="1206" y="-4679.53" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M1256.52,-4695.05C1402.89,-4726.83 1838.59,-4798.16 2083.5,-4588.23 2115.36,-4560.92 2085.28,-4528.84 2115,-4499.23 2248.42,-4366.27 2399.87,-4508.29 2515,-4359.23 2561.88,-4298.53 2489.97,-4070.63 2543,-4015.23 2582.1,-3974.38 2649.4,-3972.19 2698.31,-3977.34"/>
<polygon fill="gray" stroke="gray" points="2698.11,-3980.84 2708.45,-3978.54 2698.93,-3973.89 2698.11,-3980.84"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1971.26,-4462.37C2102.96,-4464.02 2440.87,-4460.46 2515,-4383.23 2563.51,-4332.68 2494.36,-4119.65 2543,-4069.23 2584.7,-4026 2658,-4026.19 2707.27,-4032.45"/>
<polygon fill="gray" stroke="gray" points="2707.02,-4035.95 2717.4,-4033.87 2707.98,-4029.02 2707.02,-4035.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="gray" d="M1625.8,-4583.46C1709.99,-4602.91 1939.56,-4642.88 2083.5,-4542.23 2111.79,-4522.44 2092.39,-4497.32 2115,-4471.23 2252.44,-4312.61 2401.2,-4396.57 2515,-4220.23 2564.86,-4142.96 2477.63,-4079.9 2543,-4015.23 2583.07,-3975.58 2649.9,-3973.1 2698.42,-3977.85"/>
<polygon fill="gray" stroke="gray" points="2698.16,-3981.34 2708.48,-3978.97 2698.93,-3974.39 2698.16,-3981.34"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1625.77,-4575.26C1653.8,-4576.75 1694.36,-4582.57 1723.5,-4602.23 1962.33,-4763.3 1984.95,-4870.53 2083.5,-5141.23 2231.58,-5547.97 2302.66,-6990.89 2312.74,-7210.99"/>
<polygon fill="gray" stroke="gray" points="2309.25,-7211.25 2313.2,-7221.08 2316.24,-7210.93 2309.25,-7211.25"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="gray" d="M1625.65,-4569.25C1668.14,-4561.36 1745.09,-4547.07 1809.17,-4535.16"/>
<polygon fill="gray" stroke="gray" points="1810.15,-4538.54 1819.34,-4533.27 1808.87,-4531.66 1810.15,-4538.54"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="gray" d="M1620.76,-4466.72C1671.86,-4465.77 1783.24,-4463.7 1853.79,-4462.39"/>
<polygon fill="gray" stroke="gray" points="1853.96,-4465.89 1863.89,-4462.2 1853.83,-4458.89 1853.96,-4465.89"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M2003.78,-4533.24C2134.63,-4555.33 2383.52,-4574.42 2515,-4435.23 2571.01,-4375.93 2486.74,-4128.29 2543,-4069.23 2584.42,-4025.74 2657.79,-4025.99 2707.16,-4032.34"/>
<polygon fill="gray" stroke="gray" points="2706.92,-4035.84 2717.31,-4033.77 2707.89,-4028.91 2706.92,-4035.84"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="gray" d="M1634.2,-4410.97C1662.83,-4411.67 1700.08,-4417.52 1723.5,-4440.23 1756.97,-4472.68 1711.38,-4513.36 1748,-4542.23 1819.18,-4598.33 2504.87,-4515.58 2515,-4505.23 2582.91,-4435.84 2476.47,-4139.93 2543,-4069.23 2584.16,-4025.49 2657.59,-4025.8 2707.04,-4032.23"/>
<polygon fill="gray" stroke="gray" points="2706.82,-4035.74 2717.21,-4033.68 2707.81,-4028.81 2706.82,-4035.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node220"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1304,-4539.23 1108,-4539.23 1108,-4503.23 1304,-4503.23 1304,-4539.23"/>
<text text-anchor="middle" x="1206" y="-4517.53" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge464" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M1304.09,-4510.74C1348.81,-4511.01 1400.03,-4519.15 1437,-4548.23 1457.12,-4564.05 1437.54,-4585.6 1457,-4602.23 1484.01,-4625.31 1525.21,-4630.66 1554.9,-4631.1"/>
<polygon fill="gray" stroke="gray" points="1555.28,-4634.6 1565.26,-4631.07 1555.25,-4627.6 1555.28,-4634.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge463" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="gray" d="M1304.03,-4521.23C1380.84,-4521.23 1484.78,-4521.23 1544.34,-4521.23"/>
<polygon fill="gray" stroke="gray" points="1544.57,-4524.73 1554.57,-4521.23 1544.57,-4517.73 1544.57,-4524.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge466" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M1304.24,-4531.42C1345.28,-4536.04 1393.54,-4541.88 1437,-4548.23 1475.13,-4553.79 1518.31,-4561.45 1549.31,-4567.19"/>
<polygon fill="gray" stroke="gray" points="1548.86,-4570.67 1559.33,-4569.06 1550.14,-4563.79 1548.86,-4570.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge462" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="gray" d="M1304.24,-4511.03C1345.28,-4506.42 1393.54,-4500.57 1437,-4494.23 1477.18,-4488.36 1522.98,-4480.17 1554.22,-4474.35"/>
<polygon fill="gray" stroke="gray" points="1555.04,-4477.75 1564.22,-4472.47 1553.75,-4470.87 1555.04,-4477.75"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge465" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="gray" d="M1304.05,-4505.61C1351.16,-4503.95 1404.47,-4511.92 1437,-4548.23 1488.24,-4605.41 1408.76,-7252.49 1457,-7312.23 1476.9,-7336.87 1512.19,-7344.05 1541.63,-7345.23"/>
<polygon fill="gray" stroke="gray" points="1541.7,-7348.74 1551.76,-7345.42 1541.83,-7341.74 1541.7,-7348.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node221"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="1250,-4593.23 1162,-4593.23 1162,-4557.23 1250,-4557.23 1250,-4593.23"/>
<text text-anchor="middle" x="1206" y="-4571.53" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge468" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M1250.33,-4579.58C1296.64,-4584.4 1372.15,-4592.76 1437,-4602.23 1477.67,-4608.16 1524.09,-4616.48 1555.34,-4622.31"/>
<polygon fill="gray" stroke="gray" points="1554.85,-4625.78 1565.33,-4624.19 1556.15,-4618.9 1554.85,-4625.78"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge469" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M1250.36,-4575.23C1324.68,-4575.23 1475.47,-4575.23 1549.11,-4575.23"/>
<polygon fill="gray" stroke="gray" points="1549.4,-4578.73 1559.4,-4575.23 1549.4,-4571.73 1549.4,-4578.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge470" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="gray" d="M1250.13,-4565.4C1302.89,-4556.24 1390.85,-4550.73 1437,-4602.23 1487.24,-4658.29 1409.7,-7253.66 1457,-7312.23 1476.9,-7336.87 1512.19,-7344.05 1541.63,-7345.23"/>
<polygon fill="gray" stroke="gray" points="1541.7,-7348.73 1551.76,-7345.42 1541.83,-7341.74 1541.7,-7348.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node222"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="1620.5,-6578.23 1564.5,-6578.23 1564.5,-6542.23 1620.5,-6542.23 1620.5,-6578.23"/>
<text text-anchor="middle" x="1592.5" y="-6556.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1620.74,-6559.63C1701.85,-6559.33 1944.76,-6569.35 2083.5,-6693.23 2247.42,-6839.58 2298.26,-7121.74 2310.61,-7211.26"/>
<polygon fill="gray" stroke="gray" points="2307.15,-7211.75 2311.93,-7221.2 2314.08,-7210.83 2307.15,-7211.75"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node223"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="1619.5,-6632.23 1565.5,-6632.23 1565.5,-6596.23 1619.5,-6596.23 1619.5,-6632.23"/>
<text text-anchor="middle" x="1592.5" y="-6610.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1619.6,-6618.24C1648.79,-6624.05 1695.62,-6637.57 1723.5,-6667.23 1876.99,-6830.49 1908.72,-7120.03 1915.01,-7211.04"/>
<polygon fill="gray" stroke="gray" points="1911.52,-7211.38 1915.66,-7221.13 1918.51,-7210.93 1911.52,-7211.38"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node224"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="1620.5,-6882.23 1564.5,-6882.23 1564.5,-6846.23 1620.5,-6846.23 1620.5,-6882.23"/>
<text text-anchor="middle" x="1592.5" y="-6860.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1620.64,-6864.26C1698.49,-6865.52 1927,-6877.5 2083.5,-6971.23 2186.78,-7033.07 2267.11,-7157.48 2299.03,-7212.27"/>
<polygon fill="gray" stroke="gray" points="2296.06,-7214.13 2304.08,-7221.06 2302.13,-7210.64 2296.06,-7214.13"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node225"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="1619.5,-6936.23 1565.5,-6936.23 1565.5,-6900.23 1619.5,-6900.23 1619.5,-6936.23"/>
<text text-anchor="middle" x="1592.5" y="-6914.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge498" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1611.79,-6936.4C1666.29,-6990.57 1827.72,-7150.99 1890.82,-7213.7"/>
<polygon fill="gray" stroke="gray" points="1888.45,-7216.28 1898.01,-7220.85 1893.38,-7211.32 1888.45,-7216.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node226"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="1627,-6769.23 1558,-6769.23 1558,-6733.23 1627,-6733.23 1627,-6769.23"/>
<text text-anchor="middle" x="1592.5" y="-6747.53" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1627.09,-6766.09C1655.77,-6780.18 1696.55,-6803.72 1723.5,-6834.23 1828.96,-6953.59 1889.09,-7140.7 1909.02,-7211.14"/>
<polygon fill="gray" stroke="gray" points="1905.72,-7212.35 1911.77,-7221.05 1912.46,-7210.47 1905.72,-7212.35"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node227"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1620.5,-6715.23 1564.5,-6715.23 1564.5,-6679.23 1620.5,-6679.23 1620.5,-6715.23"/>
<text text-anchor="middle" x="1592.5" y="-6693.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge486" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1620.62,-6695.64C1700.38,-6692.39 1937.71,-6693.14 2083.5,-6804.23 2225.05,-6912.07 2288.82,-7132.23 2307.7,-7210.68"/>
<polygon fill="gray" stroke="gray" points="2304.38,-7211.84 2310.07,-7220.78 2311.19,-7210.25 2304.38,-7211.84"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="gray" d="M1610.76,-7360.47C1640.43,-7393.19 1700.16,-7465.38 1723.5,-7539.23 1737.72,-7584.22 1714.16,-8355.34 1748,-8388.23 1870.25,-8507 2391.08,-8505.25 2515,-8388.23 2678.08,-8234.23 2750.76,-4539.63 2757.48,-4178.55"/>
<polygon fill="gray" stroke="gray" points="2760.99,-4178.47 2757.67,-4168.41 2753.99,-4178.34 2760.99,-4178.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node229"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="422,-4990.23 132,-4990.23 132,-4954.23 422,-4954.23 422,-4990.23"/>
<text text-anchor="middle" x="277" y="-4968.53" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M312.5,-4954.01C372.57,-4920.16 494.83,-4841.22 546,-4735.23 564.33,-4697.25 537.49,-4387.3 566,-4356.23 605.38,-4313.31 679,-4315.82 723.21,-4322.12"/>
<polygon fill="gray" stroke="gray" points="722.82,-4325.61 733.24,-4323.69 723.9,-4318.69 722.82,-4325.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="gray" d="M311.8,-4954.17C371.35,-4920.29 493.59,-4840.96 546,-4735.23 572.82,-4681.12 524.71,-4508.29 566,-4464.23 589.02,-4439.66 623.26,-4430.09 656.58,-4427.57"/>
<polygon fill="gray" stroke="gray" points="657.08,-4431.05 666.87,-4427.01 656.7,-4424.06 657.08,-4431.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M312.57,-4954.05C372.75,-4920.25 495.18,-4841.39 546,-4735.23 566.79,-4691.78 533.55,-4337.82 566,-4302.23 588.88,-4277.12 623.47,-4267.53 657.11,-4265.15"/>
<polygon fill="gray" stroke="gray" points="657.69,-4268.62 667.5,-4264.63 657.34,-4261.63 657.69,-4268.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node257"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="911.5,-4509.23 609.5,-4509.23 609.5,-4473.23 911.5,-4473.23 911.5,-4509.23"/>
<text text-anchor="middle" x="760.5" y="-4487.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="gray" d="M311.61,-4954.08C370.85,-4920.05 492.63,-4840.48 546,-4735.23 567.9,-4692.03 532.57,-4553.26 566,-4518.23 575.7,-4508.06 587.34,-4500.47 600.02,-4494.9"/>
<polygon fill="gray" stroke="gray" points="601.41,-4498.12 609.43,-4491.19 598.84,-4491.61 601.41,-4498.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node230"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="391,-5098.23 163,-5098.23 163,-5062.23 391,-5062.23 391,-5098.23"/>
<text text-anchor="middle" x="277" y="-5076.53" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M391.19,-5069.46C438.99,-5064.75 495.24,-5058.99 546,-5053.23 589.37,-5048.3 637.62,-5042.25 677.26,-5037.12"/>
<polygon fill="gray" stroke="gray" points="677.95,-5040.56 687.41,-5035.8 677.05,-5033.62 677.95,-5040.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="gray" d="M391.19,-5080.23C477.93,-5080.23 595.72,-5080.23 674.51,-5080.23"/>
<polygon fill="gray" stroke="gray" points="674.88,-5083.73 684.88,-5080.23 674.88,-5076.73 674.88,-5083.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node259"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="947,-7191.23 574,-7191.23 574,-7155.23 947,-7155.23 947,-7191.23"/>
<text text-anchor="middle" x="760.5" y="-7169.53" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M391.04,-5071.99C446.45,-5074.58 509.05,-5088.7 546,-5133.23 581.71,-5176.26 529.08,-7104.22 566,-7146.23 566.52,-7146.82 567.06,-7147.41 567.59,-7147.99"/>
<polygon fill="gray" stroke="gray" points="565.3,-7150.64 574.94,-7155.06 570.16,-7145.6 565.3,-7150.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node260"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="945,-6867.23 576,-6867.23 576,-6831.23 945,-6831.23 945,-6867.23"/>
<text text-anchor="middle" x="760.5" y="-6845.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M391.33,-5072.05C446.64,-5074.69 509.06,-5088.84 546,-5133.23 573.8,-5166.62 546.76,-6658.27 566,-6697.23 596.07,-6758.09 663.36,-6801.96 710.09,-6826.48"/>
<polygon fill="gray" stroke="gray" points="708.64,-6829.67 719.14,-6831.13 711.84,-6823.45 708.64,-6829.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node261"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="896.5,-6921.23 624.5,-6921.23 624.5,-6885.23 896.5,-6885.23 896.5,-6921.23"/>
<text text-anchor="middle" x="760.5" y="-6899.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M391.01,-5072.01C446.41,-5074.61 509.01,-5088.73 546,-5133.23 576.95,-5170.46 534.01,-6839.88 566,-6876.23 578.98,-6890.97 595.99,-6900.42 614.53,-6906.23"/>
<polygon fill="gray" stroke="gray" points="613.79,-6909.65 624.36,-6908.94 615.65,-6902.91 613.79,-6909.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M391.02,-5072.01C446.42,-5074.6 509.02,-5088.72 546,-5133.23 577.9,-5171.62 533.02,-6892.75 566,-6930.23 577.23,-6942.98 591.47,-6951.78 607.12,-6957.68"/>
<polygon fill="gray" stroke="gray" points="606.44,-6961.14 617.03,-6960.99 608.65,-6954.5 606.44,-6961.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="gray" d="M391.05,-5071.98C446.46,-5074.57 509.06,-5088.69 546,-5133.23 583.62,-5178.57 527.11,-7209.96 566,-7254.23 571.59,-7260.59 577.93,-7265.96 584.81,-7270.49"/>
<polygon fill="gray" stroke="gray" points="583.42,-7273.73 593.82,-7275.77 586.97,-7267.69 583.42,-7273.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node231"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="385,-5044.23 169,-5044.23 169,-5008.23 385,-5008.23 385,-5044.23"/>
<text text-anchor="middle" x="277" y="-5022.53" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M385.16,-5026.23C473.39,-5026.23 596.64,-5026.23 677.24,-5026.23"/>
<polygon fill="gray" stroke="gray" points="677.34,-5029.73 687.34,-5026.23 677.34,-5022.73 677.34,-5029.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node232"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="1267.5,-6172.23 1144.5,-6172.23 1144.5,-6136.23 1267.5,-6136.23 1267.5,-6172.23"/>
<text text-anchor="middle" x="1206" y="-6150.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1267.56,-6142.31C1320.13,-6135.83 1394.31,-6136.66 1437,-6181.23 1478.77,-6224.84 1428.9,-6398.77 1457,-6452.23 1478.62,-6493.36 1523.45,-6524.31 1555.41,-6542.31"/>
<polygon fill="gray" stroke="gray" points="1554.01,-6545.53 1564.46,-6547.26 1557.37,-6539.39 1554.01,-6545.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="node289" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<g id="a_node289"><a xlink:title=" &#160;&#160;&#160;pub fn from_service_id(service_id: ServiceId) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M1 = Self::calc_M1(service_id); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let raw_uuid_bytes = service_id.raw_uuid().into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = RistrettoPoint...">
<polygon fill="white" stroke="black" points="1655,-6417.23 1530,-6417.23 1530,-6381.23 1655,-6381.23 1655,-6417.23"/>
<text text-anchor="middle" x="1592.5" y="-6395.53" font-family="Helvetica,sans-Serif" font-size="14.00">from_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1267.94,-6148.37C1316.95,-6146.58 1385.83,-6150.86 1437,-6181.23 1512.42,-6225.98 1560.71,-6323.52 1580.8,-6371.48"/>
<polygon fill="gray" stroke="gray" points="1577.64,-6372.99 1584.66,-6380.92 1584.12,-6370.34 1577.64,-6372.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node233"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="1262.5,-6280.23 1149.5,-6280.23 1149.5,-6244.23 1262.5,-6244.23 1262.5,-6280.23"/>
<text text-anchor="middle" x="1206" y="-6258.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1262.7,-6250.77C1315.63,-6243.47 1393.4,-6242.75 1437,-6289.23 1494.55,-6350.58 1402.68,-6603 1457,-6667.23 1480.39,-6694.88 1523.15,-6700.32 1554.19,-6700.14"/>
<polygon fill="gray" stroke="gray" points="1554.32,-6703.64 1564.23,-6699.89 1554.14,-6696.64 1554.32,-6703.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node234"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="1269,-6334.23 1143,-6334.23 1143,-6298.23 1269,-6298.23 1269,-6334.23"/>
<text text-anchor="middle" x="1206" y="-6312.53" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1269.12,-6311.78C1322.33,-6311.72 1396.6,-6321.29 1437,-6369.23 1487.92,-6429.64 1405.23,-6664.54 1457,-6724.23 1478.92,-6749.49 1517.27,-6755.16 1547.42,-6755.13"/>
<polygon fill="gray" stroke="gray" points="1547.78,-6758.63 1557.71,-6754.91 1547.63,-6751.63 1547.78,-6758.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node235"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1298.5,-6226.23 1113.5,-6226.23 1113.5,-6190.23 1298.5,-6190.23 1298.5,-6226.23"/>
<text text-anchor="middle" x="1206" y="-6204.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge488" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M1298.69,-6193.47C1346.68,-6191.31 1402.48,-6198.56 1437,-6235.23 1490.71,-6292.27 1405.65,-6528.05 1457,-6587.23 1480.91,-6614.78 1524.36,-6619.03 1555.41,-6617.99"/>
<polygon fill="gray" stroke="gray" points="1555.62,-6621.49 1565.42,-6617.47 1555.25,-6614.5 1555.62,-6621.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge487" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1298.5,-6204.72C1342.44,-6206.51 1394.62,-6213.91 1437,-6235.23 1499.76,-6266.79 1550.51,-6334.79 1575.2,-6372.56"/>
<polygon fill="gray" stroke="gray" points="1572.29,-6374.5 1580.63,-6381.03 1578.18,-6370.72 1572.29,-6374.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node236"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="1240.5,-7098.23 1171.5,-7098.23 1171.5,-7062.23 1240.5,-7062.23 1240.5,-7098.23"/>
<text text-anchor="middle" x="1206" y="-7076.53" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1240.74,-7087.9C1291.23,-7097.17 1385.93,-7105.63 1437,-7053.23 1471.11,-7018.23 1431.27,-6875.77 1457,-6834.23 1477.75,-6800.72 1517.56,-6778.68 1548.51,-6765.79"/>
<polygon fill="gray" stroke="gray" points="1549.81,-6769.04 1557.8,-6762.08 1547.21,-6762.54 1549.81,-6769.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node237"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1233,-7206.23 1179,-7206.23 1179,-7170.23 1233,-7170.23 1233,-7206.23"/>
<text text-anchor="middle" x="1206" y="-7184.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M1233.14,-7194.38C1281.03,-7203.93 1382.89,-7215.99 1437,-7161.23 1466.84,-7131.03 1431.3,-7005.02 1457,-6971.23 1480.34,-6940.53 1524.11,-6927.59 1555.38,-6922.15"/>
<polygon fill="gray" stroke="gray" points="1556.11,-6925.58 1565.45,-6920.58 1555.03,-6918.66 1556.11,-6925.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node238"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="1239,-7152.23 1173,-7152.23 1173,-7116.23 1239,-7116.23 1239,-7152.23"/>
<text text-anchor="middle" x="1206" y="-7130.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1239.09,-7141.58C1289.12,-7150.96 1385.34,-7160.17 1437,-7107.23 1470.67,-7072.72 1424.76,-6927.07 1457,-6891.23 1480.94,-6864.61 1523.12,-6859.94 1553.88,-6860.62"/>
<polygon fill="gray" stroke="gray" points="1554.09,-6864.13 1564.23,-6861.06 1554.39,-6857.14 1554.09,-6864.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node239"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="1234,-7044.23 1178,-7044.23 1178,-7008.23 1234,-7008.23 1234,-7044.23"/>
<text text-anchor="middle" x="1206" y="-7022.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1234.12,-7032.29C1282.67,-7041.37 1384.3,-7051.97 1437,-6996.23 1478.63,-6952.18 1416.9,-6769.67 1457,-6724.23 1480.75,-6697.31 1523.16,-6692.73 1554.02,-6693.51"/>
<polygon fill="gray" stroke="gray" points="1554.26,-6697.03 1564.41,-6693.99 1554.58,-6690.03 1554.26,-6697.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node240"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="1240.5,-6089.23 1171.5,-6089.23 1171.5,-6053.23 1240.5,-6053.23 1240.5,-6089.23"/>
<text text-anchor="middle" x="1206" y="-6067.53" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1240.81,-6067.57C1292.29,-6064.13 1389.34,-6066.34 1437,-6124.23 1479.4,-6175.72 1413.88,-6673.34 1457,-6724.23 1478.69,-6749.82 1517.25,-6755.42 1547.53,-6755.29"/>
<polygon fill="gray" stroke="gray" points="1547.95,-6758.78 1557.86,-6755.02 1547.77,-6751.78 1547.95,-6758.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1240.57,-6070.79C1288.73,-6071.82 1378.12,-6080.14 1437,-6124.23 1522.66,-6188.36 1567.57,-6314.81 1584.03,-6371.08"/>
<polygon fill="gray" stroke="gray" points="1580.76,-6372.38 1586.86,-6381.05 1587.49,-6370.47 1580.76,-6372.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node241"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="1239,-5927.23 1173,-5927.23 1173,-5891.23 1239,-5891.23 1239,-5927.23"/>
<text text-anchor="middle" x="1206" y="-5905.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1239.02,-5901.62C1289.4,-5891.78 1386.64,-5881.77 1437,-5936.23 1475.96,-5978.35 1431.19,-6400.98 1457,-6452.23 1477.96,-6493.85 1523.15,-6524.78 1555.36,-6542.64"/>
<polygon fill="gray" stroke="gray" points="1554.01,-6545.89 1564.48,-6547.54 1557.33,-6539.72 1554.01,-6545.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1239.31,-5903.12C1287.93,-5895.89 1380.23,-5890.06 1437,-5936.23 1575.1,-6048.54 1590.59,-6288.29 1591.7,-6370.71"/>
<polygon fill="gray" stroke="gray" points="1588.2,-6370.86 1591.77,-6380.83 1595.2,-6370.81 1588.2,-6370.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node242"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="1234,-6035.23 1178,-6035.23 1178,-5999.23 1234,-5999.23 1234,-6035.23"/>
<text text-anchor="middle" x="1206" y="-6013.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1234.29,-6010.55C1283.12,-6000.41 1385.19,-5987.82 1437,-6044.23 1483.85,-6095.23 1412.82,-6613.89 1457,-6667.23 1480.17,-6695.2 1523.17,-6700.55 1554.33,-6700.26"/>
<polygon fill="gray" stroke="gray" points="1554.5,-6703.76 1564.39,-6699.98 1554.3,-6696.76 1554.5,-6703.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node243"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="1270,-5981.23 1142,-5981.23 1142,-5945.23 1270,-5945.23 1270,-5981.23"/>
<text text-anchor="middle" x="1206" y="-5959.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M1270.07,-5950.64C1322.78,-5944.17 1395.76,-5945.4 1437,-5990.23 1481.93,-6039.07 1414.09,-6536.59 1457,-6587.23 1480.59,-6615.06 1524.11,-6619.25 1555.26,-6618.13"/>
<polygon fill="gray" stroke="gray" points="1555.51,-6621.62 1565.3,-6617.57 1555.12,-6614.63 1555.51,-6621.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1270.23,-5954.03C1320.57,-5950.29 1390.11,-5953.59 1437,-5990.23 1560.99,-6087.1 1585.48,-6295.28 1590.32,-6370.98"/>
<polygon fill="gray" stroke="gray" points="1586.83,-6371.37 1590.89,-6381.15 1593.82,-6370.97 1586.83,-6371.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node244"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1240.5,-6417.23 1171.5,-6417.23 1171.5,-6381.23 1240.5,-6381.23 1240.5,-6417.23"/>
<text text-anchor="middle" x="1206" y="-6395.53" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1240.9,-6391.4C1291.59,-6381.93 1386.56,-6373.21 1437,-6426.23 1482.75,-6474.31 1413.24,-6674.32 1457,-6724.23 1479.05,-6749.38 1517.39,-6755.06 1547.5,-6755.06"/>
<polygon fill="gray" stroke="gray" points="1547.85,-6758.56 1557.77,-6754.85 1547.7,-6751.56 1547.85,-6758.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1240.78,-6399.23C1302.88,-6399.23 1436.41,-6399.23 1519.61,-6399.23"/>
<polygon fill="gray" stroke="gray" points="1519.75,-6402.73 1529.75,-6399.23 1519.75,-6395.73 1519.75,-6402.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node245"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="1233,-6579.23 1179,-6579.23 1179,-6543.23 1233,-6543.23 1233,-6579.23"/>
<text text-anchor="middle" x="1206" y="-6557.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M1233.34,-6558.3C1282.04,-6554.53 1385.82,-6554.47 1437,-6614.23 1477.14,-6661.1 1416.2,-6844.92 1457,-6891.23 1481.02,-6918.48 1524.16,-6922.84 1555.11,-6921.92"/>
<polygon fill="gray" stroke="gray" points="1555.68,-6925.39 1565.5,-6921.4 1555.34,-6918.4 1555.68,-6925.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1233.14,-6563.04C1277.23,-6565.07 1368.27,-6564.71 1437,-6534.23 1492.89,-6509.43 1543.3,-6457.19 1570.44,-6425.46"/>
<polygon fill="gray" stroke="gray" points="1573.39,-6427.38 1577.15,-6417.47 1568.04,-6422.88 1573.39,-6427.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node246"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="1239,-6525.23 1173,-6525.23 1173,-6489.23 1239,-6489.23 1239,-6525.23"/>
<text text-anchor="middle" x="1206" y="-6503.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1239.2,-6499.75C1289.4,-6490.23 1385.82,-6480.81 1437,-6534.23 1478.62,-6577.67 1422.41,-6755 1457,-6804.23 1479.39,-6836.08 1522.73,-6851.27 1554.18,-6858.35"/>
<polygon fill="gray" stroke="gray" points="1553.84,-6861.85 1564.34,-6860.45 1555.26,-6855 1553.84,-6861.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1239,-6507.12C1284.14,-6506.16 1368.63,-6501.37 1437,-6480.23 1480.32,-6466.83 1525.82,-6441.4 1556.12,-6422.59"/>
<polygon fill="gray" stroke="gray" points="1558.04,-6425.52 1564.64,-6417.23 1554.31,-6419.6 1558.04,-6425.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node247"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="1234,-6471.23 1178,-6471.23 1178,-6435.23 1234,-6435.23 1234,-6471.23"/>
<text text-anchor="middle" x="1206" y="-6449.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1234.26,-6446.86C1282.6,-6437.36 1383.26,-6425.93 1437,-6480.23 1466.4,-6509.93 1429.16,-6636.05 1457,-6667.23 1480.95,-6694.04 1523.13,-6699.71 1553.88,-6699.82"/>
<polygon fill="gray" stroke="gray" points="1554.3,-6703.32 1564.24,-6699.66 1554.18,-6696.32 1554.3,-6703.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node286" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node286"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="1627.5,-3737.23 1557.5,-3737.23 1557.5,-3701.23 1627.5,-3701.23 1627.5,-3737.23"/>
<text text-anchor="middle" x="1592.5" y="-3715.53" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M1255.31,-3646.65C1330.47,-3662.88 1474.33,-3693.93 1547.06,-3709.63"/>
<polygon fill="gray" stroke="gray" points="1546.75,-3713.15 1557.26,-3711.83 1548.22,-3706.3 1546.75,-3713.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M773.05,-5007.99C808.68,-4950.57 916.78,-4767.25 955,-4598.23 961.08,-4571.34 955.32,-3625.52 975,-3606.23 1011.66,-3570.3 1389.57,-3586.58 1437,-3606.23 1448.61,-3611.04 1447.35,-3618.17 1457,-3626.23 1487.89,-3651.99 1525.78,-3677.72 1553.46,-3695.56"/>
<polygon fill="gray" stroke="gray" points="1551.76,-3698.63 1562.07,-3701.07 1555.53,-3692.73 1551.76,-3698.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node271"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="1627.5,-5776.23 1557.5,-5776.23 1557.5,-5740.23 1627.5,-5740.23 1627.5,-5776.23"/>
<text text-anchor="middle" x="1592.5" y="-5754.53" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M778.17,-5098.35C811.56,-5133.25 890.71,-5209.08 975,-5240.23 1023.25,-5258.06 1401.01,-5233.47 1437,-5270.23 1472.63,-5306.62 1424.28,-5689.18 1457,-5728.23 1478.51,-5753.9 1516.72,-5760.46 1546.93,-5761.14"/>
<polygon fill="gray" stroke="gray" points="1547.23,-5764.64 1557.24,-5761.16 1547.24,-5757.64 1547.23,-5764.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M787.64,-4327.22C900.41,-4319.15 1343.83,-4293.81 1437,-4386.23 1471.22,-4420.17 1424.76,-4566.39 1457,-4602.23 1481.22,-4629.15 1524.13,-4633.62 1554.97,-4632.8"/>
<polygon fill="gray" stroke="gray" points="1555.5,-4636.28 1565.33,-4632.32 1555.18,-4629.29 1555.5,-4636.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M854.34,-4445.01C889.69,-4443.09 927.94,-4434.41 955,-4410.23 981.69,-4386.38 946.73,-4354.17 975,-4332.23 1056.11,-4269.29 1361.13,-4263.06 1437,-4332.23 1472.62,-4364.7 1424.76,-4512.39 1457,-4548.23 1479.72,-4573.49 1518.9,-4578.98 1549.13,-4578.89"/>
<polygon fill="gray" stroke="gray" points="1549.49,-4582.38 1559.4,-4578.65 1549.32,-4575.38 1549.49,-4582.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node253"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="798,-4239.23 723,-4239.23 723,-4203.23 798,-4203.23 798,-4239.23"/>
<text text-anchor="middle" x="760.5" y="-4217.53" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="gray" d="M798.21,-4216.13C925.46,-4199.37 1344.91,-4151.77 1437,-4239.23 1478.22,-4278.37 1419.29,-4451.7 1457,-4494.23 1478.49,-4518.45 1515.09,-4524.56 1544.69,-4524.96"/>
<polygon fill="gray" stroke="gray" points="1544.86,-4528.46 1554.83,-4524.89 1544.81,-4521.46 1544.86,-4528.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<g id="a_node254"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroup...">
<polygon fill="white" stroke="black" points="788.5,-4185.23 732.5,-4185.23 732.5,-4149.23 788.5,-4149.23 788.5,-4185.23"/>
<text text-anchor="middle" x="760.5" y="-4163.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="gray" d="M788.69,-4163.31C902.92,-4147.53 1342.37,-4093.57 1437,-4183.23 1478.58,-4222.62 1419.01,-4397.36 1457,-4440.23 1480.81,-4467.09 1523.21,-4471.68 1554.05,-4470.91"/>
<polygon fill="gray" stroke="gray" points="1554.6,-4474.39 1564.43,-4470.45 1554.28,-4467.4 1554.6,-4474.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().</title>
<g id="a_node255"><a xlink:title=" &#160;&#160;&#160;pub fn decompress( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GroupSendEndorsement&lt;curve25519_dalek_signal::RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ZkGroupDeserializationFailure, &#160;&#160;&#160;&#160;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GroupSendEndorsem...">
<polygon fill="white" stroke="black" points="811,-4563.23 710,-4563.23 710,-4527.23 811,-4527.23 811,-4563.23"/>
<text text-anchor="middle" x="760.5" y="-4541.53" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<path fill="none" stroke="gray" d="M788.43,-4563.35C827.62,-4588.74 903.52,-4634.26 975,-4656.23 1031.21,-4673.5 1098.27,-4679.85 1145.44,-4682.12"/>
<polygon fill="gray" stroke="gray" points="1145.34,-4685.62 1155.48,-4682.55 1145.64,-4678.62 1145.34,-4685.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M853.18,-4268.88C1027.98,-4257.76 1395.35,-4239.38 1437,-4278.23 1480.99,-4319.26 1417.18,-4503.13 1457,-4548.23 1479.49,-4573.7 1518.69,-4579.16 1548.99,-4579.01"/>
<polygon fill="gray" stroke="gray" points="1549.38,-4582.5 1559.29,-4578.75 1549.2,-4575.51 1549.38,-4582.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge434" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M911.65,-4488.7C927.57,-4483.28 942.48,-4475.41 955,-4464.23 981.69,-4440.38 946.73,-4408.17 975,-4386.23 1056.11,-4323.29 1360.08,-4318.22 1437,-4386.23 1491.35,-4434.28 1407.67,-4495.03 1457,-4548.23 1480.03,-4573.06 1518.99,-4578.64 1549.07,-4578.68"/>
<polygon fill="gray" stroke="gray" points="1549.36,-4582.18 1559.29,-4578.49 1549.23,-4575.18 1549.36,-4582.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge455" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="gray" d="M802.06,-4389.62C845.4,-4394 913.45,-4393.47 955,-4356.23 981.97,-4332.05 946.42,-4299.47 975,-4277.23 1137.03,-4151.1 1244.89,-4204.72 1437,-4277.23 1495,-4299.12 1545.35,-4353.8 1571.78,-4386.78"/>
<polygon fill="gray" stroke="gray" points="1569.35,-4389.35 1578.28,-4395.06 1574.85,-4385.03 1569.35,-4389.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node283"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="1233,-7667.23 1179,-7667.23 1179,-7631.23 1233,-7631.23 1233,-7667.23"/>
<text text-anchor="middle" x="1206" y="-7645.53" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="gray" d="M945.9,-7191.54C949.1,-7194.2 952.14,-7197.09 955,-7200.23 986.64,-7234.9 942.98,-7587.9 975,-7622.23 1024.26,-7675.03 1117.63,-7667.03 1168.95,-7657.55"/>
<polygon fill="gray" stroke="gray" points="1169.8,-7660.95 1178.94,-7655.59 1168.45,-7654.08 1169.8,-7660.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node277"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="1234,-7289.23 1178,-7289.23 1178,-7253.23 1234,-7253.23 1234,-7289.23"/>
<text text-anchor="middle" x="1206" y="-7267.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="gray" d="M945.1,-6866.93C948.59,-6869.76 951.9,-6872.85 955,-6876.23 1009.98,-6936.02 919.75,-7181.67 975,-7241.23 1023.81,-7293.84 1116.13,-7287.74 1167.73,-7279.17"/>
<polygon fill="gray" stroke="gray" points="1168.55,-7282.58 1177.78,-7277.38 1167.32,-7275.69 1168.55,-7282.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node276"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="1233,-7613.23 1179,-7613.23 1179,-7577.23 1233,-7577.23 1233,-7613.23"/>
<text text-anchor="middle" x="1206" y="-7591.53" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="gray" d="M896.85,-6897.88C919.02,-6903.26 939.7,-6913.19 955,-6930.23 1002.39,-6982.99 927.04,-7515.98 975,-7568.23 1023.84,-7621.43 1117.37,-7613.26 1168.84,-7603.66"/>
<polygon fill="gray" stroke="gray" points="1169.72,-7607.05 1178.85,-7601.67 1168.36,-7600.18 1169.72,-7607.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node278"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="1234,-7343.23 1178,-7343.23 1178,-7307.23 1234,-7307.23 1234,-7343.23"/>
<text text-anchor="middle" x="1206" y="-7321.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="gray" d="M896.54,-6898.16C918.73,-6903.52 939.51,-6913.37 955,-6930.23 1010.42,-6990.53 918.93,-7238.53 975,-7298.23 1024.06,-7350.45 1116.28,-7343.05 1167.79,-7333.73"/>
<polygon fill="gray" stroke="gray" points="1168.68,-7337.12 1177.83,-7331.79 1167.35,-7330.25 1168.68,-7337.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M896.53,-6908.84C918.86,-6903.47 939.69,-6893.48 955,-6876.23 992.88,-6833.54 934.26,-5889.18 975,-5849.23 1011.65,-5813.28 1396.09,-5818.22 1437,-5849.23 1523.27,-5914.6 1574.75,-6268.34 1588.04,-6371.17"/>
<polygon fill="gray" stroke="gray" points="1584.58,-6371.65 1589.31,-6381.13 1591.52,-6370.76 1584.58,-6371.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node262"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="901.5,-7137.23 619.5,-7137.23 619.5,-7101.23 901.5,-7101.23 901.5,-7137.23"/>
<text text-anchor="middle" x="760.5" y="-7115.53" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node279"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="1233,-7559.23 1179,-7559.23 1179,-7523.23 1233,-7523.23 1233,-7559.23"/>
<text text-anchor="middle" x="1206" y="-7537.53" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="gray" d="M901.93,-7115.57C922.08,-7121.17 940.77,-7130.74 955,-7146.23 1010.42,-7206.53 918.93,-7454.53 975,-7514.23 1024.44,-7566.86 1117.74,-7558.93 1169,-7549.51"/>
<polygon fill="gray" stroke="gray" points="1169.83,-7552.91 1178.97,-7547.56 1168.49,-7546.04 1169.83,-7552.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node263"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="851.5,-7245.23 669.5,-7245.23 669.5,-7209.23 851.5,-7209.23 851.5,-7245.23"/>
<text text-anchor="middle" x="760.5" y="-7223.53" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node280"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="1233,-7721.23 1179,-7721.23 1179,-7685.23 1233,-7685.23 1233,-7721.23"/>
<text text-anchor="middle" x="1206" y="-7699.53" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="gray" d="M851.99,-7216.61C889.15,-7217.49 929.39,-7226.17 955,-7254.23 986.64,-7288.9 942.98,-7641.9 975,-7676.23 1024.26,-7729.03 1117.63,-7721.03 1168.95,-7711.55"/>
<polygon fill="gray" stroke="gray" points="1169.8,-7714.95 1178.94,-7709.59 1168.45,-7708.08 1169.8,-7714.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node274"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="1234,-7397.23 1178,-7397.23 1178,-7361.23 1234,-7361.23 1234,-7397.23"/>
<text text-anchor="middle" x="1206" y="-7375.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="gray" d="M903.88,-6954.12C923.28,-6959.8 941.23,-6969.24 955,-6984.23 1010.42,-7044.53 918.93,-7292.53 975,-7352.23 1024.06,-7404.45 1116.28,-7397.05 1167.79,-7387.73"/>
<polygon fill="gray" stroke="gray" points="1168.68,-7391.12 1177.83,-7385.79 1167.35,-7384.25 1168.68,-7391.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node265"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="899.5,-7029.23 621.5,-7029.23 621.5,-6993.23 899.5,-6993.23 899.5,-7029.23"/>
<text text-anchor="middle" x="760.5" y="-7007.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node282"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="1234,-7451.23 1178,-7451.23 1178,-7415.23 1234,-7415.23 1234,-7451.23"/>
<text text-anchor="middle" x="1206" y="-7429.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="gray" d="M899.98,-7007.03C920.87,-7012.56 940.31,-7022.24 955,-7038.23 1010.42,-7098.53 918.93,-7346.53 975,-7406.23 1024.06,-7458.45 1116.28,-7451.05 1167.79,-7441.73"/>
<polygon fill="gray" stroke="gray" points="1168.68,-7445.12 1177.83,-7439.79 1167.35,-7438.25 1168.68,-7445.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node266"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="858,-7083.23 663,-7083.23 663,-7047.23 858,-7047.23 858,-7083.23"/>
<text text-anchor="middle" x="760.5" y="-7061.53" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node281"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="1234,-7505.23 1178,-7505.23 1178,-7469.23 1234,-7469.23 1234,-7505.23"/>
<text text-anchor="middle" x="1206" y="-7483.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="gray" d="M858.14,-7054.92C893.49,-7056.62 930.73,-7065.82 955,-7092.23 1010.42,-7152.53 918.93,-7400.53 975,-7460.23 1024.06,-7512.45 1116.28,-7505.05 1167.79,-7495.73"/>
<polygon fill="gray" stroke="gray" points="1168.68,-7499.12 1177.83,-7493.79 1167.35,-7492.25 1168.68,-7499.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<g id="a_node273"><a xlink:title=" &#160;&#160;&#160;pub fn new(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut encoded_profile_key = profile_key_bytes; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profile_key[0] &amp;= 254; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profil...">
<polygon fill="white" stroke="black" points="1619.5,-7724.23 1565.5,-7724.23 1565.5,-7688.23 1619.5,-7688.23 1619.5,-7724.23"/>
<text text-anchor="middle" x="1592.5" y="-7702.53" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge429" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="gray" d="M792.5,-7299.46C837.58,-7327.93 919.69,-7387.59 955,-7463.23 971.34,-7498.22 946.92,-7783.71 975,-7810.23 1012.33,-7845.46 1387.9,-7825.21 1437,-7810.23 1487.32,-7794.87 1536.08,-7757.02 1564.94,-7731.48"/>
<polygon fill="gray" stroke="gray" points="1567.46,-7733.92 1572.54,-7724.63 1562.77,-7728.72 1567.46,-7733.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node275"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="1233,-7775.23 1179,-7775.23 1179,-7739.23 1233,-7739.23 1233,-7775.23"/>
<text text-anchor="middle" x="1206" y="-7753.53" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge430" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="gray" d="M791.96,-7299.3C836.75,-7327.78 918.94,-7387.69 955,-7463.23 980.63,-7516.92 933.82,-7687.28 975,-7730.23 1024.85,-7782.22 1117.57,-7774.66 1168.75,-7765.44"/>
<polygon fill="gray" stroke="gray" points="1169.54,-7768.85 1178.7,-7763.53 1168.22,-7761.98 1169.54,-7768.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().</title>
<g id="a_node268"><a xlink:title=" &#160;&#160;&#160;pub fn get_point_single_elligator(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes_single_elligator( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.internal_sho.squeeze_and_ratchet_as_array(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1688.5,-7641.23 1496.5,-7641.23 1496.5,-7605.23 1688.5,-7605.23 1688.5,-7641.23"/>
<text text-anchor="middle" x="1592.5" y="-7619.53" font-family="Helvetica,sans-Serif" font-size="14.00">get_point_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="gray" d="M1677.98,-7641.32C1695.79,-7649.12 1712.49,-7660.28 1723.5,-7676.23 1755.22,-7722.19 1711.25,-8639.17 1748,-8681.23 1755.54,-8689.85 1764.64,-8696.49 1774.67,-8701.54"/>
<polygon fill="gray" stroke="gray" points="1773.56,-8704.87 1784.11,-8705.74 1776.4,-8698.48 1773.56,-8704.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<g id="a_node269"><a xlink:title=" &#160;&#160;&#160;pub fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1633,-7587.23 1552,-7587.23 1552,-7551.23 1633,-7551.23 1633,-7587.23"/>
<text text-anchor="middle" x="1592.5" y="-7565.53" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="gray" d="M1633.19,-7572.41C1778.54,-7581.66 2285.2,-7592.02 2515,-7312.23 2725.67,-7055.73 2755.07,-4476.78 2757.77,-4178.34"/>
<polygon fill="gray" stroke="gray" points="2761.27,-4178.36 2757.86,-4168.33 2754.27,-4178.3 2761.27,-4178.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node270"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="800,-7601.23 721,-7601.23 721,-7565.23 800,-7565.23 800,-7601.23"/>
<text text-anchor="middle" x="760.5" y="-7579.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="gray" d="M795.92,-7601.39C840.12,-7626.6 915.79,-7676.5 955,-7741.23 977.81,-7778.87 940.88,-7810.42 975,-7838.23 1054.59,-7903.08 1340.68,-7873.77 1437,-7838.23 1494.12,-7817.15 1544.44,-7764.5 1571.17,-7732.43"/>
<polygon fill="gray" stroke="gray" points="1574.14,-7734.32 1577.76,-7724.36 1568.72,-7729.89 1574.14,-7734.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="gray" d="M800.31,-7587.85C844.4,-7590.74 915.34,-7587.8 955,-7546.23 998.39,-7500.75 930,-7450.11 975,-7406.23 1026.16,-7356.33 1117.16,-7362.71 1168.01,-7371.27"/>
<polygon fill="gray" stroke="gray" points="1167.46,-7374.72 1177.92,-7373.05 1168.7,-7367.83 1167.46,-7374.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="gray" d="M800.08,-7584.27C884.78,-7586.56 1085.99,-7592.01 1168.62,-7594.24"/>
<polygon fill="gray" stroke="gray" points="1168.69,-7597.74 1178.78,-7594.52 1168.88,-7590.75 1168.69,-7597.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M800.1,-7588.63C845.03,-7592.49 917.79,-7590.68 955,-7546.23 984.72,-7510.72 942.06,-5911.77 975,-5879.23 1011.52,-5843.15 1395.86,-5848.53 1437,-5879.23 1518.93,-5940.36 1573.01,-6271.75 1587.56,-6371.08"/>
<polygon fill="gray" stroke="gray" points="1584.09,-6371.59 1588.99,-6380.98 1591.02,-6370.59 1584.09,-6371.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<path fill="none" stroke="gray" d="M1627.98,-5775.37C1770.81,-5848.59 2317.78,-6151.26 2515,-6585.23 2538.45,-6636.82 2505.22,-8582.99 2543,-8625.23 2576.88,-8663.1 2634.87,-8668.52 2682.1,-8665.19"/>
<polygon fill="gray" stroke="gray" points="2682.63,-8668.66 2692.3,-8664.33 2682.04,-8661.69 2682.63,-8668.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node272"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="1308.5,-5776.23 1103.5,-5776.23 1103.5,-5740.23 1308.5,-5740.23 1308.5,-5776.23"/>
<text text-anchor="middle" x="1206" y="-5754.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge445" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M1308.53,-5758.23C1386.02,-5758.23 1489.04,-5758.23 1546.99,-5758.23"/>
<polygon fill="gray" stroke="gray" points="1547.27,-5761.73 1557.27,-5758.23 1547.27,-5754.73 1547.27,-5761.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge444" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="gray" d="M1283.04,-5776.23C1336.23,-5793.2 1403.52,-5824.47 1437,-5879.23 1463.04,-5921.81 1425.56,-7637.45 1457,-7676.23 1480.15,-7704.78 1523.95,-7709.86 1555.28,-7709.37"/>
<polygon fill="gray" stroke="gray" points="1555.51,-7712.86 1565.38,-7709.01 1555.27,-7705.87 1555.51,-7712.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge491" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="gray" d="M1603.86,-7724.26C1629.88,-7770.66 1697.75,-7898.73 1723.5,-8015.23 1731.49,-8051.38 1723.47,-8653.5 1748,-8681.23 1755.67,-8689.89 1764.92,-8696.54 1775.09,-8701.59"/>
<polygon fill="gray" stroke="gray" points="1773.69,-8704.8 1784.25,-8705.62 1776.51,-8698.39 1773.69,-8704.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1234.06,-7385.69C1282.51,-7395.47 1383.99,-7407.51 1437,-7352.23 1478.18,-7309.28 1413.38,-7125.7 1457,-7085.23 1508.03,-7037.88 2016.89,-7065.02 2083.5,-7085.23 2167.05,-7110.57 2247.93,-7177.32 2287.97,-7214.07"/>
<polygon fill="gray" stroke="gray" points="2285.72,-7216.76 2295.43,-7221 2290.49,-7211.63 2285.72,-7216.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1234.33,-7385.94C1283.24,-7396.14 1385.41,-7408.83 1437,-7352.23 1467.77,-7318.47 1438.73,-6572.09 1457,-6530.23 1477.1,-6484.15 1521.8,-6446.05 1554.16,-6423.03"/>
<polygon fill="gray" stroke="gray" points="1556.3,-6425.81 1562.51,-6417.23 1552.3,-6420.06 1556.3,-6425.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1233.14,-7763.38C1281.04,-7772.94 1382.9,-7785.01 1437,-7730.23 1466.99,-7699.86 1427.45,-7570.01 1457,-7539.23 1539.89,-7452.86 1630.63,-7575.75 1723.5,-7500.23 1748.1,-7480.22 1731.89,-7460.54 1748,-7433.23 1787.88,-7365.6 1852.56,-7299.28 1889.09,-7264.42"/>
<polygon fill="gray" stroke="gray" points="1891.58,-7266.88 1896.44,-7257.47 1886.77,-7261.8 1891.58,-7266.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1233.29,-7601.23C1280.98,-7610.41 1381.89,-7621.7 1437,-7568.23 1480.53,-7525.99 1413.99,-7476 1457,-7433.23 1541.83,-7348.86 1613.81,-7442.99 1723.5,-7395.23 1794.01,-7364.52 1860.02,-7300.79 1893.53,-7265.02"/>
<polygon fill="gray" stroke="gray" points="1896.35,-7267.13 1900.56,-7257.41 1891.21,-7262.38 1896.35,-7267.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1234.05,-7277.22C1282.49,-7286.2 1383.95,-7296.64 1437,-7241.23 1472.78,-7203.84 1418.87,-7044.21 1457,-7009.23 1508.29,-6962.16 2019.17,-6982.62 2083.5,-7009.23 2184.77,-7051.11 2264.85,-7161.45 2297.75,-7212.55"/>
<polygon fill="gray" stroke="gray" points="2294.85,-7214.52 2303.16,-7221.09 2300.76,-7210.77 2294.85,-7214.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1234.03,-7331.66C1282.45,-7341.4 1383.86,-7353.38 1437,-7298.23 1475.82,-7257.93 1415.89,-7085.19 1457,-7047.23 1508.14,-7000 2018.04,-7023.54 2083.5,-7047.23 2175.75,-7080.61 2257.03,-7168.81 2293.55,-7213.09"/>
<polygon fill="gray" stroke="gray" points="2291.02,-7215.53 2300.04,-7221.08 2296.45,-7211.11 2291.02,-7215.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1233.32,-7547.55C1281.5,-7557.39 1383.83,-7569.91 1437,-7514.23 1480.39,-7468.79 1411.03,-7275.05 1457,-7232.23 1517.48,-7175.88 1781.07,-7215.33 1879.37,-7232.42"/>
<polygon fill="gray" stroke="gray" points="1878.98,-7235.9 1889.44,-7234.19 1880.19,-7229.01 1878.98,-7235.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1233.06,-7709.3C1280.83,-7718.74 1382.49,-7730.6 1437,-7676.23 1489.92,-7623.43 1405.53,-7563.43 1457,-7509.23 1539.76,-7422.06 1619.7,-7523.83 1723.5,-7463.23 1738.37,-7454.55 1736.91,-7446.39 1748,-7433.23 1799.3,-7372.32 1860.98,-7302.03 1893.63,-7265.05"/>
<polygon fill="gray" stroke="gray" points="1896.52,-7267.07 1900.52,-7257.25 1891.27,-7262.43 1896.52,-7267.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1234.05,-7493.68C1282.49,-7503.45 1383.96,-7515.47 1437,-7460.23 1477.44,-7418.11 1414.17,-7237.91 1457,-7198.23 1515.31,-7144.2 2072.25,-7208.78 2255.71,-7231.73"/>
<polygon fill="gray" stroke="gray" points="2255.35,-7235.21 2265.71,-7232.99 2256.23,-7228.27 2255.35,-7235.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1234.02,-7439.65C1282.42,-7449.38 1383.81,-7461.33 1437,-7406.23 1474.94,-7366.92 1416.83,-7198.25 1457,-7161.23 1559.37,-7066.87 1946.13,-7138.61 2083.5,-7161.23 2147.91,-7171.83 2218.53,-7198.05 2264.41,-7217.17"/>
<polygon fill="gray" stroke="gray" points="2263.24,-7220.47 2273.81,-7221.13 2265.96,-7214.02 2263.24,-7220.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge460" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1233.37,-7655.31C1281.19,-7664.62 1382.3,-7676.12 1437,-7622.23 1485.22,-7574.71 1409.81,-7519.77 1457,-7471.23 1540.63,-7385.2 1616.39,-7482.29 1723.5,-7428.23 1800.89,-7389.16 1867.15,-7307.97 1898,-7265.86"/>
<polygon fill="gray" stroke="gray" points="1901.02,-7267.65 1904.03,-7257.49 1895.34,-7263.55 1901.02,-7267.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge459" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="gray" d="M1233.3,-7651.67C1276.12,-7655.78 1363.51,-7664.79 1437,-7676.23 1477.75,-7682.57 1524.16,-7691.86 1555.38,-7698.42"/>
<polygon fill="gray" stroke="gray" points="1554.85,-7701.88 1565.36,-7700.53 1556.3,-7695.03 1554.85,-7701.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge458" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1233.22,-7655.73C1281.71,-7666.02 1385.17,-7679.43 1437,-7622.23 1477.74,-7577.26 1432.9,-6585.91 1457,-6530.23 1476.91,-6484.23 1521.42,-6446.23 1553.8,-6423.21"/>
<polygon fill="gray" stroke="gray" points="1555.95,-6425.98 1562.17,-6417.4 1551.96,-6420.23 1555.95,-6425.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node284" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node284"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1233,-5556.23 1179,-5556.23 1179,-5520.23 1233,-5520.23 1233,-5556.23"/>
<text text-anchor="middle" x="1206" y="-5534.53" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="gray" d="M1233.04,-5536.64C1279.87,-5535.24 1378.83,-5539.17 1437,-5591.23 1457.01,-5609.13 1436.74,-5630.61 1457,-5648.23 1484.01,-5671.71 1525.66,-5676.93 1555.45,-5677.23"/>
<polygon fill="gray" stroke="gray" points="1555.48,-5680.73 1565.45,-5677.15 1555.42,-5673.73 1555.48,-5680.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node285" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node285"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="1234,-5502.23 1178,-5502.23 1178,-5466.23 1234,-5466.23 1234,-5502.23"/>
<text text-anchor="middle" x="1206" y="-5480.53" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="gray" d="M1234.25,-5483.13C1278.39,-5482.29 1367.6,-5484.48 1437,-5511.23 1487.27,-5530.6 1536.39,-5570.14 1565.3,-5596.16"/>
<polygon fill="gray" stroke="gray" points="1563.16,-5598.94 1572.9,-5603.11 1567.89,-5593.78 1563.16,-5598.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="gray" d="M1627.74,-3736.68C1658.77,-3754.55 1702.73,-3785.47 1723.5,-3826.23 1764.44,-3906.56 1696.87,-4156.96 1748,-4231.23 1840.83,-4366.06 1978.58,-4257.57 2083.5,-4383.23 2659.08,-5072.62 2749.38,-8234.81 2757.36,-8569.52"/>
<polygon fill="gray" stroke="gray" points="2753.87,-8569.91 2757.6,-8579.83 2760.87,-8569.75 2753.87,-8569.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node287" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node287"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="1282,-3737.23 1130,-3737.23 1130,-3701.23 1282,-3701.23 1282,-3737.23"/>
<text text-anchor="middle" x="1206" y="-3715.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M1282.05,-3719.23C1360.92,-3719.23 1482.36,-3719.23 1547.17,-3719.23"/>
<polygon fill="gray" stroke="gray" points="1547.45,-3722.73 1557.45,-3719.23 1547.45,-3715.73 1547.45,-3722.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1282.16,-3705.09C1333.66,-3700.17 1399.25,-3704.2 1437,-3746.23 1456.17,-3767.56 1453.64,-5782.74 1457,-5811.23 1482.85,-6030.64 1557.44,-6287.77 1582.88,-6371.42"/>
<polygon fill="gray" stroke="gray" points="1579.6,-6372.65 1585.87,-6381.19 1586.29,-6370.6 1579.6,-6372.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node288" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node288"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1282,-3791.23 1130,-3791.23 1130,-3755.23 1282,-3755.23 1282,-3791.23"/>
<text text-anchor="middle" x="1206" y="-3769.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M1282.24,-3765.47C1327.23,-3760.57 1385.48,-3753.75 1437,-3746.23 1474.28,-3740.78 1516.39,-3733.34 1547.22,-3727.64"/>
<polygon fill="gray" stroke="gray" points="1548.03,-3731.05 1557.23,-3725.78 1546.75,-3724.17 1548.03,-3731.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1282.07,-3768.43C1334.23,-3769.61 1400.67,-3781.04 1437,-3826.23 1454.28,-3847.71 1453.77,-5783.84 1457,-5811.23 1482.89,-6030.64 1557.46,-6287.76 1582.89,-6371.42"/>
<polygon fill="gray" stroke="gray" points="1579.6,-6372.65 1585.87,-6381.19 1586.29,-6370.6 1579.6,-6372.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="gray" d="M1655.23,-6406.82C1754.46,-6421.69 1951.63,-6462.47 2083.5,-6563.23 2357.85,-6772.85 2411.66,-6879.78 2515,-7209.23 2539.45,-7287.16 2488.38,-8618.49 2543,-8679.23 2579.64,-8719.96 2644.17,-8723.09 2693.01,-8718.21"/>
<polygon fill="gray" stroke="gray" points="2693.63,-8721.66 2703.18,-8717.06 2692.84,-8714.71 2693.63,-8721.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node290" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node290"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="1305.5,-6853.23 1106.5,-6853.23 1106.5,-6817.23 1305.5,-6817.23 1305.5,-6853.23"/>
<text text-anchor="middle" x="1206" y="-6831.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1305.52,-6842.66C1386.62,-6848.77 1497.19,-6857.11 1554.17,-6861.41"/>
<polygon fill="gray" stroke="gray" points="1554.26,-6864.93 1564.49,-6862.19 1554.79,-6857.95 1554.26,-6864.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M1305.69,-6829.15C1348.7,-6830.79 1398.08,-6838.79 1437,-6862.23 1450.41,-6870.3 1443.93,-6882.61 1457,-6891.23 1486.31,-6910.54 1526.46,-6916.56 1555.25,-6918.2"/>
<polygon fill="gray" stroke="gray" points="1555.16,-6921.7 1565.3,-6918.62 1555.45,-6914.7 1555.16,-6921.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1305.54,-6828.81C1346.58,-6824.82 1394.48,-6818.41 1437,-6808.23 1475.64,-6798.97 1517.85,-6782.97 1548.38,-6770.27"/>
<polygon fill="gray" stroke="gray" points="1550,-6773.38 1557.86,-6766.28 1547.28,-6766.93 1550,-6773.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1305.7,-6847.64C1350.79,-6847.81 1401.85,-6839.49 1437,-6808.23 1465.68,-6782.72 1429.38,-6750.87 1457,-6724.23 1482.6,-6699.52 1524.12,-6694.45 1554.27,-6694.52"/>
<polygon fill="gray" stroke="gray" points="1554.34,-6698.02 1564.41,-6694.73 1554.49,-6691.02 1554.34,-6698.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="gray" d="M1305.54,-6819.8C1352.15,-6818.45 1404.56,-6826.65 1437,-6862.23 1467.48,-6895.65 1428.28,-7641.28 1457,-7676.23 1480.34,-7704.62 1524.11,-7709.74 1555.38,-7709.29"/>
<polygon fill="gray" stroke="gray" points="1555.58,-7712.79 1565.45,-7708.95 1555.34,-7705.79 1555.58,-7712.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1305.7,-6850.02C1351.92,-6851.08 1403.94,-6842.81 1437,-6808.23 1479.8,-6763.45 1430.89,-6586.39 1457,-6530.23 1478.19,-6484.64 1522.66,-6446.44 1554.67,-6423.27"/>
<polygon fill="gray" stroke="gray" points="1556.79,-6426.05 1562.93,-6417.42 1552.75,-6420.34 1556.79,-6426.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node291" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node291"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1243,-6961.23 1169,-6961.23 1169,-6925.23 1243,-6925.23 1243,-6961.23"/>
<text text-anchor="middle" x="1206" y="-6939.53" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M1243.12,-6950.44C1293.14,-6958.17 1383.4,-6963.64 1437,-6916.23 1465.1,-6891.37 1427.5,-6857.4 1457,-6834.23 1520.81,-6784.11 2067.55,-6859.33 2083.5,-6869.23 2215.59,-6951.18 2284.1,-7139.81 2306.03,-7211.18"/>
<polygon fill="gray" stroke="gray" points="2302.7,-7212.26 2308.92,-7220.83 2309.4,-7210.25 2302.7,-7212.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M1243.24,-6948.77C1289.22,-6956.45 1370.55,-6972.14 1437,-6996.23 1610.68,-7059.19 1802.47,-7170.07 1880.51,-7217.12"/>
<polygon fill="gray" stroke="gray" points="1879.09,-7220.35 1889.46,-7222.54 1882.71,-7214.36 1879.09,-7220.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1243.03,-6947.08C1290.59,-6950.44 1375.47,-6950.36 1437,-6916.23 1449.44,-6909.32 1444.85,-6898.63 1457,-6891.23 1486.4,-6873.32 1525.47,-6867.03 1553.93,-6864.94"/>
<polygon fill="gray" stroke="gray" points="1554.5,-6868.41 1564.27,-6864.33 1554.08,-6861.42 1554.5,-6868.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M1243.17,-6940.87C1316.41,-6936.11 1481.48,-6925.38 1554.99,-6920.6"/>
<polygon fill="gray" stroke="gray" points="1555.4,-6924.08 1565.15,-6919.94 1554.95,-6917.1 1555.4,-6924.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1243.11,-6950.83C1293.55,-6959.14 1384.76,-6965.43 1437,-6916.23 1473.81,-6881.56 1424.97,-6843.35 1457,-6804.23 1479.43,-6776.83 1517.97,-6763.54 1548.07,-6757.12"/>
<polygon fill="gray" stroke="gray" points="1548.77,-6760.55 1557.91,-6755.2 1547.43,-6753.68 1548.77,-6760.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1243.19,-6951.27C1294.14,-6960.24 1386.45,-6967.45 1437,-6916.23 1467.13,-6885.7 1428.13,-6755.96 1457,-6724.23 1481.09,-6697.75 1523.24,-6693.06 1553.96,-6693.69"/>
<polygon fill="gray" stroke="gray" points="1554.16,-6697.2 1564.29,-6694.11 1554.44,-6690.21 1554.16,-6697.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="gray" d="M1243.16,-6939.6C1294.95,-6936.63 1389.27,-6939.99 1437,-6996.23 1482.53,-7049.87 1411.28,-7258.74 1457,-7312.23 1477.51,-7336.22 1512.61,-7343.45 1541.81,-7344.82"/>
<polygon fill="gray" stroke="gray" points="1541.77,-7348.32 1551.86,-7345.08 1541.95,-7341.33 1541.77,-7348.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node292" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node292"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1393.5,-6745.23 1018.5,-6745.23 1018.5,-6709.23 1393.5,-6709.23 1393.5,-6745.23"/>
<text text-anchor="middle" x="1206" y="-6723.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1393.65,-6724.26C1409.63,-6717.93 1424.45,-6709.16 1437,-6697.23 1473.01,-6662.98 1422.19,-6622.68 1457,-6587.23 1482,-6561.76 1523.81,-6556.86 1554.19,-6557.17"/>
<polygon fill="gray" stroke="gray" points="1554.31,-6560.67 1564.41,-6557.47 1554.52,-6553.68 1554.31,-6560.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M1393.57,-6717.07C1408.86,-6712.06 1423.58,-6705.57 1437,-6697.23 1450.61,-6688.76 1444.53,-6677.29 1457,-6667.23 1486,-6643.82 1526.61,-6629.73 1555.61,-6622.03"/>
<polygon fill="gray" stroke="gray" points="1556.5,-6625.42 1565.34,-6619.57 1554.79,-6618.63 1556.5,-6625.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1393.62,-6738.87C1451.16,-6742.47 1509.37,-6746.1 1547.62,-6748.49"/>
<polygon fill="gray" stroke="gray" points="1547.66,-6752 1557.86,-6749.13 1548.1,-6745.01 1547.66,-6752"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1393.62,-6712.67C1454.66,-6707.9 1516.45,-6703.08 1554.37,-6700.12"/>
<polygon fill="gray" stroke="gray" points="1554.71,-6703.61 1564.41,-6699.34 1554.16,-6696.63 1554.71,-6703.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1393.59,-6725.38C1409.73,-6718.87 1424.61,-6709.75 1437,-6697.23 1463.29,-6670.66 1440.44,-6563.74 1457,-6530.23 1479.33,-6485.02 1523.78,-6446.62 1555.47,-6423.3"/>
<polygon fill="gray" stroke="gray" points="1557.56,-6426.1 1563.63,-6417.42 1553.47,-6420.43 1557.56,-6426.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node293" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node293"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="1429,-6907.23 983,-6907.23 983,-6871.23 1429,-6871.23 1429,-6907.23"/>
<text text-anchor="middle" x="1206" y="-6885.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1429.27,-6874.77C1477.77,-6871.62 1523.65,-6868.64 1554.16,-6866.65"/>
<polygon fill="gray" stroke="gray" points="1554.54,-6870.14 1564.29,-6865.99 1554.08,-6863.15 1554.54,-6870.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M1429.27,-6905.99C1478.36,-6909.69 1524.77,-6913.19 1555.28,-6915.49"/>
<polygon fill="gray" stroke="gray" points="1555.14,-6918.99 1565.38,-6916.26 1555.67,-6912.01 1555.14,-6918.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1424.53,-6871.13C1428.84,-6868.4 1433.01,-6865.44 1437,-6862.23 1458.24,-6845.13 1438.14,-6823.92 1457,-6804.23 1481.07,-6779.09 1518.52,-6765.64 1547.8,-6758.58"/>
<polygon fill="gray" stroke="gray" points="1548.78,-6761.95 1557.78,-6756.34 1547.25,-6755.12 1548.78,-6761.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1426.58,-6871.21C1430.21,-6868.44 1433.69,-6865.45 1437,-6862.23 1481.41,-6819 1414.38,-6769.22 1457,-6724.23 1481.54,-6698.32 1523.43,-6693.49 1553.95,-6693.94"/>
<polygon fill="gray" stroke="gray" points="1554.11,-6697.45 1564.23,-6694.29 1554.35,-6690.45 1554.11,-6697.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="gray" d="M1428.02,-6907.49C1431.15,-6910.2 1434.15,-6913.11 1437,-6916.23 1493.97,-6978.6 1403.31,-7611.01 1457,-7676.23 1480.36,-7704.6 1524.13,-7709.72 1555.39,-7709.28"/>
<polygon fill="gray" stroke="gray" points="1555.59,-7712.78 1565.46,-7708.95 1555.35,-7705.78 1555.59,-7712.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1427.42,-6871.2C1430.76,-6868.43 1433.96,-6865.44 1437,-6862.23 1462.38,-6835.36 1441.62,-6563.83 1457,-6530.23 1477.93,-6484.52 1522.45,-6446.34 1554.55,-6423.21"/>
<polygon fill="gray" stroke="gray" points="1556.67,-6425.99 1562.83,-6417.37 1552.64,-6420.27 1556.67,-6425.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node294" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node294"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="1274.5,-6799.23 1137.5,-6799.23 1137.5,-6763.23 1274.5,-6763.23 1274.5,-6799.23"/>
<text text-anchor="middle" x="1206" y="-6777.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge443" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1274.62,-6793.49C1326.24,-6798.65 1395.37,-6795.75 1437,-6754.23 1489.92,-6701.43 1406.27,-6642.13 1457,-6587.23 1481.29,-6560.94 1523.41,-6556.21 1554.06,-6556.79"/>
<polygon fill="gray" stroke="gray" points="1554.25,-6560.3 1564.37,-6557.19 1554.52,-6553.3 1554.25,-6560.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge441" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M1274.74,-6792.35C1325.57,-6796.63 1393.59,-6793.14 1437,-6754.23 1466.54,-6727.74 1431.12,-6697.3 1457,-6667.23 1481.93,-6638.26 1524.8,-6625 1555.44,-6619.01"/>
<polygon fill="gray" stroke="gray" points="1556.09,-6622.45 1565.32,-6617.25 1554.86,-6615.56 1556.09,-6622.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge439" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1274.86,-6775.93C1353.44,-6769.8 1480.62,-6759.88 1547.37,-6754.67"/>
<polygon fill="gray" stroke="gray" points="1547.85,-6758.14 1557.55,-6753.87 1547.3,-6751.16 1547.85,-6758.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge440" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1274.51,-6787.69C1323.11,-6789.08 1388.41,-6784.01 1437,-6754.23 1450.66,-6745.85 1443.69,-6733.15 1457,-6724.23 1485.9,-6704.86 1525.6,-6698.8 1554.38,-6697.17"/>
<polygon fill="gray" stroke="gray" points="1554.6,-6700.67 1564.44,-6696.76 1554.31,-6693.67 1554.6,-6700.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge442" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="gray" d="M1274.7,-6793.81C1326.55,-6799.19 1395.93,-6796.45 1437,-6754.23 1471.84,-6718.4 1435.54,-6575.36 1457,-6530.23 1478.65,-6484.69 1523.24,-6446.36 1555.14,-6423.15"/>
<polygon fill="gray" stroke="gray" points="1557.25,-6425.94 1563.37,-6417.29 1553.19,-6420.24 1557.25,-6425.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node295" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node295"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="902,-6116.23 619,-6116.23 619,-6080.23 902,-6080.23 902,-6116.23"/>
<text text-anchor="middle" x="760.5" y="-6094.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="gray" d="M769.61,-6116.38C793.08,-6166.57 866.42,-6307.54 975,-6369.23 1033.06,-6402.21 1112.42,-6405.05 1161.11,-6402.96"/>
<polygon fill="gray" stroke="gray" points="1161.51,-6406.44 1171.31,-6402.43 1161.14,-6399.45 1161.51,-6406.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="gray" d="M764.15,-6116.23C775.21,-6184.32 824.36,-6427.56 975,-6534.23 1032.77,-6575.14 1119.88,-6572.54 1168.64,-6566.94"/>
<polygon fill="gray" stroke="gray" points="1169.24,-6570.39 1178.73,-6565.67 1168.37,-6563.44 1169.24,-6570.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="gray" d="M765.51,-6116.61C780.36,-6179.79 838.55,-6389.06 975,-6480.23 1031.49,-6517.97 1113.62,-6517.65 1162.92,-6513.07"/>
<polygon fill="gray" stroke="gray" points="1163.34,-6516.55 1172.92,-6512.04 1162.62,-6509.58 1163.34,-6516.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M767.14,-6116.42C785.89,-6173.53 852.02,-6349.93 975,-6426.23 1034.52,-6463.15 1119.55,-6462.32 1167.8,-6458.03"/>
<polygon fill="gray" stroke="gray" points="1168.2,-6461.5 1177.8,-6457.04 1167.51,-6454.54 1168.2,-6461.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="gray" d="M902.06,-6102.58C922.33,-6096.92 941.02,-6087.16 955,-6071.23 998.64,-6021.49 933.58,-3740.83 975,-3689.23 1015.36,-3638.94 1093.01,-3630.45 1146.85,-3631.37"/>
<polygon fill="gray" stroke="gray" points="1146.85,-3634.87 1156.95,-3631.66 1147.05,-3627.87 1146.85,-3634.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node296" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node296"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="838.5,-6062.23 682.5,-6062.23 682.5,-6026.23 838.5,-6026.23 838.5,-6062.23"/>
<text text-anchor="middle" x="760.5" y="-6040.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="gray" d="M838.75,-6048.93C932.26,-6054.62 1086.48,-6064.01 1161.42,-6068.57"/>
<polygon fill="gray" stroke="gray" points="1161.26,-6072.07 1171.46,-6069.18 1161.69,-6065.08 1161.26,-6072.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="gray" d="M789.17,-6026.2C828.64,-6001.44 904.2,-5957.55 975,-5936.23 1038.53,-5917.09 1115.72,-5911.41 1162.57,-5909.78"/>
<polygon fill="gray" stroke="gray" points="1162.77,-5913.28 1172.66,-5909.48 1162.56,-5906.28 1162.77,-5913.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M838.75,-6039.52C935.02,-6033.66 1095.66,-6023.88 1167.86,-6019.49"/>
<polygon fill="gray" stroke="gray" points="1168.08,-6022.98 1177.85,-6018.88 1167.66,-6015.99 1168.08,-6022.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="gray" d="M823.62,-6026.22C865.97,-6014.52 923.49,-5999.72 975,-5990.23 1027.01,-5980.64 1086.3,-5973.77 1131.66,-5969.37"/>
<polygon fill="gray" stroke="gray" points="1132.08,-5972.84 1141.7,-5968.41 1131.41,-5965.87 1132.08,-5972.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="gray" d="M769.07,-6026.17C799.87,-5951.64 915.96,-5659.95 955,-5407.23 962.29,-5360.06 945.07,-3726.4 975,-3689.23 1015.44,-3639.01 1093.07,-3630.5 1146.89,-3631.4"/>
<polygon fill="gray" stroke="gray" points="1146.88,-3634.9 1156.98,-3631.68 1147.08,-3627.9 1146.88,-3634.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node297" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node297"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="378.5,-4347.23 175.5,-4347.23 175.5,-4311.23 378.5,-4311.23 378.5,-4347.23"/>
<text text-anchor="middle" x="277" y="-4325.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M378.64,-4329.23C486.12,-4329.23 650.72,-4329.23 723.15,-4329.23"/>
<polygon fill="gray" stroke="gray" points="723.15,-4332.73 733.15,-4329.23 723.15,-4325.73 723.15,-4332.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M378.6,-4319.7C428.91,-4314.78 490.71,-4308.51 546,-4302.23 582.41,-4298.09 622.25,-4293.16 657.56,-4288.65"/>
<polygon fill="gray" stroke="gray" points="658.4,-4292.07 667.87,-4287.33 657.51,-4285.13 658.4,-4292.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node298" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node298"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="348,-4239.23 206,-4239.23 206,-4203.23 348,-4203.23 348,-4239.23"/>
<text text-anchor="middle" x="277" y="-4217.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M348.08,-4209.33C406.94,-4203.4 490.14,-4205.03 546,-4248.23 566.25,-4263.88 546.06,-4286.19 566,-4302.23 610.71,-4338.19 680.82,-4338.41 723.25,-4334.43"/>
<polygon fill="gray" stroke="gray" points="723.83,-4337.88 733.4,-4333.34 723.09,-4330.92 723.83,-4337.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="gray" d="M348.1,-4206.57C408.83,-4198.33 494.76,-4198.12 546,-4248.23 597.87,-4298.95 515.11,-4358.52 566,-4410.23 589.4,-4433.99 623.37,-4443.49 656.34,-4446.17"/>
<polygon fill="gray" stroke="gray" points="656.33,-4449.67 666.52,-4446.79 656.75,-4442.68 656.33,-4449.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="gray" d="M348.01,-4221.23C447.67,-4221.23 627.73,-4221.23 712.7,-4221.23"/>
<polygon fill="gray" stroke="gray" points="712.82,-4224.73 722.82,-4221.23 712.82,-4217.73 712.82,-4224.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<path fill="none" stroke="gray" d="M348.01,-4213.37C451.61,-4201.76 642.09,-4180.39 722.32,-4171.4"/>
<polygon fill="gray" stroke="gray" points="722.9,-4174.85 732.44,-4170.26 722.12,-4167.9 722.9,-4174.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M348.02,-4227.79C402.13,-4232.98 478.86,-4240.6 546,-4248.23 582.41,-4252.36 622.25,-4257.29 657.56,-4261.8"/>
<polygon fill="gray" stroke="gray" points="657.51,-4265.32 667.87,-4263.12 658.4,-4258.38 657.51,-4265.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node299" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node299"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="405.5,-4293.23 148.5,-4293.23 148.5,-4257.23 405.5,-4257.23 405.5,-4293.23"/>
<text text-anchor="middle" x="277" y="-4271.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M405.53,-4287.41C450.01,-4291.83 500.23,-4297.03 546,-4302.23 608.28,-4309.3 680.63,-4318.7 723.1,-4324.34"/>
<polygon fill="gray" stroke="gray" points="722.86,-4327.84 733.23,-4325.69 723.78,-4320.9 722.86,-4327.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M405.77,-4275.23C484.53,-4275.23 584.16,-4275.23 657.6,-4275.23"/>
<polygon fill="gray" stroke="gray" points="657.78,-4278.73 667.78,-4275.23 657.78,-4271.73 657.78,-4278.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard(). -->
<g id="node300" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().</title>
<g id="a_node300"><a xlink:title="fn test_lizard() { &#160;&#160;&#160;&#160;let p = RistrettoPoint::lizard_encode::&lt;Sha256&gt;(&amp;zkgroup::common::constants::TEST_ARRAY_16); &#160;&#160;&#160;&#160;let data_out = p.lizard_decode::&lt;Sha256&gt;(); &#160;&#160;&#160;&#160;assert_hex_eq!(data_out.unwrap()...">
<polygon fill="white" stroke="black" points="320.5,-5181.23 233.5,-5181.23 233.5,-5145.23 320.5,-5145.23 320.5,-5181.23"/>
<text text-anchor="middle" x="277" y="-5159.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="gray" d="M320.61,-5173.51C380.78,-5185.19 489.58,-5195.35 546,-5133.23 594.82,-5079.47 529.77,-3889.16 566,-3826.23 671.82,-3642.38 770.6,-3636.96 975,-3580.23 1136.96,-3535.27 1624.99,-3553.03 1723.5,-3689.23 1794.16,-3786.92 1680.39,-4131.4 1748,-4231.23 1839.79,-4366.77 1981.91,-4254.86 2083.5,-4383.23 2702.37,-5165.25 2412.03,-5593.28 2515,-6585.23 2521.01,-6643.09 2504.22,-8635.86 2543,-8679.23 2579.52,-8720.07 2644.07,-8723.18 2692.94,-8718.27"/>
<polygon fill="gray" stroke="gray" points="2693.58,-8721.72 2703.12,-8717.11 2692.79,-8714.76 2693.58,-8721.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="gray" d="M320.63,-5173.52C380.82,-5185.23 489.66,-5195.42 546,-5133.23 604.08,-5069.11 507.32,-3639.79 566,-3576.23 740.52,-3387.2 1557.29,-3401.86 1723.5,-3598.23 1766.97,-3649.58 1701.46,-4154.65 1748,-4203.23 1799.76,-4257.25 2011.49,-4210.94 2083.5,-4231.23 2290.12,-4289.44 2397.06,-4268.86 2515,-4448.23 2755.87,-4814.55 2758.41,-8224.27 2758.05,-8569.98"/>
<polygon fill="gray" stroke="gray" points="2754.55,-8570.15 2758.03,-8580.15 2761.55,-8570.16 2754.55,-8570.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node301" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node301"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="396.5,-5235.23 157.5,-5235.23 157.5,-5199.23 396.5,-5199.23 396.5,-5235.23"/>
<text text-anchor="middle" x="277" y="-5213.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M388.53,-5235.23C442.74,-5237.54 505.02,-5229.42 546,-5190.23 590.47,-5147.69 522.35,-5096.6 566,-5053.23 594.6,-5024.8 638.37,-5016.96 677.04,-5016.7"/>
<polygon fill="gray" stroke="gray" points="677.24,-5020.21 687.27,-5016.81 677.31,-5013.21 677.24,-5020.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="gray" d="M396.59,-5214.83C443.85,-5211.42 498.25,-5204.38 546,-5190.23 612.67,-5170.47 683.08,-5129.77 724.06,-5103.8"/>
<polygon fill="gray" stroke="gray" points="726.06,-5106.68 732.6,-5098.34 722.29,-5100.78 726.06,-5106.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M396.84,-5209.31C450.76,-5212.61 510.32,-5227.26 546,-5270.23 579.3,-5310.32 531.58,-7107.09 566,-7146.23 566.53,-7146.82 567.06,-7147.41 567.59,-7147.99"/>
<polygon fill="gray" stroke="gray" points="565.31,-7150.64 574.94,-7155.05 570.16,-7145.6 565.31,-7150.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M396.81,-5209.34C450.72,-5212.65 510.28,-5227.3 546,-5270.23 603.07,-5338.82 507.01,-6809.28 566,-6876.23 578.99,-6890.96 596,-6900.41 614.55,-6906.22"/>
<polygon fill="gray" stroke="gray" points="613.81,-6909.64 624.38,-6908.93 615.67,-6902.89 613.81,-6909.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M396.82,-5209.34C450.73,-5212.64 510.29,-5227.29 546,-5270.23 575.49,-5305.68 535.52,-6895.62 566,-6930.23 577.23,-6942.98 591.48,-6951.77 607.13,-6957.67"/>
<polygon fill="gray" stroke="gray" points="606.45,-6961.13 617.04,-6960.98 608.67,-6954.49 606.45,-6961.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="gray" d="M396.51,-5209.28C450.52,-5212.54 510.25,-5227.16 546,-5270.23 581.2,-5312.63 529.61,-7212.83 566,-7254.23 571.59,-7260.58 577.93,-7265.96 584.82,-7270.48"/>
<polygon fill="gray" stroke="gray" points="583.43,-7273.73 593.82,-7275.77 586.97,-7267.69 583.43,-7273.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node302" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node302"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="846.5,-7511.23 674.5,-7511.23 674.5,-7475.23 846.5,-7475.23 846.5,-7511.23"/>
<text text-anchor="middle" x="760.5" y="-7489.53" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="gray" d="M846.75,-7502.45C944.16,-7512.99 1099.07,-7529.76 1168.85,-7537.31"/>
<polygon fill="gray" stroke="gray" points="1168.58,-7540.8 1178.9,-7538.4 1169.33,-7533.85 1168.58,-7540.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="gray" d="M846.81,-7499.62C885.26,-7506.97 928,-7522.17 955,-7553.23 991.34,-7595.02 934.98,-7637.94 975,-7676.23 1026.8,-7725.78 1118.03,-7719.4 1168.63,-7710.97"/>
<polygon fill="gray" stroke="gray" points="1169.55,-7714.36 1178.78,-7709.15 1168.32,-7707.47 1169.55,-7714.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="gray" d="M846.75,-7492.07C943.68,-7490.76 1097.55,-7488.68 1167.81,-7487.73"/>
<polygon fill="gray" stroke="gray" points="1168,-7491.23 1177.95,-7487.59 1167.91,-7484.23 1168,-7491.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="gray" d="M846.59,-7479.35C885.66,-7473.16 932.63,-7465.98 975,-7460.23 1042.82,-7451.01 1122.15,-7442.11 1167.69,-7437.18"/>
<polygon fill="gray" stroke="gray" points="1168.13,-7440.66 1177.7,-7436.1 1167.38,-7433.7 1168.13,-7440.66"/>
</g>
</g>
</svg>
