digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "dalek_benchmarks.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_scalars()." [label="construct_scalars", tooltip="    fn construct_scalars(n: usize) -> Vec<Scalar> {         let mut rng = thread_rng();         (0..n).map(|_| Scalar::random(&mut rng)).collect()     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul()." [label="vartime_double_base_scalar_mul", tooltip="    fn vartime_double_base_scalar_mul<M: Measurement>(c: &mut BenchmarkGroup<M>) {         c.bench_function(' Variable-time aA+bB, A variable, B fixed' , |bench| {             let mut rng = thread_rng...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/multiscalar_benches()." [label="multiscalar_benches", tooltip="    pub(crate) fn multiscalar_benches() {         let mut c = Criterion::default();         let mut g = c.benchmark_group(' multiscalar benches' );          consttime_multiscalar_mul(&mut g);         ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul()." [label="consttime_fixed_base_scalar_mul", tooltip="    fn consttime_fixed_base_scalar_mul<M: Measurement>(c: &mut BenchmarkGroup<M>) {         let s = Scalar::from(897987897u64).invert();         c.bench_function(' Constant-time fixed-base scalar mul'...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper()." [label="vartime_precomputed_helper", tooltip="    fn vartime_precomputed_helper<M: Measurement>(         c: &mut BenchmarkGroup<M>,         dynamic_fraction: f64,     ) {         for multiscalar_size in &MULTISCALAR_SIZES {             let bench_...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul()." [label="consttime_fixed_base_scalar_mul", tooltip="    fn consttime_fixed_base_scalar_mul<M: Measurement>(c: &mut BenchmarkGroup<M>) {         let s = Scalar::from(897987897u64).invert();         c.bench_function(' Constant-time fixed-base scalar mul'...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_points()." [label="construct_points", tooltip="    fn construct_points(n: usize) -> Vec<EdwardsPoint> {         let mut rng = thread_rng();         (0..n)             .map(|_| EdwardsPoint::mul_base(&Scalar::random(&mut rng)))             .collect...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul()." [label="consttime_multiscalar_mul", tooltip="    fn consttime_multiscalar_mul<M: Measurement>(c: &mut BenchmarkGroup<M>) {         for multiscalar_size in &MULTISCALAR_SIZES {             c.bench_with_input(                 BenchmarkId::new(    ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul()." [label="vartime_multiscalar_mul", tooltip="    fn vartime_multiscalar_mul<M: Measurement>(c: &mut BenchmarkGroup<M>) {         for multiscalar_size in &MULTISCALAR_SIZES {             c.bench_with_input(                 BenchmarkId::new(      ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_arith()." [label="scalar_arith", tooltip="    fn scalar_arith<M: Measurement>(c: &mut BenchmarkGroup<M>) {         let mut rng = thread_rng();          c.bench_function(' Scalar inversion' , |b| {             let s = Scalar::from(897987897u64...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/montgomery_benches()." [label="montgomery_benches", tooltip="    pub(crate) fn montgomery_benches() {         let mut c = Criterion::default();         let mut g = c.benchmark_group(' montgomery benches' );          montgomery_ladder(&mut g);         consttime_...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_benches()." [label="scalar_benches", tooltip="    pub(crate) fn scalar_benches() {         let mut c = Criterion::default();         let mut g = c.benchmark_group(' scalar benches' );          scalar_arith(&mut g);         batch_scalar_inversion(...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static()." [label="vartime_precomputed_pure_static", tooltip="    fn vartime_precomputed_pure_static<M: Measurement>(c: &mut BenchmarkGroup<M>) {         for multiscalar_size in &MULTISCALAR_SIZES {             c.bench_with_input(                 BenchmarkId::ne...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/batch_scalar_inversion()." [label="batch_scalar_inversion", tooltip="    fn batch_scalar_inversion<M: Measurement>(c: &mut BenchmarkGroup<M>) {         for batch_size in &BATCH_SIZES {             c.bench_with_input(                 BenchmarkId::new(' Batch scalar inve...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul()." [label="consttime_variable_base_scalar_mul", tooltip="    fn consttime_variable_base_scalar_mul<M: Measurement>(c: &mut BenchmarkGroup<M>) {         let B = &constants::ED25519_BASEPOINT_POINT;         let s = Scalar::from(897987897u64).invert();        ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/montgomery_ladder()." [label="montgomery_ladder", tooltip="    fn montgomery_ladder<M: Measurement>(c: &mut BenchmarkGroup<M>) {         c.bench_function(' Montgomery pseudomultiplication' , |b| {             let B = constants::X25519_BASEPOINT;             l...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/edwards_benches()." [label="edwards_benches", tooltip="    pub(crate) fn edwards_benches() {         let mut c = Criterion::default();         let mut g = c.benchmark_group(' edwards benches' );          compress(&mut g);         decompress(&mut g);      ...", fillcolor=white]
  }
  subgraph cluster_1 {
    label = "pippenger.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger()." [label="test_vartime_pippenger", tooltip="    fn test_vartime_pippenger() {         // Reuse points across different tests         let mut n = 512;         let x = Scalar::from(2128506u64).invert();         let y = Scalar::from(4443282u64).in...", fillcolor=white]
  }
  subgraph cluster_2 {
    label = "scalar.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/mul()." [label="mul", tooltip="    fn mul() {         let res = Scalar52::mul(&X, &Y);         for i in 0..5 {             assert!(res[i] == XY[i]);         }     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul()." [label="montgomery_mul", tooltip="    pub fn montgomery_mul(a: &Scalar52, b: &Scalar52) -> Scalar52 {         Scalar52::montgomery_reduce(&Scalar52::mul_internal(a, b))     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/mul_max()." [label="mul_max", tooltip="    fn mul_max() {         let res = Scalar52::mul(&X, &X);         for i in 0..5 {             assert!(res[i] == XX[i]);         }     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max()." [label="montgomery_mul_max", tooltip="    fn montgomery_mul_max() {         let res = Scalar52::montgomery_mul(&X, &X);         for i in 0..5 {             assert!(res[i] == XX_MONT[i]);         }     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul()." [label="mul", tooltip="    pub fn mul(a: &Scalar52, b: &Scalar52) -> Scalar52 {         let ab = Scalar52::montgomery_reduce(&Scalar52::mul_internal(a, b));         Scalar52::montgomery_reduce(&Scalar52::mul_internal(&ab, &...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal()." [label="mul_internal", tooltip="    pub (crate) fn mul_internal(a: &Scalar52, b: &Scalar52) -> [u128; 9] {         let mut z = [0u128; 9];          z[0] = m(a[0], b[0]);         z[1] = m(a[0], b[1]) + m(a[1], b[0]);         z[2] = m...", fillcolor=lightblue]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide()." [label="from_bytes_wide", tooltip="    fn from_bytes_wide() {         let bignum = [255u8; 64]; // 2^512 - 1         let reduced = Scalar52::from_bytes_wide(&bignum);         for i in 0..5 {             assert!(reduced[i] == C[i]);    ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery()." [label="as_montgomery", tooltip="    pub fn as_montgomery(&self) -> Scalar52 {         Scalar52::montgomery_mul(self, &constants::RR)     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul()." [label="montgomery_mul", tooltip="    fn montgomery_mul() {         let res = Scalar52::montgomery_mul(&X, &Y);         for i in 0..5 {             assert!(res[i] == XY_MONT[i]);         }     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square()." [label="square", tooltip="    pub fn square(&self) -> Scalar52 {         let aa = Scalar52::montgomery_reduce(&Scalar52::square_internal(self));         Scalar52::montgomery_reduce(&Scalar52::mul_internal(&aa, &constants::RR))...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/square_max()." [label="square_max", tooltip="    fn square_max() {         let res = X.square();         for i in 0..5 {             assert!(res[i] == XX[i]);         }     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide()." [label="from_bytes_wide", tooltip="    pub fn from_bytes_wide(bytes: &[u8; 64]) -> Scalar52 {         let mut words = [0u64; 8];         for i in 0..8 {             for j in 0..8 {                 words[i] |= (bytes[(i * 8) + j] as u64...", fillcolor=white]
  }
  subgraph cluster_3 {
    label = "edwards.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_n_500()." [label="multiscalar_consistency_n_500", tooltip="    fn multiscalar_consistency_n_500() {         let iters = 50;         for _ in 0..iters {             multiscalar_consistency_iter(500);         }     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_iter()." [label="multiscalar_consistency_iter", tooltip="    fn multiscalar_consistency_iter(n: usize) {         let mut rng = rand::thread_rng();          // Construct random coefficients x0, ..., x_{n-1},         // followed by some extra hardcoded ones. ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_n_100()." [label="multiscalar_consistency_n_100", tooltip="    fn multiscalar_consistency_n_100() {         let iters = 50;         for _ in 0..iters {             multiscalar_consistency_iter(100);         }     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_n_250()." [label="multiscalar_consistency_n_250", tooltip="    fn multiscalar_consistency_n_250() {         let iters = 50;         for _ in 0..iters {             multiscalar_consistency_iter(250);         }     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar()." [label="vartime_precomputed_vs_nonprecomputed_multiscalar", tooltip="    fn vartime_precomputed_vs_nonprecomputed_multiscalar() {         let mut rng = rand::thread_rng();          let static_scalars = (0..128)             .map(|_| Scalar::random(&mut rng))            ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000()." [label="multiscalar_consistency_n_1000", tooltip="    fn multiscalar_consistency_n_1000() {         let iters = 50;         for _ in 0..iters {             multiscalar_consistency_iter(1000);         }     }", fillcolor=white]
  }
  subgraph cluster_4 {
    label = "montgomery.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/montgomery_mul_bits_be()." [label="montgomery_mul_bits_be", tooltip="    fn montgomery_mul_bits_be() {         let mut csprng = rand_core::OsRng;          for _ in 0..100 {             // Make a random prime-order point P             let p_edwards = rand_prime_order_po...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult()." [label="montgomery_ladder_matches_edwards_scalarmult", tooltip="    fn montgomery_ladder_matches_edwards_scalarmult() {         let mut csprng = rand_core::OsRng;          for _ in 0..100 {             let p_edwards = rand_prime_order_point(&mut csprng);          ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/rand_prime_order_point()." [label="rand_prime_order_point", tooltip="    fn rand_prime_order_point(mut rng: impl RngCore + CryptoRng) -> EdwardsPoint {         let s: Scalar = Scalar::random(&mut rng);         EdwardsPoint::mul_base(&s)     }", fillcolor=white]
  }
  subgraph cluster_5 {
    label = "ristretto.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/test/four_torsion_random()." [label="four_torsion_random", tooltip="    fn four_torsion_random() {         let mut rng = OsRng;         let P = RistrettoPoint::mul_base(&Scalar::random(&mut rng));         let P_coset = P.coset4();         for point in P_coset {       ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar()." [label="vartime_precomputed_vs_nonprecomputed_multiscalar", tooltip="    fn vartime_precomputed_vs_nonprecomputed_multiscalar() {         let mut rng = rand::thread_rng();          let static_scalars = (0..128)             .map(|_| Scalar::random(&mut rng))            ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/test/random_roundtrip()." [label="random_roundtrip", tooltip="    fn random_roundtrip() {         let mut rng = OsRng;         for _ in 0..100 {             let P = RistrettoPoint::mul_base(&Scalar::random(&mut rng));             let compressed_P = P.compress();...", fillcolor=white]
  }
  subgraph cluster_6 {
    label = "scalar.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_pippenger_radix()." [label="test_pippenger_radix", tooltip="    fn test_pippenger_radix() {         use core::iter;         // For each valid radix it tests that 1000 random-ish scalars can be restored         // from the produced representation precisely.    ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics()." [label="batch_invert_with_a_zero_input_panics", tooltip="    fn batch_invert_with_a_zero_input_panics() {         let mut xs = vec![Scalar::ONE; 16];         xs[3] = Scalar::ZERO;         // This should panic in debug mode.         Scalar::batch_invert(&mut...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/invert()." [label="invert", tooltip="    fn invert() {         let inv_X = X.invert();         assert_eq!(inv_X, XINV);         let should_be_one = inv_X * X;         assert_eq!(should_be_one, Scalar::ONE);     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`&Scalar`][Neg]neg()." [label="neg", tooltip="    fn neg(self) -> Scalar {         let self_R = UnpackedScalar::mul_internal(&self.unpack(), &constants::R);         let self_mod_l = UnpackedScalar::montgomery_reduce(&self_R);         UnpackedScal...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/reduce()." [label="reduce", tooltip="    fn reduce() {         let biggest = Scalar::from_bytes_mod_order([0xff; 32]);         assert_eq!(biggest, CANONICAL_2_256_MINUS_1);     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()." [label="from_bytes_mod_order_wide", tooltip="    pub fn from_bytes_mod_order_wide(input: &[u8; 64]) -> Scalar {         UnpackedScalar::from_bytes_wide(input).pack()     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_empty()." [label="batch_invert_empty", tooltip="    fn batch_invert_empty() {         assert_eq!(Scalar::ONE, Scalar::batch_invert(&mut []));     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_consistency()." [label="batch_invert_consistency", tooltip="    fn batch_invert_consistency() {         let mut x = Scalar::from(1u64);         let mut v1: Vec<_> = (0..16)             .map(|_| {                 let tmp = x;                 x = x + x;         ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()." [label="batch_invert", tooltip="    pub fn batch_invert(inputs: &mut [Scalar]) -> Scalar {         // This code is essentially identical to the FieldElement         // implementation, and is documented there.  Unfortunately,        ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/non_adjacent_form_random()." [label="non_adjacent_form_random", tooltip="    fn non_adjacent_form_random() {         let mut rng = rand::thread_rng();         for _ in 0..1_000 {             let x = Scalar::random(&mut rng);             for w in &[5, 6, 7, 8] {            ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_mul_reduction_invariance()." [label="test_mul_reduction_invariance", tooltip="    fn test_mul_reduction_invariance() {         let mut rng = rand::thread_rng();          for _ in 0..10 {             // Also define c that's clamped. We'll make sure that clamping doesn't affect  ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]reduce()." [label="reduce", tooltip="    fn reduce(&self) -> Scalar {         let x = self.unpack();         let xR = UnpackedScalar::mul_internal(&x, &constants::R);         let x_mod_l = UnpackedScalar::montgomery_reduce(&xR);         ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()." [label="invert", tooltip="    pub fn invert(&self) -> Scalar {         self.unpack().invert().pack()     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/square_multiply()." [label="square_multiply", tooltip="        fn square_multiply(y: &mut UnpackedScalar, squarings: usize, x: &UnpackedScalar) {             for _ in 0..squarings {                 *y = y.montgomery_square();             }             *y ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_pippenger_radix_iter()." [label="test_pippenger_radix_iter", tooltip="    fn test_pippenger_radix_iter(scalar: Scalar, w: usize) {         let digits_count = Scalar::to_radix_2w_size_hint(w);         let digits = scalar.as_radix_2w(w);          let radix = Scalar::from(...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes()." [label="hash_from_bytes", tooltip="    pub fn hash_from_bytes<D>(input: &[u8]) -> Scalar     where         D: Digest<OutputSize = U64> + Default,     {         let mut hash = D::default();         hash.update(input);         Scalar::fr...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()." [label="from_bytes_mod_order", tooltip="    pub fn from_bytes_mod_order(bytes: [u8; 32]) -> Scalar {         // Temporarily allow s_unreduced.bytes > 2^255 ...         let s_unreduced = Scalar { bytes };          // Then reduce mod the grou...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert()." [label="montgomery_invert", tooltip="    pub fn montgomery_invert(&self) -> UnpackedScalar {         // Uses the addition chain from         // https://briansmith.org/ecc-inversion-addition-chains-01#curve25519_scalar_inversion         l...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()." [label="from_canonical_bytes", tooltip="    pub fn from_canonical_bytes(bytes: [u8; 32]) -> CtOption<Scalar> {         let high_bit_unset = (bytes[31] >> 7).ct_eq(&0);         let candidate = Scalar { bytes };         CtOption::new(candidat...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`&Scalar`][`Mul<&Scalar>`]mul()." [label="mul", tooltip="    fn mul(self, _rhs: &'b Scalar) -> Scalar {         UnpackedScalar::mul(&self.unpack(), &_rhs.unpack()).pack()     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/square()." [label="square", tooltip="    fn square() {         let expected = X * X;         let actual = X.unpack().square().pack();         for i in 0..32 {             assert!(expected[i] == actual[i]);         }     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar][`MulAssign<&Scalar>`]mul_assign()." [label="mul_assign", tooltip="    fn mul_assign(&mut self, _rhs: &'b Scalar) {         *self = UnpackedScalar::mul(&self.unpack(), &_rhs.unpack()).pack();     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/canonical_decoding()." [label="canonical_decoding", tooltip="    fn canonical_decoding() {         // canonical encoding of 1667457891         let canonical_bytes = [             99, 99, 99, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide()." [label="montgomery_reduce_matches_from_bytes_mod_order_wide", tooltip="    fn montgomery_reduce_matches_from_bytes_mod_order_wide() {         let mut bignum = [0u8; 64];          // set bignum = x + 2^256x         for i in 0..32 {             bignum[i] = X[i];           ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/from_bytes_mod_order_wide()." [label="from_bytes_mod_order_wide", tooltip="    fn from_bytes_mod_order_wide() {         let mut bignum = [0u8; 64];         // set bignum = x + 2^256x         for i in 0..32 {             bignum[i] = X[i];             bignum[32 + i] = X[i];   ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert()." [label="invert", tooltip="    pub fn invert(&self) -> UnpackedScalar {         self.as_montgomery().montgomery_invert().from_montgomery()     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/fuzzer_testcase_reduction()." [label="fuzzer_testcase_reduction", tooltip="    fn fuzzer_testcase_reduction() {         // LE bytes of 24519928653854221733733552434404946937899825954937634815         let a_bytes = [             255, 255, 255, 255, 255, 255, 255, 255, 255, 25...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]is_canonical()." [label="is_canonical", tooltip="    fn is_canonical(&self) -> Choice {         self.ct_eq(&self.reduce())     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()." [label="from_hash", tooltip="    pub fn from_hash<D>(hash: D) -> Scalar     where         D: Digest<OutputSize = U64>,     {         let mut output = [0u8; 64];         output.copy_from_slice(hash.finalize().as_slice());         ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()." [label="random", tooltip="    pub fn random<R: CryptoRngCore + ?Sized>(rng: &mut R) -> Self {         let mut scalar_bytes = [0u8; 64];         rng.fill_bytes(&mut scalar_bytes);         Scalar::from_bytes_mod_order_wide(&scal...", fillcolor=white]
  }
  subgraph cluster_7 {
    label = "ed25519_benchmarks.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_benches/verify_strict()." [label="verify_strict", tooltip="    fn verify_strict(c: &mut Criterion) {         let mut csprng: ThreadRng = thread_rng();         let keypair: SigningKey = SigningKey::generate(&mut csprng);         let msg: &[u8] = b' ' ;        ...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_benches/key_generation()." [label="key_generation", tooltip="    fn key_generation(c: &mut Criterion) {         let mut csprng: ThreadRng = thread_rng();          c.bench_function(' Ed25519 keypair generation' , move |b| {             b.iter(|| SigningKey::gene...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_benches/sign()." [label="sign", tooltip="    fn sign(c: &mut Criterion) {         let mut csprng: ThreadRng = thread_rng();         let keypair: SigningKey = SigningKey::generate(&mut csprng);         let msg: &[u8] = b' ' ;          c.bench...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_benches/verify()." [label="verify", tooltip="    fn verify(c: &mut Criterion) {         let mut csprng: ThreadRng = thread_rng();         let keypair: SigningKey = SigningKey::generate(&mut csprng);         let msg: &[u8] = b' ' ;         let si...", fillcolor=white]
  }
  subgraph cluster_8 {
    label = "hazmat.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey][`TryFrom<&[u8]>`]try_from()." [label="try_from", tooltip="    fn try_from(bytes: &[u8]) -> Result<Self, Self::Error> {         Self::from_slice(bytes)     }", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/test/sign_verify_nonspec()." [label="sign_verify_nonspec", tooltip="    fn sign_verify_nonspec() {         // Generate the keypair         let rng = OsRng;         let esk = ExpandedSecretKey::random(rng);         let vk = VerifyingKey::from(&esk);          let msg = ...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/test/impl#[ExpandedSecretKey]random()." [label="random", tooltip="        fn random<R: RngCore + CryptoRng>(mut rng: R) -> Self {             let mut bytes = [0u8; 64];             rng.fill_bytes(&mut bytes);             ExpandedSecretKey::from_bytes(&bytes)        ...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/raw_sign()." [label="raw_sign", tooltip="pub fn raw_sign<CtxDigest>(     esk: &ExpandedSecretKey,     message: &[u8],     verifying_key: &VerifyingKey, ) -> Signature where     CtxDigest: Digest<OutputSize = U64>, {     esk.raw_sign::<CtxDig...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes()." [label="from_bytes", tooltip="    pub fn from_bytes(bytes: &[u8; 64]) -> Self {         // TODO: Use bytes.split_array_ref once it’s in MSRV.         let mut scalar_bytes: [u8; 32] = [0u8; 32];         let mut hash_prefix: [u8; ...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_slice()." [label="from_slice", tooltip="    pub fn from_slice(bytes: &[u8]) -> Result<Self, SignatureError> {         // Try to coerce bytes to a [u8; 64]         bytes.try_into().map(Self::from_bytes).map_err(|_| {             InternalErro...", fillcolor=white]
  }
  subgraph cluster_9 {
    label = "signature.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 signature/check_scalar()." [label="check_scalar", tooltip="fn check_scalar(bytes: [u8; 32]) -> Result<Scalar, SignatureError> {     match Scalar::from_canonical_bytes(bytes).into() {         None => Err(InternalError::ScalarFormat.into()),         Some(x) => ...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom<&ed25519::Signature>`]try_from()." [label="try_from", tooltip="    fn try_from(sig: &ed25519::Signature) -> Result<InternalSignature, SignatureError> {         InternalSignature::from_bytes(&sig.to_bytes())     }", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature]from_bytes()." [label="from_bytes", tooltip="    pub fn from_bytes(bytes: &[u8; SIGNATURE_LENGTH]) -> Result<InternalSignature, SignatureError> {         // TODO: Use bytes.split_array_ref once it’s in MSRV.         let mut R_bytes: [u8; 32] =...", fillcolor=white]
  }
  subgraph cluster_10 {
    label = "signing.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From<&[u8; SECRET_KEY_LENGTH]>`]from()." [label="from", tooltip="    fn from(secret_key: &SecretKey) -> ExpandedSecretKey {         let hash = Sha512::default().chain_update(secret_key).finalize();         ExpandedSecretKey::from_bytes(hash.as_ref())     }", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]generate()." [label="generate", tooltip="    pub fn generate<R: CryptoRngCore + ?Sized>(csprng: &mut R) -> SigningKey {         let mut secret = SecretKey::default();         csprng.fill_bytes(&mut secret);         Self::from_bytes(&secret) ...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey][`Signer<Signature>`]try_sign()." [label="try_sign", tooltip="    fn try_sign(&self, message: &[u8]) -> Result<Signature, SignatureError> {         let expanded: ExpandedSecretKey = (&self.secret_key).into();         Ok(expanded.raw_sign::<Sha512>(message, &self...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]to_scalar()." [label="to_scalar", tooltip="    pub fn to_scalar(&self) -> Scalar {         // Per the spec, the ed25519 secret key sk is expanded to         //     (scalar_bytes, hash_prefix) = SHA-512(sk)         // where the two outputs are ...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign()." [label="raw_sign", tooltip="    pub(crate) fn raw_sign<CtxDigest>(         &self,         message: &[u8],         verifying_key: &VerifyingKey,     ) -> Signature     where         CtxDigest: Digest<OutputSize = U64>,     {     ...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey][`TryFrom<&[u8]>`]try_from()." [label="try_from", tooltip="    fn try_from(bytes: &[u8]) -> Result<SigningKey, SignatureError> {         SecretKey::try_from(bytes)             .map(|bytes| Self::from_bytes(&bytes))             .map_err(|_| {                 I...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey][`From<[u8; SECRET_KEY_LENGTH]>`]from()." [label="from", tooltip="    fn from(secret: SecretKey) -> Self {         Self::from_bytes(&secret)     }", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey][`From<&[u8; SECRET_KEY_LENGTH]>`]from()." [label="from", tooltip="    fn from(secret: &SecretKey) -> Self {         Self::from_bytes(secret)     }", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_bytes()." [label="from_bytes", tooltip="    pub fn from_bytes(secret_key: &SecretKey) -> Self {         let verifying_key = VerifyingKey::from(&ExpandedSecretKey::from(secret_key));         Self {             secret_key: *secret_key,       ...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_keypair_bytes()." [label="from_keypair_bytes", tooltip="    pub fn from_keypair_bytes(bytes: &[u8; 64]) -> Result<SigningKey, SignatureError> {         let (secret_key, verifying_key) = bytes.split_at(SECRET_KEY_LENGTH);         let signing_key = SigningKe...", fillcolor=white]
  }
  subgraph cluster_11 {
    label = "verifying.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." [label="raw_verify", tooltip="    pub(crate) fn raw_verify<CtxDigest>(         &self,         message: &[u8],         signature: &ed25519::Signature,     ) -> Result<(), SignatureError>     where         CtxDigest: Digest<OutputSi...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict()." [label="verify_strict", tooltip="    pub fn verify_strict(         &self,         message: &[u8],         signature: &ed25519::Signature,     ) -> Result<(), SignatureError> {         let signature = InternalSignature::try_from(signa...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()." [label="recompute_R", tooltip="    fn recompute_R<CtxDigest>(         &self,         context: Option<&[u8]>,         signature: &InternalSignature,         M: &[u8],     ) -> CompressedEdwardsY     where         CtxDigest: Digest<O...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge()." [label="compute_challenge", tooltip="    fn compute_challenge<CtxDigest>(         context: Option<&[u8]>,         R: &CompressedEdwardsY,         A: &CompressedEdwardsY,         M: &[u8],     ) -> Scalar     where         CtxDigest: Dige...", fillcolor=white]
  }
  subgraph cluster_12 {
    label = "ed25519.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/repudiation()." [label="repudiation", tooltip="    fn repudiation() {         let message1 = b' Send 100 USD to Alice' ;         let message2 = b' Send 100000 USD to Alice' ;          let mut s: Scalar = non_null_scalar();         let pubkey = WEA...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/compute_challenge()." [label="compute_challenge", tooltip="    fn compute_challenge(         message: &[u8],         pub_key: &EdwardsPoint,         signature_r: &EdwardsPoint,         context: Option<&[u8]>,     ) -> Scalar {         let mut h = Sha512::defa...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/against_reference_implementation()." [label="against_reference_implementation", tooltip="    fn against_reference_implementation() {         // TestGolden         let mut line: String;         let mut lineno: usize = 0;          let f = File::open(' TESTVECTORS' );         if f.is_err() {...", fillcolor=white]
    "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/non_null_scalar()." [label="non_null_scalar", tooltip="    fn non_null_scalar() -> Scalar {         let mut rng = rand::rngs::OsRng;         let mut s_candidate = Scalar::random(&mut rng);         while s_candidate == Scalar::ZERO {             s_candidat...", fillcolor=white]
  }
  subgraph cluster_13 {
    label = "x25519.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_to_x25519_dh()." [label="ed25519_to_x25519_dh", tooltip="fn ed25519_to_x25519_dh() {     // Keys from RFC8032 test vectors (from section 7.1)     let ed_secret_key_a = hex!(' 9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60' );     let ed_se...", fillcolor=white]
  }
  subgraph cluster_14 {
    label = "protocol.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature()." [label="SenderKeyMessage_VerifySignature", tooltip="fn SenderKeyMessage_VerifySignature(skm: &SenderKeyMessage, pubkey: &PublicKey) -> Result<bool> {     skm.verify_signature(pubkey) }", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle()." [label="SessionBuilder_ProcessPreKeyBundle", tooltip="async fn SessionBuilder_ProcessPreKeyBundle(     bundle: &PreKeyBundle,     protocol_address: &ProtocolAddress,     session_store: &mut dyn SessionStore,     identity_key_store: &mut dyn IdentityKeySt...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPublicKey_Verify()." [label="ECPublicKey_Verify", tooltip="fn ECPublicKey_Verify(key: &PublicKey, message: &[u8], signature: &[u8]) -> bool {     key.verify_signature(message, signature) }", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity()." [label="IdentityKeyPair_SignAlternateIdentity", tooltip="fn IdentityKeyPair_SignAlternateIdentity(     public_key: &PublicKey,     private_key: &PrivateKey,     other_identity: &PublicKey, ) -> Result<Vec<u8>> {     let mut rng = rand::rngs::OsRng.unwrap_er...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_Validate()." [label="SenderCertificate_Validate", tooltip="fn SenderCertificate_Validate(     cert: &SenderCertificate,     key: &PublicKey,     time: Timestamp, ) -> Result<bool> {     cert.validate(key, time) }", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity()." [label="IdentityKey_VerifyAlternateIdentity", tooltip="fn IdentityKey_VerifyAlternateIdentity(     public_key: &PublicKey,     other_identity: &PublicKey,     signature: &[u8], ) -> Result<bool> {     let identity = IdentityKey::new(*public_key);     let ...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_New()." [label="SenderCertificate_New", tooltip="fn SenderCertificate_New(     sender_uuid: String,     sender_e164: Option<String>,     sender_device_id: u32,     sender_key: &PublicKey,     expiration: Timestamp,     signer_cert: &ServerCertificat...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ServerCertificate_New()." [label="ServerCertificate_New", tooltip="fn ServerCertificate_New(     key_id: u32,     server_key: &PublicKey,     trust_root: &PrivateKey, ) -> Result<ServerCertificate> {     let mut rng = rand::rngs::OsRng.unwrap_err();     ServerCertifi...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_New()." [label="SenderKeyMessage_New", tooltip="fn SenderKeyMessage_New(     message_version: u8,     distribution_id: Uuid,     chain_id: u32,     iteration: u32,     ciphertext: &[u8],     pk: &PrivateKey, ) -> Result<SenderKeyMessage> {     let ...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPrivateKey_Sign()." [label="ECPrivateKey_Sign", tooltip="fn ECPrivateKey_Sign(key: &PrivateKey, message: &[u8]) -> Result<Vec<u8>> {     let mut rng = rand::rngs::OsRng.unwrap_err();     Ok(key.calculate_signature(message, &mut rng)?.into_vec()) }", fillcolor=white]
  }
  subgraph cluster_15 {
    label = "usernames.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." [label="Username_Proof", tooltip="pub fn Username_Proof(username: String, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(&username)?.proof(randomness) }", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Verify()." [label="Username_Verify", tooltip="pub fn Username_Verify(     proof: &[u8],     hash: &[u8], ) -> Result<(), ::usernames::ProofVerificationFailure> {     if hash.len() != 32 {         return Err(::usernames::ProofVerificationFailure);...", fillcolor=white]
  }
  subgraph cluster_16 {
    label = "zkgroup.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential()." [label="ServerPublicParams_ReceiveExpiringProfileKeyCredential", tooltip="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential(     server_public_params: &ServerPublicParams,     request_context: Serialized<ProfileKeyCredentialRequestContext>,     response: Serialized<...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey()." [label="GroupSecretParams_DecryptProfileKey", tooltip="fn GroupSecretParams_DecryptProfileKey(     params: Serialized<GroupSecretParams>,     profile_key: Serialized<ProfileKeyCiphertext>,     user_id: Aci, ) -> Result<Serialized<ProfileKey>, ZkGroupVerif...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic()." [label="ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic", tooltip="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(     server_secret_params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     request: Serialized<ProfileKeyCredential...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." [label="GroupSendEndorsementsResponse_IssueDeterministic", tooltip="fn GroupSendEndorsementsResponse_IssueDeterministic(     concatenated_group_member_ciphertexts: &[u8],     key_pair: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8> {     assert!(concatenat...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify()." [label="CreateCallLinkCredentialPresentation_Verify", tooltip="fn CreateCallLinkCredentialPresentation_Verify(     presentation_bytes: &[u8],     room_id: &[u8],     now: Timestamp,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8], ) -> Result<()...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential()." [label="ServerPublicParams_ReceiveReceiptCredential", tooltip="fn ServerPublicParams_ReceiveReceiptCredential(     server_public_params: &ServerPublicParams,     request_context: Serialized<ReceiptCredentialRequestContext>,     response: Serialized<ReceiptCredent...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive()." [label="CallLinkAuthCredentialResponse_Receive", tooltip="fn CallLinkAuthCredentialResponse_Receive(     response_bytes: &[u8],     user_id: Aci,     redemption_time: Timestamp,     params_bytes: &[u8], ) -> Result<Vec<u8>, ZkGroupVerificationFailure> {     ...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic()." [label="CallLinkAuthCredential_PresentDeterministic", tooltip="fn CallLinkAuthCredential_PresentDeterministic(     credential_bytes: &[u8],     user_id: Aci,     redemption_time: Timestamp,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8],     ra...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId()." [label="CallLinkSecretParams_DecryptUserId", tooltip="fn CallLinkSecretParams_DecryptUserId(     params_bytes: &[u8],     user_id: Serialized<UuidCiphertext>, ) -> Result<Aci, ZkGroupVerificationFailure> {     let params = zkgroup::deserialize::<CallLink...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic()." [label="BackupAuthCredential_PresentDeterministic", tooltip="fn BackupAuthCredential_PresentDeterministic(     credential_bytes: &[u8],     server_params_bytes: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Result<Vec<u8>, ZkGroupVerificationFailure> {    ...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify()." [label="CallLinkAuthCredentialPresentation_Verify", tooltip="fn CallLinkAuthCredentialPresentation_Verify(     presentation_bytes: &[u8],     now: Timestamp,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8], ) -> Result<(), ZkGroupVerificationF...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic()." [label="CreateCallLinkCredentialRequest_IssueDeterministic", tooltip="fn CreateCallLinkCredentialRequest_IssueDeterministic(     request_bytes: &[u8],     user_id: Aci,     timestamp: Timestamp,     params_bytes: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey()." [label="CallLinkSecretParams_DeriveFromRootKey", tooltip="fn CallLinkSecretParams_DeriveFromRootKey(root_key: &[u8]) -> Vec<u8> {     let params = CallLinkSecretParams::derive_from_root_key(root_key);     zkgroup::serialize(&params) }", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic()." [label="CallLinkAuthCredentialResponse_IssueDeterministic", tooltip="fn CallLinkAuthCredentialResponse_IssueDeterministic(     user_id: Aci,     redemption_time: Timestamp,     params_bytes: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8> {     let params = ...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation()." [label="ServerSecretParams_VerifyReceiptCredentialPresentation", tooltip="fn ServerSecretParams_VerifyReceiptCredentialPresentation(     server_secret_params: &ServerSecretParams,     presentation: Serialized<ReceiptCredentialPresentation>, ) -> Result<(), ZkGroupVerificati...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic()." [label="BackupAuthCredentialRequest_IssueDeterministic", tooltip="fn BackupAuthCredentialRequest_IssueDeterministic(     request_bytes: &[u8],     redemption_time: Timestamp,     backup_level: AsType<BackupLevel, u8>,     credential_type: AsType<BackupCredentialType...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic()." [label="ServerSecretParams_IssueReceiptCredentialDeterministic", tooltip="fn ServerSecretParams_IssueReceiptCredentialDeterministic(     server_secret_params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     request: Serialized<ReceiptCredentialRequest>,     ...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify()." [label="BackupAuthCredentialPresentation_Verify", tooltip="fn BackupAuthCredentialPresentation_Verify(     presentation_bytes: &[u8],     now: Timestamp,     server_params_bytes: &[u8], ) -> Result<(), ZkGroupVerificationFailure> {     let presentation = binc...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse()." [label="BackupAuthCredentialRequestContext_ReceiveResponse", tooltip="fn BackupAuthCredentialRequestContext_ReceiveResponse(     context_bytes: &[u8],     response_bytes: &[u8],     expected_redemption_time: Timestamp,     params_bytes: &[u8], ) -> Result<Vec<u8>, ZkGro...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey()." [label="GroupSecretParams_DeriveFromMasterKey", tooltip="fn GroupSecretParams_DeriveFromMasterKey(     master_key: Serialized<GroupMasterKey>, ) -> Serialized<GroupSecretParams> {     GroupSecretParams::derive_from_master_key(master_key.into_inner()).into()...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds", tooltip="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(     response_bytes: &[u8],     group_members: ServiceIdSequence<'_>,     local_user: ServiceId,     now: Timestamp,     group_params: ...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic()." [label="ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic", tooltip="fn ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     receipt_serial: &[u8; RECEIPT_SERIAL...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic()." [label="CreateCallLinkCredentialRequestContext_NewDeterministic", tooltip="fn CreateCallLinkCredentialRequestContext_NewDeterministic(     room_id: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8> {     let context = CreateCallLinkCredentialRequestContext::new(room...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic()." [label="CreateCallLinkCredential_PresentDeterministic", tooltip="fn CreateCallLinkCredential_PresentDeterministic(     credential_bytes: &[u8],     room_id: &[u8],     user_id: Aci,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8],     randomness: ...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId()." [label="GroupSecretParams_DecryptServiceId", tooltip="fn GroupSecretParams_DecryptServiceId(     params: Serialized<GroupSecretParams>,     ciphertext: Serialized<UuidCiphertext>, ) -> Result<ServiceId, ZkGroupVerificationFailure> {     params.decrypt_se...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic()." [label="ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic", tooltip="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     group_secret_params: Serial...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration()." [label="GroupSendDerivedKeyPair_ForExpiration", tooltip="fn GroupSendDerivedKeyPair_ForExpiration(     expiration: Timestamp,     server_params: &ServerSecretParams, ) -> Vec<u8> {     zkgroup::serialize(&GroupSendDerivedKeyPair::for_expiration(         exp...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New()." [label="BackupAuthCredentialRequestContext_New", tooltip="fn BackupAuthCredentialRequestContext_New(backup_key: &[u8; 32], uuid: Uuid) -> Vec<u8> {     let backup_key: libsignal_account_keys::BackupKey =         libsignal_account_keys::BackupKey(*backup_key)...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts", tooltip="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(     response_bytes: &[u8],     concatenated_group_member_ciphertexts: &[u8],     local_user_ciphertext: &[u8],     now: Timestamp,   ...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse()." [label="CreateCallLinkCredentialRequestContext_ReceiveResponse", tooltip="fn CreateCallLinkCredentialRequestContext_ReceiveResponse(     context_bytes: &[u8],     response_bytes: &[u8],     user_id: Aci,     params_bytes: &[u8], ) -> Result<Vec<u8>, ZkGroupVerificationFailu...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic()." [label="ServerPublicParams_CreateReceiptCredentialPresentationDeterministic", tooltip="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     receipt_credential: Serialized<Receipt...", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic()." [label="ServerSecretParams_GenerateDeterministic", tooltip="fn ServerSecretParams_GenerateDeterministic(     randomness: &[u8; RANDOMNESS_LEN], ) -> ServerSecretParams {     ServerSecretParams::generate(*randomness) }", fillcolor=white]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic()." [label="ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic", tooltip="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     user_id: Aci,     profile_key: Se...", fillcolor=white]
  }
  subgraph cluster_17 {
    label = "curve.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, generation, key_agreement, signatures);  criterion_main!(benches);", fillcolor=white]
    "rust-analyzer cargo libsignal-core 0.1.0 signatures()." [label="signatures", tooltip="pub fn signatures(c: &mut Criterion) {     let rng = &mut rng();     let alice_key = KeyPair::generate(rng);     let mut some_data = [0; 1024];     rng.fill(&mut some_data);      c.bench_function(' ge...", fillcolor=white]
  }
  subgraph cluster_18 {
    label = "ed_to_xed.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 main()." [label="main", tooltip="fn main() {     let mut input = vec![];     std::io::stdin()         .read_to_end(&mut input)         .expect(' can read input' );     let key = boring::pkey::PKey::public_key_from_pem(&input).expect(...", fillcolor=white]
  }
  subgraph cluster_19 {
    label = "curve.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." [label="test_large_signatures", tooltip="    fn test_large_signatures() -> Result<(), CurveError> {         let mut csprng = OsRng.unwrap_err();         let key_pair = KeyPair::generate(&mut csprng);         let mut message = [0u8; 1024 * 10...", fillcolor=white]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[KeyPair]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R: CryptoRng + Rng>(         &self,         message: &[u8],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         self.private_key.calculate_signature...", fillcolor=white]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R: CryptoRng + Rng>(         &self,         message: &[u8],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         self.calculate_signature_for_multipa...", fillcolor=white]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [label="calculate_signature_for_multipart_message", tooltip="    pub fn calculate_signature_for_multipart_message<R: CryptoRng + Rng>(         &self,         message: &[&[u8]],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         match self....", fillcolor=white]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(&self, message: &[u8], signature: &[u8]) -> bool {         self.verify_signature_for_multipart_message(&[message], signature)     }", fillcolor=white]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [label="verify_signature_for_multipart_message", tooltip="    pub fn verify_signature_for_multipart_message(         &self,         message: &[&[u8]],         signature: &[u8],     ) -> bool {         match &self.key {             PublicKeyData::DjbPublicKey...", fillcolor=white]
  }
  subgraph cluster_20 {
    label = "curve25519.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R>(         &self,         csprng: &mut R,         message: &[&[u8]],     ) -> [u8; SIGNATURE_LENGTH]     where         R: CryptoRng + Rng,     {         let mut random_...", fillcolor=white]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." [label="test_random_signatures", tooltip="    fn test_random_signatures() {         let mut csprng = OsRng.unwrap_err();         for _ in 0..50 {             let mut message = [0u8; 64];             csprng.fill_bytes(&mut message);           ...", fillcolor=white]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         their_public_key: &[u8; PUBLIC_KEY_LENGTH],         message: &[&[u8]],         signature: &[u8; SIGNATURE_LENGTH],     ) -> bool {         let mont_point = Montgom...", fillcolor=white]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [             0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05,             0...", fillcolor=white]
  }
  subgraph cluster_21 {
    label = "verify.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." [label="can_verify_search_response", tooltip="    fn can_verify_search_response() {         let sig_key = VerifyingKey::from_bytes(&hex!(             ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'          ))         .unwrap(...", fillcolor=white]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [label="evaluate_vrf_proof", tooltip="fn evaluate_vrf_proof(     proof: &[u8],     vrf_key: &vrf::PublicKey,     search_key: &[u8], ) -> Result<[u8; 32]> {     let proof = proof.try_into().map_err(|_| MalformedProof)?;     Ok(vrf_key.proo...", fillcolor=white]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." [label="verify_search", tooltip="pub fn verify_search(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     force_monitor: bool,     now: SystemTime, ) -> Result<SearchSt...", fillcolor=white]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [label="verify_search_internal", tooltip="fn verify_search_internal(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     monitor: bool,     now: SystemTime, ) -> Result<SearchSta...", fillcolor=white]
  }
  subgraph cluster_22 {
    label = "vrf.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [label="proof_to_hash", tooltip="    pub fn proof_to_hash(&self, m: &[u8], proof: &[u8; 80]) -> Result<[u8; 32]> {         // Decode proof into its component parts: gamma, c, and s.         let gamma = CompressedEdwardsY(proof[..32]....", fillcolor=white]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." [label="test_proof_to_hash_fails", tooltip="    fn test_proof_to_hash_fails() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();              assert!(pk.proof_to_hash(b' a' , &v.pi).is_err());            ...", fillcolor=white]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." [label="test_proof_to_hash", tooltip="    fn test_proof_to_hash() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();             let index = pk.proof_to_hash(v.alpha, &v.pi).unwrap();             as...", fillcolor=white]
  }
  subgraph cluster_23 {
    label = "gift_badge.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." [label="test_data_presentation", tooltip="        fn test_data_presentation() -> ReceiptCredentialPresentation {             const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32];              let server_params = zkgroup::ServerSecretParams::gene...", fillcolor=white]
  }
  subgraph cluster_24 {
    label = "scramble.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." [label="accept", tooltip="    fn accept(&mut self, visitor: &mut Scrambler) {         let Self {             receiptCredentialPresentation,             state: _,             special_fields: _,         } = self;          if let...", fillcolor=white]
  }
  subgraph cluster_25 {
    label = "fetch_profile_key_credential.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." [label="main", tooltip="async fn main() -> anyhow::Result<()> {     env_logger::builder()         .filter_module(module_path!(), log::LevelFilter::Info)         .parse_default_env()         .init();      let Config {        ...", fillcolor=white]
  }
  subgraph cluster_26 {
    label = "profiles.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_unsuccessful_requests()." [label="test_unsuccessful_requests", tooltip="    async fn test_unsuccessful_requests(         response: chat::Response,     ) -> RequestError<ProfileKeyCredentialRequestError> {         let randomness = zkgroup::TEST_ARRAY_32;         let server...", fillcolor=white]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." [label="test_successful_request", tooltip="    async fn test_successful_request() {         let randomness = zkgroup::TEST_ARRAY_32;         let server_params = zkgroup::ServerSecretParams::generate(randomness);         let aci = Aci::parse_fr...", fillcolor=white]
  }
  subgraph cluster_27 {
    label = "ppss_ops.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error()." [label="do_restore_fails_with_the_first_error", tooltip="    async fn do_restore_fails_with_the_first_error() {         let result = do_restore::<TestEnv>(NotConnectedResults, b' ' ).await;         assert_matches!(result, Err(crate::svrb::Error::ConnectionT...", fillcolor=white]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error()." [label="do_backup_fails_with_the_first_error", tooltip="    async fn do_backup_fails_with_the_first_error() {         let backup = do_prepare::<TestEnv>(b' ' );         let result = do_backup::<TestEnv>(NotConnectedResults, &backup).await;         assert_m...", fillcolor=white]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [label="do_restore", tooltip="pub async fn do_restore<Env: PpssSetup>(     connect_results: impl IntoConnectionResults,     password: &[u8], ) -> Result<Secret, Error> {     let mut rng = OsRng.unwrap_err();     let ConnectionCont...", fillcolor=white]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." [label="do_prepare", tooltip="pub fn do_prepare<Env: PpssSetup>(password: &[u8]) -> Backup4 {     let server_ids = Env::server_ids();     let mut rng = OsRng.unwrap_err();     Backup4::new(         server_ids.as_ref(),         pas...", fillcolor=white]
  }
  subgraph cluster_28 {
    label = "traits.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Backup]prepare()." [label="prepare", tooltip="    fn prepare(&self, password: &[u8]) -> Backup4 {         ppss_ops::do_prepare::<T::Env>(password)     }", fillcolor=white]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Restore]restore()." [label="restore", tooltip="    async fn restore(&self, password: &[u8]) -> Result<Secret, Error> {         ppss_ops::do_restore::<T::Env>(self.connect().await, password).await     }", fillcolor=white]
  }
  subgraph cluster_29 {
    label = "proof.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice()." [label="from_slice", tooltip="    pub fn from_slice(bytes: &[u8]) -> Option<Self> {         // TODO use Iterator::array_chunks once that's stabilized.         // See https://github.com/rust-lang/rust/issues/100450.         let chu...", fillcolor=white]
  }
  subgraph cluster_30 {
    label = "scalar.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical()." [label="scalar_from_slice_canonical", tooltip="pub fn scalar_from_slice_canonical(bytes: &[u8]) -> Option<Scalar> {     let mut scalar_bytes = [0u8; 32];     scalar_bytes.copy_from_slice(bytes);     Scalar::from_canonical_bytes(scalar_bytes).into(...", fillcolor=white]
    "rust-analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide()." [label="scalar_from_slice_wide", tooltip="pub fn scalar_from_slice_wide(bytes: &[u8]) -> Scalar {     let mut scalar_bytes = [0u8; 64];     scalar_bytes.copy_from_slice(bytes);     Scalar::from_bytes_mod_order_wide(&scalar_bytes) }", fillcolor=white]
  }
  subgraph cluster_31 {
    label = "sign.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 sign/sign()." [label="sign", tooltip="pub fn sign(     private_key: Scalar,     public_key: RistrettoPoint,     message: &[u8],     randomness: &[u8], ) -> Result<Vec<u8>, PokshoError> {     let mut st = Statement::new();     st.add(' pub...", fillcolor=white]
    "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let mut block64 = [0u8; 64];         let mut block32 = [0u8; 32];         let mut block100 = [0u8; 100];         for i in 0..32 {             block32[i] = i as u8;   ...", fillcolor=white]
    "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." [label="verify_signature", tooltip="pub fn verify_signature(     signature: &[u8],     public_key: RistrettoPoint,     message: &[u8], ) -> Result<(), PokshoError> {     let mut st = Statement::new();     st.add(' public_key' , &[(' pri...", fillcolor=white]
  }
  subgraph cluster_32 {
    label = "statement.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [label="verify_proof", tooltip="    pub fn verify_proof(         &self,         proof_bytes: &[u8],         point_args: &PointArgs,         message: &[u8],     ) -> Result<(), PokshoError> {         let proof = Proof::from_slice(pro...", fillcolor=white]
    "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." [label="test_complex_statement", tooltip="    fn test_complex_statement() {         let mut block32 = [0u8; 32];         let mut block64a = [0u8; 64];         let mut block64b = [0u8; 64];         let mut block64c = [0u8; 64];         let mut...", fillcolor=white]
    "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [label="prove", tooltip="    pub fn prove(         &self,         scalar_args: &ScalarArgs,         point_args: &PointArgs,         message: &[u8],         randomness: &[u8], // must be 32 bytes     ) -> Result<Vec<u8>, Poksh...", fillcolor=white]
  }
  subgraph cluster_33 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." [label="v1", tooltip="pub fn v1(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();      let alice_address = ProtocolAddress::new(         ' 9d0652a3-dcc3-4d11-975f-74d61598733f' .to_owned(),         DeviceId::new(1...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." [label="v2", tooltip="pub fn v2(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();      let alice_address = ProtocolAddress::new(         ' 9d0652a3-dcc3-4d11-975f-74d61598733f' .to_owned(),         DeviceId::new(1...", fillcolor=white]
  }
  subgraph cluster_34 {
    label = "session.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." [label="session_encrypt", tooltip="pub fn session_encrypt(c: &mut Criterion) {     session_encrypt_result(c).expect(' success' ); }", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." [label="session_encrypt_result", tooltip="pub fn session_encrypt_result(c: &mut Criterion) -> Result<(), SignalProtocolError> {     let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?;      let alice_address = ...", fillcolor=white]
  }
  subgraph cluster_35 {
    label = "group_cipher.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [label="group_decrypt", tooltip="pub async fn group_decrypt(     skm_bytes: &[u8],     sender_key_store: &mut dyn SenderKeyStore,     sender: &ProtocolAddress, ) -> Result<Vec<u8>> {     let skm = SenderKeyMessage::try_from(skm_bytes...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [label="group_encrypt", tooltip="pub async fn group_encrypt<R: Rng + CryptoRng>(     sender_key_store: &mut dyn SenderKeyStore,     sender: &ProtocolAddress,     distribution_id: Uuid,     plaintext: &[u8],     csprng: &mut R, ) -> R...", fillcolor=white]
  }
  subgraph cluster_36 {
    label = "identity_key.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [label="verify_alternate_identity", tooltip="    pub fn verify_alternate_identity(&self, other: &IdentityKey, signature: &[u8]) -> Result<bool> {         Ok(self.public_key.verify_signature_for_multipart_message(             &[                 A...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." [label="test_alternate_identity_signing", tooltip="    fn test_alternate_identity_signing() -> Result<()> {         let mut rng = OsRng.unwrap_err();         let primary = IdentityKeyPair::generate(&mut rng);         let secondary = IdentityKeyPair::g...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." [label="sign_alternate_identity", tooltip="    pub fn sign_alternate_identity<R: Rng + CryptoRng>(         &self,         other: &IdentityKey,         rng: &mut R,     ) -> Result<Box<[u8]>> {         Ok(self.private_key.calculate_signature_fo...", fillcolor=white]
  }
  subgraph cluster_37 {
    label = "protocol.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize()." [label="test_sender_key_message_serialize_deserialize", tooltip="    fn test_sender_key_message_serialize_deserialize() -> Result<()> {         let mut csprng = OsRng.unwrap_err();         let signature_key_pair = KeyPair::generate(&mut csprng);         let sender_...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." [label="test_decryption_error_message", tooltip="    fn test_decryption_error_message() -> Result<()> {         let mut csprng = OsRng.unwrap_err();         let identity_key_pair = KeyPair::generate(&mut csprng);         let base_key_pair = KeyPair:...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(&self, signature_key: &PublicKey) -> Result<bool> {         let valid = signature_key.verify_signature(             &self.serialized[..self.serialized.len() - Self::SIGNATU...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [label="new", tooltip="    pub fn new<R: CryptoRng + Rng>(         message_version: u8,         distribution_id: Uuid,         chain_id: u32,         iteration: u32,         ciphertext: Box<[u8]>,         csprng: &mut R,   ...", fillcolor=white]
  }
  subgraph cluster_38 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [label="sealed_sender_decrypt", tooltip="pub async fn sealed_sender_decrypt(     ciphertext: &[u8],     trust_root: &PublicKey,     timestamp: Timestamp,     local_e164: Option<String>,     local_uuid: String,     local_device_id: DeviceId, ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         key_id: u32,         key: PublicKey,         trust_root: &PrivateKey,         rng: &mut R,     ) -> Result<Self> {         let certificate_pb = proto::seale...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [label="validate", tooltip="    pub fn validate(&self, trust_root: &PublicKey) -> Result<bool> {         if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&self.key_id()?) {             log::error!(                 ' received serve...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." [label="test_lossless_round_trip", tooltip="fn test_lossless_round_trip() -> Result<()> {     let trust_root = PrivateKey::deserialize(&[0u8; 32])?;      // To test a hypothetical addition of a new field:     //     // Step 1: temporarily add a...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         sender_uuid: String,         sender_e164: Option<String>,         key: PublicKey,         sender_device_id: DeviceId,         expiration: Timestamp,        ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [label="validate", tooltip="    pub fn validate(&self, trust_root: &PublicKey, validation_time: Timestamp) -> Result<bool> {         if !self.signer.validate(trust_root)? {             log::error!(                 ' sender certi...", fillcolor=white]
  }
  subgraph cluster_39 {
    label = "session.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [label="process_prekey_bundle", tooltip="pub async fn process_prekey_bundle<R: Rng + CryptoRng>(     remote_address: &ProtocolAddress,     session_store: &mut dyn SessionStore,     identity_store: &mut dyn IdentityKeyStore,     bundle: &PreK...", fillcolor=white]
  }
  subgraph cluster_40 {
    label = "kyber_prekey.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." [label="generate", tooltip="    pub fn generate(         kyber_key_type: kem::KeyType,         id: KyberPreKeyId,         signing_key: &PrivateKey,     ) -> Result<KyberPreKeyRecord> {         let mut rng = rand::rngs::OsRng.unw...", fillcolor=white]
  }
  subgraph cluster_41 {
    label = "groups.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." [label="group_sealed_sender_multiple_devices_and_excluded_recipients", tooltip="fn group_sealed_sender_multiple_devices_and_excluded_recipients() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId:...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." [label="group_sealed_sender_multiple_devices", tooltip="fn group_sealed_sender_multiple_devices() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();      ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." [label="group_sealed_sender", tooltip="fn group_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let bob_device...", fillcolor=white]
  }
  subgraph cluster_42 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." [label="test_decryption_error_in_sealed_sender", tooltip="fn test_decryption_error_in_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();       ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." [label="test_sender_cert", tooltip="fn test_sender_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut rng);    ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." [label="test_sender_key_in_sealed_sender", tooltip="fn test_sender_key_in_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." [label="test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id", tooltip="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = Devi...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." [label="test_revoked_server_cert", tooltip="fn test_revoked_server_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut r...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." [label="test_server_cert", tooltip="fn test_server_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut rng);    ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." [label="test_sealed_sender_multi_recipient_redundant_empty_devices", tooltip="fn test_sealed_sender_multi_recipient_redundant_empty_devices() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::n...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." [label="test_sealed_sender_multi_recipient", tooltip="fn test_sealed_sender_multi_recipient() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         le...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." [label="test_sealed_sender_multi_recipient_encrypt_with_archived_session", tooltip="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceI...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." [label="test_sealed_sender", tooltip="fn test_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let bob_device_id ...", fillcolor=white]
  }
  subgraph cluster_43 {
    label = "session.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." [label="prekey_message_to_archived_session", tooltip="fn prekey_message_to_archived_session() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14151111111' .to_owned(...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [label="run", tooltip="    fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) -> TestResult {         async {             let mut csprng = OsRng.unwrap_err();              let alice_device_id = DeviceId::new(1).unwrap()...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." [label="x3dh_prekey_rejected_as_invalid_message_specifically", tooltip="fn x3dh_prekey_rejected_as_invalid_message_specifically() {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         let bob_device_id...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." [label="test_duplicate_message_error_returned", tooltip="fn test_duplicate_message_error_returned() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         let bob_device_id ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." [label="test_unacknowledged_sessions_eventually_expire", tooltip="fn test_unacknowledged_sessions_eventually_expire() -> TestResult {     async {         const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90);          let mut csprng = OsRng.u...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." [label="test_bad_signed_pre_key_signature", tooltip="fn test_bad_signed_pre_key_signature() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let bob_address =             ProtocolAddress::new(' +14151111112' .to_owned(), ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." [label="prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived", tooltip="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =        ...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." [label="test_zero_is_a_valid_prekey_id", tooltip="fn test_zero_is_a_valid_prekey_id() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14151111111' .to_owned(), D...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." [label="prekey_message_failed_decryption_does_not_update_stores", tooltip="fn prekey_message_failed_decryption_does_not_update_stores() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." [label="test_pqr_state_and_message_contents_nonempty_if_enabled", tooltip="fn test_pqr_state_and_message_contents_nonempty_if_enabled() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         ...", fillcolor=white]
  }
  subgraph cluster_44 {
    label = "mod.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [label="add_signed_pre_key", tooltip="    pub fn add_signed_pre_key(&mut self, id_choice: IdChoice) {         let id = self.gen_id(id_choice);         if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() {             asser...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [label="add_kyber_pre_key", tooltip="    pub fn add_kyber_pre_key(&mut self, id_choice: IdChoice) {         let id = self.gen_id(id_choice);         if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() {             assert!...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." [label="sign", tooltip="    fn sign(&mut self, message: &[u8]) -> Box<[u8]> {         let identity_key_pair = self             .store             .get_identity_key_pair()             .now_or_never()             .expect(' syn...", fillcolor=white]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [label="create_pre_key_bundle", tooltip="pub async fn create_pre_key_bundle<R: Rng + CryptoRng>(     store: &mut dyn ProtocolStore,     mut csprng: &mut R, ) -> Result<PreKeyBundle, SignalProtocolError> {     let pre_key_pair = KeyPair::gene...", fillcolor=white]
  }
  subgraph cluster_45 {
    label = "lib.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-svrb 0.1.0 random_scalar()." [label="random_scalar", tooltip="fn random_scalar<R: Rng + CryptoRng>(r: &mut R) -> Scalar {     let mut scalar_bytes = [0u8; 64];     r.fill_bytes(&mut scalar_bytes);     Scalar::from_bytes_mod_order_wide(&scalar_bytes) }", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." [label="auth_commitments", tooltip="fn auth_commitments(     server_ids: &[u64],     input: &[u8; 64],     auth_pt: &RistrettoPoint, ) -> Vec<(Scalar, RistrettoPoint)> {     let k_auth = auth_secret(input, auth_pt);     server_ids      ...", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/to_ristretto_scalar()." [label="to_ristretto_scalar", tooltip="    fn to_ristretto_scalar(b: &[u8]) -> Option<Scalar> {         Scalar::from_canonical_bytes(b.try_into().ok()?).into_option()     }", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." [label="restore2", tooltip="        fn restore2(&self, req_bytes: &[u8], handshake_hash: &[u8]) -> Vec<u8> {             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )             ...", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." [label="new", tooltip="        fn new(req: &svrb::request4::Create) -> Self {             Self {                 auth_commitment: to_ristretto_pt(&req.auth_commitment)                     .expect(' decode auth_commitment' )...", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/scalars_summing_to_works()." [label="scalars_summing_to_works", tooltip="    fn scalars_summing_to_works() {         proptest!(|(n in 1usize..10)| {             let mut rng = OsRng.unwrap_err();             let mut seed = [0u8; 64];             rng.try_fill_bytes(&mut seed...", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." [label="create", tooltip="        fn create(&mut self, req_bytes: &[u8]) {             self.versions.clear();             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )          ...", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 scalars_summing_to()." [label="scalars_summing_to", tooltip="fn scalars_summing_to<R: Rng + CryptoRng>(n: NonZeroUsize, s: &Scalar, rng: &mut R) -> Vec<Scalar> {     let mut v: Vec<Scalar> = repeat_with(|| random_scalar(rng))         .take(n.get() - 1)         ...", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." [label="full_create_restore", tooltip="    fn full_create_restore() {         let mut rng = OsRng.unwrap_err();         let server_ids = vec![1u64, 2u64, 3u64];         let mut servers = server_ids             .iter()             .map(|_| ...", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(server_ids: &'a [u64], password: &[u8], rng: &mut R) -> Self {         let blind = random_scalar(rng);         let input = password_to_uniform_input(password);      ...", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         server_ids: &[u64],         password: &[u8],         max_tries: NonZeroU32,         rng: &mut R,     ) -> Self {         assert!(!server_ids.is_empty());   ...", fillcolor=white]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [label="restore2", tooltip="    pub fn restore2<R: Rng + CryptoRng>(         self,         responses1_bytes: &[Vec<u8>],         handshake_hashes: &[&[u8]],         rng: &mut R,     ) -> Result<Restore2<'a>, Error> {         if ...", fillcolor=white]
  }
  subgraph cluster_46 {
    label = "usernames_benchmarks.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [label="bench_usernames", tooltip="fn bench_usernames(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();     let usernames =         Username::candidates_from(&mut rng, ' signal' , NicknameLimits::default()).unwrap();      let ...", fillcolor=white]
    "rust-analyzer cargo usernames 0.1.0 username_proof()." [label="username_proof", tooltip="pub fn username_proof(username: &str, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(username)?.proof(randomness) }", fillcolor=white]
    "rust-analyzer cargo usernames 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_usernames); criterion_main!(benches);", fillcolor=white]
  }
  subgraph cluster_47 {
    label = "username.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." [label="many_random_makes_valid_usernames", tooltip="    fn many_random_makes_valid_usernames() {         let mut rng = rand::rng();         let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap());         let nickname = ' _SiGNA1' ;      ...", fillcolor=white]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [label="proof", tooltip="    pub fn proof(&self, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {         let hash = Self::hash_from_scalars(&self.scalars);         let scalar_args = Self::make_scalar_args(&self.sca...", fillcolor=white]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." [label="from_parts_without_soft_limit", tooltip="    fn from_parts_without_soft_limit(         nickname: &str,         discriminator: &str,     ) -> Result<Self, UsernameError> {         validate_prefix(nickname)?;         let discriminator = valida...", fillcolor=white]
    "rust-analyzer cargo usernames 0.1.0 username/username_sha_scalar()." [label="username_sha_scalar", tooltip="fn username_sha_scalar(nickname: &str, discriminator: u64) -> Result<Scalar, UsernameError> {     let mut hash = Sha512::new();     hash.update(nickname.as_bytes());     hash.update([0x00]);     hash....", fillcolor=white]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar()." [label="valid_usernames_should_produce_scalar", tooltip="    fn valid_usernames_should_produce_scalar() {         proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| {             username_sha_scalar(&nickname, discriminator).u...", fillcolor=white]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." [label="valid_usernames_proof_and_verify", tooltip="    fn valid_usernames_proof_and_verify() {         proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| {             let username = Username::new(&Username::format_parts...", fillcolor=white]
    "rust-analyzer cargo usernames 0.1.0 username/make_scalars()." [label="make_scalars", tooltip="fn make_scalars(nickname: &str, discriminator: u64) -> Result<Vec<Scalar>, UsernameError> {     Ok(vec![         username_sha_scalar(nickname, discriminator)?,         nickname_scalar(nickname)?,     ...", fillcolor=white]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [label="verify_proof", tooltip="    pub fn verify_proof(proof: &[u8], hash: [u8; 32]) -> Result<(), ProofVerificationFailure> {         let hash_point = CompressedRistretto(hash)             .decompress()             .ok_or(ProofVer...", fillcolor=white]
  }
  subgraph cluster_48 {
    label = "endorsements.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 key_derivation()." [label="key_derivation", tooltip="fn key_derivation(c: &mut Criterion) {     let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]);      let mut info_sho = poksho::ShoHmacSha256::new(b' ExampleEndorsements' );     info_sho....", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." [label="endorsement_flow", tooltip="fn endorsement_flow(c: &mut Criterion) {     let mut group = c.benchmark_group(' endorsements' );      let mut input_sho = poksho::ShoSha256::new(b' test' );     let inputs: Vec<RistrettoPoint> = (0.....", fillcolor=white]
  }
  subgraph cluster_49 {
    label = "zkcredential_benchmarks.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 attribute_key_inversion()." [label="attribute_key_inversion", tooltip="fn attribute_key_inversion(c: &mut Criterion) {     let mut sho = poksho::ShoSha256::new(b' test' );     let key_pair = KeyPair::<ExampleDomain>::derive_from(&mut sho);      c.bench_function(' KeyPair...", fillcolor=white]
  }
  subgraph cluster_50 {
    label = "attributes.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]inverse_of()." [label="inverse_of", tooltip="    pub fn inverse_of<D2: Domain>(other: &KeyPair<D2>) -> Self {         assert_ne!(             D::ID,             D2::ID,             ' You must provide a new domain for an inverse key'          ); ...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()." [label="derive_from", tooltip="    pub fn derive_from(sho: &mut dyn ShoApi) -> Self {         let a1 = sho.get_scalar();         let a2 = sho.get_scalar();          Self::from_scalars(a1, a2)     }", fillcolor=white]
  }
  subgraph cluster_51 {
    label = "credentials.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()." [label="generate", tooltip="    pub fn generate(randomness: [u8; RANDOMNESS_LEN]) -> Self {         CredentialPrivateKey::generate(randomness).into()     }", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate()." [label="generate", tooltip="    fn generate(randomness: [u8; RANDOMNESS_LEN]) -> Self {         let mut sho =             ShoHmacSha256::new(b' Signal_ZKCredential_CredentialPrivateKey_generate_20230410' );         sho.absorb_an...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core()." [label="credential_core", tooltip="    pub(crate) fn credential_core(&self, M: &[RistrettoPoint], sho: &mut dyn ShoApi) -> Credential {         assert!(             M.len() <= NUM_SUPPORTED_ATTRS,             ' more than {NUM_SUPPORTED...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair()." [label="round_trip_key_pair", tooltip="    fn round_trip_key_pair() {         let key_pair = CredentialKeyPair::generate([0x42; RANDOMNESS_LEN]);         let serialized = bincode::serialize(&key_pair).unwrap();         let deserialized: Cr...", fillcolor=white]
  }
  subgraph cluster_52 {
    label = "endorsements.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute()." [label="for_first_point_of_attribute", tooltip="    pub fn for_first_point_of_attribute<D>(key_pair: &crate::attributes::KeyPair<D>) -> Self {         Self::from_blinding_scalar(key_pair.a1)     }", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." [label="generate_weights_for_proof", tooltip="    fn generate_weights_for_proof(         public_key: &ServerDerivedPublicKey,         E: &[RistrettoPoint],         R: &[CompressedRistretto],     ) -> Vec<Scalar> {         debug_assert_eq!(E.len()...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()." [label="from_blinding_scalar", tooltip="    pub fn from_blinding_scalar(scalar: Scalar) -> Self {         Self {             a_inv: scalar.invert(),         }     }", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." [label="round_trip", tooltip="        fn round_trip<T: Serialize + for<'a> Deserialize<'a> + PartialDefault>(             value: &T,             expected_len: usize,         ) {             let bincode_options = bincode::DefaultOp...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [label="issue", tooltip="    pub fn issue(         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         private_key: &ServerDerivedKeyPair,         randomness: [u8; RANDOMNESS_LEN],     ) -> EndorsementR...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." [label="default_flow", tooltip="    fn default_flow() {         let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]);          // Client          let client_...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         server_public_key: &ServerDerivedPublicKey,     ) -> Result<ReceivedEndorsements, V...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." [label="default_is_identity", tooltip="    fn default_is_identity() {         assert_eq!(Endorsement::combine([]).R, Endorsement::default().R);          let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRo...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate()." [label="generate", tooltip="    pub fn generate(randomness: [u8; RANDOMNESS_LEN]) -> Self {         let mut sho = poksho::ShoHmacSha256::new(             b' Signal_ZKCredential_Endorsements_ServerRootKeyPair_generate_20240207' ,...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." [label="combining_endorsements", tooltip="    fn combining_endorsements() {         let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]);          // Client          l...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()." [label="derive_key", tooltip="    pub fn derive_key(&self, mut tag_info: impl ShoApi) -> ServerDerivedPublicKey {         let t = tag_info.get_scalar();         self.derive_key_from_tag_scalar(&t)     }", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()." [label="derive_key", tooltip="    pub fn derive_key(&self, mut tag_info: impl ShoApi) -> ServerDerivedKeyPair {         let t = tag_info.get_scalar();         ServerDerivedKeyPair {             sk_prime: (self.sk + t).invert(),   ...", fillcolor=white]
  }
  subgraph cluster_53 {
    label = "issuance.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [label="issue", tooltip="    pub fn issue(         mut self,         key_pair: &CredentialKeyPair,         randomness: [u8; RANDOMNESS_LEN],     ) -> IssuanceProof {         self.finalize_public_attrs();          let mut sho ...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [label="verify", tooltip="    pub fn verify(         mut self,         public_key: &CredentialPublicKey,         // Even though it would work with a borrow, this deliberately consumes         // IssuanceProof to indicate that ...", fillcolor=white]
  }
  subgraph cluster_54 {
    label = "blind.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind()." [label="blind", tooltip="    pub fn blind(         &self,         attr: &dyn RevealedAttribute,         sho: &mut dyn ShoApi,     ) -> BlindedPoint<WithNonce> {         // This is technically something you can do with just th...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [label="issue", tooltip="    pub fn issue(         mut self,         key_pair: &CredentialKeyPair,         blinding_key: &BlindingPublicKey,         randomness: [u8; RANDOMNESS_LEN],     ) -> BlindedIssuanceProof {         se...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt()." [label="encrypt", tooltip="    pub fn encrypt(         &self,         attr: &dyn Attribute,         sho: &mut dyn ShoApi,     ) -> BlindedAttribute<WithNonce> {         // The points in a regular verifiably encrypted attribute ...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [label="verify", tooltip="    pub fn verify(         mut self,         public_key: &CredentialPublicKey,         blinding_key: &BlindingKeyPair,         proof: BlindedIssuanceProof,     ) -> Result<Credential, VerificationFail...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate()." [label="generate", tooltip="    fn generate(sho: &mut dyn ShoApi) -> Self {         Self {             y: sho.get_scalar(),         }     }", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair()." [label="round_trip_key_pair", tooltip="fn round_trip_key_pair() {     let key_pair = BlindingKeyPair::generate(&mut poksho::ShoSha256::new(b' test' ));     let serialized = bincode::serialize(&key_pair).unwrap();     let deserialized: Blin...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate()." [label="generate", tooltip="    pub fn generate(sho: &mut dyn ShoApi) -> Self {         BlindingPrivateKey::generate(sho).into()     }", fillcolor=white]
  }
  subgraph cluster_55 {
    label = "presentation.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [label="present", tooltip="    pub fn present(         self,         public_key: &CredentialPublicKey,         credential: &Credential,         randomness: [u8; RANDOMNESS_LEN],     ) -> PresentationProof {         let credenti...", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [label="verify", tooltip="    pub fn verify(         mut self,         key_pair: &CredentialKeyPair,         proof: &PresentationProof,     ) -> Result<(), VerificationFailure> {         self.finalize_public_attrs();          ...", fillcolor=white]
  }
  subgraph cluster_56 {
    label = "sho.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()." [label="get_scalar", tooltip="    fn get_scalar(&mut self) -> Scalar {         let mut scalar_bytes = [0u8; 64];         self.squeeze_and_ratchet_into(&mut scalar_bytes);         Scalar::from_bytes_mod_order_wide(&scalar_bytes)   ...", fillcolor=white]
  }
  subgraph cluster_57 {
    label = "serialization.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 bench_server_param_serialization()." [label="bench_server_param_serialization", tooltip="fn bench_server_param_serialization(c: &mut Criterion) {     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);      let serialized_secret_params = zkgroup::seri...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);", fillcolor=white]
  }
  subgraph cluster_58 {
    label = "zkgroup_benchmarks.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." [label="benchmark_group_send_endorsements", tooltip="pub fn benchmark_group_send_endorsements(c: &mut Criterion) {     const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp =         zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023-04-13 00:00:00 U...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." [label="benchmark_integration_profile", tooltip="pub fn benchmark_integration_profile(c: &mut Criterion) {     // SERVER     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = ser...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." [label="benchmark_integration_auth", tooltip="fn benchmark_integration_auth(c: &mut Criterion) {     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params.get...", fillcolor=white]
  }
  subgraph cluster_59 {
    label = "zkc.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." [label="verify_for_key", tooltip="    pub(crate) fn verify_for_key(         &self,         credential_key: &CredentialKeyPair,         group_public_params: &GroupPublicParams,         redemption_time: Timestamp,     ) -> Result<(), Zk...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." [label="receive_for_key", tooltip="    pub(crate) fn receive_for_key(         self,         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         public_key: &CredentialPublicKey,     ) -> Result<AuthCredentialWithPni...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." [label="present", tooltip="    pub fn present(         &self,         public_params: &ServerPublicParams,         group_secret_params: &GroupSecretParams,         randomness: RandomnessBytes,     ) -> AuthCredentialWithPniZkcPr...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." [label="present_for_key", tooltip="    pub(crate) fn present_for_key(         &self,         public_key: &CredentialPublicKey,         group_secret_params: &GroupSecretParams,         randomness: RandomnessBytes,     ) -> AuthCredentia...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." [label="issue_credential", tooltip="    pub fn issue_credential(         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         params: &ServerSecretParams,         randomness: RandomnessBytes,     ) -> Self {         S...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         public_params: &ServerPublicParams,     ) -> Result<AuthCredentialWithPniZkc, ZkGroupV...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         params: &ServerSecretParams,         group_public_params: &GroupPublicParams,         redemption_time: Timestamp,     ) -> Result<(), ZkGroupVerificationFailu...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." [label="issue_credential_for_key", tooltip="    pub(crate) fn issue_credential_for_key(         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         credential_key: &CredentialKeyPair,         randomness: RandomnessBytes,    ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." [label="issue_receive_present", tooltip="    fn issue_receive_present() {         const ACI: Aci = Aci::from_uuid_bytes([b'a'; 16]);         const PNI: Pni = Pni::from_uuid_bytes([b'p'; 16]);         const REDEMPTION_TIME: Timestamp = Timest...", fillcolor=white]
  }
  subgraph cluster_60 {
    label = "auth_credential.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." [label="test_server_verify_expiration", tooltip="    fn test_server_verify_expiration() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let presentation =             credential.present(&server_secret_params().get_publ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." [label="test_client_enforces_timestamp_granularity", tooltip="    fn test_client_enforces_timestamp_granularity() {         let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary!          let request_context = Back...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [label="present", tooltip="    pub fn present(         &self,         server_params: &GenericServerPublicParams,         randomness: RandomnessBytes,     ) -> BackupAuthCredentialPresentation {         BackupAuthCredentialPrese...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [label="issue", tooltip="    pub fn issue(         &self,         redemption_time: Timestamp,         backup_level: BackupLevel,         credential_type: BackupCredentialType,         params: &GenericServerSecretParams,      ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." [label="test_server_verify_wrong_receipt_level", tooltip="    fn test_server_verify_wrong_receipt_level() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let valid_presentation =             credential.present(&server_secret_pa...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [label="receive", tooltip="    pub fn receive(         self,         response: BackupAuthCredentialResponse,         params: &GenericServerPublicParams,         expected_redemption_time: Timestamp,     ) -> Result<BackupAuthCre...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." [label="test_server_verify_wrong_backup_id", tooltip="    fn test_server_verify_wrong_backup_id() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let valid_presentation =             credential.present(&server_secret_params...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." [label="new", tooltip="    pub fn new<const VERSION: u8>(         backup_key: &libsignal_account_keys::BackupKey<VERSION>,         aci: libsignal_core::Aci,     ) -> Self {         // derive the backup-id (blinded in the is...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         current_time: Timestamp,         server_params: &GenericServerSecretParams,     ) -> Result<(), ZkGroupVerificationFailure> {         let acceptable_start_tim...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [label="generate_credential", tooltip="    fn generate_credential(redemption_time: Timestamp) -> BackupAuthCredential {         // client generated materials; issuance request         let request_context = BackupAuthCredentialRequestContex...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." [label="test_server_verify_wrong_redemption", tooltip="    fn test_server_verify_wrong_redemption() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let valid_presentation =             credential.present(&server_secret_param...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." [label="test_client_enforces_timestamp", tooltip="    fn test_client_enforces_timestamp() {         let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP;          let request_context = BackupAuthCredentialRequestContext::new(&KEY, ACI.into());     ...", fillcolor=white]
  }
  subgraph cluster_61 {
    label = "auth_credential.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." [label="present", tooltip="    pub fn present(         &self,         user_id: libsignal_core::Aci,         redemption_time: Timestamp,         server_params: &GenericServerPublicParams,         call_link_params: &CallLinkSecre...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." [label="issue_credential", tooltip="    pub fn issue_credential(         user_id: libsignal_core::Aci,         redemption_time: Timestamp,         params: &GenericServerSecretParams,         randomness: RandomnessBytes,     ) -> CallLin...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         user_id: libsignal_core::Aci,         redemption_time: Timestamp,         params: &GenericServerPublicParams,     ) -> Result<CallLinkAuthCredential, ZkGroupV...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         current_time: Timestamp,         server_params: &GenericServerSecretParams,         call_link_params: &CallLinkPublicParams,     ) -> Result<(), ZkGroupVerifi...", fillcolor=white]
  }
  subgraph cluster_62 {
    label = "create_credential.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." [label="receive", tooltip="    pub fn receive(         self,         response: CreateCallLinkCredentialResponse,         user_id: libsignal_core::Aci,         params: &GenericServerPublicParams,     ) -> Result<CreateCallLinkCr...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         room_id: &[u8],         current_time: Timestamp,         server_params: &GenericServerSecretParams,         call_link_params: &CallLinkPublicParams,     ) -> ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." [label="issue", tooltip="    pub fn issue(         &self,         user_id: libsignal_core::Aci,         timestamp: Timestamp,         params: &GenericServerSecretParams,         randomness: RandomnessBytes,     ) -> CreateCal...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." [label="present", tooltip="    pub fn present(         &self,         room_id: &[u8],         user_id: libsignal_core::Aci,         server_params: &GenericServerPublicParams,         call_link_params: &CallLinkSecretParams,    ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()." [label="new", tooltip="    pub fn new(room_id: &[u8], randomness: RandomnessBytes) -> Self {         let mut sho =             poksho::ShoHmacSha256::new(b' 20230413_Signal_CreateCallLinkCredentialRequest' );         sho.ab...", fillcolor=white]
  }
  subgraph cluster_63 {
    label = "params.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()." [label="decrypt_uid", tooltip="    pub fn decrypt_uid(         &self,         ciphertext: api::groups::UuidCiphertext,     ) -> Result<libsignal_core::Aci, ZkGroupVerificationFailure> {         let uid = crypto::uid_encryption::Uid...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key()." [label="derive_from_root_key", tooltip="    pub fn derive_from_root_key(root_key: &[u8]) -> Self {         let mut sho = Sho::new(             b' Signal_ZKGroup_20230419_CallLinkSecretParams_DeriveFromRootKey' ,             root_key,       ...", fillcolor=white]
  }
  subgraph cluster_64 {
    label = "generic_server_params.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate()." [label="generate", tooltip="    pub fn generate(randomness: RandomnessBytes) -> Self {         Self {             version: Default::default(),             credential_key: zkcredential::credentials::CredentialKeyPair::generate(ra...", fillcolor=white]
  }
  subgraph cluster_65 {
    label = "group_params.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()." [label="derive_from_master_key", tooltip="    pub fn derive_from_master_key(master_key: GroupMasterKey) -> Self {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_GroupMasterKey_GroupSecretParams_DeriveFromMasterKey' ,  ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()." [label="decrypt_service_id", tooltip="    pub fn decrypt_service_id(         &self,         ciphertext: api::groups::UuidCiphertext,     ) -> Result<libsignal_core::ServiceId, ZkGroupVerificationFailure> {         crypto::uid_encryption::...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()." [label="decrypt_profile_key", tooltip="    pub fn decrypt_profile_key(         &self,         ciphertext: api::groups::ProfileKeyCiphertext,         user_id: libsignal_core::Aci,     ) -> Result<api::profiles::ProfileKey, ZkGroupVerificati...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate()." [label="generate", tooltip="    pub fn generate(randomness: RandomnessBytes) -> Self {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_Random_GroupSecretParams_Generate' ,             &randomness,         ...", fillcolor=white]
  }
  subgraph cluster_66 {
    label = "group_send_endorsement.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [label="receive_with_service_ids", tooltip="    pub fn receive_with_service_ids<T>(         self,         user_ids: T,         now: Timestamp,         group_params: &GroupSecretParams,         root_public_key: impl AsRef<zkcredential::endorseme...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." [label="receive_with_service_ids_single_threaded", tooltip="    pub fn receive_with_service_ids_single_threaded(         self,         user_ids: impl IntoIterator<Item = libsignal_core::ServiceId>,         now: Timestamp,         group_params: &GroupSecretPara...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [label="receive_with_ciphertexts", tooltip="    pub fn receive_with_ciphertexts(         self,         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         now: Timestamp,         root_public_key: impl AsRef<zkcredential::endor...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [label="to_token", tooltip="    pub fn to_token<T: AsRef<uid_encryption::KeyPair>>(&self, key_pair: T) -> GroupSendToken {         let client_key =             zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [label="issue", tooltip="    pub fn issue(         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         key_pair: &GroupSendDerivedKeyPair,         randomness: RandomnessBytes,     ) -> Self {         // Note...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()." [label="for_expiration", tooltip="    pub fn for_expiration(         expiration: Timestamp,         root: impl AsRef<zkcredential::endorsements::ServerRootKeyPair>,     ) -> Self {         Self {             reserved: ReservedByte::de...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()." [label="derive_public_signing_key_from_expiration", tooltip="    fn derive_public_signing_key_from_expiration(         &self,         now: Timestamp,         root_public_key: impl AsRef<zkcredential::endorsements::ServerRootPublicKey>,     ) -> Result<zkcredent...", fillcolor=white]
  }
  subgraph cluster_67 {
    label = "profile_key.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()." [label="get_commitment", tooltip="    pub fn get_commitment(         &self,         user_id: libsignal_core::Aci,     ) -> api::profiles::ProfileKeyCommitment {         let uid_bytes = uuid::Uuid::from(user_id).into_bytes();         l...", fillcolor=white]
  }
  subgraph cluster_68 {
    label = "server_params.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." [label="create_expiring_profile_key_credential_presentation", tooltip="    pub fn create_expiring_profile_key_credential_presentation(         &self,         randomness: RandomnessBytes,         group_secret_params: api::groups::GroupSecretParams,         expiring_profil...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [label="receive_expiring_profile_key_credential", tooltip="    pub fn receive_expiring_profile_key_credential(         &self,         context: &api::profiles::ProfileKeyCredentialRequestContext,         response: &api::profiles::ExpiringProfileKeyCredentialRe...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." [label="verify_receipt_credential_presentation", tooltip="    pub fn verify_receipt_credential_presentation(         &self,         presentation: &api::receipts::ReceiptCredentialPresentation,     ) -> Result<(), ZkGroupVerificationFailure> {         present...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." [label="verify_expiring_profile_key_credential_presentation", tooltip="    pub fn verify_expiring_profile_key_credential_presentation(         &self,         group_public_params: api::groups::GroupPublicParams,         presentation: &api::profiles::ExpiringProfileKeyCred...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context()." [label="create_receipt_credential_request_context", tooltip="    pub fn create_receipt_credential_request_context(         &self,         randomness: RandomnessBytes,         receipt_serial_bytes: ReceiptSerialBytes,     ) -> api::receipts::ReceiptCredentialReq...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [label="create_profile_key_credential_request_context", tooltip="    pub fn create_profile_key_credential_request_context(         &self,         randomness: RandomnessBytes,         aci: libsignal_core::Aci,         profile_key: api::profiles::ProfileKey,     ) ->...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [label="issue_expiring_profile_key_credential", tooltip="    pub fn issue_expiring_profile_key_credential(         &self,         randomness: RandomnessBytes,         request: &api::profiles::ProfileKeyCredentialRequest,         aci: libsignal_core::Aci,   ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." [label="verify_profile_key_credential_presentation", tooltip="    pub fn verify_profile_key_credential_presentation(         &self,         group_public_params: api::groups::GroupPublicParams,         presentation: &api::profiles::AnyProfileKeyCredentialPresenta...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [label="receive_receipt_credential", tooltip="    pub fn receive_receipt_credential(         &self,         context: &api::receipts::ReceiptCredentialRequestContext,         response: &api::receipts::ReceiptCredentialResponse,     ) -> Result<api...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()." [label="generate", tooltip="    pub fn generate(randomness: RandomnessBytes) -> Self {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_Random_ServerSecretParams_Generate' ,             &randomness,        ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [label="create_receipt_credential_presentation", tooltip="    pub fn create_receipt_credential_presentation(         &self,         randomness: RandomnessBytes,         receipt_credential: &api::receipts::ReceiptCredential,     ) -> api::receipts::ReceiptCre...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         &self,         message: &[u8],         signature: NotarySignatureBytes,     ) -> Result<(), ZkGroupVerificationFailure> {         self.sig_public_key.verify(messag...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [label="issue_receipt_credential", tooltip="    pub fn issue_receipt_credential(         &self,         randomness: RandomnessBytes,         request: &api::receipts::ReceiptCredentialRequest,         receipt_expiration_time: Timestamp,         ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." [label="sign", tooltip="    pub fn sign(&self, randomness: RandomnessBytes, message: &[u8]) -> NotarySignatureBytes {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign' ,  ...", fillcolor=white]
  }
  subgraph cluster_69 {
    label = "generate_generic_server_params.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 main()." [label="main", tooltip="fn main() {     let mut rng = rand::rng();     let mut randomness = [0u8; RANDOMNESS_LEN];     rng.fill(&mut randomness);      let secret_params = GenericServerSecretParams::generate(randomness);     ...", fillcolor=white]
  }
  subgraph cluster_70 {
    label = "sho.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()." [label="get_scalar", tooltip="    pub fn get_scalar(&mut self) -> Scalar {         Scalar::from_bytes_mod_order_wide(&self.internal_sho.squeeze_and_ratchet_as_array())     }", fillcolor=white]
  }
  subgraph cluster_71 {
    label = "simple_types.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time()." [label="encode_redemption_time", tooltip="pub fn encode_redemption_time(redemption_time: u32) -> Scalar {     let mut scalar_bytes: [u8; 32] = Default::default();     scalar_bytes[0..4].copy_from_slice(&redemption_time.to_be_bytes());     Sca...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes()." [label="encode_receipt_serial_bytes", tooltip="pub fn encode_receipt_serial_bytes(receipt_serial_bytes: ReceiptSerialBytes) -> Scalar {     let mut scalar_bytes: [u8; 32] = Default::default();     scalar_bytes[0..16].copy_from_slice(&receipt_seria...", fillcolor=white]
  }
  subgraph cluster_72 {
    label = "credentials.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes()." [label="convert_to_point_M2_receipt_serial_bytes", tooltip="pub(crate) fn convert_to_point_M2_receipt_serial_bytes(     receipt_serial_bytes: ReceiptSerialBytes, ) -> RistrettoPoint {     let system = SystemParams::get_hardcoded();     let receipt_serial_scala...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()." [label="create_blinded_receipt_credential", tooltip="    pub fn create_blinded_receipt_credential(         &self,         public_key: receipt_credential_request::PublicKey,         ciphertext: receipt_credential_request::Ciphertext,         receipt_expi...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]generate()." [label="generate", tooltip="    pub fn generate(sho: &mut Sho) -> Self {         assert!(S::NUM_ATTRS >= 1, ' at least one attribute required' );         assert!(             S::NUM_ATTRS <= NUM_SUPPORTED_ATTRS,             ' mo...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct()." [label="convert_to_points_receipt_struct", tooltip="pub(crate) fn convert_to_points_receipt_struct(     receipt: receipt_struct::ReceiptStruct, ) -> Vec<RistrettoPoint> {     let system = SystemParams::get_hardcoded();     let m1 = receipt.calc_m1();  ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." [label="test_mac", tooltip="    fn test_mac() {         // It doesn't really matter *which* credential we test here, we just want to generally know         // we've set things up correctly. (Also, the credentials hardcoded here ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()." [label="create_blinded_expiring_profile_key_credential", tooltip="    pub fn create_blinded_expiring_profile_key_credential(         &self,         uid: uid_struct::UidStruct,         public_key: profile_key_credential_request::PublicKey,         ciphertext: profile...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]credential_core()." [label="credential_core", tooltip="    fn credential_core(         &self,         M: &[RistrettoPoint],         sho: &mut Sho,     ) -> (Scalar, RistrettoPoint, RistrettoPoint) {         assert!(             M.len() <= S::NUM_ATTRS,   ...", fillcolor=white]
  }
  subgraph cluster_73 {
    label = "profile_key_commitment.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment()." [label="test_commitment", tooltip="    fn test_commitment() {         let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16);         let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new()." [label="new", tooltip="    pub fn new(         profile_key: profile_key_struct::ProfileKeyStruct,         uid_bytes: UidBytes,     ) -> CommitmentWithSecretNonce {         let commitment_system = SystemParams::get_hardcoded...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3()." [label="calc_j3", tooltip="    pub fn calc_j3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) -> Scalar {         let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN];         combined_array[..PROFILE_KEY_LEN].co...", fillcolor=white]
  }
  subgraph cluster_74 {
    label = "profile_key_credential_request.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response()." [label="test_request_response", tooltip="    fn test_request_response() {         let mut sho = Sho::new(b' Test_Profile_Key_Credential_Request' , b' ' );          // client         let blind_key_pair = KeyPair::generate(&mut sho);          ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate()." [label="generate", tooltip="    pub fn generate(sho: &mut Sho) -> Self {         let y = sho.get_scalar();         let Y = y * RISTRETTO_BASEPOINT_POINT;         KeyPair { y, Y }     }", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt()." [label="encrypt", tooltip="    pub fn encrypt(         &self,         profile_key_struct: profile_key_struct::ProfileKeyStruct,         sho: &mut Sho,     ) -> CiphertextWithSecretNonce {         let r1 = sho.get_scalar();     ...", fillcolor=white]
  }
  subgraph cluster_75 {
    label = "profile_key_encryption.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()." [label="decrypt", tooltip="    pub(crate) fn decrypt(         key_pair: &KeyPair,         ciphertext: &Ciphertext,         uid_bytes: UidBytes,     ) -> Result<profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure> {...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption()." [label="test_profile_key_encryption", tooltip="    fn test_profile_key_encryption() {         let master_key = TEST_ARRAY_32_1;         let mut sho = Sho::new(b' Test_Profile_Key_Encryption' , &master_key);          //let system = SystemParams::ge...", fillcolor=white]
  }
  subgraph cluster_76 {
    label = "proofs.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_public_key: credentials::PublicKey,         request_public_key: receipt_credential_request::PublicKey,         request: receipt_credential_request...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." [label="new", tooltip="    pub fn new(         key_pair: credentials::KeyPair<credentials::ReceiptCredential>,         request_public_key: receipt_credential_request::PublicKey,         request: receipt_credential_request::...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new()." [label="new", tooltip="    pub fn new(         key_pair: profile_key_credential_request::KeyPair,         ciphertext: profile_key_credential_request::CiphertextWithSecretNonce,         commitment: profile_key_commitment::Co...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_key_pair: credentials::KeyPair<credentials::ReceiptCredential>,         receipt_struct: ReceiptStruct,     ) -> Result<(), ZkGroupVerificationFail...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_key_pair: credentials::KeyPair<credentials::ExpiringProfileKeyCredential>,         uid_ciphertext: uid_encryption::Ciphertext,         uid_enc_pub...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         public_key: profile_key_credential_request::PublicKey,         ciphertext: profile_key_credential_request::Ciphertext,         commitment: profile_key_commitm...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." [label="new", tooltip="    pub fn new(         key_pair: credentials::KeyPair<credentials::ExpiringProfileKeyCredential>,         request_public_key: profile_key_credential_request::PublicKey,         request: profile_key_c...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_public_key: credentials::PublicKey,         request_public_key: profile_key_credential_request::PublicKey,         aci_bytes: UidBytes,         re...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." [label="new", tooltip="    pub fn new(         uid_enc_key_pair: uid_encryption::KeyPair,         profile_key_enc_key_pair: profile_key_encryption::KeyPair,         credentials_public_key: credentials::PublicKey,         cr...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." [label="new", tooltip="    pub fn new(         credentials_public_key: credentials::PublicKey,         credential: credentials::ReceiptCredential,         sho: &mut Sho,     ) -> Self {         let credentials_system = cred...", fillcolor=white]
  }
  subgraph cluster_77 {
    label = "receipt_credential_request.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate()." [label="generate", tooltip="    pub fn generate(sho: &mut Sho) -> Self {         let y = sho.get_scalar();         let Y = y * RISTRETTO_BASEPOINT_POINT;         KeyPair { y, Y }     }", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt()." [label="encrypt", tooltip="    pub fn encrypt(         &self,         receipt_serial_bytes: ReceiptSerialBytes,         sho: &mut Sho,     ) -> CiphertextWithSecretNonce {         let M2 = credentials::convert_to_point_M2_recei...", fillcolor=white]
  }
  subgraph cluster_78 {
    label = "receipt_struct.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1()." [label="calc_m1", tooltip="    pub fn calc_m1(&self) -> Scalar {         Self::calc_m1_from(self.receipt_expiration_time, self.receipt_level)     }", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from()." [label="calc_m1_from", tooltip="    pub fn calc_m1_from(receipt_expiration_time: Timestamp, receipt_level: ReceiptLevel) -> Scalar {         let mut bytes =             [0u8; std::mem::size_of::<Timestamp>() + std::mem::size_of::<Re...", fillcolor=white]
  }
  subgraph cluster_79 {
    label = "signature.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." [label="verify", tooltip="    pub fn verify(         &self,         message: &[u8],         signature: SignatureBytes,     ) -> Result<(), ZkGroupVerificationFailure> {         match poksho::verify_signature(&signature, self.p...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." [label="sign", tooltip="    pub fn sign(&self, message: &[u8], sho: &mut Sho) -> SignatureBytes {         let vec_bytes = poksho::sign(             self.signing_key,             self.public_key,             message,         ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let group_key = TEST_ARRAY_32;         let mut sho = Sho::new(b' Test_Signature' , &group_key);         let key_pair = KeyPair::generate(&mut sho);          // Test s...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate()." [label="generate", tooltip="    pub fn generate(sho: &mut Sho) -> Self {         let signing_key = sho.get_scalar();         let public_key = signing_key * RISTRETTO_BASEPOINT_POINT;         KeyPair {             signing_key,   ...", fillcolor=white]
  }
  subgraph cluster_80 {
    label = "timestamp_struct.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m()." [label="calc_m", tooltip="    pub fn calc_m(&self) -> Scalar {         Self::calc_m_from(self.timestamp)     }", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from()." [label="calc_m_from", tooltip="    pub fn calc_m_from(timestamp: Timestamp) -> Scalar {         let mut sho = Sho::new(             b' Signal_ZKGroup_20220524_Timestamp_Calc_m' ,             &timestamp.to_be_bytes(),         );    ...", fillcolor=white]
  }
  subgraph cluster_81 {
    label = "uid_encryption.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption()." [label="test_uid_encryption", tooltip="    fn test_uid_encryption() {         let master_key = TEST_ARRAY_32;         let mut sho = Sho::new(b' Test_Uid_Encryption' , &master_key);          //let system = SystemParams::generate();         ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption()." [label="test_pni_encryption", tooltip="    fn test_pni_encryption() {         let mut sho = Sho::new(b' Test_Pni_Encryption' , &[]);         let key_pair = KeyPair::derive_from(sho.as_mut());          let pni = libsignal_core::Pni::from_uu...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." [label="decrypt", tooltip="    pub(crate) fn decrypt(         key_pair: &KeyPair,         ciphertext: &Ciphertext,     ) -> Result<libsignal_core::ServiceId, ZkGroupVerificationFailure> {         let M2 = key_pair             ....", fillcolor=white]
  }
  subgraph cluster_82 {
    label = "zkcredential_examples.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." [label="test_profile_key_credential_only_verifying_one_encryption_key", tooltip="fn test_profile_key_credential_only_verifying_one_encryption_key() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." [label="as_point", tooltip="        fn as_point(&self) -> RistrettoPoint {             self.opaque_id         }", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key()." [label="test_inverse_key", tooltip="fn test_inverse_key() {     let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16);     let uid = UidStruct::from_service_id(aci.into());      let mut sho = Sho::new(b' test_inverse_key' , b' '...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." [label="test_profile_key_credential", tooltip="fn test_profile_key_credential() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());     let blinding_keypair ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential()." [label="test_room_credential", tooltip="fn test_room_credential() {     let mut sho = ShoSha256::new(b' RoomCredential' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());     let blinding_keypair = Blindin...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." [label="test_mac_generic_without_verifying_encryption_key", tooltip="fn test_mac_generic_without_verifying_encryption_key() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());    ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." [label="test_mac_generic", tooltip="fn test_mac_generic() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());      let label = b' 20221221_AuthCre...", fillcolor=white]
  }
  subgraph cluster_83 {
    label = "backup_auth_flow.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." [label="test_backup_auth_request_response", tooltip="fn test_backup_auth_request_response() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: Randomne...", fillcolor=white]
  }
  subgraph cluster_84 {
    label = "call_link_flow.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." [label="test_auth_credential_enforces_timestamp_granularity", tooltip="fn test_auth_credential_enforces_timestamp_granularity() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];      // cli...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." [label="test_create_call_link_enforces_timestamp_granularity", tooltip="fn test_create_call_link_enforces_timestamp_granularity() {     let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN];     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let ra...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." [label="test_auth_credential", tooltip="fn test_auth_credential() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes = [0x...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." [label="test_create_call_link_request_response", tooltip="fn test_create_call_link_request_response() {     let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN];     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: Ran...", fillcolor=white]
  }
  subgraph cluster_85 {
    label = "group_send_endorsements.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." [label="test_endorsement", tooltip="fn test_endorsement() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes = [0x45u8...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." [label="test_client_rejects_bad_expirations", tooltip="fn test_client_rejects_bad_expirations() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: Random...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." [label="test_single_member_group", tooltip="fn test_single_member_group() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes =...", fillcolor=white]
  }
  subgraph cluster_86 {
    label = "integration_tests.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." [label="test_integration_auth_zkc", tooltip="fn test_integration_auth_zkc() {     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params.get_public_params(); ...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." [label="test_server_sigs", tooltip="fn test_server_sigs() {     let server_secret_params =         zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params.ge...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_blob_encryption()." [label="test_blob_encryption", tooltip="fn test_blob_encryption() {     let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1);     let group_secret_params =         zkgroup::groups::GroupSecretParams::derive_from_m...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify()." [label="test_profile_key_credential_presentation_v1_does_not_verify", tooltip="fn test_profile_key_credential_presentation_v1_does_not_verify() {     // Originally from test_integration_profile.     // SERVER     let server_secret_params = zkgroup::ServerSecretParams::generate(z...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." [label="test_integration_expiring_profile", tooltip="fn test_integration_expiring_profile() {     // SERVER     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params...", fillcolor=white]
  }
  subgraph cluster_87 {
    label = "receipt_flow.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_api()." [label="test_api", tooltip="fn test_api() {     let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN];     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOM...", fillcolor=white]
    "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." [label="test_request_response", tooltip="fn test_request_response() {     let mut sho = Sho::new(b' Test_Receipt_Credential_Request' , b' ' );      // client receives in response to initial request     let receipt_expiration_time: Timestamp ...", fillcolor=white]
  }

  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()."
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()."
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/repudiation()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/repudiation()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/non_null_scalar()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/repudiation()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/compute_challenge()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/test/four_torsion_random()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/compute_challenge()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From<&[u8; SECRET_KEY_LENGTH]>`]from()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_benches/verify_strict()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]generate()."
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_n_500()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_iter()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_pippenger_radix()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_pippenger_radix_iter()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_pippenger_radix()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()."
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_iter()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_scalars()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPublicKey_Verify()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()."
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." -> "rust-analyzer cargo usernames 0.1.0 username/make_scalars()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()."
  "rust-analyzer cargo usernames 0.1.0 username/username_sha_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]generate()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_bytes()."
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." -> "rust-analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice()."
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/multiscalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/multiscalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/multiscalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/multiscalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar()." -> "rust-analyzer cargo usernames 0.1.0 username/username_sha_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 random_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes()."
  "rust-analyzer cargo libsignal-core 0.1.0 benches()." -> "rust-analyzer cargo libsignal-core 0.1.0 signatures()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/to_ristretto_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes()." -> "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]credential_core()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`&Scalar`][Neg]neg()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/to_ristretto_scalar()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/reduce()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()."
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()."
  "rust-analyzer cargo zkcredential 0.1.0 attribute_key_inversion()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo zkcredential 0.1.0 attribute_key_inversion()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]inverse_of()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_n_100()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_iter()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey][`Signer<Signature>`]try_sign()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[KeyPair]calculate_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()."
  "rust-analyzer cargo poksho 0.7.0 sign/sign()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]to_scalar()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From<&[u8; SECRET_KEY_LENGTH]>`]from()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_empty()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()."
  "rust-analyzer cargo zkgroup 0.9.0 bench_server_param_serialization()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_benches/key_generation()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]generate()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/against_reference_implementation()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/against_reference_implementation()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_bytes()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()."
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()."
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_consistency()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_consistency()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul()."
  "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signature/check_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/to_ristretto_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()."
  "rust-analyzer cargo libsignal-core 0.1.0 signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()."
  "rust-analyzer cargo libsignal-core 0.1.0 signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[KeyPair]calculate_signature()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_bytes()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()."
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/non_adjacent_form_random()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/montgomery_mul_bits_be()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/rand_prime_order_point()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/montgomery_mul_bits_be()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_mul_reduction_invariance()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]reduce()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/scalars_summing_to_works()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/scalars_summing_to_works()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 scalars_summing_to()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_slice()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal()."
  "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." -> "rust-analyzer cargo poksho 0.7.0 sign/sign()."
  "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." -> "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()."
  "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/mul_max()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]reduce()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal()."
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 bench_server_param_serialization()."
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()."
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()."
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()."
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_proof()."
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()."
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." -> "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom<&ed25519::Signature>`]try_from()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature]from_bytes()."
  "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_points()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_scalars()."
  "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/square_multiply()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]inverse_of()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." -> "rust-analyzer cargo poksho 0.7.0 sign/sign()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom<&ed25519::Signature>`]try_from()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom<&ed25519::Signature>`]try_from()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_pippenger_radix_iter()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]reduce()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_points()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()."
  "rust-analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()."
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/test/sign_verify_nonspec()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/raw_sign()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/test/sign_verify_nonspec()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/test/impl#[ExpandedSecretKey]random()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey][`From<[u8; SECRET_KEY_LENGTH]>`]from()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_bytes()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_n_250()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_iter()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_points()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_scalars()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 vectors/non_null_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]reduce()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct()." -> "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes()."
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()."
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()."
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context()."
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()."
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()."
  "rust-analyzer cargo zkcredential 0.1.0 key_derivation()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 key_derivation()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 key_derivation()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_points()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_scalars()."
  "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]inverse_of()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()."
  "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo zkcredential 0.1.0 benches()." -> "rust-analyzer cargo zkcredential 0.1.0 attribute_key_inversion()."
  "rust-analyzer cargo zkcredential 0.1.0 benches()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()."
  "rust-analyzer cargo zkcredential 0.1.0 benches()." -> "rust-analyzer cargo zkcredential 0.1.0 key_derivation()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_to_x25519_dh()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_bytes()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_to_x25519_dh()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_to_x25519_dh()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]to_scalar()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()."
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()."
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()."
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Backup]prepare()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_arith()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_arith()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()."
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()."
  "rust-analyzer cargo usernames 0.1.0 username_proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 scalars_summing_to()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 random_scalar()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]is_canonical()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/montgomery_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/montgomery_ladder()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/montgomery_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey][`From<&[u8; SECRET_KEY_LENGTH]>`]from()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_bytes()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()."
  "rust-analyzer cargo zkgroup 0.9.0 test_blob_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()."
  "rust-analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_Validate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`&Scalar`][`Mul<&Scalar>`]mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/test/impl#[ExpandedSecretKey]random()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature]from_bytes()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signature/check_scalar()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_bytes()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From<&[u8; SECRET_KEY_LENGTH]>`]from()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()."
  "rust-analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate()."
  "rust-analyzer cargo usernames 0.1.0 username/make_scalars()." -> "rust-analyzer cargo usernames 0.1.0 username/username_sha_scalar()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()."
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/square()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/rand_prime_order_point()."
  "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()."
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Restore]restore()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()."
  "rust-analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()."
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_unsuccessful_requests()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_unsuccessful_requests()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar][`MulAssign<&Scalar>`]mul_assign()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/test/random_roundtrip()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/multiscalar_benches()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_arith()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/batch_scalar_inversion()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/montgomery_benches()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/edwards_benches()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/raw_sign()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign()."
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()."
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()."
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()."
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]from_keypair_bytes()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey][`TryFrom<&[u8]>`]try_from()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_points()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 multiscalar_benches/construct_scalars()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/test/rand_prime_order_point()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()."
  "rust-analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()."
  "rust-analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()."
  "rust-analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/batch_scalar_inversion()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/batch_scalar_inversion()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/canonical_decoding()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]credential_core()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 random_scalar()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]credential_core()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 scalars_summing_to()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 random_scalar()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/test/multiscalar_consistency_iter()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide()."
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_benches/sign()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]generate()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/from_bytes_mod_order_wide()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()."
  "rust-analyzer cargo zkgroup 0.9.0 main()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 main()." -> "rust-analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal()."
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()."
  "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()."
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration()."
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/montgomery_ladder()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()."
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/test/square_max()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/fuzzer_testcase_reduction()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/fuzzer_testcase_reduction()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from()."
  "rust-analyzer cargo usernames 0.1.0 benches()." -> "rust-analyzer cargo usernames 0.1.0 bench_usernames()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_New()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]is_canonical()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]reduce()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]generate()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 random_scalar()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()."
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()."
  "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key()." -> "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]derive_from()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()."
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 ed25519_benches/verify()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signing/impl#[SigningKey]generate()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ServerCertificate_New()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind()."
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]random()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()."
  "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_slice()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_New()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()."
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()."
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt()."
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()."
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()."
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key()."
  "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()."
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/edwards_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/edwards_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/edwards_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul()."
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPrivateKey_Sign()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()."
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate()."
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()."
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()."
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()."
}
