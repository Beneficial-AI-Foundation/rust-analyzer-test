<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="5053pt" height="11686pt"
 viewBox="0.00 0.00 5053.00 11686.46" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 11682.46)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-11682.46 5049,-11682.46 5049,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2067.5,-9981 2067.5,-10488 3482.5,-10488 3482.5,-9981 2067.5,-9981"/>
<text text-anchor="middle" x="2775" y="-10472.8" font-family="Helvetica,sans-Serif" font-size="14.00">dalek_benchmarks.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3758.5,-10413 3758.5,-10488 3955.5,-10488 3955.5,-10413 3758.5,-10413"/>
<text text-anchor="middle" x="3857" y="-10472.8" font-family="Helvetica,sans-Serif" font-size="14.00">pippenger.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" points="4363,-11258 4363,-11657 5037,-11657 5037,-11258 4363,-11258"/>
<text text-anchor="middle" x="4700" y="-11641.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2762,-9682 2762,-9973 3520,-9973 3520,-9682 2762,-9682"/>
<text text-anchor="middle" x="3141" y="-9957.8" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2778.5,-9545 2778.5,-9674 3505,-9674 3505,-9545 2778.5,-9545"/>
<text text-anchor="middle" x="3141.75" y="-9658.8" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3198,-9354 3198,-9537 3614,-9537 3614,-9354 3198,-9354"/>
<text text-anchor="middle" x="3406" y="-9521.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3293.5,-10496 3293.5,-11165 4712.5,-11165 4712.5,-10496 3293.5,-10496"/>
<text text-anchor="middle" x="4003" y="-11149.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2875,-8545 2875,-8782 3065,-8782 3065,-8545 2875,-8545"/>
<text text-anchor="middle" x="2970" y="-8766.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed25519_benchmarks.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2883.5,-7523 2883.5,-7706 3912,-7706 3912,-7523 2883.5,-7523"/>
<text text-anchor="middle" x="3397.75" y="-7690.8" font-family="Helvetica,sans-Serif" font-size="14.00">hazmat.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2519.5,-9089 2519.5,-9164 3466.5,-9164 3466.5,-9089 2519.5,-9089"/>
<text text-anchor="middle" x="2993" y="-9148.8" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2886,-8790 2886,-9081 4256.5,-9081 4256.5,-8790 2886,-8790"/>
<text text-anchor="middle" x="3571.25" y="-9065.8" font-family="Helvetica,sans-Serif" font-size="14.00">signing.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2080,-8028 2080,-8157 3053.5,-8157 3053.5,-8028 2080,-8028"/>
<text text-anchor="middle" x="2566.75" y="-8141.8" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1549.5,-7570 1549.5,-7699 2220.5,-7699 2220.5,-7570 1549.5,-7570"/>
<text text-anchor="middle" x="1885" y="-7683.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed25519.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3306,-7410 3306,-7485 3506,-7485 3506,-7410 3306,-7410"/>
<text text-anchor="middle" x="3406" y="-7469.8" font-family="Helvetica,sans-Serif" font-size="14.00">x25519.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightgrey" stroke="lightgrey" points="365,-6021 365,-6582 655,-6582 655,-6021 365,-6021"/>
<text text-anchor="middle" x="510" y="-6566.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2062.5,-6071 2062.5,-6200 2211.5,-6200 2211.5,-6071 2062.5,-6071"/>
<text text-anchor="middle" x="2137" y="-6184.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightgrey" stroke="lightgrey" points="868,-2409 868,-4212 1464,-4212 1464,-2409 868,-2409"/>
<text text-anchor="middle" x="1166" y="-4196.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1120.5,-7487 1120.5,-7562 1737.5,-7562 1737.5,-7487 1120.5,-7487"/>
<text text-anchor="middle" x="1429" y="-7546.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2085,-6937 2085,-7012 2189,-7012 2189,-6937 2085,-6937"/>
<text text-anchor="middle" x="2137" y="-6996.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2047,-7714 2047,-7883 3136,-7883 3136,-7714 2047,-7714"/>
<text text-anchor="middle" x="2591.5" y="-7867.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2870.5,-8408 2870.5,-8537 3489,-8537 3489,-8408 2870.5,-8408"/>
<text text-anchor="middle" x="3179.75" y="-8521.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2024.5,-7891 2024.5,-8020 3050.5,-8020 3050.5,-7891 2024.5,-7891"/>
<text text-anchor="middle" x="2537.5" y="-8004.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2871,-8271 2871,-8400 3470.5,-8400 3470.5,-8271 2871,-8271"/>
<text text-anchor="middle" x="3170.75" y="-8384.8" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1071,-2135 1071,-2210 1261,-2210 1261,-2135 1071,-2135"/>
<text text-anchor="middle" x="1166" y="-2194.8" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1117,-2052 1117,-2127 1215,-2127 1215,-2052 1117,-2052"/>
<text text-anchor="middle" x="1166" y="-2111.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1053,-1969 1053,-2044 1279,-2044 1279,-1969 1053,-1969"/>
<text text-anchor="middle" x="1166" y="-2028.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1054.5,-1313 1054.5,-1442 1277.5,-1442 1277.5,-1313 1054.5,-1313"/>
<text text-anchor="middle" x="1166" y="-1426.8" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1544,-11036 1544,-11165 2192,-11165 2192,-11036 1544,-11036"/>
<text text-anchor="middle" x="1868" y="-11149.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1642,-10899 1642,-11028 1728,-11028 1728,-10899 1642,-10899"/>
<text text-anchor="middle" x="1685" y="-11012.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3806,-3349 3806,-3424 3908,-3424 3908,-3349 3806,-3349"/>
<text text-anchor="middle" x="3857" y="-3408.8" font-family="Helvetica,sans-Serif" font-size="14.00">proof.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3295,-7990 3295,-8119 3517,-8119 3517,-7990 3295,-7990"/>
<text text-anchor="middle" x="3406" y="-8103.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2071.5,-5714 2071.5,-5843 2637,-5843 2637,-5714 2071.5,-5714"/>
<text text-anchor="middle" x="2354.25" y="-5827.8" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2464.5,-3349 2464.5,-3444 3463,-3444 3463,-3349 2464.5,-3349"/>
<text text-anchor="middle" x="2963.75" y="-3428.8" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightgrey" stroke="lightgrey" points="444,-6590 444,-6719 577,-6719 577,-6590 444,-6590"/>
<text text-anchor="middle" x="510.5" y="-6703.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightgrey" stroke="lightgrey" points="8,-5938 8,-6013 605,-6013 605,-5938 8,-5938"/>
<text text-anchor="middle" x="306.5" y="-5997.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1099.5,-7350 1099.5,-7479 1232.5,-7479 1232.5,-7350 1099.5,-7350"/>
<text text-anchor="middle" x="1166" y="-7463.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightgrey" stroke="lightgrey" points="388,-1533 388,-1662 1265.5,-1662 1265.5,-1533 388,-1533"/>
<text text-anchor="middle" x="826.75" y="-1646.8" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1506,-6564 1506,-6747 2172,-6747 2172,-6564 1506,-6564"/>
<text text-anchor="middle" x="1839" y="-6731.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1067,-7020 1067,-7257 2180.5,-7257 2180.5,-7020 1067,-7020"/>
<text text-anchor="middle" x="1623.75" y="-7241.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1069,-5714 1069,-5789 1263,-5789 1263,-5714 1069,-5714"/>
<text text-anchor="middle" x="1166" y="-5773.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2074.5,-6453 2074.5,-6528 2199.5,-6528 2199.5,-6453 2074.5,-6453"/>
<text text-anchor="middle" x="2137" y="-6512.8" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightgrey" stroke="lightgrey" points="270.5,-7296 270.5,-7479 749.5,-7479 749.5,-7296 270.5,-7296"/>
<text text-anchor="middle" x="510" y="-7463.8" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightgrey" stroke="lightgrey" points="255.5,-6727 255.5,-7288 764.5,-7288 764.5,-6727 255.5,-6727"/>
<text text-anchor="middle" x="510" y="-7272.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightgrey" stroke="lightgrey" points="172,-5369 172,-5930 848,-5930 848,-5369 172,-5369"/>
<text text-anchor="middle" x="510" y="-5914.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1071,-5797 1071,-5980 1720,-5980 1720,-5797 1071,-5797"/>
<text text-anchor="middle" x="1395.5" y="-5964.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2057.5,-11173 2057.5,-11504 3484,-11504 3484,-11173 2057.5,-11173"/>
<text text-anchor="middle" x="2770.75" y="-11488.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1120.5,-5988 1120.5,-6063 2209,-6063 2209,-5988 1120.5,-5988"/>
<text text-anchor="middle" x="1664.75" y="-6047.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1983.5,-6208 1983.5,-6445 3060.5,-6445 3060.5,-6208 1983.5,-6208"/>
<text text-anchor="middle" x="2522" y="-6429.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1639.5,-4123 1639.5,-4252 2217,-4252 2217,-4123 1639.5,-4123"/>
<text text-anchor="middle" x="1928.25" y="-4236.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2031,-1535 2031,-1610 2243,-1610 2243,-1535 2031,-1535"/>
<text text-anchor="middle" x="2137" y="-1594.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_benchmarks.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2507.5,-2295 2507.5,-2424 2622.5,-2424 2622.5,-2295 2507.5,-2295"/>
<text text-anchor="middle" x="2565" y="-2408.8" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust52" class="cluster">
<title>cluster_51</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2886,-3461 2886,-3590 3904.5,-3590 3904.5,-3461 2886,-3461"/>
<text text-anchor="middle" x="3395.25" y="-3574.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust53" class="cluster">
<title>cluster_52</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2029,-4260 2029,-4605 3082.5,-4605 3082.5,-4260 2029,-4260"/>
<text text-anchor="middle" x="2555.75" y="-4589.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust54" class="cluster">
<title>cluster_53</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2518,-2913 2518,-3042 2613,-3042 2613,-2913 2518,-2913"/>
<text text-anchor="middle" x="2565.5" y="-3026.8" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust55" class="cluster">
<title>cluster_54</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2481,-3664 2481,-3901 3453.5,-3901 3453.5,-3664 2481,-3664"/>
<text text-anchor="middle" x="2967.25" y="-3885.8" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust56" class="cluster">
<title>cluster_55</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2504.5,-3050 2504.5,-3179 2626.5,-3179 2626.5,-3050 2504.5,-3050"/>
<text text-anchor="middle" x="2565.5" y="-3163.8" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust57" class="cluster">
<title>cluster_56</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3805.5,-4047 3805.5,-4122 3908.5,-4122 3908.5,-4047 3805.5,-4047"/>
<text text-anchor="middle" x="3857" y="-4106.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust58" class="cluster">
<title>cluster_57</title>
<polygon fill="lightgrey" stroke="lightgrey" points="464.5,-1450 464.5,-1525 1300,-1525 1300,-1450 464.5,-1450"/>
<text text-anchor="middle" x="882.25" y="-1509.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust59" class="cluster">
<title>cluster_58</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1013,-2218 1013,-2401 1319,-2401 1319,-2218 1013,-2218"/>
<text text-anchor="middle" x="1166" y="-2385.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust60" class="cluster">
<title>cluster_59</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1593,-2706 1593,-2997 2237.5,-2997 2237.5,-2706 1593,-2706"/>
<text text-anchor="middle" x="1915.25" y="-2981.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust61" class="cluster">
<title>cluster_60</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1017,-5415 1017,-5706 2178,-5706 2178,-5415 1017,-5415"/>
<text text-anchor="middle" x="1597.5" y="-5690.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust62" class="cluster">
<title>cluster_61</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2065,-3005 2065,-3242 2209,-3242 2209,-3005 2065,-3005"/>
<text text-anchor="middle" x="2137" y="-3226.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust63" class="cluster">
<title>cluster_62</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2061.5,-3824 2061.5,-4115 2213.5,-4115 2213.5,-3824 2061.5,-3824"/>
<text text-anchor="middle" x="2137.5" y="-4099.8" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust64" class="cluster">
<title>cluster_63</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2047,-3250 2047,-3379 2227,-3379 2227,-3250 2047,-3250"/>
<text text-anchor="middle" x="2137" y="-3363.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust65" class="cluster">
<title>cluster_64</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2038.5,-2349 2038.5,-2424 2235.5,-2424 2235.5,-2349 2038.5,-2349"/>
<text text-anchor="middle" x="2137" y="-2408.8" font-family="Helvetica,sans-Serif" font-size="14.00">generic_server_params.rs</text>
</g>
<g id="clust66" class="cluster">
<title>cluster_65</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1601.5,-896 1601.5,-1079 2237.5,-1079 2237.5,-896 1601.5,-896"/>
<text text-anchor="middle" x="1919.5" y="-1063.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust67" class="cluster">
<title>cluster_66</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1526,-4613 1526,-4958 2301.5,-4958 2301.5,-4613 1526,-4613"/>
<text text-anchor="middle" x="1913.75" y="-4942.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust68" class="cluster">
<title>cluster_67</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1610,-479 1610,-554 1760,-554 1760,-479 1610,-479"/>
<text text-anchor="middle" x="1685" y="-538.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust69" class="cluster">
<title>cluster_68</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1490.5,-1618 1490.5,-2341 2329.5,-2341 2329.5,-1618 1490.5,-1618"/>
<text text-anchor="middle" x="1910" y="-2325.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust70" class="cluster">
<title>cluster_69</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1033,-353 1033,-428 1299,-428 1299,-353 1033,-353"/>
<text text-anchor="middle" x="1166" y="-412.8" font-family="Helvetica,sans-Serif" font-size="14.00">generate_generic_server_params.rs</text>
</g>
<g id="clust71" class="cluster">
<title>cluster_70</title>
<polygon fill="lightgrey" stroke="lightgrey" points="3354.5,-2395 3354.5,-2470 3457.5,-2470 3457.5,-2395 3354.5,-2395"/>
<text text-anchor="middle" x="3406" y="-2454.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust72" class="cluster">
<title>cluster_71</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2452,-1317 2452,-1446 2678,-1446 2678,-1317 2452,-1317"/>
<text text-anchor="middle" x="2565" y="-1430.8" font-family="Helvetica,sans-Serif" font-size="14.00">simple_types.rs</text>
</g>
<g id="clust73" class="cluster">
<title>cluster_72</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1978,-2515 1978,-2698 3038.5,-2698 3038.5,-2515 1978,-2515"/>
<text text-anchor="middle" x="2508.25" y="-2682.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust74" class="cluster">
<title>cluster_73</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2060.5,-2432 2060.5,-2507 3009.5,-2507 3009.5,-2432 2060.5,-2432"/>
<text text-anchor="middle" x="2535" y="-2491.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust75" class="cluster">
<title>cluster_74</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2043,-729 2043,-858 2612.5,-858 2612.5,-729 2043,-729"/>
<text text-anchor="middle" x="2327.75" y="-842.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust76" class="cluster">
<title>cluster_75</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2026.5,-441 2026.5,-516 2608,-516 2608,-441 2026.5,-441"/>
<text text-anchor="middle" x="2317.25" y="-500.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust77" class="cluster">
<title>cluster_76</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2526,-1726 2526,-2287 2604,-2287 2604,-1726 2526,-1726"/>
<text text-anchor="middle" x="2565" y="-2271.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust78" class="cluster">
<title>cluster_77</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2029.5,-304 2029.5,-433 2245.5,-433 2245.5,-304 2029.5,-304"/>
<text text-anchor="middle" x="2137.5" y="-417.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_credential_request.rs</text>
</g>
<g id="clust79" class="cluster">
<title>cluster_78</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2520.5,-1643 2520.5,-1718 3034,-1718 3034,-1643 2520.5,-1643"/>
<text text-anchor="middle" x="2777.25" y="-1702.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_struct.rs</text>
</g>
<g id="clust80" class="cluster">
<title>cluster_79</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1619.5,-4966 1619.5,-5149 2184.5,-5149 2184.5,-4966 1619.5,-4966"/>
<text text-anchor="middle" x="1902" y="-5133.8" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust81" class="cluster">
<title>cluster_80</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2525,-1560 2525,-1635 3029.5,-1635 3029.5,-1560 2525,-1560"/>
<text text-anchor="middle" x="2777.25" y="-1619.8" font-family="Helvetica,sans-Serif" font-size="14.00">timestamp_struct.rs</text>
</g>
<g id="clust82" class="cluster">
<title>cluster_81</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2053,-8 2053,-137 2608,-137 2608,-8 2053,-8"/>
<text text-anchor="middle" x="2330.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust83" class="cluster">
<title>cluster_82</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1906,-3387 1906,-3786 2368,-3786 2368,-3387 1906,-3387"/>
<text text-anchor="middle" x="2137" y="-3770.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust84" class="cluster">
<title>cluster_83</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1024.5,-5331 1024.5,-5406 1307.5,-5406 1307.5,-5331 1024.5,-5331"/>
<text text-anchor="middle" x="1166" y="-5390.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust85" class="cluster">
<title>cluster_84</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1484,-3189 1484,-3426 1886,-3426 1886,-3189 1484,-3189"/>
<text text-anchor="middle" x="1685" y="-3410.8" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust86" class="cluster">
<title>cluster_85</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1029.5,-4559 1029.5,-4742 1302.5,-4742 1302.5,-4559 1029.5,-4559"/>
<text text-anchor="middle" x="1166" y="-4726.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust87" class="cluster">
<title>cluster_86</title>
<polygon fill="lightgrey" stroke="lightgrey" points="942.5,-1670 942.5,-1961 1389.5,-1961 1389.5,-1670 942.5,-1670"/>
<text text-anchor="middle" x="1166" y="-1945.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust88" class="cluster">
<title>cluster_87</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1072,-436 1072,-565 1260,-565 1260,-436 1072,-436"/>
<text text-anchor="middle" x="1166" y="-549.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;fn construct_scalars(n: usize) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(0..n).map(|_| Scalar::random(&amp;mut rng)).collect() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3474.5,-10331 3337.5,-10331 3337.5,-10295 3474.5,-10295 3474.5,-10331"/>
<text text-anchor="middle" x="3406" y="-10309.3" font-family="Helvetica,sans-Serif" font-size="14.00">construct_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;pub fn random&lt;R: CryptoRngCore + ?Sized&gt;(rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scal...">
<polygon fill="white" stroke="black" points="3892.5,-10864 3821.5,-10864 3821.5,-10828 3892.5,-10828 3892.5,-10864"/>
<text text-anchor="middle" x="3857" y="-10842.3" font-family="Helvetica,sans-Serif" font-size="14.00">random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3474.69,-10301.73C3520.76,-10298.27 3579.42,-10302.87 3614,-10340 3686.66,-10418.04 3569.18,-10741.12 3642,-10819 3684.5,-10864.45 3762,-10862.27 3811.15,-10855.15"/>
<polygon fill="gray" stroke="gray" points="3811.85,-10858.58 3821.19,-10853.57 3810.76,-10851.67 3811.85,-10858.58"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;fn vartime_double_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Variable&#45;time aA+bB, A variable, B fixed&#39; , |bench| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng...">
<polygon fill="white" stroke="black" points="3092.5,-10457 2847.5,-10457 2847.5,-10421 3092.5,-10421 3092.5,-10457"/>
<text text-anchor="middle" x="2970" y="-10435.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_double_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3091.16,-10457.03C3236.46,-10485.25 3478.36,-10553.88 3614,-10711 3646.4,-10748.54 3604.76,-10786.25 3642,-10819 3688.24,-10859.66 3763.37,-10859.23 3811.2,-10853.71"/>
<polygon fill="gray" stroke="gray" points="3811.79,-10857.17 3821.26,-10852.43 3810.9,-10850.22 3811.79,-10857.17"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn multiscalar_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; multiscalar benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consttime_multiscalar_mul(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2644,-10295 2486,-10295 2486,-10259 2644,-10259 2644,-10295"/>
<text text-anchor="middle" x="2565" y="-10273.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_helper&lt;M: Measurement&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c: &amp;mut BenchmarkGroup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dynamic_fraction: f64, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bench_...">
<polygon fill="white" stroke="black" points="3080,-10295 2860,-10295 2860,-10259 3080,-10259 3080,-10295"/>
<text text-anchor="middle" x="2970" y="-10273.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_helper</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().</title>
<path fill="none" stroke="gray" d="M2644.18,-10277C2702.53,-10277 2783.29,-10277 2849.69,-10277"/>
<polygon fill="gray" stroke="gray" points="2849.8,-10280.5 2859.8,-10277 2849.8,-10273.5 2849.8,-10280.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn consttime_multiscalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new( &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3070.5,-10349 2869.5,-10349 2869.5,-10313 3070.5,-10313 3070.5,-10349"/>
<text text-anchor="middle" x="2970" y="-10327.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().</title>
<path fill="none" stroke="gray" d="M2644.19,-10287.9C2680.08,-10292.87 2723.19,-10298.8 2762,-10304 2793.6,-10308.24 2827.93,-10312.75 2859.38,-10316.85"/>
<polygon fill="gray" stroke="gray" points="2859.11,-10320.35 2869.48,-10318.17 2860.02,-10313.4 2859.11,-10320.35"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn vartime_multiscalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new( &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3063,-10403 2877,-10403 2877,-10367 3063,-10367 3063,-10403"/>
<text text-anchor="middle" x="2970" y="-10381.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().</title>
<path fill="none" stroke="gray" d="M2601.49,-10295C2640.02,-10313.74 2703.84,-10342.48 2762,-10358 2795.48,-10366.93 2832.82,-10372.96 2866.48,-10377.01"/>
<polygon fill="gray" stroke="gray" points="2866.46,-10380.53 2876.79,-10378.2 2867.26,-10373.57 2866.46,-10380.53"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_pure_static&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::ne...">
<polygon fill="white" stroke="black" points="3095.5,-10241 2844.5,-10241 2844.5,-10205 3095.5,-10205 3095.5,-10241"/>
<text text-anchor="middle" x="2970" y="-10219.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_pure_static</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().</title>
<path fill="none" stroke="gray" d="M2644.19,-10266.1C2680.08,-10261.13 2723.19,-10255.2 2762,-10250 2785.44,-10246.86 2810.38,-10243.56 2834.54,-10240.4"/>
<polygon fill="gray" stroke="gray" points="2835.01,-10243.86 2844.47,-10239.1 2834.1,-10236.92 2835.01,-10243.86"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="white" stroke="black" points="3093,-10187 2847,-10187 2847,-10151 3093,-10151 3093,-10187"/>
<text text-anchor="middle" x="2970" y="-10165.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4250,-10648 4193,-10648 4193,-10612 4250,-10612 4250,-10648"/>
<text text-anchor="middle" x="4221.5" y="-10626.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M3093.23,-10178.34C3351.59,-10200.73 3940.31,-10266.49 4072,-10409 4131.52,-10473.41 4047.63,-10539.4 4108,-10603 4127,-10623.01 4158,-10629.32 4182.66,-10630.87"/>
<polygon fill="gray" stroke="gray" points="4182.65,-10634.37 4192.78,-10631.27 4182.93,-10627.38 4182.65,-10634.37"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" d="M3080.24,-10286.06C3157.14,-10292.44 3258.25,-10300.83 3327.09,-10306.54"/>
<polygon fill="gray" stroke="gray" points="3327.17,-10310.06 3337.43,-10307.39 3327.75,-10303.08 3327.17,-10310.06"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;fn construct_points(n: usize) &#45;&gt; Vec&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(0..n) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| EdwardsPoint::mul_base(&amp;Scalar::random(&amp;mut rng))) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.collect...">
<polygon fill="white" stroke="black" points="3471.5,-10385 3340.5,-10385 3340.5,-10349 3471.5,-10349 3471.5,-10385"/>
<text text-anchor="middle" x="3406" y="-10363.3" font-family="Helvetica,sans-Serif" font-size="14.00">construct_points</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" d="M3080.23,-10276.72C3110.86,-10280.54 3143.11,-10288.52 3170,-10304 3187.57,-10314.11 3180.41,-10329.93 3198,-10340 3237.81,-10362.78 3288.85,-10369.64 3330.29,-10370.74"/>
<polygon fill="gray" stroke="gray" points="3330.28,-10374.24 3340.33,-10370.91 3330.39,-10367.24 3330.28,-10374.24"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="white" stroke="black" points="3093,-10025 2847,-10025 2847,-9989 3093,-9989 3093,-10025"/>
<text text-anchor="middle" x="2970" y="-10003.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M3093.08,-10001.43C3351.15,-9992.49 3939.32,-9988.06 4072,-10125 4146.12,-10201.5 4038.95,-10521.89 4108,-10603 4126,-10624.15 4157.37,-10630.33 4182.42,-10631.54"/>
<polygon fill="gray" stroke="gray" points="4182.63,-10635.04 4192.71,-10631.78 4182.79,-10628.05 4182.63,-10635.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3464.56,-10385.12C3513.2,-10403.69 3580.18,-10437.64 3614,-10492 3652.52,-10553.93 3591.47,-10766.41 3642,-10819 3685.11,-10863.88 3762.43,-10861.87 3811.38,-10854.93"/>
<polygon fill="gray" stroke="gray" points="3812.02,-10858.38 3821.37,-10853.39 3810.95,-10851.46 3812.02,-10858.38"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" d="M3070.57,-10326.87C3148.45,-10323.64 3255.2,-10319.21 3326.96,-10316.24"/>
<polygon fill="gray" stroke="gray" points="3327.44,-10319.72 3337.29,-10315.81 3327.15,-10312.73 3327.44,-10319.72"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" d="M3070.57,-10339.26C3149.52,-10345.81 3258.15,-10354.82 3329.91,-10360.77"/>
<polygon fill="gray" stroke="gray" points="3329.97,-10364.29 3340.22,-10361.63 3330.55,-10357.31 3329.97,-10364.29"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" d="M3063.17,-10380.9C3097.51,-10377.21 3136.3,-10370.42 3170,-10358 3183.88,-10352.88 3184.11,-10345.08 3198,-10340 3239.02,-10325 3287.29,-10318.14 3326.9,-10315.08"/>
<polygon fill="gray" stroke="gray" points="3327.3,-10318.56 3337.03,-10314.36 3326.81,-10311.58 3327.3,-10318.56"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" d="M3063.04,-10381.18C3142.53,-10377.89 3255.96,-10373.18 3330.03,-10370.11"/>
<polygon fill="gray" stroke="gray" points="3330.36,-10373.6 3340.21,-10369.69 3330.07,-10366.6 3330.36,-10373.6"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn scalar_arith&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Scalar inversion&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64...">
<polygon fill="white" stroke="black" points="2613.5,-10025 2516.5,-10025 2516.5,-9989 2613.5,-9989 2613.5,-10025"/>
<text text-anchor="middle" x="2565" y="-10003.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_arith</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M2570.91,-9988.89C2594.69,-9900.12 2698.27,-9501.82 2734,-9168 2739.3,-9118.5 2726.52,-7410.93 2762,-7376 3176.9,-6967.54 3658.02,-6966.61 4072,-7376 4135.74,-7439.03 4052.11,-10532.91 4108,-10603 4125.5,-10624.95 4157.42,-10630.98 4182.8,-10631.93"/>
<polygon fill="gray" stroke="gray" points="4182.82,-10635.43 4192.86,-10632.06 4182.91,-10628.43 4182.82,-10635.43"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M2570.81,-9988.88C2594.13,-9900.06 2695.86,-9501.55 2734,-9168 2739.87,-9116.64 2724.9,-8274 2762,-8238 2829.94,-8172.08 3546.7,-8171.42 3614,-8238 3664.97,-8288.42 3594.29,-10765.48 3642,-10819 3683.53,-10865.58 3761.67,-10862.96 3811.16,-10855.45"/>
<polygon fill="gray" stroke="gray" points="3811.97,-10858.87 3821.27,-10853.79 3810.83,-10851.96 3811.97,-10858.87"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn montgomery_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; montgomery benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;montgomery_ladder(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consttime_...">
<polygon fill="white" stroke="black" points="2650.5,-10133 2479.5,-10133 2479.5,-10097 2650.5,-10097 2650.5,-10133"/>
<text text-anchor="middle" x="2565" y="-10111.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<path fill="none" stroke="gray" d="M2650.88,-10116.37C2679.5,-10113.13 2710.18,-10105.22 2734,-10088 2755.91,-10072.16 2739.86,-10049.51 2762,-10034 2783.85,-10018.7 2810.24,-10009.96 2836.76,-10005.28"/>
<polygon fill="gray" stroke="gray" points="2837.59,-10008.69 2846.92,-10003.68 2836.5,-10001.78 2837.59,-10008.69"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn montgomery_ladder&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Montgomery pseudomultiplication&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = constants::X25519_BASEPOINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="3048.5,-10133 2891.5,-10133 2891.5,-10097 3048.5,-10097 3048.5,-10133"/>
<text text-anchor="middle" x="2970" y="-10111.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_ladder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().</title>
<path fill="none" stroke="gray" d="M2650.97,-10115C2718.52,-10115 2812.67,-10115 2881,-10115"/>
<polygon fill="gray" stroke="gray" points="2881.31,-10118.5 2891.31,-10115 2881.31,-10111.5 2881.31,-10118.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn scalar_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; scalar benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_arith(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;batch_scalar_inversion(...">
<polygon fill="white" stroke="black" points="2198.5,-10133 2075.5,-10133 2075.5,-10097 2198.5,-10097 2198.5,-10133"/>
<text text-anchor="middle" x="2137" y="-10111.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches(). -->
<g id="edge501" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().</title>
<path fill="none" stroke="gray" d="M2185.63,-10133.11C2264.55,-10163.12 2422.12,-10223.04 2506.89,-10255.28"/>
<polygon fill="gray" stroke="gray" points="2505.76,-10258.6 2516.35,-10258.88 2508.25,-10252.05 2505.76,-10258.6"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="edge502" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<path fill="none" stroke="gray" d="M2187.83,-10096.99C2239.36,-10078.92 2322.44,-10051.36 2396,-10034 2432.19,-10025.46 2473.41,-10018.79 2505.96,-10014.22"/>
<polygon fill="gray" stroke="gray" points="2506.78,-10017.64 2516.21,-10012.8 2505.82,-10010.7 2506.78,-10017.64"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="edge504" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<path fill="none" stroke="gray" d="M2198.58,-10115C2269.15,-10115 2386.58,-10115 2469.24,-10115"/>
<polygon fill="gray" stroke="gray" points="2469.39,-10118.5 2479.39,-10115 2469.39,-10111.5 2469.39,-10118.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn batch_scalar_inversion&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for batch_size in &amp;BATCH_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new(&#39; Batch scalar inve...">
<polygon fill="white" stroke="black" points="2652,-10079 2478,-10079 2478,-10043 2652,-10043 2652,-10079"/>
<text text-anchor="middle" x="2565" y="-10057.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_scalar_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="edge503" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<path fill="none" stroke="gray" d="M2198.58,-10107.32C2268.71,-10098.43 2385.11,-10083.68 2467.68,-10073.21"/>
<polygon fill="gray" stroke="gray" points="2468.35,-10076.65 2477.83,-10071.92 2467.47,-10069.71 2468.35,-10076.65"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn edwards_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; edwards benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;decompress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2635,-10187 2495,-10187 2495,-10151 2635,-10151 2635,-10187"/>
<text text-anchor="middle" x="2565" y="-10165.3" font-family="Helvetica,sans-Serif" font-size="14.00">edwards_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="edge505" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<path fill="none" stroke="gray" d="M2198.58,-10122.68C2273.67,-10132.2 2401.81,-10148.44 2484.67,-10158.94"/>
<polygon fill="gray" stroke="gray" points="2484.43,-10162.44 2494.8,-10160.23 2485.32,-10155.5 2484.43,-10162.44"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge522" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" d="M3095.61,-10237.43C3120.35,-10240.99 3146.07,-10245.19 3170,-10250 3226.64,-10261.39 3289.83,-10278.59 3336.42,-10292.14"/>
<polygon fill="gray" stroke="gray" points="3335.51,-10295.53 3346.09,-10294.98 3337.48,-10288.81 3335.51,-10295.53"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge521" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" d="M3095.72,-10218.54C3122.65,-10223.07 3149.24,-10232.44 3170,-10250 3201.99,-10277.05 3165.94,-10313.03 3198,-10340 3234.07,-10370.35 3286.93,-10376.83 3330.2,-10375.86"/>
<polygon fill="gray" stroke="gray" points="3330.54,-10379.35 3340.41,-10375.49 3330.29,-10372.35 3330.54,-10379.35"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;pub fn batch_invert(inputs: &amp;mut [Scalar]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This code is essentially identical to the FieldElement &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// implementation, and is documented there. &#160;Unfortunately, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4273,-10982 4170,-10982 4170,-10946 4273,-10946 4273,-10982"/>
<text text-anchor="middle" x="4221.5" y="-10960.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge541" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M2652.14,-10068.36C2682.46,-10066.09 2713.94,-10057.27 2734,-10034 2779.61,-9981.08 2718.93,-7574.01 2762,-7519 2941.44,-7289.77 3891.25,-7290.8 4072,-7519 4128.92,-7590.86 4077.83,-10732.44 4108,-10819 4124.87,-10867.4 4164.96,-10912.23 4192.43,-10938.87"/>
<polygon fill="gray" stroke="gray" points="4190.16,-10941.53 4199.81,-10945.88 4194.98,-10936.46 4190.16,-10941.53"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge542" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M2652.08,-10068.31C2682.39,-10066.04 2713.89,-10057.23 2734,-10034 2798.27,-9959.78 2692.03,-8335.87 2762,-8267 2795.73,-8233.8 3580.35,-8233.71 3614,-8267 3664.4,-8316.85 3594.82,-10766.08 3642,-10819 3683.53,-10865.58 3761.67,-10862.96 3811.16,-10855.45"/>
<polygon fill="gray" stroke="gray" points="3811.97,-10858.87 3821.27,-10853.79 3810.83,-10851.96 3811.97,-10858.87"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn consttime_variable_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = &amp;constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3104,-10079 2836,-10079 2836,-10043 3104,-10043 3104,-10079"/>
<text text-anchor="middle" x="2970" y="-10057.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_variable_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge598" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M3104.16,-10068.24C3129.16,-10063.18 3152.81,-10052.89 3170,-10034 3221.2,-9977.75 3143.13,-9402.67 3198,-9350 3331.38,-9221.97 3453.41,-9258.37 3614,-9350 3961.5,-9548.29 3952.06,-9743.31 4072,-10125 4103.93,-10226.62 4038.95,-10521.89 4108,-10603 4126,-10624.15 4157.37,-10630.33 4182.42,-10631.54"/>
<polygon fill="gray" stroke="gray" points="4182.63,-10635.04 4192.71,-10631.78 4182.79,-10628.05 4182.63,-10635.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge658" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M3048.84,-10112.38C3276.06,-10106.52 3931.24,-10102.86 4072,-10249 4126.85,-10305.95 4055.96,-10543.46 4108,-10603 4126.27,-10623.91 4157.62,-10630.11 4182.59,-10631.39"/>
<polygon fill="gray" stroke="gray" points="4182.75,-10634.89 4192.85,-10631.66 4182.94,-10627.9 4182.75,-10634.89"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul(). -->
<g id="edge766" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().</title>
<path fill="none" stroke="gray" d="M2635.07,-10185.98C2669.97,-10198.1 2709.92,-10218.08 2734,-10250 2778.01,-10308.33 2709.27,-10361.42 2762,-10412 2782.41,-10431.58 2809.62,-10441.73 2837.58,-10446.39"/>
<polygon fill="gray" stroke="gray" points="2837.09,-10449.85 2847.49,-10447.81 2838.09,-10442.92 2837.09,-10449.85"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul(). -->
<g id="edge768" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().</title>
<path fill="none" stroke="gray" d="M2635.28,-10169C2690.51,-10169 2769.46,-10169 2836.7,-10169"/>
<polygon fill="gray" stroke="gray" points="2836.96,-10172.5 2846.96,-10169 2836.96,-10165.5 2836.96,-10172.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul(). -->
<g id="edge767" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().</title>
<path fill="none" stroke="gray" d="M2635.2,-10171.72C2667.85,-10169.75 2705.75,-10162.42 2734,-10142 2755.91,-10126.16 2739.86,-10103.51 2762,-10088 2780.9,-10074.76 2803.19,-10066.44 2826.03,-10061.41"/>
<polygon fill="gray" stroke="gray" points="2826.72,-10064.84 2835.84,-10059.44 2825.35,-10057.97 2826.72,-10064.84"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn test_vartime_pippenger() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Reuse points across different tests &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut n = 512; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = Scalar::from(2128506u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = Scalar::from(4443282u64).in...">
<polygon fill="white" stroke="black" points="3947.5,-10457 3766.5,-10457 3766.5,-10421 3947.5,-10421 3947.5,-10457"/>
<text text-anchor="middle" x="3857" y="-10435.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_vartime_pippenger</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M3947.63,-10441.62C3990.09,-10447.32 4038.67,-10460.95 4072,-10492 4109.95,-10527.35 4069.92,-10567.79 4108,-10603 4128.04,-10621.53 4158.5,-10628 4182.68,-10629.99"/>
<polygon fill="gray" stroke="gray" points="4182.75,-10633.5 4192.94,-10630.6 4183.17,-10626.51 4182.75,-10633.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/mul(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/mul().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn mul() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::mul(&amp;X, &amp;Y); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XY[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4655,-11626 4601,-11626 4601,-11590 4655,-11590 4655,-11626"/>
<text text-anchor="middle" x="4628" y="-11604.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;pub fn mul(a: &amp;Scalar52, b: &amp;Scalar52) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ab = Scalar52::montgomery_reduce(&amp;Scalar52::mul_internal(a, b)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_reduce(&amp;Scalar52::mul_internal(&amp;ab, &amp;...">
<polygon fill="white" stroke="black" points="4848.5,-11410 4794.5,-11410 4794.5,-11374 4848.5,-11374 4848.5,-11410"/>
<text text-anchor="middle" x="4821.5" y="-11388.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul().</title>
<path fill="none" stroke="gray" d="M4655.03,-11605.14C4673.72,-11601.94 4698.59,-11595.18 4716,-11581 4768.8,-11538.01 4799.28,-11460.9 4812.53,-11419.71"/>
<polygon fill="gray" stroke="gray" points="4815.91,-11420.65 4815.53,-11410.06 4809.22,-11418.57 4815.91,-11420.65"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_mul(a: &amp;Scalar52, b: &amp;Scalar52) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_reduce(&amp;Scalar52::mul_internal(a, b)) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4891,-11356 4752,-11356 4752,-11320 4891,-11320 4891,-11356"/>
<text text-anchor="middle" x="4821.5" y="-11334.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;pub (crate) fn mul_internal(a: &amp;Scalar52, b: &amp;Scalar52) &#45;&gt; [u128; 9] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut z = [0u128; 9]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z[0] = m(a[0], b[0]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z[1] = m(a[0], b[1]) + m(a[1], b[0]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z[2] = m...">
<polygon fill="lightblue" stroke="black" points="5029,-11302 4927,-11302 4927,-11266 5029,-11266 5029,-11302"/>
<text text-anchor="middle" x="4978" y="-11280.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<path fill="none" stroke="gray" d="M4874.38,-11319.87C4888.12,-11315.06 4903.08,-11309.84 4917.21,-11304.9"/>
<polygon fill="gray" stroke="gray" points="4918.55,-11308.14 4926.83,-11301.53 4916.24,-11301.53 4918.55,-11308.14"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/mul_max(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/mul_max().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn mul_max() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::mul(&amp;X, &amp;X); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XX[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4668,-11572 4588,-11572 4588,-11536 4668,-11536 4668,-11572"/>
<text text-anchor="middle" x="4628" y="-11550.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul().</title>
<path fill="none" stroke="gray" d="M4668.1,-11547.24C4683.96,-11543.18 4701.84,-11536.83 4716,-11527 4756.83,-11498.68 4789,-11449.55 4806.34,-11419.02"/>
<polygon fill="gray" stroke="gray" points="4809.45,-11420.62 4811.24,-11410.18 4803.33,-11417.23 4809.45,-11420.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_max() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::montgomery_mul(&amp;X, &amp;X); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XX_MONT[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4716,-11410 4540,-11410 4540,-11374 4716,-11374 4716,-11410"/>
<text text-anchor="middle" x="4628" y="-11388.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" d="M4693.03,-11373.94C4710.28,-11369.08 4729.08,-11363.78 4746.8,-11358.78"/>
<polygon fill="gray" stroke="gray" points="4747.85,-11362.12 4756.53,-11356.04 4745.95,-11355.38 4747.85,-11362.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<path fill="none" stroke="gray" d="M4848.66,-11384.31C4861.92,-11379.77 4877.94,-11373.29 4891,-11365 4915.03,-11349.75 4938.27,-11327.24 4954.53,-11309.81"/>
<polygon fill="gray" stroke="gray" points="4957.31,-11311.95 4961.48,-11302.21 4952.15,-11307.23 4957.31,-11311.95"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;fn from_bytes_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bignum = [255u8; 64]; // 2^512 &#45; 1 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let reduced = Scalar52::from_bytes_wide(&amp;bignum); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(reduced[i] == C[i]); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4504,-11518 4371,-11518 4371,-11482 4504,-11482 4504,-11518"/>
<text text-anchor="middle" x="4437.5" y="-11496.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_wide(bytes: &amp;[u8; 64]) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut words = [0u64; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;words[i] |= (bytes[(i * 8) + j] as u64...">
<polygon fill="white" stroke="black" points="4694.5,-11518 4561.5,-11518 4561.5,-11482 4694.5,-11482 4694.5,-11518"/>
<text text-anchor="middle" x="4628" y="-11496.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" d="M4504.16,-11500C4519.33,-11500 4535.59,-11500 4551.15,-11500"/>
<polygon fill="gray" stroke="gray" points="4551.25,-11503.5 4561.25,-11500 4551.25,-11496.5 4551.25,-11503.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;pub fn as_montgomery(&amp;self) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_mul(self, &amp;constants::RR) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4692,-11356 4564,-11356 4564,-11320 4692,-11320 4692,-11356"/>
<text text-anchor="middle" x="4628" y="-11334.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge475" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" d="M4692.23,-11338C4708.02,-11338 4725.15,-11338 4741.59,-11338"/>
<polygon fill="gray" stroke="gray" points="4741.72,-11341.5 4751.72,-11338 4741.72,-11334.5 4741.72,-11341.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::montgomery_mul(&amp;X, &amp;Y); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XY_MONT[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4697.5,-11464 4558.5,-11464 4558.5,-11428 4697.5,-11428 4697.5,-11464"/>
<text text-anchor="middle" x="4628" y="-11442.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge567" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" d="M4697.71,-11429.69C4704.2,-11426.7 4710.43,-11423.17 4716,-11419 4739.1,-11401.73 4729.56,-11383.12 4752,-11365 4753.53,-11363.77 4755.12,-11362.58 4756.76,-11361.45"/>
<polygon fill="gray" stroke="gray" points="4758.65,-11364.4 4765.34,-11356.18 4754.99,-11358.43 4758.65,-11364.4"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;pub fn square(&amp;self) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aa = Scalar52::montgomery_reduce(&amp;Scalar52::square_internal(self)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_reduce(&amp;Scalar52::mul_internal(&amp;aa, &amp;constants::RR))...">
<polygon fill="white" stroke="black" points="4853.5,-11302 4789.5,-11302 4789.5,-11266 4853.5,-11266 4853.5,-11302"/>
<text text-anchor="middle" x="4821.5" y="-11280.3" font-family="Helvetica,sans-Serif" font-size="14.00">square</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="edge612" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<path fill="none" stroke="gray" d="M4853.77,-11284C4871.88,-11284 4895.3,-11284 4916.85,-11284"/>
<polygon fill="gray" stroke="gray" points="4916.93,-11287.5 4926.92,-11284 4916.92,-11280.5 4916.93,-11287.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/square_max(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/square_max().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn square_max() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = X.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XX[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4678.5,-11302 4577.5,-11302 4577.5,-11266 4678.5,-11266 4678.5,-11302"/>
<text text-anchor="middle" x="4628" y="-11280.3" font-family="Helvetica,sans-Serif" font-size="14.00">square_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/square_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square(). -->
<g id="edge663" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/square_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square().</title>
<path fill="none" stroke="gray" d="M4678.81,-11284C4709.91,-11284 4749.46,-11284 4778.88,-11284"/>
<polygon fill="gray" stroke="gray" points="4779.22,-11287.5 4789.22,-11284 4779.22,-11280.5 4779.22,-11287.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge753" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" d="M4694.62,-11487.26C4702.5,-11483.63 4709.9,-11478.98 4716,-11473 4752.15,-11437.6 4717.2,-11401.72 4752,-11365 4752.89,-11364.06 4753.82,-11363.15 4754.78,-11362.28"/>
<polygon fill="gray" stroke="gray" points="4756.93,-11365.04 4762.7,-11356.15 4752.65,-11359.5 4756.93,-11365.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_500() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(500); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3085.5,-9942 2854.5,-9942 2854.5,-9906 3085.5,-9906 3085.5,-9942"/>
<text text-anchor="middle" x="2970" y="-9920.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_500</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_iter(n: usize) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Construct random coefficients x0, ..., x_{n&#45;1}, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// followed by some extra hardcoded ones. ...">
<polygon fill="white" stroke="black" points="3512,-9888 3300,-9888 3300,-9852 3512,-9852 3512,-9888"/>
<text text-anchor="middle" x="3406" y="-9866.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_iter</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" d="M3085.6,-9909.74C3148.65,-9901.9 3226.67,-9892.19 3289.81,-9884.33"/>
<polygon fill="gray" stroke="gray" points="3290.32,-9887.8 3299.81,-9883.09 3289.46,-9880.85 3290.32,-9887.8"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3481.95,-9888C3528.44,-9903.4 3584.72,-9930.66 3614,-9977 3664,-10056.14 3578.93,-10749.83 3642,-10819 3684.04,-10865.11 3762.03,-10862.63 3811.35,-10855.28"/>
<polygon fill="gray" stroke="gray" points="3812.11,-10858.71 3821.42,-10853.66 3810.99,-10851.8 3812.11,-10858.71"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_100() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(100); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3085.5,-9888 2854.5,-9888 2854.5,-9852 3085.5,-9852 3085.5,-9888"/>
<text text-anchor="middle" x="2970" y="-9866.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_100</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" d="M3085.6,-9870C3148.65,-9870 3226.67,-9870 3289.81,-9870"/>
<polygon fill="gray" stroke="gray" points="3289.81,-9873.5 3299.81,-9870 3289.81,-9866.5 3289.81,-9873.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_250() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(250); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3085.5,-9834 2854.5,-9834 2854.5,-9798 3085.5,-9798 3085.5,-9834"/>
<text text-anchor="middle" x="2970" y="-9812.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_250</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" d="M3085.6,-9830.26C3148.65,-9838.1 3226.67,-9847.81 3289.81,-9855.67"/>
<polygon fill="gray" stroke="gray" points="3289.46,-9859.15 3299.81,-9856.91 3290.32,-9852.2 3289.46,-9859.15"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_vs_nonprecomputed_multiscalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let static_scalars = (0..128) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| Scalar::random(&amp;mut rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3170,-9726 2770,-9726 2770,-9690 3170,-9690 3170,-9726"/>
<text text-anchor="middle" x="2970" y="-9704.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_vs_nonprecomputed_multiscalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3156.86,-9689.71C3161.54,-9686.22 3165.94,-9682.33 3170,-9678 3220.03,-9624.63 3144.12,-9399.48 3198,-9350 3232.05,-9318.74 3581.01,-9317.63 3614,-9350 3672.27,-9407.17 3587.43,-10758.29 3642,-10819 3683.72,-10865.41 3761.8,-10862.84 3811.23,-10855.39"/>
<polygon fill="gray" stroke="gray" points="3812.02,-10858.81 3821.32,-10853.74 3810.89,-10851.9 3812.02,-10858.81"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_1000() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(1000); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3090,-9780 2850,-9780 2850,-9744 3090,-9744 3090,-9780"/>
<text text-anchor="middle" x="2970" y="-9758.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_1000</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge584" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" d="M3090.09,-9774.26C3116.58,-9778.07 3144.39,-9782.91 3170,-9789 3233.83,-9804.17 3304.72,-9829.89 3351.78,-9848.28"/>
<polygon fill="gray" stroke="gray" points="3350.57,-9851.56 3361.16,-9851.97 3353.13,-9845.05 3350.57,-9851.56"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_bits_be() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Make a random prime&#45;order point P &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_edwards = rand_prime_order_po...">
<polygon fill="white" stroke="black" points="3067.5,-9589 2872.5,-9589 2872.5,-9553 3067.5,-9553 3067.5,-9589"/>
<text text-anchor="middle" x="2970" y="-9567.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_bits_be</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn rand_prime_order_point(mut rng: impl RngCore + CryptoRng) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s: Scalar = Scalar::random(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EdwardsPoint::mul_base(&amp;s) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3497,-9643 3315,-9643 3315,-9607 3497,-9607 3497,-9643"/>
<text text-anchor="middle" x="3406" y="-9621.3" font-family="Helvetica,sans-Serif" font-size="14.00">rand_prime_order_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().</title>
<path fill="none" stroke="gray" d="M3067.59,-9583.02C3138.06,-9591.79 3233.31,-9603.64 3304.64,-9612.51"/>
<polygon fill="gray" stroke="gray" points="3304.63,-9616.04 3314.99,-9613.8 3305.5,-9609.09 3304.63,-9616.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order_wide(input: &amp;[u8; 64]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScalar::from_bytes_wide(input).pack() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4328.5,-10702 4114.5,-10702 4114.5,-10666 4328.5,-10666 4328.5,-10702"/>
<text text-anchor="middle" x="4221.5" y="-10680.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M2977.81,-9552.87C2999.63,-9497.7 3073.81,-9331.89 3198,-9270 3363.48,-9187.53 3460.81,-9166.48 3614,-9270 4066.08,-9575.48 3930.03,-9882.18 4072,-10409 4086.49,-10462.77 4070.46,-10615.86 4108,-10657 4108.65,-10657.71 4109.32,-10658.41 4110,-10659.09"/>
<polygon fill="gray" stroke="gray" points="4107.93,-10661.93 4117.82,-10665.75 4112.47,-10656.6 4107.93,-10661.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;fn montgomery_ladder_matches_edwards_scalarmult() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_edwards = rand_prime_order_point(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3153.5,-9643 2786.5,-9643 2786.5,-9607 3153.5,-9607 3153.5,-9643"/>
<text text-anchor="middle" x="2970" y="-9621.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_ladder_matches_edwards_scalarmult</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point(). -->
<g id="edge457" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().</title>
<path fill="none" stroke="gray" d="M3153.8,-9625C3205.49,-9625 3259.83,-9625 3304.7,-9625"/>
<polygon fill="gray" stroke="gray" points="3304.71,-9628.5 3314.71,-9625 3304.71,-9621.5 3304.71,-9628.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge456" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3153.76,-9611.54C3159.58,-9607.63 3165.03,-9603.14 3170,-9598 3212.85,-9553.68 3152.26,-9363.33 3198,-9322 3266.59,-9260.02 3548.02,-9257.25 3614,-9322 3673.37,-9380.27 3586.41,-10757.13 3642,-10819 3683.71,-10865.42 3761.8,-10862.85 3811.23,-10855.39"/>
<polygon fill="gray" stroke="gray" points="3812.02,-10858.81 3821.32,-10853.75 3810.89,-10851.9 3812.02,-10858.81"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge523" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3497.25,-9624.55C3539.45,-9629.47 3586.39,-9643.32 3614,-9678 3653.49,-9727.61 3599.48,-10771.96 3642,-10819 3683.84,-10865.3 3761.89,-10862.76 3811.28,-10855.35"/>
<polygon fill="gray" stroke="gray" points="3812.05,-10858.77 3821.36,-10853.71 3810.93,-10851.86 3812.05,-10858.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;fn four_torsion_random() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = RistrettoPoint::mul_base(&amp;Scalar::random(&amp;mut rng)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P_coset = P.coset4(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for point in P_coset { &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3486.5,-9506 3325.5,-9506 3325.5,-9470 3486.5,-9470 3486.5,-9506"/>
<text text-anchor="middle" x="3406" y="-9484.3" font-family="Helvetica,sans-Serif" font-size="14.00">four_torsion_random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3486.54,-9486.45C3531.31,-9490.2 3584.07,-9503.3 3614,-9541 3658.16,-9596.62 3594.45,-10766.25 3642,-10819 3683.78,-10865.35 3761.85,-10862.8 3811.26,-10855.37"/>
<polygon fill="gray" stroke="gray" points="3812.04,-10858.79 3821.34,-10853.73 3810.91,-10851.88 3812.04,-10858.79"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_vs_nonprecomputed_multiscalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let static_scalars = (0..128) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| Scalar::random(&amp;mut rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3606,-9452 3206,-9452 3206,-9416 3606,-9416 3606,-9452"/>
<text text-anchor="middle" x="3406" y="-9430.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_vs_nonprecomputed_multiscalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3604.77,-9452C3608.01,-9454.77 3611.1,-9457.76 3614,-9461 3664.37,-9517.19 3591.51,-10762.92 3642,-10819 3683.75,-10865.38 3761.83,-10862.82 3811.25,-10855.38"/>
<polygon fill="gray" stroke="gray" points="3812.03,-10858.8 3821.33,-10853.73 3810.9,-10851.89 3812.03,-10858.8"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;fn random_roundtrip() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = RistrettoPoint::mul_base(&amp;Scalar::random(&amp;mut rng)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed_P = P.compress();...">
<polygon fill="white" stroke="black" points="3477,-9398 3335,-9398 3335,-9362 3477,-9362 3477,-9398"/>
<text text-anchor="middle" x="3406" y="-9376.3" font-family="Helvetica,sans-Serif" font-size="14.00">random_roundtrip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge498" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3477.13,-9368.18C3523.09,-9364.81 3580.63,-9369.75 3614,-9407 3666.35,-9465.44 3589.53,-10760.67 3642,-10819 3683.73,-10865.4 3761.82,-10862.83 3811.24,-10855.38"/>
<polygon fill="gray" stroke="gray" points="3812.02,-10858.8 3821.33,-10853.74 3810.89,-10851.9 3812.02,-10858.8"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;fn test_pippenger_radix() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use core::iter; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// For each valid radix it tests that 1000 random&#45;ish scalars can be restored &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// from the produced representation precisely. &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3938.5,-10756 3775.5,-10756 3775.5,-10720 3938.5,-10720 3938.5,-10756"/>
<text text-anchor="middle" x="3857" y="-10734.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pippenger_radix</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M3938.52,-10743.36C3981.07,-10742.53 4032.51,-10735.43 4072,-10711 4096.53,-10695.82 4084.34,-10673.5 4108,-10657 4129.86,-10641.75 4159.28,-10635.06 4182.55,-10632.14"/>
<polygon fill="gray" stroke="gray" points="4183.19,-10635.6 4192.76,-10631.06 4182.45,-10628.64 4183.19,-10635.6"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix_iter(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix_iter().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;fn test_pippenger_radix_iter(scalar: Scalar, w: usize) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let digits_count = Scalar::to_radix_2w_size_hint(w); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let digits = scalar.as_radix_2w(w); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let radix = Scalar::from(...">
<polygon fill="white" stroke="black" points="4318,-10756 4125,-10756 4125,-10720 4318,-10720 4318,-10756"/>
<text text-anchor="middle" x="4221.5" y="-10734.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pippenger_radix_iter</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix_iter(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix_iter().</title>
<path fill="none" stroke="gray" d="M3938.9,-10738C3990.66,-10738 4058.37,-10738 4114.42,-10738"/>
<polygon fill="gray" stroke="gray" points="4114.74,-10741.5 4124.74,-10738 4114.74,-10734.5 4114.74,-10741.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_with_a_zero_input_panics() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut xs = vec![Scalar::ONE; 16]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xs[3] = Scalar::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should panic in debug mode. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::batch_invert(&amp;mut...">
<polygon fill="white" stroke="black" points="3999,-11026 3715,-11026 3715,-10990 3999,-10990 3999,-11026"/>
<text text-anchor="middle" x="3857" y="-11004.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_with_a_zero_input_panics</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M3999.19,-10990.86C4054.77,-10984.12 4115.64,-10976.73 4159.45,-10971.41"/>
<polygon fill="gray" stroke="gray" points="4160.14,-10974.85 4169.65,-10970.17 4159.3,-10967.9 4160.14,-10974.85"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;fn invert() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let inv_X = X.invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(inv_X, XINV); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let should_be_one = inv_X * X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(should_be_one, Scalar::ONE); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3885.5,-10594 3828.5,-10594 3828.5,-10558 3885.5,-10558 3885.5,-10594"/>
<text text-anchor="middle" x="3857" y="-10572.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M3885.77,-10579.02C3926.65,-10583.56 4005.38,-10592.75 4072,-10603 4109.88,-10608.83 4152.95,-10616.81 4182.91,-10622.58"/>
<polygon fill="gray" stroke="gray" points="4182.45,-10626.06 4192.93,-10624.52 4183.78,-10619.19 4182.45,-10626.06"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`&amp;Scalar`][Neg]neg(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`&amp;Scalar`][Neg]neg().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;fn neg(self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let self_R = UnpackedScalar::mul_internal(&amp;self.unpack(), &amp;constants::R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let self_mod_l = UnpackedScalar::montgomery_reduce(&amp;self_R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScal...">
<polygon fill="white" stroke="black" points="3433,-10918 3379,-10918 3379,-10882 3433,-10882 3433,-10918"/>
<text text-anchor="middle" x="3406" y="-10896.3" font-family="Helvetica,sans-Serif" font-size="14.00">neg</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`&amp;Scalar`][Neg]neg().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`&amp;Scalar`][Neg]neg().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<path fill="none" stroke="gray" d="M3433.21,-10894.44C3477.25,-10886.79 3565.97,-10878.93 3614,-10927 3682.42,-10995.48 3569.28,-11079.1 3642,-11143 3708.33,-11201.29 4348.2,-11124 4436.5,-11124 4436.5,-11124 4436.5,-11124 4629,-11124 4757.34,-11124 4889.97,-11214.95 4947.47,-11259.7"/>
<polygon fill="gray" stroke="gray" points="4945.38,-11262.51 4955.4,-11265.96 4949.71,-11257.02 4945.38,-11262.51"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/reduce(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/reduce().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;fn reduce() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let biggest = Scalar::from_bytes_mod_order([0xff; 32]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(biggest, CANONICAL_2_256_MINUS_1); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3889,-10540 3825,-10540 3825,-10504 3889,-10504 3889,-10540"/>
<text text-anchor="middle" x="3857" y="-10518.3" font-family="Helvetica,sans-Serif" font-size="14.00">reduce</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order(bytes: [u8; 32]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Temporarily allow s_unreduced.bytes &gt; 2^255 ... &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s_unreduced = Scalar { bytes }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Then reduce mod the grou...">
<polygon fill="white" stroke="black" points="4309,-10594 4134,-10594 4134,-10558 4309,-10558 4309,-10594"/>
<text text-anchor="middle" x="4221.5" y="-10572.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="gray" d="M3889.26,-10525.41C3931.01,-10530.08 4007.23,-10539.03 4072,-10549 4088.78,-10551.58 4106.58,-10554.59 4123.8,-10557.63"/>
<polygon fill="gray" stroke="gray" points="4123.4,-10561.12 4133.86,-10559.43 4124.64,-10554.23 4123.4,-10561.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" d="M4325.31,-10702.15C4328.81,-10704.75 4332.07,-10707.69 4335,-10711 4371.05,-10751.69 4348.4,-10901.64 4363,-10954 4403.45,-11099.02 4459.63,-11118.14 4504,-11262 4532.04,-11352.91 4477.31,-11401.44 4540,-11473 4543.65,-11477.16 4547.92,-11480.69 4552.59,-11483.68"/>
<polygon fill="gray" stroke="gray" points="4550.91,-11486.75 4561.35,-11488.51 4554.28,-11480.62 4550.91,-11486.75"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Scalar::ONE, Scalar::batch_invert(&amp;mut [])); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3934,-11080 3780,-11080 3780,-11044 3934,-11044 3934,-11080"/>
<text text-anchor="middle" x="3857" y="-11058.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M3934.04,-11064.92C3976.72,-11063.58 4029.72,-11056.77 4072,-11035 4092.97,-11024.2 4087.91,-11008.35 4108,-10996 4123.62,-10986.4 4142.21,-10979.59 4159.74,-10974.8"/>
<polygon fill="gray" stroke="gray" points="4161.08,-10978.07 4169.91,-10972.2 4159.35,-10971.28 4161.08,-10978.07"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_consistency() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut x = Scalar::from(1u64); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut v1: Vec&lt;_&gt; = (0..16) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let tmp = x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x + x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3952.5,-10918 3761.5,-10918 3761.5,-10882 3952.5,-10882 3952.5,-10918"/>
<text text-anchor="middle" x="3857" y="-10896.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_consistency</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M3952.66,-10909.49C3990,-10913.88 4033.17,-10919.74 4072,-10927 4101.18,-10932.46 4133.17,-10940.2 4159.97,-10947.19"/>
<polygon fill="gray" stroke="gray" points="4159.41,-10950.66 4169.97,-10949.83 4161.19,-10943.89 4159.41,-10950.66"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M3952.72,-10911.61C3994.41,-10911.36 4040.88,-10902.91 4072,-10873 4142.17,-10805.56 4041.65,-10728.2 4108,-10657 4126.81,-10636.81 4157.83,-10630.52 4182.54,-10629.02"/>
<polygon fill="gray" stroke="gray" points="4182.82,-10632.51 4192.69,-10628.64 4182.56,-10625.51 4182.82,-10632.51"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" d="M4238.57,-10945.58C4261.51,-10918.79 4304.27,-10867.04 4335,-10819 4349.57,-10796.23 4339.9,-10779.04 4363,-10765 4416.55,-10732.45 4444.94,-10744.05 4504,-10765 4618.35,-10805.55 4658.62,-10830.09 4716,-10937 4755.48,-11010.57 4701.76,-11244.31 4752,-11311 4752.48,-11311.63 4752.97,-11312.25 4753.48,-11312.85"/>
<polygon fill="gray" stroke="gray" points="4751.24,-11315.55 4760.9,-11319.9 4756.06,-11310.48 4751.24,-11315.55"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" d="M4241.11,-10982.09C4287.46,-11027.48 4410.99,-11150.52 4504,-11262 4521.31,-11282.75 4517.99,-11295.32 4540,-11311 4544.51,-11314.21 4549.41,-11317.05 4554.51,-11319.56"/>
<polygon fill="gray" stroke="gray" points="4553.32,-11322.85 4563.88,-11323.72 4556.16,-11316.46 4553.32,-11322.85"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<g id="a_node60"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Uses the addition chain from &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://briansmith.org/ecc&#45;inversion&#45;addition&#45;chains&#45;01#curve25519_scalar_inversion &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="4704.5,-10982 4551.5,-10982 4551.5,-10946 4704.5,-10946 4704.5,-10982"/>
<text text-anchor="middle" x="4628" y="-10960.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" d="M4273.32,-10964C4340.47,-10964 4459.73,-10964 4541.03,-10964"/>
<polygon fill="gray" stroke="gray" points="4541.24,-10967.5 4551.24,-10964 4541.24,-10960.5 4541.24,-10967.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn non_adjacent_form_random() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..1_000 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = Scalar::random(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for w in &amp;[5, 6, 7, 8] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3510.5,-10864 3301.5,-10864 3301.5,-10828 3510.5,-10828 3510.5,-10864"/>
<text text-anchor="middle" x="3406" y="-10842.3" font-family="Helvetica,sans-Serif" font-size="14.00">non_adjacent_form_random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M3510.57,-10846C3605.54,-10846 3741.65,-10846 3811.26,-10846"/>
<polygon fill="gray" stroke="gray" points="3811.44,-10849.5 3821.44,-10846 3811.44,-10842.5 3811.44,-10849.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_mul_reduction_invariance(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_mul_reduction_invariance().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;fn test_mul_reduction_invariance() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..10 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Also define c that&#39;s clamped. We&#39;ll make sure that clamping doesn&#39;t affect &#160;...">
<polygon fill="white" stroke="black" points="4335,-10540 4108,-10540 4108,-10504 4335,-10504 4335,-10540"/>
<text text-anchor="middle" x="4221.5" y="-10518.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mul_reduction_invariance</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;fn reduce(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = self.unpack(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let xR = UnpackedScalar::mul_internal(&amp;x, &amp;constants::R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x_mod_l = UnpackedScalar::montgomery_reduce(&amp;xR); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4469.5,-10810 4405.5,-10810 4405.5,-10774 4469.5,-10774 4469.5,-10810"/>
<text text-anchor="middle" x="4437.5" y="-10788.3" font-family="Helvetica,sans-Serif" font-size="14.00">reduce</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_mul_reduction_invariance().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_mul_reduction_invariance().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" d="M4322.13,-10540.02C4326.69,-10542.64 4331.02,-10545.61 4335,-10549 4401.46,-10605.59 4425.24,-10712.93 4433.04,-10763.84"/>
<polygon fill="gray" stroke="gray" points="4429.59,-10764.41 4434.47,-10773.81 4436.52,-10763.42 4429.59,-10764.41"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<path fill="none" stroke="gray" d="M4469.57,-10796.91C4551.26,-10811.47 4773.84,-10862.07 4891,-10996 4957.84,-11072.4 4972.76,-11198.99 4976.07,-11255.38"/>
<polygon fill="gray" stroke="gray" points="4972.59,-11255.87 4976.59,-11265.68 4979.58,-11255.52 4972.59,-11255.87"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_montgomery().montgomery_invert().from_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4466,-10945 4409,-10945 4409,-10909 4466,-10909 4466,-10945"/>
<text text-anchor="middle" x="4437.5" y="-10923.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<path fill="none" stroke="gray" d="M4250.28,-10628.67C4276,-10629.05 4313.43,-10634 4335,-10657 4384.98,-10710.3 4335.6,-10751.26 4363,-10819 4375.39,-10849.63 4397.47,-10880.37 4414.21,-10901.17"/>
<polygon fill="gray" stroke="gray" points="4411.51,-10903.4 4420.56,-10908.91 4416.92,-10898.96 4411.51,-10903.4"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn square_multiply(y: &amp;mut UnpackedScalar, squarings: usize, x: &amp;UnpackedScalar) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..squarings { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*y = y.montgomery_square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*y ...">
<polygon fill="white" stroke="black" points="3469.5,-11134 3342.5,-11134 3342.5,-11098 3469.5,-11098 3469.5,-11134"/>
<text text-anchor="middle" x="3406" y="-11112.3" font-family="Helvetica,sans-Serif" font-size="14.00">square_multiply</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" d="M3469.76,-11114.66C3516.46,-11117.26 3578.1,-11128.94 3614,-11169 3673.02,-11234.86 3590.25,-11294.28 3642,-11366 3810.05,-11598.91 3933.29,-11654 4220.5,-11654 4220.5,-11654 4220.5,-11654 4438.5,-11654 4562.12,-11654 4625.83,-11719.56 4716,-11635 4804.31,-11552.19 4677.4,-11460.34 4752,-11365 4752.49,-11364.38 4752.99,-11363.77 4753.51,-11363.17"/>
<polygon fill="gray" stroke="gray" points="4756.08,-11365.57 4761.04,-11356.21 4751.32,-11360.43 4756.08,-11365.57"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix_iter().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix_iter().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" d="M4298.81,-10756.05C4310.93,-10758.99 4323.32,-10762.04 4335,-10765 4354.99,-10770.06 4377.12,-10775.91 4395.6,-10780.88"/>
<polygon fill="gray" stroke="gray" points="4394.89,-10784.31 4405.46,-10783.53 4396.71,-10777.55 4394.89,-10784.31"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;pub fn hash_from_bytes&lt;D&gt;(input: &amp;[u8]) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash = D::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hash.update(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::fr...">
<polygon fill="white" stroke="black" points="3473,-10756 3339,-10756 3339,-10720 3473,-10720 3473,-10756"/>
<text text-anchor="middle" x="3406" y="-10734.3" font-family="Helvetica,sans-Serif" font-size="14.00">hash_from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;pub fn from_hash&lt;D&gt;(hash: D) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut output = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output.copy_from_slice(hash.finalize().as_slice()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3901.5,-10702 3812.5,-10702 3812.5,-10666 3901.5,-10666 3901.5,-10702"/>
<text text-anchor="middle" x="3857" y="-10680.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" d="M3473.25,-10730.03C3562.5,-10719.3 3719.63,-10700.4 3802.06,-10690.49"/>
<polygon fill="gray" stroke="gray" points="3802.71,-10693.93 3812.22,-10689.27 3801.87,-10686.98 3802.71,-10693.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" d="M4309.21,-10588.74C4318.46,-10592.39 4327.28,-10597.05 4335,-10603 4388.71,-10644.4 4417.36,-10722.51 4429.43,-10764.18"/>
<polygon fill="gray" stroke="gray" points="4426.09,-10765.24 4432.15,-10773.94 4432.84,-10763.37 4426.09,-10765.24"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" d="M4636.8,-10982.21C4652.79,-11019.85 4689.94,-11109.16 4716,-11186 4734.57,-11240.75 4713.11,-11268.22 4752,-11311 4752.77,-11311.85 4753.58,-11312.68 4754.41,-11313.48"/>
<polygon fill="gray" stroke="gray" points="4752.55,-11316.47 4762.54,-11320 4756.93,-11311.01 4752.55,-11316.47"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;pub fn from_canonical_bytes(bytes: [u8; 32]) &#45;&gt; CtOption&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let high_bit_unset = (bytes[31] &gt;&gt; 7).ct_eq(&amp;0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let candidate = Scalar { bytes }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtOption::new(candidat...">
<polygon fill="white" stroke="black" points="3940,-10810 3774,-10810 3774,-10774 3940,-10774 3940,-10810"/>
<text text-anchor="middle" x="3857" y="-10788.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_canonical_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;fn is_canonical(&amp;self) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.ct_eq(&amp;self.reduce()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4271.5,-10810 4171.5,-10810 4171.5,-10774 4271.5,-10774 4271.5,-10810"/>
<text text-anchor="middle" x="4221.5" y="-10788.3" font-family="Helvetica,sans-Serif" font-size="14.00">is_canonical</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().</title>
<path fill="none" stroke="gray" d="M3940.26,-10792C4007.59,-10792 4101.23,-10792 4161.35,-10792"/>
<polygon fill="gray" stroke="gray" points="4161.44,-10795.5 4171.44,-10792 4161.44,-10788.5 4161.44,-10795.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`&amp;Scalar`][`Mul&lt;&amp;Scalar&gt;`]mul(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`&amp;Scalar`][`Mul&lt;&amp;Scalar&gt;`]mul().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;fn mul(self, _rhs: &amp;&#39;b Scalar) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScalar::mul(&amp;self.unpack(), &amp;_rhs.unpack()).pack() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3433,-11080 3379,-11080 3379,-11044 3433,-11044 3433,-11080"/>
<text text-anchor="middle" x="3406" y="-11058.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`&amp;Scalar`][`Mul&lt;&amp;Scalar&gt;`]mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`&amp;Scalar`][`Mul&lt;&amp;Scalar&gt;`]mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul().</title>
<path fill="none" stroke="gray" d="M3433,-11056.65C3476.73,-11049.33 3564.99,-11041.93 3614,-11089 3667.02,-11139.92 3585.91,-11204.5 3642,-11252 3664.77,-11271.28 4691.84,-11239.5 4716,-11257 4756.98,-11286.68 4717.2,-11328.28 4752,-11365 4760.72,-11374.21 4772.98,-11380.33 4784.71,-11384.38"/>
<polygon fill="gray" stroke="gray" points="4783.77,-11387.75 4794.36,-11387.32 4785.81,-11381.06 4783.77,-11387.75"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/square(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/square().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;fn square() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected = X * X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let actual = X.unpack().square().pack(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(expected[i] == actual[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3438,-10972 3374,-10972 3374,-10936 3438,-10936 3438,-10972"/>
<text text-anchor="middle" x="3406" y="-10950.3" font-family="Helvetica,sans-Serif" font-size="14.00">square</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/square().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square(). -->
<g id="edge447" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/square().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]square().</title>
<path fill="none" stroke="gray" d="M3438.25,-10947.67C3483.63,-10940.47 3567.45,-10935.04 3614,-10981 3676.31,-11042.51 3576.1,-11118.35 3642,-11176 3731.82,-11254.58 4605.23,-11141.59 4716,-11186 4752.14,-11200.49 4783.16,-11233.9 4801.8,-11257.68"/>
<polygon fill="gray" stroke="gray" points="4799.02,-11259.81 4807.87,-11265.64 4804.59,-11255.57 4799.02,-11259.81"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar][`MulAssign&lt;&amp;Scalar&gt;`]mul_assign(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar][`MulAssign&lt;&amp;Scalar&gt;`]mul_assign().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;fn mul_assign(&amp;mut self, _rhs: &amp;&#39;b Scalar) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*self = UnpackedScalar::mul(&amp;self.unpack(), &amp;_rhs.unpack()).pack(); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3453.5,-11026 3358.5,-11026 3358.5,-10990 3453.5,-10990 3453.5,-11026"/>
<text text-anchor="middle" x="3406" y="-11004.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul_assign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar][`MulAssign&lt;&amp;Scalar&gt;`]mul_assign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul(). -->
<g id="edge497" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar][`MulAssign&lt;&amp;Scalar&gt;`]mul_assign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul().</title>
<path fill="none" stroke="gray" d="M3453.59,-10999.7C3500.54,-10994.23 3571.91,-10994.33 3614,-11035 3668.76,-11087.9 3584.93,-11153.61 3642,-11204 3731.53,-11283.05 4621.46,-11174.03 4716,-11247 4759.4,-11280.5 4714.8,-11324.72 4752,-11365 4760.61,-11374.32 4772.83,-11380.47 4784.58,-11384.51"/>
<polygon fill="gray" stroke="gray" points="4783.65,-11387.88 4794.24,-11387.43 4785.68,-11381.18 4783.65,-11387.88"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/canonical_decoding(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/canonical_decoding().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;fn canonical_decoding() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// canonical encoding of 1667457891 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let canonical_bytes = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;99, 99, 99, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...">
<polygon fill="white" stroke="black" points="3482,-10810 3330,-10810 3330,-10774 3482,-10774 3482,-10810"/>
<text text-anchor="middle" x="3406" y="-10788.3" font-family="Helvetica,sans-Serif" font-size="14.00">canonical_decoding</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/canonical_decoding().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge545" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/canonical_decoding().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="gray" d="M3482.15,-10792C3559.56,-10792 3680.32,-10792 3763.54,-10792"/>
<polygon fill="gray" stroke="gray" points="3763.75,-10795.5 3773.75,-10792 3763.75,-10788.5 3763.75,-10795.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;fn montgomery_reduce_matches_from_bytes_mod_order_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bignum = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// set bignum = x + 2^256x &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[i] = X[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4072,-11134 3642,-11134 3642,-11098 4072,-11098 4072,-11134"/>
<text text-anchor="middle" x="3857" y="-11112.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_reduce_matches_from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="edge587" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<path fill="none" stroke="gray" d="M4013.69,-11097.98C4033.36,-11095.23 4053.18,-11092.22 4072,-11089 4235.39,-11061.04 4270.74,-11010 4436.5,-11010 4436.5,-11010 4436.5,-11010 4629,-11010 4753.64,-11010 4798.81,-11026.13 4891,-11110 4935.09,-11150.11 4959.31,-11217.85 4970.07,-11255.9"/>
<polygon fill="gray" stroke="gray" points="4966.75,-11257.06 4972.75,-11265.8 4973.51,-11255.23 4966.75,-11257.06"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge589" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" d="M3887.65,-11134.03C3980.87,-11190.18 4277.5,-11364.61 4540,-11473 4544.63,-11474.91 4549.45,-11476.77 4554.34,-11478.54"/>
<polygon fill="gray" stroke="gray" points="4553.2,-11481.85 4563.79,-11481.87 4555.52,-11475.25 4553.2,-11481.85"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge588" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M4062.11,-11097.96C4065.57,-11095.21 4068.87,-11092.23 4072,-11089 4130.75,-11028.43 4052.67,-10774.71 4108,-10711 4108.63,-10710.27 4109.28,-10709.56 4109.95,-10708.86"/>
<polygon fill="gray" stroke="gray" points="4112.45,-10711.32 4117.61,-10702.07 4107.81,-10706.09 4112.45,-10711.32"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;fn from_bytes_mod_order_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bignum = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// set bignum = x + 2^256x &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[i] = X[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[32 + i] = X[i]; &#160;&#160;...">
<polygon fill="white" stroke="black" points="3964,-10972 3750,-10972 3750,-10936 3964,-10936 3964,-10972"/>
<text text-anchor="middle" x="3857" y="-10950.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge594" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M3964.22,-10965.33C4002.75,-10963.64 4043.72,-10954.18 4072,-10927 4142.17,-10859.56 4041.65,-10782.2 4108,-10711 4108.66,-10710.29 4109.33,-10709.6 4110.02,-10708.93"/>
<polygon fill="gray" stroke="gray" points="4112.48,-10711.44 4117.9,-10702.33 4107.99,-10706.07 4112.48,-10711.44"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge656" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" d="M4452.91,-10945.1C4468.29,-10965.46 4492.04,-11000.11 4504,-11034 4545.32,-11151.07 4460.06,-11216.01 4540,-11311 4544.14,-11315.92 4549.17,-11319.96 4554.69,-11323.28"/>
<polygon fill="gray" stroke="gray" points="4553.22,-11326.46 4563.71,-11327.91 4556.41,-11320.23 4553.22,-11326.46"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge657" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" d="M4466.31,-10932.46C4486.29,-10936.38 4514.36,-10941.89 4541.47,-10947.21"/>
<polygon fill="gray" stroke="gray" points="4540.91,-10950.67 4551.39,-10949.16 4542.26,-10943.8 4540.91,-10950.67"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;fn fuzzer_testcase_reduction() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// LE bytes of 24519928653854221733733552434404946937899825954937634815 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_bytes = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;255, 255, 255, 255, 255, 255, 255, 255, 255, 25...">
<polygon fill="white" stroke="black" points="3955.5,-10648 3758.5,-10648 3758.5,-10612 3955.5,-10612 3955.5,-10648"/>
<text text-anchor="middle" x="3857" y="-10626.3" font-family="Helvetica,sans-Serif" font-size="14.00">fuzzer_testcase_reduction</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge664" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M3955.63,-10641.18C3992.2,-10645.67 4034.06,-10651.16 4072,-10657 4086.1,-10659.17 4100.92,-10661.64 4115.51,-10664.18"/>
<polygon fill="gray" stroke="gray" points="4115.11,-10667.66 4125.57,-10665.95 4116.32,-10660.77 4115.11,-10667.66"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge665" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="gray" d="M3955.63,-10618.82C3992.2,-10614.33 4034.06,-10608.84 4072,-10603 4088.78,-10600.42 4106.58,-10597.41 4123.8,-10594.37"/>
<polygon fill="gray" stroke="gray" points="4124.64,-10597.77 4133.86,-10592.57 4123.4,-10590.88 4124.64,-10597.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge676" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" d="M4271.6,-10792C4308.84,-10792 4359.47,-10792 4394.76,-10792"/>
<polygon fill="gray" stroke="gray" points="4395.19,-10795.5 4405.19,-10792 4395.19,-10788.5 4395.19,-10795.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge733" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M3901.73,-10684C3951.62,-10684 4035.25,-10684 4104.33,-10684"/>
<polygon fill="gray" stroke="gray" points="4104.41,-10687.5 4114.41,-10684 4104.41,-10680.5 4104.41,-10687.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge738" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M3892.71,-10851.99C3939.01,-10857.9 4021.06,-10860.81 4072,-10819 4111.11,-10786.9 4070.71,-10745.2 4108,-10711 4109.13,-10709.96 4110.3,-10708.96 4111.5,-10707.99"/>
<polygon fill="gray" stroke="gray" points="4113.64,-10710.77 4119.79,-10702.14 4109.6,-10705.05 4113.64,-10710.77"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;fn verify_strict(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng: ThreadRng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let keypair: SigningKey = SigningKey::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let msg: &amp;[u8] = b&#39; &#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3019,-8643 2921,-8643 2921,-8607 3019,-8607 3019,-8643"/>
<text text-anchor="middle" x="2970" y="-8621.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_strict</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;pub fn generate&lt;R: CryptoRngCore + ?Sized&gt;(csprng: &amp;mut R) &#45;&gt; SigningKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut secret = SecretKey::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut secret); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_bytes(&amp;secret) ...">
<polygon fill="white" stroke="black" points="3445.5,-8834 3366.5,-8834 3366.5,-8798 3445.5,-8798 3445.5,-8834"/>
<text text-anchor="middle" x="3406" y="-8812.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate().</title>
<path fill="none" stroke="gray" d="M3019.22,-8625.24C3060.53,-8626.91 3120.96,-8632.86 3170,-8652 3254.47,-8684.96 3337.77,-8754.11 3378.76,-8791.22"/>
<polygon fill="gray" stroke="gray" points="3376.41,-8793.81 3386.15,-8797.98 3381.13,-8788.64 3376.41,-8793.81"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/key_generation(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/key_generation().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn key_generation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng: ThreadRng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Ed25519 keypair generation&#39; , move |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b.iter(|| SigningKey::gene...">
<polygon fill="white" stroke="black" points="3031,-8589 2909,-8589 2909,-8553 3031,-8553 3031,-8589"/>
<text text-anchor="middle" x="2970" y="-8567.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_generation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/key_generation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/key_generation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate().</title>
<path fill="none" stroke="gray" d="M3031.14,-8569.82C3072.07,-8571.21 3126.5,-8577.45 3170,-8598 3265.92,-8643.32 3349.3,-8742.03 3385.62,-8789.48"/>
<polygon fill="gray" stroke="gray" points="3383.03,-8791.86 3391.85,-8797.72 3388.61,-8787.64 3383.03,-8791.86"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/sign(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/sign().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;fn sign(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng: ThreadRng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let keypair: SigningKey = SigningKey::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let msg: &amp;[u8] = b&#39; &#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench...">
<polygon fill="white" stroke="black" points="2997,-8751 2943,-8751 2943,-8715 2997,-8715 2997,-8751"/>
<text text-anchor="middle" x="2970" y="-8729.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate(). -->
<g id="edge592" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate().</title>
<path fill="none" stroke="gray" d="M2997.17,-8738.01C3068.09,-8751.57 3264.8,-8789.19 3356.62,-8806.75"/>
<polygon fill="gray" stroke="gray" points="3356.01,-8810.2 3366.49,-8808.64 3357.33,-8803.32 3356.01,-8810.2"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify().</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;fn verify(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng: ThreadRng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let keypair: SigningKey = SigningKey::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let msg: &amp;[u8] = b&#39; &#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let si...">
<polygon fill="white" stroke="black" points="2998,-8697 2942,-8697 2942,-8661 2998,-8661 2998,-8697"/>
<text text-anchor="middle" x="2970" y="-8675.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate(). -->
<g id="edge725" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate().</title>
<path fill="none" stroke="gray" d="M2998.26,-8680.09C3037.1,-8682.23 3110.3,-8688.42 3170,-8706 3241.96,-8727.19 3319.74,-8767.36 3365.32,-8792.85"/>
<polygon fill="gray" stroke="gray" points="3363.84,-8796.03 3374.27,-8797.89 3367.28,-8789.93 3363.84,-8796.03"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node77"><a xlink:title=" &#160;&#160;&#160;fn try_from(bytes: &amp;[u8]) &#45;&gt; Result&lt;Self, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_slice(bytes) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3007.5,-7567 2932.5,-7567 2932.5,-7531 3007.5,-7531 3007.5,-7567"/>
<text text-anchor="middle" x="2970" y="-7545.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_slice(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_slice().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;pub fn from_slice(bytes: &amp;[u8]) &#45;&gt; Result&lt;Self, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Try to coerce bytes to a [u8; 64] &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes.try_into().map(Self::from_bytes).map_err(|_| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;InternalErro...">
<polygon fill="white" stroke="black" points="3449,-7567 3363,-7567 3363,-7531 3449,-7531 3449,-7567"/>
<text text-anchor="middle" x="3406" y="-7545.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_slice</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_slice(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_slice().</title>
<path fill="none" stroke="gray" d="M3007.63,-7549C3084.69,-7549 3263.77,-7549 3352.81,-7549"/>
<polygon fill="gray" stroke="gray" points="3352.95,-7552.5 3362.95,-7549 3352.95,-7545.5 3352.95,-7552.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;fn sign_verify_nonspec() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Generate the keypair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let esk = ExpandedSecretKey::random(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vk = VerifyingKey::from(&amp;esk); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let msg = ...">
<polygon fill="white" stroke="black" points="3048.5,-7648 2891.5,-7648 2891.5,-7612 3048.5,-7612 3048.5,-7648"/>
<text text-anchor="middle" x="2970" y="-7626.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign_verify_nonspec</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/impl#[ExpandedSecretKey]random(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/impl#[ExpandedSecretKey]random().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn random&lt;R: RngCore + CryptoRng&gt;(mut rng: R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.fill_bytes(&amp;mut bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ExpandedSecretKey::from_bytes(&amp;bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3441.5,-7675 3370.5,-7675 3370.5,-7639 3441.5,-7639 3441.5,-7675"/>
<text text-anchor="middle" x="3406" y="-7653.3" font-family="Helvetica,sans-Serif" font-size="14.00">random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/impl#[ExpandedSecretKey]random(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/impl#[ExpandedSecretKey]random().</title>
<path fill="none" stroke="gray" d="M3048.59,-7634.83C3139.34,-7640.47 3286.49,-7649.63 3360.09,-7654.21"/>
<polygon fill="gray" stroke="gray" points="3360.2,-7657.72 3370.4,-7654.85 3360.64,-7650.73 3360.2,-7657.72"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().</title>
<g id="a_node80"><a xlink:title="pub fn raw_sign&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;esk: &amp;ExpandedSecretKey, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Signature where &#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, { &#160;&#160;&#160;&#160;esk.raw_sign::&lt;CtxDig...">
<polygon fill="white" stroke="black" points="3445,-7621 3367,-7621 3367,-7585 3445,-7585 3445,-7621"/>
<text text-anchor="middle" x="3406" y="-7599.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().</title>
<path fill="none" stroke="gray" d="M3048.59,-7625.17C3138.01,-7619.61 3282.2,-7610.64 3356.81,-7606"/>
<polygon fill="gray" stroke="gray" points="3357.1,-7609.49 3366.87,-7605.37 3356.67,-7602.5 3357.1,-7609.49"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(bytes: &amp;[u8; 64]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO: Use bytes.split_array_ref once it’s in MSRV. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash_prefix: [u8; ...">
<polygon fill="white" stroke="black" points="3904,-7675 3810,-7675 3810,-7639 3904,-7639 3904,-7675"/>
<text text-anchor="middle" x="3857" y="-7653.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/impl#[ExpandedSecretKey]random().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/impl#[ExpandedSecretKey]random().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M3441.86,-7657C3519.11,-7657 3705.32,-7657 3799.47,-7657"/>
<polygon fill="gray" stroke="gray" points="3799.66,-7660.5 3809.66,-7657 3799.66,-7653.5 3799.66,-7660.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_sign&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, &#160;&#160;&#160;&#160;) &#45;&gt; Signature &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3445,-9050 3367,-9050 3367,-9014 3445,-9014 3445,-9050"/>
<text text-anchor="middle" x="3406" y="-9028.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="edge506" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<path fill="none" stroke="gray" d="M3366.92,-7594.16C3312.68,-7584.5 3217.49,-7577.66 3184,-7639 3165.94,-7672.08 3165.94,-8962.92 3184,-8996 3215.53,-9053.75 3301.74,-9051.07 3356.98,-9042.49"/>
<polygon fill="gray" stroke="gray" points="3357.63,-9045.94 3366.92,-9040.84 3356.48,-9039.03 3357.63,-9045.94"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge662" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="gray" d="M3862.61,-7675.1C3889.3,-7780.79 4024.37,-8329.13 4072,-8786 4077.08,-8834.72 4077.28,-10510.85 4108,-10549 4112.72,-10554.86 4118.47,-10559.59 4124.84,-10563.38"/>
<polygon fill="gray" stroke="gray" points="4123.39,-10566.57 4133.88,-10568 4126.57,-10560.33 4123.39,-10566.57"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_slice().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes(). -->
<g id="edge740" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_slice().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M3449.05,-7552.09C3491.18,-7555.74 3557.67,-7563.03 3614,-7576 3679.77,-7591.15 3752.97,-7616.95 3801.45,-7635.36"/>
<polygon fill="gray" stroke="gray" points="3800.22,-7638.64 3810.81,-7638.94 3802.72,-7632.1 3800.22,-7638.64"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().</title>
<g id="a_node83"><a xlink:title="fn check_scalar(bytes: [u8; 32]) &#45;&gt; Result&lt;Scalar, SignatureError&gt; { &#160;&#160;&#160;&#160;match Scalar::from_canonical_bytes(bytes).into() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(InternalError::ScalarFormat.into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(x) =&gt; ...">
<polygon fill="white" stroke="black" points="3458.5,-9133 3353.5,-9133 3353.5,-9097 3458.5,-9097 3458.5,-9133"/>
<text text-anchor="middle" x="3406" y="-9111.3" font-family="Helvetica,sans-Serif" font-size="14.00">check_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="gray" d="M3446.23,-9133.22C3495.73,-9158.63 3578.66,-9209.84 3614,-9282 3650.24,-9356.01 3586.92,-10703.71 3642,-10765 3671.9,-10798.27 3720.48,-10806.37 3763.81,-10805.55"/>
<polygon fill="gray" stroke="gray" points="3763.96,-10809.04 3773.83,-10805.2 3763.71,-10802.05 3763.96,-10809.04"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;fn try_from(sig: &amp;ed25519::Signature) &#45;&gt; Result&lt;InternalSignature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;InternalSignature::from_bytes(&amp;sig.to_bytes()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2602.5,-9133 2527.5,-9133 2527.5,-9097 2602.5,-9097 2602.5,-9133"/>
<text text-anchor="middle" x="2565" y="-9111.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(bytes: &amp;[u8; SIGNATURE_LENGTH]) &#45;&gt; Result&lt;InternalSignature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO: Use bytes.split_array_ref once it’s in MSRV. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut R_bytes: [u8; 32] =...">
<polygon fill="white" stroke="black" points="3017,-9133 2923,-9133 2923,-9097 3017,-9097 3017,-9133"/>
<text text-anchor="middle" x="2970" y="-9111.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().</title>
<path fill="none" stroke="gray" d="M2602.83,-9115C2673.62,-9115 2829.05,-9115 2912.84,-9115"/>
<polygon fill="gray" stroke="gray" points="2912.94,-9118.5 2922.94,-9115 2912.94,-9111.5 2912.94,-9118.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().</title>
<path fill="none" stroke="gray" d="M3017.03,-9115C3095.52,-9115 3255.25,-9115 3343.31,-9115"/>
<polygon fill="gray" stroke="gray" points="3343.42,-9118.5 3353.42,-9115 3343.42,-9111.5 3343.42,-9118.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;fn from(secret_key: &amp;SecretKey) &#45;&gt; ExpandedSecretKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Sha512::default().chain_update(secret_key).finalize(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ExpandedSecretKey::from_bytes(hash.as_ref()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4248.5,-8834 4194.5,-8834 4194.5,-8798 4248.5,-8798 4248.5,-8834"/>
<text text-anchor="middle" x="4221.5" y="-8812.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/impl#[ExpandedSecretKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M4214.82,-8797.83C4173.35,-8665.25 3917.46,-7847.1 3866.73,-7684.92"/>
<polygon fill="gray" stroke="gray" points="3870.02,-7683.7 3863.69,-7675.21 3863.34,-7685.79 3870.02,-7683.7"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(secret_key: &amp;SecretKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let verifying_key = VerifyingKey::from(&amp;ExpandedSecretKey::from(secret_key)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;secret_key: *secret_key, &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3904,-8888 3810,-8888 3810,-8852 3904,-8852 3904,-8888"/>
<text text-anchor="middle" x="3857" y="-8866.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]generate().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M3445.67,-8820.65C3525.22,-8830.22 3707.48,-8852.14 3799.97,-8863.26"/>
<polygon fill="gray" stroke="gray" points="3799.63,-8866.75 3809.98,-8864.46 3800.47,-8859.8 3799.63,-8866.75"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;fn try_sign(&amp;self, message: &amp;[u8]) &#45;&gt; Result&lt;Signature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expanded: ExpandedSecretKey = (&amp;self.secret_key).into(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(expanded.raw_sign::&lt;Sha512&gt;(message, &amp;self...">
<polygon fill="white" stroke="black" points="3006,-9050 2934,-9050 2934,-9014 3006,-9014 3006,-9050"/>
<text text-anchor="middle" x="2970" y="-9028.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<path fill="none" stroke="gray" d="M3006.15,-9032C3083.5,-9032 3268.59,-9032 3356.74,-9032"/>
<polygon fill="gray" stroke="gray" points="3356.74,-9035.5 3366.74,-9032 3356.74,-9028.5 3356.74,-9035.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]to_scalar(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]to_scalar().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;pub fn to_scalar(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Per the spec, the ed25519 secret key sk is expanded to &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;(scalar_bytes, hash_prefix) = SHA&#45;512(sk) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// where the two outputs are ...">
<polygon fill="white" stroke="black" points="3896,-8834 3818,-8834 3818,-8798 3896,-8798 3896,-8834"/>
<text text-anchor="middle" x="3857" y="-8812.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]to_scalar().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]to_scalar().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="gray" d="M3896.11,-8816C3966.16,-8816 4114.54,-8816 4183.65,-8816"/>
<polygon fill="gray" stroke="gray" points="4184.03,-8819.5 4194.03,-8816 4184.03,-8812.5 4184.03,-8819.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" d="M3445.2,-9029.23C3493.19,-9028.11 3574.08,-9034.51 3614,-9085 3668.17,-9153.52 3583.65,-10592 3642,-10657 3681.24,-10700.71 3752.72,-10700.99 3802.21,-10694.66"/>
<polygon fill="gray" stroke="gray" points="3803.01,-10698.08 3812.42,-10693.22 3802.03,-10691.15 3803.01,-10698.08"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;fn try_from(bytes: &amp;[u8]) &#45;&gt; Result&lt;SigningKey, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SecretKey::try_from(bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|bytes| Self::from_bytes(&amp;bytes)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I...">
<polygon fill="white" stroke="black" points="3443.5,-8888 3368.5,-8888 3368.5,-8852 3443.5,-8852 3443.5,-8888"/>
<text text-anchor="middle" x="3406" y="-8866.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M3443.74,-8870C3522.17,-8870 3706.4,-8870 3799.71,-8870"/>
<polygon fill="gray" stroke="gray" points="3799.82,-8873.5 3809.82,-8870 3799.82,-8866.5 3799.82,-8873.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`From&lt;[u8; SECRET_KEY_LENGTH]&gt;`]from(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`From&lt;[u8; SECRET_KEY_LENGTH]&gt;`]from().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;fn from(secret: SecretKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_bytes(&amp;secret) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3433,-8996 3379,-8996 3379,-8960 3433,-8960 3433,-8996"/>
<text text-anchor="middle" x="3406" y="-8974.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`From&lt;[u8; SECRET_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`From&lt;[u8; SECRET_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M3433.1,-8976.22C3472.64,-8973.16 3549.9,-8965.76 3614,-8951 3679.77,-8935.85 3752.97,-8910.05 3801.45,-8891.64"/>
<polygon fill="gray" stroke="gray" points="3802.72,-8894.9 3810.81,-8888.06 3800.22,-8888.36 3802.72,-8894.9"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn from(secret: &amp;SecretKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_bytes(secret) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3433,-8942 3379,-8942 3379,-8906 3433,-8906 3433,-8942"/>
<text text-anchor="middle" x="3406" y="-8920.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M3433.08,-8920.86C3504.03,-8912.33 3701.76,-8888.55 3799.64,-8876.78"/>
<polygon fill="gray" stroke="gray" points="3800.13,-8880.24 3809.64,-8875.58 3799.3,-8873.29 3800.13,-8880.24"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey][`From&lt;&amp;[u8; SECRET_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="gray" d="M3904.02,-8864.93C3947.43,-8859.97 4014.26,-8851.88 4072,-8843 4110.46,-8837.08 4154.26,-8828.95 4184.28,-8823.15"/>
<polygon fill="gray" stroke="gray" points="4185.13,-8826.55 4194.28,-8821.21 4183.8,-8819.68 4185.13,-8826.55"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_keypair_bytes(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_keypair_bytes().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;pub fn from_keypair_bytes(bytes: &amp;[u8; 64]) &#45;&gt; Result&lt;SigningKey, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (secret_key, verifying_key) = bytes.split_at(SECRET_KEY_LENGTH); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signing_key = SigningKe...">
<polygon fill="white" stroke="black" points="3046,-8888 2894,-8888 2894,-8852 3046,-8852 3046,-8888"/>
<text text-anchor="middle" x="2970" y="-8866.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_keypair_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_keypair_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge520" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_keypair_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M3046.1,-8870C3135.89,-8870 3283.4,-8870 3358.26,-8870"/>
<polygon fill="gray" stroke="gray" points="3358.33,-8873.5 3368.33,-8870 3358.33,-8866.5 3358.33,-8873.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="white" stroke="black" points="2181,-8072 2093,-8072 2093,-8036 2181,-8036 2181,-8072"/>
<text text-anchor="middle" x="2137" y="-8050.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M2181.05,-8045.38C2232.48,-8037.81 2317.85,-8034.27 2368,-8081 2406.46,-8116.84 2534.25,-8924.38 2559.6,-9086.72"/>
<polygon fill="gray" stroke="gray" points="2556.19,-9087.53 2561.19,-9096.88 2563.1,-9086.46 2556.19,-9087.53"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="white" stroke="black" points="2618.5,-8126 2511.5,-8126 2511.5,-8090 2618.5,-8090 2618.5,-8126"/>
<text text-anchor="middle" x="2565" y="-8104.3" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" d="M2181.27,-8058.82C2227.52,-8064.03 2302.99,-8072.71 2368,-8081 2412.57,-8086.69 2462.77,-8093.61 2501.2,-8099.02"/>
<polygon fill="gray" stroke="gray" points="2500.82,-8102.5 2511.21,-8100.44 2501.8,-8095.57 2500.82,-8102.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;pub fn verify_strict( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature = InternalSignature::try_from(signa...">
<polygon fill="white" stroke="black" points="2186,-8126 2088,-8126 2088,-8090 2186,-8090 2186,-8126"/>
<text text-anchor="middle" x="2137" y="-8104.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_strict</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M2145.76,-8126.34C2197.29,-8248.16 2490.04,-8940.17 2552.34,-9087.44"/>
<polygon fill="gray" stroke="gray" points="2549.15,-9088.87 2556.27,-9096.72 2555.59,-9086.14 2549.15,-9088.87"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" d="M2186.04,-8108C2263.41,-8108 2415.59,-8108 2501.36,-8108"/>
<polygon fill="gray" stroke="gray" points="2501.49,-8111.5 2511.49,-8108 2501.49,-8104.5 2501.49,-8111.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Dige...">
<polygon fill="white" stroke="black" points="3045.5,-8126 2894.5,-8126 2894.5,-8090 3045.5,-8090 3045.5,-8126"/>
<text text-anchor="middle" x="2970" y="-8104.3" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="edge469" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<path fill="none" stroke="gray" d="M2618.69,-8108C2686.2,-8108 2804.09,-8108 2884.29,-8108"/>
<polygon fill="gray" stroke="gray" points="2884.36,-8111.5 2894.36,-8108 2884.36,-8104.5 2884.36,-8111.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge599" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" d="M3045.65,-8112.84C3213,-8123.87 3604.4,-8150.7 3614,-8161 3661.26,-8211.74 3595.85,-10605.25 3642,-10657 3681.17,-10700.93 3752.91,-10701.09 3802.46,-10694.67"/>
<polygon fill="gray" stroke="gray" points="3802.96,-10698.14 3812.37,-10693.27 3801.97,-10691.21 3802.96,-10698.14"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().</title>
<g id="a_node100"><a xlink:title=" &#160;&#160;&#160;fn repudiation() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message1 = b&#39; Send 100 USD to Alice&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message2 = b&#39; Send 100000 USD to Alice&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s: Scalar = non_null_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pubkey = WEA...">
<polygon fill="white" stroke="black" points="1732.5,-7614 1637.5,-7614 1637.5,-7578 1732.5,-7578 1732.5,-7614"/>
<text text-anchor="middle" x="1685" y="-7592.3" font-family="Helvetica,sans-Serif" font-size="14.00">repudiation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" d="M1732.9,-7587.13C1779.09,-7581.41 1848.08,-7581.48 1886,-7623 1920.35,-7660.61 1871.32,-8043.69 1906,-8081 1948.68,-8126.93 2024.71,-8126.92 2077.63,-8119.9"/>
<polygon fill="gray" stroke="gray" points="2078.16,-8123.36 2087.55,-8118.46 2077.15,-8116.43 2078.16,-8123.36"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pub_key: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature_r: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h = Sha512::defa...">
<polygon fill="white" stroke="black" points="2212.5,-7668 2061.5,-7668 2061.5,-7632 2212.5,-7632 2212.5,-7668"/>
<text text-anchor="middle" x="2137" y="-7646.3" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().</title>
<path fill="none" stroke="gray" d="M1732.77,-7601.81C1777.3,-7607.33 1846.21,-7615.82 1906,-7623 1954.14,-7628.78 2007.97,-7635.11 2051.45,-7640.18"/>
<polygon fill="gray" stroke="gray" points="2051.07,-7643.66 2061.41,-7641.34 2051.88,-7636.71 2051.07,-7643.66"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;fn non_null_scalar() &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s_candidate = Scalar::random(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while s_candidate == Scalar::ZERO { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s_candidat...">
<polygon fill="white" stroke="black" points="2198.5,-7614 2075.5,-7614 2075.5,-7578 2198.5,-7578 2198.5,-7614"/>
<text text-anchor="middle" x="2137" y="-7592.3" font-family="Helvetica,sans-Serif" font-size="14.00">non_null_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().</title>
<path fill="none" stroke="gray" d="M1732.88,-7596C1811.97,-7596 1972.33,-7596 2065.19,-7596"/>
<polygon fill="gray" stroke="gray" points="2065.34,-7599.5 2075.34,-7596 2065.34,-7592.5 2065.34,-7599.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" d="M2212.73,-7643.92C2257.92,-7639.58 2316.55,-7632.76 2368,-7623 2644.13,-7570.62 3414.41,-7208.12 3614,-7406 3678.13,-7469.58 3581.98,-10589.52 3642,-10657 3681.12,-10700.98 3752.87,-10701.13 3802.43,-10694.7"/>
<polygon fill="gray" stroke="gray" points="3802.94,-10698.16 3812.35,-10693.29 3801.95,-10691.23 3802.94,-10698.16"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;fn against_reference_implementation() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TestGolden &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut line: String; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut lineno: usize = 0; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let f = File::open(&#39; TESTVECTORS&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if f.is_err() {...">
<polygon fill="white" stroke="black" points="1812.5,-7668 1557.5,-7668 1557.5,-7632 1812.5,-7632 1812.5,-7668"/>
<text text-anchor="middle" x="1685" y="-7646.3" font-family="Helvetica,sans-Serif" font-size="14.00">against_reference_implementation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M1785.05,-7668.01C1918.73,-7689.14 2163.69,-7716.57 2368,-7677 2930.87,-7568 3204.83,-6941.4 3614,-7343 3673.48,-7401.38 3586.3,-8781 3642,-8843 3680.55,-8885.91 3750.19,-8886.95 3799.55,-8880.98"/>
<polygon fill="gray" stroke="gray" points="3800.31,-8884.41 3809.76,-8879.61 3799.38,-8877.47 3800.31,-8884.41"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" d="M1689.08,-7668.29C1701.59,-7736.31 1755.32,-7976.17 1906,-8081 1956.17,-8115.91 2027.87,-8118.88 2077.83,-8115.53"/>
<polygon fill="gray" stroke="gray" points="2078.13,-8119.02 2087.83,-8114.76 2077.59,-8112.04 2078.13,-8119.02"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" d="M2152.18,-7577.87C2190.2,-7528.75 2296.38,-7388.27 2368,-7261 2562.13,-6916.02 2628.94,-6830.66 2734,-6449 2748.54,-6396.17 2721.11,-6240.48 2762,-6204 2897.31,-6083.28 3039.18,-6078.43 3170,-6204 3224.8,-6256.6 3171.36,-6815.87 3198,-6887 3301.68,-7163.84 3514.87,-7127.5 3614,-7406 3629.9,-7450.66 3610.5,-10783.57 3642,-10819 3683.46,-10865.64 3761.63,-10863 3811.14,-10855.47"/>
<polygon fill="gray" stroke="gray" points="3811.95,-10858.89 3821.25,-10853.81 3810.81,-10851.98 3811.95,-10858.89"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().</title>
<g id="a_node104"><a xlink:title="fn ed25519_to_x25519_dh() { &#160;&#160;&#160;&#160;// Keys from RFC8032 test vectors (from section 7.1) &#160;&#160;&#160;&#160;let ed_secret_key_a = hex!(&#39; 9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60&#39; ); &#160;&#160;&#160;&#160;let ed_se...">
<polygon fill="white" stroke="black" points="3498,-7454 3314,-7454 3314,-7418 3498,-7418 3498,-7454"/>
<text text-anchor="middle" x="3406" y="-7432.3" font-family="Helvetica,sans-Serif" font-size="14.00">ed25519_to_x25519_dh</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="gray" d="M3481.9,-7417.96C3621.95,-7389.22 3922.77,-7351.99 4072,-7519 4128.09,-7581.77 4055.5,-10483.21 4108,-10549 4112.69,-10554.88 4118.42,-10559.62 4124.79,-10563.43"/>
<polygon fill="gray" stroke="gray" points="4123.32,-10566.61 4133.82,-10568.05 4126.51,-10560.38 4123.32,-10566.61"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]to_scalar(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]to_scalar().</title>
<path fill="none" stroke="gray" d="M3498.14,-7437.09C3539.38,-7442.53 3585.22,-7456.39 3614,-7489 3646.76,-7526.12 3634.18,-7661.12 3642,-7710 3711.02,-8141.6 3822.63,-8662.53 3849.86,-8787.9"/>
<polygon fill="gray" stroke="gray" points="3846.48,-8788.81 3852.02,-8797.84 3853.32,-8787.32 3846.48,-8788.81"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_to_x25519_dh().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]from_bytes().</title>
<path fill="none" stroke="gray" d="M3498.1,-7435.6C3540.11,-7440.58 3586.63,-7454.48 3614,-7489 3660.75,-7547.95 3591.66,-8787.08 3642,-8843 3680.6,-8885.87 3750.23,-8886.92 3799.57,-8880.96"/>
<polygon fill="gray" stroke="gray" points="3800.33,-8884.39 3809.77,-8879.6 3799.4,-8877.46 3800.33,-8884.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node105"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="642,-6281 378,-6281 378,-6245 642,-6245 642,-6281"/>
<text text-anchor="middle" x="510" y="-6259.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node201"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="1749,-6716 1621,-6716 1621,-6680 1749,-6680 1749,-6716"/>
<text text-anchor="middle" x="1685" y="-6694.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="gray" d="M642.04,-6256.61C724.09,-6255.7 819.49,-6261.34 848,-6290 890.11,-6332.34 828.09,-6513.57 868,-6558 1059.75,-6771.44 1448.61,-6737.14 1610.59,-6711.68"/>
<polygon fill="gray" stroke="gray" points="1611.61,-6715.06 1620.93,-6710.02 1610.5,-6708.15 1611.61,-6715.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node106"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="647,-6173 373,-6173 373,-6137 647,-6137 647,-6173"/>
<text text-anchor="middle" x="510" y="-6151.3" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node209"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="1255,-5758 1077,-5758 1077,-5722 1255,-5722 1255,-5758"/>
<text text-anchor="middle" x="1166" y="-5736.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M647.11,-6161.57C728.07,-6162.26 820.27,-6156.3 848,-6128 900.2,-6074.73 818.44,-5848.73 868,-5793 916.59,-5738.37 1000.49,-5727.56 1066.75,-5729.02"/>
<polygon fill="gray" stroke="gray" points="1066.7,-5732.52 1076.8,-5729.34 1066.92,-5725.52 1066.7,-5732.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node107"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="583.5,-6389 436.5,-6389 436.5,-6353 583.5,-6353 583.5,-6389"/>
<text text-anchor="middle" x="510" y="-6367.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2629,-7812 2501,-7812 2501,-7776 2629,-7776 2629,-7812"/>
<text text-anchor="middle" x="2565" y="-7790.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M583.52,-6366.18C671.55,-6362.07 812.65,-6361.66 848,-6398 907.12,-6458.77 808.39,-6718.71 868,-6779 914.66,-6826.18 1397.86,-6811.6 1464,-6817 1665.21,-6833.43 2230.09,-6759.57 2368,-6907 2433.31,-6976.82 2332.82,-7695.25 2396,-7767 2419.09,-7793.22 2456.7,-7800.98 2490.49,-7801.73"/>
<polygon fill="gray" stroke="gray" points="2490.82,-7805.23 2500.83,-7801.76 2490.84,-7798.23 2490.82,-7805.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node108"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="647,-6065 373,-6065 373,-6029 647,-6029 647,-6065"/>
<text text-anchor="middle" x="510" y="-6043.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node198"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="1252.5,-1577 1079.5,-1577 1079.5,-1541 1252.5,-1541 1252.5,-1577"/>
<text text-anchor="middle" x="1166" y="-1555.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="gray" d="M647.26,-6052.79C728.58,-6052.96 821.12,-6046.25 848,-6017 889.65,-5971.69 826.4,-1631.35 868,-1586 920.02,-1529.3 1011.74,-1529.33 1079.53,-1539.34"/>
<polygon fill="gray" stroke="gray" points="1079.35,-1542.85 1089.77,-1540.95 1080.44,-1535.94 1079.35,-1542.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node109"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="609.5,-6443 410.5,-6443 410.5,-6407 609.5,-6407 609.5,-6443"/>
<text text-anchor="middle" x="510" y="-6421.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node208"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="1720.5,-7199 1649.5,-7199 1649.5,-7163 1720.5,-7163 1720.5,-7199"/>
<text text-anchor="middle" x="1685" y="-7177.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="gray" d="M609.62,-6419.16C697.13,-6416.35 815.94,-6419.12 848,-6452 876.36,-6481.08 843.44,-6784.65 868,-6817 1037.13,-7039.76 1216.01,-6889.66 1464,-7019 1538.95,-7058.09 1616.17,-7121.27 1656.17,-7156.05"/>
<polygon fill="gray" stroke="gray" points="1654.07,-7158.86 1663.9,-7162.82 1658.68,-7153.6 1654.07,-7158.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node110"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="638.5,-6119 381.5,-6119 381.5,-6083 638.5,-6083 638.5,-6119"/>
<text text-anchor="middle" x="510" y="-6097.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node196"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="1257.5,-1631 1074.5,-1631 1074.5,-1595 1257.5,-1595 1257.5,-1631"/>
<text text-anchor="middle" x="1166" y="-1609.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge466" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="gray" d="M638.67,-6107.95C721.9,-6109.38 820.06,-6104.13 848,-6074 889.63,-6029.11 828.59,-1712.85 868,-1666 914.66,-1610.53 997.67,-1599.54 1064.09,-1601.16"/>
<polygon fill="gray" stroke="gray" points="1064.07,-1604.66 1074.19,-1601.5 1064.31,-1597.66 1064.07,-1604.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node111"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="597,-6497 423,-6497 423,-6461 597,-6461 597,-6497"/>
<text text-anchor="middle" x="510" y="-6475.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node207"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1193,-7064 1139,-7064 1139,-7028 1193,-7028 1193,-7064"/>
<text text-anchor="middle" x="1166" y="-7042.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge675" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M597.32,-6473.55C685.64,-6470.05 814.54,-6471.41 848,-6506 881.1,-6540.22 840.01,-6895.49 868,-6934 929.68,-7018.88 1063.9,-7039.45 1128.64,-7044.43"/>
<polygon fill="gray" stroke="gray" points="1128.57,-7047.93 1138.78,-7045.12 1129.04,-7040.95 1128.57,-7047.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node112"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="595,-6551 425,-6551 425,-6515 595,-6515 595,-6551"/>
<text text-anchor="middle" x="510" y="-6529.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node204"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="1193,-7118 1139,-7118 1139,-7082 1193,-7082 1193,-7118"/>
<text text-anchor="middle" x="1166" y="-7096.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge729" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M595.09,-6519.54C673.04,-6512.36 786.04,-6516.47 848,-6586 884.03,-6626.43 830.67,-7033.77 868,-7073 935.62,-7144.06 1065.81,-7124.73 1128.93,-7109.88"/>
<polygon fill="gray" stroke="gray" points="1129.95,-7113.24 1138.83,-7107.46 1128.28,-7106.44 1129.95,-7113.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node113"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="604,-6227 416,-6227 416,-6191 604,-6191 604,-6227"/>
<text text-anchor="middle" x="510" y="-6205.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node202"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2164,-6662 2110,-6662 2110,-6626 2164,-6626 2164,-6662"/>
<text text-anchor="middle" x="2137" y="-6640.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge744" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="gray" d="M604.1,-6203.45C691.96,-6200.44 815.01,-6202.69 848,-6236 892.52,-6280.95 822.64,-6475.9 868,-6520 908.58,-6559.46 1830.29,-6552.99 1886,-6563 1964.77,-6577.15 2052.97,-6609.94 2100.69,-6629.18"/>
<polygon fill="gray" stroke="gray" points="2099.38,-6632.43 2109.97,-6632.95 2102.02,-6625.94 2099.38,-6632.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node114"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="583,-6335 437,-6335 437,-6299 583,-6299 583,-6335"/>
<text text-anchor="middle" x="510" y="-6313.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="2640,-7758 2490,-7758 2490,-7722 2640,-7722 2640,-7758"/>
<text text-anchor="middle" x="2565" y="-7736.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge769" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M583.07,-6312.26C671.01,-6308.2 812.39,-6307.81 848,-6344 897.03,-6393.84 820.74,-6606.47 868,-6658 1055.16,-6862.04 1208.32,-6725.28 1484,-6751 1532.93,-6755.56 2330.49,-6751.25 2368,-6783 2515.13,-6907.55 2555.51,-7565.53 2562.71,-7711.36"/>
<polygon fill="gray" stroke="gray" points="2559.23,-7711.88 2563.21,-7721.7 2566.22,-7711.54 2559.23,-7711.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node115"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="2201.5,-6115 2072.5,-6115 2072.5,-6079 2201.5,-6079 2201.5,-6115"/>
<text text-anchor="middle" x="2137" y="-6093.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node254"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="2592,-6252 2538,-6252 2538,-6216 2592,-6216 2592,-6252"/>
<text text-anchor="middle" x="2565" y="-6230.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M2201.91,-6097.8C2248.88,-6099.98 2313.7,-6106.36 2368,-6124 2429.5,-6143.98 2493.51,-6184.19 2531.01,-6210.06"/>
<polygon fill="gray" stroke="gray" points="2529.3,-6213.14 2539.5,-6215.99 2533.3,-6207.4 2529.3,-6213.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node116"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="2203.5,-6169 2070.5,-6169 2070.5,-6133 2203.5,-6133 2203.5,-6169"/>
<text text-anchor="middle" x="2137" y="-6147.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node260"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="2614,-6306 2516,-6306 2516,-6270 2614,-6270 2614,-6306"/>
<text text-anchor="middle" x="2565" y="-6284.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge615" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="gray" d="M2203.71,-6151.41C2253.6,-6154.94 2321.36,-6167.02 2368,-6204 2390.12,-6221.53 2373.31,-6244.22 2396,-6261 2427.24,-6284.1 2470.72,-6290.59 2505.62,-6291.44"/>
<polygon fill="gray" stroke="gray" points="2505.65,-6294.94 2515.68,-6291.54 2505.72,-6287.94 2505.65,-6294.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node117"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="1371,-2723 961,-2723 961,-2687 1371,-2687 1371,-2723"/>
<text text-anchor="middle" x="1166" y="-2701.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node346" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node346"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="1828,-1824 1542,-1824 1542,-1788 1828,-1788 1828,-1824"/>
<text text-anchor="middle" x="1685" y="-1802.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1243.28,-2723.03C1311.56,-2734.14 1409.1,-2736.71 1464,-2678 1496.07,-2643.7 1452.68,-1867.99 1484,-1833 1496.98,-1818.49 1513.75,-1809.01 1532.06,-1803.06"/>
<polygon fill="gray" stroke="gray" points="1533.12,-1806.4 1541.75,-1800.26 1531.17,-1799.67 1533.12,-1806.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node118"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="1307,-2507 1025,-2507 1025,-2471 1307,-2471 1307,-2507"/>
<text text-anchor="middle" x="1166" y="-2485.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node335" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node335"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="1760.5,-994 1609.5,-994 1609.5,-958 1760.5,-958 1760.5,-994"/>
<text text-anchor="middle" x="1685" y="-972.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="gray" d="M1242.76,-2507.04C1311.16,-2518.34 1409.21,-2521.17 1464,-2462 1519.07,-2402.52 1430.23,-1063.67 1484,-1003 1512.12,-971.27 1558.35,-963.5 1599.29,-964.14"/>
<polygon fill="gray" stroke="gray" points="1599.18,-967.64 1609.29,-964.46 1599.41,-960.64 1599.18,-967.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node119"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="1410,-2885 922,-2885 922,-2849 1410,-2849 1410,-2885"/>
<text text-anchor="middle" x="1166" y="-2863.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node351" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node351"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1821,-1986 1549,-1986 1549,-1950 1821,-1950 1821,-1986"/>
<text text-anchor="middle" x="1685" y="-1964.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1243.28,-2885.03C1311.56,-2896.14 1409.1,-2898.71 1464,-2840 1496.07,-2805.7 1452.68,-2029.99 1484,-1995 1498.64,-1978.64 1518.1,-1968.68 1539.13,-1962.95"/>
<polygon fill="gray" stroke="gray" points="1539.99,-1966.34 1548.89,-1960.61 1538.35,-1959.54 1539.99,-1966.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node120"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="1364,-3803 968,-3803 968,-3767 1364,-3767 1364,-3803"/>
<text text-anchor="middle" x="1166" y="-3781.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node341" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node341"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="1712,-4711 1658,-4711 1658,-4675 1712,-4675 1712,-4711"/>
<text text-anchor="middle" x="1685" y="-4689.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M1243.29,-3766.97C1311.56,-3755.85 1409.1,-3753.28 1464,-3812 1496.41,-3846.67 1452.35,-4630.64 1484,-4666 1524.54,-4711.29 1601.98,-4707.6 1647.69,-4700.51"/>
<polygon fill="gray" stroke="gray" points="1648.49,-4703.93 1657.77,-4698.81 1647.32,-4697.02 1648.49,-4703.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node121"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="1325,-3479 1007,-3479 1007,-3443 1325,-3443 1325,-3479"/>
<text text-anchor="middle" x="1166" y="-3457.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node326" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node326"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="2165,-3868 2109,-3868 2109,-3832 2165,-3832 2165,-3868"/>
<text text-anchor="middle" x="2137" y="-3846.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1325.04,-3459.71C1370.99,-3463.48 1420.49,-3471.67 1464,-3488 1477.56,-3493.09 1875.42,-3784.11 1886,-3794 1896.14,-3803.48 1893.86,-3811.26 1906,-3818 1967.1,-3851.95 2050.94,-3854.59 2098.69,-3852.76"/>
<polygon fill="gray" stroke="gray" points="2099.06,-3856.25 2108.88,-3852.28 2098.73,-3849.25 2099.06,-3856.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node122"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="1334,-2831 998,-2831 998,-2795 1334,-2795 1334,-2831"/>
<text text-anchor="middle" x="1166" y="-2809.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node353" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node353"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="1782.5,-1932 1587.5,-1932 1587.5,-1896 1782.5,-1896 1782.5,-1932"/>
<text text-anchor="middle" x="1685" y="-1910.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1243.28,-2831.03C1311.56,-2842.14 1409.1,-2844.71 1464,-2786 1496.07,-2751.7 1452.68,-1975.99 1484,-1941 1507.24,-1915.04 1542.6,-1905.18 1577.15,-1902.82"/>
<polygon fill="gray" stroke="gray" points="1577.53,-1906.3 1587.35,-1902.33 1577.2,-1899.31 1577.53,-1906.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node123"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1316.5,-3155 1015.5,-3155 1015.5,-3119 1316.5,-3119 1316.5,-3155"/>
<text text-anchor="middle" x="1166" y="-3133.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node323" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node323"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="2170,-3049 2104,-3049 2104,-3013 2170,-3013 2170,-3049"/>
<text text-anchor="middle" x="2137" y="-3027.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="gray" d="M1316.83,-3150.24C1366.97,-3147.97 1420.99,-3137.64 1464,-3110 1479.07,-3100.31 1468.82,-3084.51 1484,-3075 1585.82,-3011.23 1965.44,-3022.86 2093.5,-3028.78"/>
<polygon fill="gray" stroke="gray" points="2093.54,-3032.28 2103.69,-3029.26 2093.87,-3025.29 2093.54,-3032.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node124"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="1328,-3317 1004,-3317 1004,-3281 1328,-3281 1328,-3317"/>
<text text-anchor="middle" x="1166" y="-3295.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node321" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node321"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="2171.5,-3211 2102.5,-3211 2102.5,-3175 2171.5,-3175 2171.5,-3211"/>
<text text-anchor="middle" x="2137" y="-3189.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="gray" d="M1263.83,-3317.03C1328.08,-3323.17 1410.18,-3318.99 1464,-3272 1493.89,-3245.91 1452.96,-3209.71 1484,-3185 1553.89,-3129.36 1796.68,-3183.57 1886,-3185 1958.36,-3186.16 2042.45,-3189.2 2092.34,-3191.18"/>
<polygon fill="gray" stroke="gray" points="2092.31,-3194.68 2102.45,-3191.59 2092.59,-3187.69 2092.31,-3194.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node125"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="1302,-3371 1030,-3371 1030,-3335 1302,-3335 1302,-3371"/>
<text text-anchor="middle" x="1166" y="-3349.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node330" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node330"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="2186,-3294 2088,-3294 2088,-3258 2186,-3258 2186,-3294"/>
<text text-anchor="middle" x="2137" y="-3272.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="gray" d="M1302.06,-3336.12C1357.08,-3336.2 1418.33,-3345.97 1464,-3380 1483.19,-3394.3 1464.18,-3416.58 1484,-3430 1520.99,-3455.04 1852.05,-3459.02 1886,-3430 1929.43,-3392.87 1864.81,-3342.6 1906,-3303 1950.83,-3259.9 2025.46,-3259.03 2077.51,-3265.09"/>
<polygon fill="gray" stroke="gray" points="2077.24,-3268.58 2087.6,-3266.38 2078.13,-3261.64 2077.24,-3268.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node126"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1326.5,-4181 1005.5,-4181 1005.5,-4145 1326.5,-4145 1326.5,-4181"/>
<text text-anchor="middle" x="1166" y="-4159.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node311" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node311"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="1719.5,-5621 1650.5,-5621 1650.5,-5585 1719.5,-5585 1719.5,-5621"/>
<text text-anchor="middle" x="1685" y="-5599.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="gray" d="M1187.85,-4181.11C1245.33,-4232.56 1405.64,-4386.81 1464,-4555 1482.6,-4608.6 1446.25,-5533.65 1484,-5576 1522.37,-5619.04 1594.05,-5617.9 1640.36,-5611.6"/>
<polygon fill="gray" stroke="gray" points="1641.03,-5615.04 1650.41,-5610.1 1640,-5608.11 1641.03,-5615.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node127"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="1319,-3263 1013,-3263 1013,-3227 1319,-3227 1319,-3263"/>
<text text-anchor="middle" x="1166" y="-3241.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node324" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node324"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="2165,-3157 2109,-3157 2109,-3121 2165,-3121 2165,-3157"/>
<text text-anchor="middle" x="2137" y="-3135.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1284,-3263.02C1343.86,-3265.69 1414.36,-3257.9 1464,-3218 1486.9,-3199.6 1460.51,-3172.64 1484,-3155 1581.34,-3081.93 1975,-3120.3 2098.65,-3134.47"/>
<polygon fill="gray" stroke="gray" points="2098.42,-3137.97 2108.76,-3135.65 2099.23,-3131.02 2098.42,-3137.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node128"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="1354.5,-3641 977.5,-3641 977.5,-3605 1354.5,-3605 1354.5,-3641"/>
<text text-anchor="middle" x="1166" y="-3619.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node327" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node327"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="2164,-4030 2110,-4030 2110,-3994 2164,-3994 2164,-4030"/>
<text text-anchor="middle" x="2137" y="-4008.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="gray" d="M1246.87,-3605C1314.41,-3594.94 1408.76,-3593.95 1464,-3650 1504.99,-3691.59 1444.72,-3868.79 1484,-3912 1567.28,-4003.6 1974.92,-4011.8 2099.66,-4012.14"/>
<polygon fill="gray" stroke="gray" points="2099.83,-4015.64 2109.83,-4012.15 2099.83,-4008.64 2099.83,-4015.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().</title>
<g id="a_node129"><a xlink:title="fn CallLinkSecretParams_DeriveFromRootKey(root_key: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = CallLinkSecretParams::derive_from_root_key(root_key); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="1319,-3425 1013,-3425 1013,-3389 1319,-3389 1319,-3425"/>
<text text-anchor="middle" x="1166" y="-3403.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DeriveFromRootKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="node331" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<g id="a_node331"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_root_key(root_key: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20230419_CallLinkSecretParams_DeriveFromRootKey&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_key, &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2219,-3348 2055,-3348 2055,-3312 2219,-3312 2219,-3348"/>
<text text-anchor="middle" x="2137" y="-3326.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_root_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="gray" d="M1319.18,-3400.88C1367.35,-3404.09 1419.57,-3413.19 1464,-3434 1475.38,-3439.33 1472.39,-3449.19 1484,-3454 1649.07,-3522.37 1743.56,-3561.86 1886,-3454 1912.14,-3434.21 1882.27,-3405.62 1906,-3383 1942.69,-3348.04 1997.61,-3334.49 2044.58,-3329.82"/>
<polygon fill="gray" stroke="gray" points="2045.12,-3333.28 2054.78,-3328.93 2044.51,-3326.31 2045.12,-3333.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node130"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="1354,-3209 978,-3209 978,-3173 1354,-3173 1354,-3209"/>
<text text-anchor="middle" x="1166" y="-3187.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node322" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node322"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="2201,-3103 2073,-3103 2073,-3067 2201,-3067 2201,-3103"/>
<text text-anchor="middle" x="2137" y="-3081.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="gray" d="M1354.21,-3205.7C1393.67,-3200.55 1432.76,-3188.35 1464,-3164 1485.18,-3147.5 1462.36,-3122.89 1484,-3107 1529.64,-3073.48 1901.86,-3078.9 2062.57,-3082.88"/>
<polygon fill="gray" stroke="gray" points="2062.75,-3086.39 2072.84,-3083.14 2062.93,-3079.39 2062.75,-3086.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node131"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="1371,-2615 961,-2615 961,-2579 1371,-2579 1371,-2615"/>
<text text-anchor="middle" x="1166" y="-2593.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node347" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node347"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="1824,-1716 1546,-1716 1546,-1680 1824,-1680 1824,-1716"/>
<text text-anchor="middle" x="1685" y="-1694.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1243.28,-2615.03C1311.56,-2626.14 1409.1,-2628.71 1464,-2570 1496.07,-2535.7 1452.68,-1759.99 1484,-1725 1497.91,-1709.46 1516.16,-1699.69 1535.98,-1693.84"/>
<polygon fill="gray" stroke="gray" points="1537.03,-1697.19 1545.82,-1691.28 1535.26,-1690.41 1537.03,-1697.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node132"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="1347,-4019 985,-4019 985,-3983 1347,-3983 1347,-4019"/>
<text text-anchor="middle" x="1166" y="-3997.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node312" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node312"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2164,-5513 2110,-5513 2110,-5477 2164,-5477 2164,-5513"/>
<text text-anchor="middle" x="2137" y="-5491.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="gray" d="M1243.04,-3982.95C1311.39,-3971.73 1409.2,-3969.02 1464,-4028 1507.61,-4074.93 1445.51,-5129.79 1484,-5181 1596.33,-5330.47 1766,-5161.62 1886,-5305 1932.84,-5360.97 1854.26,-5416.53 1906,-5468 1957.07,-5518.8 2049.3,-5511.72 2100.07,-5502.89"/>
<polygon fill="gray" stroke="gray" points="2100.76,-5506.33 2109.95,-5501.06 2099.48,-5499.44 2100.76,-5506.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node133"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1372.5,-2939 959.5,-2939 959.5,-2903 1372.5,-2903 1372.5,-2939"/>
<text text-anchor="middle" x="1166" y="-2917.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node357" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node357"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1776,-2094 1594,-2094 1594,-2058 1776,-2058 1776,-2094"/>
<text text-anchor="middle" x="1685" y="-2072.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1243.26,-2939.01C1311.52,-2950.11 1409.05,-2952.67 1464,-2894 1494.05,-2861.92 1454.65,-2135.73 1484,-2103 1508.69,-2075.46 1547.03,-2066.04 1583.57,-2064.48"/>
<polygon fill="gray" stroke="gray" points="1583.89,-2067.98 1593.81,-2064.24 1583.73,-2060.98 1583.89,-2067.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node134"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="1317.5,-4127 1014.5,-4127 1014.5,-4091 1317.5,-4091 1317.5,-4127"/>
<text text-anchor="middle" x="1166" y="-4105.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node317" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node317"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="1713,-5567 1657,-5567 1657,-5531 1713,-5531 1713,-5567"/>
<text text-anchor="middle" x="1685" y="-5545.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1242.75,-4090.97C1311.14,-4079.68 1409.19,-4076.85 1464,-4136 1516.34,-4192.49 1432.9,-5464.39 1484,-5522 1524.01,-5567.11 1600.61,-5563.77 1646.52,-5556.74"/>
<polygon fill="gray" stroke="gray" points="1647.37,-5560.14 1656.66,-5555.05 1646.22,-5553.24 1647.37,-5560.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node135"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="1370,-3965 962,-3965 962,-3929 1370,-3929 1370,-3965"/>
<text text-anchor="middle" x="1166" y="-3943.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node314" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node314"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="2170,-5459 2104,-5459 2104,-5423 2170,-5423 2170,-5459"/>
<text text-anchor="middle" x="2137" y="-5437.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="gray" d="M1242.72,-3929C1311.08,-3917.73 1409.12,-3914.92 1464,-3974 1508.58,-4022 1438.91,-5105.48 1484,-5153 1545.63,-5217.96 1804.88,-5143.08 1886,-5181 1997.77,-5233.25 2085.58,-5359.09 2120.11,-5414.29"/>
<polygon fill="gray" stroke="gray" points="2117.15,-5416.15 2125.37,-5422.82 2123.1,-5412.47 2117.15,-5416.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().</title>
<g id="a_node136"><a xlink:title="fn GroupSecretParams_DeriveFromMasterKey( &#160;&#160;&#160;&#160;master_key: Serialized&lt;GroupMasterKey&gt;, ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::derive_from_master_key(master_key.into_inner()).into()...">
<polygon fill="white" stroke="black" points="1321.5,-3101 1010.5,-3101 1010.5,-3065 1321.5,-3065 1321.5,-3101"/>
<text text-anchor="middle" x="1166" y="-3079.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DeriveFromMasterKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="node333" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<g id="a_node333"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_master_key(master_key: GroupMasterKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_GroupMasterKey_GroupSecretParams_DeriveFromMasterKey&#39; , &#160;...">
<polygon fill="white" stroke="black" points="2229.5,-940 2044.5,-940 2044.5,-904 2229.5,-904 2229.5,-940"/>
<text text-anchor="middle" x="2137" y="-918.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_master_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge436" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="gray" d="M1245.48,-3101.02C1313.31,-3111.48 1408.86,-3113.06 1464,-3056 1491.38,-3027.67 1466.85,-2737.47 1484,-2702 1588.05,-2486.89 1785.39,-2561.74 1886,-2345 1924.09,-2262.94 1888.66,-1619.79 1906,-1531 1951.84,-1296.26 2079.06,-1033.46 2121.79,-949.4"/>
<polygon fill="gray" stroke="gray" points="2125.03,-950.76 2126.46,-940.27 2118.79,-947.58 2125.03,-950.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node137"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="1423,-3749 909,-3749 909,-3713 1423,-3713 1423,-3749"/>
<text text-anchor="middle" x="1166" y="-3727.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node337" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node337"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="1777.5,-4657 1592.5,-4657 1592.5,-4621 1777.5,-4621 1777.5,-4657"/>
<text text-anchor="middle" x="1685" y="-4635.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge459" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M1244.38,-3712.97C1312.43,-3702.19 1408.97,-3700.12 1464,-3758 1502.16,-3798.13 1469.73,-4202.49 1484,-4256 1522.53,-4400.43 1622.26,-4552.07 1664.56,-4612.19"/>
<polygon fill="gray" stroke="gray" points="1661.97,-4614.58 1670.61,-4620.71 1667.68,-4610.53 1661.97,-4614.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().</title>
<g id="a_node138"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_serial: &amp;[u8; RECEIPT_SERIAL...">
<polygon fill="white" stroke="black" points="1431,-2561 901,-2561 901,-2525 1431,-2525 1431,-2561"/>
<text text-anchor="middle" x="1166" y="-2539.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="node349" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<g id="a_node349"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCredentialReq...">
<polygon fill="white" stroke="black" points="1838,-1662 1532,-1662 1532,-1626 1838,-1626 1838,-1662"/>
<text text-anchor="middle" x="1685" y="-1640.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge484" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1243.28,-2561.03C1311.56,-2572.14 1409.1,-2574.71 1464,-2516 1496.07,-2481.7 1452.68,-1705.99 1484,-1671 1494.64,-1659.11 1507.82,-1650.6 1522.3,-1644.64"/>
<polygon fill="gray" stroke="gray" points="1523.81,-1647.81 1531.99,-1641.08 1521.4,-1641.24 1523.81,-1647.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().</title>
<g id="a_node139"><a xlink:title="fn CreateCallLinkCredentialRequestContext_NewDeterministic( &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let context = CreateCallLinkCredentialRequestContext::new(room...">
<polygon fill="white" stroke="black" points="1378.5,-3695 953.5,-3695 953.5,-3659 1378.5,-3659 1378.5,-3695"/>
<text text-anchor="middle" x="1166" y="-3673.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_NewDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="node329" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<g id="a_node329"><a xlink:title=" &#160;&#160;&#160;pub fn new(room_id: &amp;[u8], randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;poksho::ShoHmacSha256::new(b&#39; 20230413_Signal_CreateCallLinkCredentialRequest&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.ab...">
<polygon fill="white" stroke="black" points="2164,-4084 2110,-4084 2110,-4048 2164,-4048 2164,-4084"/>
<text text-anchor="middle" x="2137" y="-4062.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge496" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="gray" d="M1246.9,-3658.97C1314.45,-3648.9 1408.8,-3647.9 1464,-3704 1505.89,-3746.57 1443.56,-3928.06 1484,-3972 1648.3,-4150.53 1988.07,-4097.71 2099.64,-4074.38"/>
<polygon fill="gray" stroke="gray" points="2100.66,-4077.74 2109.71,-4072.23 2099.2,-4070.9 2100.66,-4077.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node140"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="1334,-3533 998,-3533 998,-3497 1334,-3497 1334,-3533"/>
<text text-anchor="middle" x="1166" y="-3511.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node328" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node328"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2171.5,-3922 2102.5,-3922 2102.5,-3886 2171.5,-3886 2171.5,-3922"/>
<text text-anchor="middle" x="2137" y="-3900.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge539" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="gray" d="M1255.72,-3496.96C1321.58,-3489.1 1409.13,-3491.14 1464,-3542 1503.33,-3578.46 1452.31,-3617.73 1484,-3661 1608.49,-3830.99 1704.4,-3815.75 1906,-3877 1968.94,-3896.12 2045.39,-3901.83 2092.36,-3903.46"/>
<polygon fill="gray" stroke="gray" points="2092.39,-3906.96 2102.49,-3903.76 2092.6,-3899.97 2092.39,-3906.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node141"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="1305.5,-2453 1026.5,-2453 1026.5,-2417 1305.5,-2417 1305.5,-2453"/>
<text text-anchor="middle" x="1166" y="-2431.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node334" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node334"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="1758,-940 1612,-940 1612,-904 1758,-904 1758,-940"/>
<text text-anchor="middle" x="1685" y="-918.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge544" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M1248.54,-2453.02C1316.67,-2462.76 1410.95,-2462.88 1464,-2405 1518.66,-2345.37 1430.34,-1009.54 1484,-949 1512.66,-916.66 1560.13,-909.21 1601.62,-910.18"/>
<polygon fill="gray" stroke="gray" points="1601.62,-913.68 1611.75,-910.58 1601.9,-906.69 1601.62,-913.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node142"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="1456,-3047 876,-3047 876,-3011 1456,-3011 1456,-3047"/>
<text text-anchor="middle" x="1166" y="-3025.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node345" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node345"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="1871.5,-2256 1498.5,-2256 1498.5,-2220 1871.5,-2220 1871.5,-2256"/>
<text text-anchor="middle" x="1685" y="-2234.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge546" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1243.57,-3047.03C1311.79,-3058.07 1409.08,-3060.52 1464,-3002 1520.06,-2942.26 1429.26,-2325.94 1484,-2265 1486.03,-2262.74 1488.15,-2260.6 1490.36,-2258.58"/>
<polygon fill="gray" stroke="gray" points="1492.67,-2261.21 1498.17,-2252.15 1488.22,-2255.8 1492.67,-2261.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().</title>
<g id="a_node143"><a xlink:title="fn GroupSendDerivedKeyPair_ForExpiration( &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;server_params: &amp;ServerSecretParams, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;GroupSendDerivedKeyPair::for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exp...">
<polygon fill="white" stroke="black" points="1314.5,-3911 1017.5,-3911 1017.5,-3875 1314.5,-3875 1314.5,-3911"/>
<text text-anchor="middle" x="1166" y="-3889.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendDerivedKeyPair_ForExpiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="node342" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<g id="a_node342"><a xlink:title=" &#160;&#160;&#160;pub fn for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root: impl AsRef&lt;zkcredential::endorsements::ServerRootKeyPair&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: ReservedByte::de...">
<polygon fill="white" stroke="black" points="1741.5,-4927 1628.5,-4927 1628.5,-4891 1741.5,-4891 1741.5,-4927"/>
<text text-anchor="middle" x="1685" y="-4905.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge548" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M1242.99,-3874.99C1311.31,-3863.81 1409.09,-3861.12 1464,-3920 1500.46,-3959.1 1448.4,-4842.12 1484,-4882 1516.68,-4918.62 1573.49,-4923.24 1618.23,-4919.93"/>
<polygon fill="gray" stroke="gray" points="1618.79,-4923.39 1628.44,-4919.02 1618.17,-4916.42 1618.79,-4923.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().</title>
<g id="a_node144"><a xlink:title="fn BackupAuthCredentialRequestContext_New(backup_key: &amp;[u8; 32], uuid: Uuid) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let backup_key: libsignal_account_keys::BackupKey = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;libsignal_account_keys::BackupKey(*backup_key)...">
<polygon fill="white" stroke="black" points="1325,-4073 1007,-4073 1007,-4037 1325,-4037 1325,-4073"/>
<text text-anchor="middle" x="1166" y="-4051.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="node316" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<g id="a_node316"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;const VERSION: u8&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_key: &amp;libsignal_account_keys::BackupKey&lt;VERSION&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// derive the backup&#45;id (blinded in the is...">
<polygon fill="white" stroke="black" points="2164,-5567 2110,-5567 2110,-5531 2164,-5531 2164,-5567"/>
<text text-anchor="middle" x="2137" y="-5545.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge582" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="gray" d="M1242.72,-4037C1311.08,-4025.73 1409.12,-4022.92 1464,-4082 1508.43,-4129.83 1444.55,-5204.98 1484,-5257 1596.67,-5405.56 1764.62,-5235.46 1886,-5377 1928.35,-5426.38 1859.54,-5476.47 1906,-5522 1957.31,-5572.28 2049.05,-5565.53 2099.78,-5556.86"/>
<polygon fill="gray" stroke="gray" points="2100.44,-5560.29 2109.65,-5555.06 2099.19,-5553.41 2100.44,-5560.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node145"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1427,-3857 905,-3857 905,-3821 1427,-3821 1427,-3857"/>
<text text-anchor="middle" x="1166" y="-3835.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node339" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node339"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="1778.5,-4873 1591.5,-4873 1591.5,-4837 1778.5,-4837 1778.5,-4873"/>
<text text-anchor="middle" x="1685" y="-4851.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge647" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="gray" d="M1242.99,-3820.99C1311.31,-3809.81 1409.09,-3807.12 1464,-3866 1500.46,-3905.1 1448.4,-4788.12 1484,-4828 1508.15,-4855.06 1545.47,-4864.65 1581.37,-4866.47"/>
<polygon fill="gray" stroke="gray" points="1581.33,-4869.97 1591.44,-4866.79 1581.55,-4862.98 1581.33,-4869.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node146"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="1377.5,-3587 954.5,-3587 954.5,-3551 1377.5,-3551 1377.5,-3587"/>
<text text-anchor="middle" x="1166" y="-3565.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node325" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node325"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="2170,-3976 2104,-3976 2104,-3940 2170,-3940 2170,-3976"/>
<text text-anchor="middle" x="2137" y="-3954.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge649" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="gray" d="M1249.76,-3550.97C1316.76,-3541.67 1408.77,-3541.77 1464,-3596 1493.19,-3624.66 1458.27,-3747.19 1484,-3779 1602.34,-3925.32 1724.55,-3815.3 1886,-3912 1896.52,-3918.3 1894.9,-3925.8 1906,-3931 1966.71,-3959.46 2045.92,-3962.3 2093.77,-3960.82"/>
<polygon fill="gray" stroke="gray" points="2093.92,-3964.31 2103.78,-3960.43 2093.65,-3957.32 2093.92,-3964.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().</title>
<g id="a_node147"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_credential: Serialized&lt;Receipt...">
<polygon fill="white" stroke="black" points="1419,-2777 913,-2777 913,-2741 1419,-2741 1419,-2777"/>
<text text-anchor="middle" x="1166" y="-2755.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node355" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node355"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="1826,-1878 1544,-1878 1544,-1842 1826,-1842 1826,-1878"/>
<text text-anchor="middle" x="1685" y="-1856.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge677" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1243.28,-2777.03C1311.56,-2788.14 1409.1,-2790.71 1464,-2732 1496.07,-2697.7 1452.68,-1921.99 1484,-1887 1497.44,-1871.98 1514.95,-1862.35 1534,-1856.44"/>
<polygon fill="gray" stroke="gray" points="1535.07,-1859.78 1543.78,-1853.76 1533.21,-1853.03 1535.07,-1859.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().</title>
<g id="a_node148"><a xlink:title="fn ServerSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; ServerSecretParams { &#160;&#160;&#160;&#160;ServerSecretParams::generate(*randomness) }">
<polygon fill="white" stroke="black" points="1325.5,-2993 1006.5,-2993 1006.5,-2957 1325.5,-2957 1325.5,-2993"/>
<text text-anchor="middle" x="1166" y="-2971.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="node354" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<g id="a_node354"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1724.5,-2148 1645.5,-2148 1645.5,-2112 1724.5,-2112 1724.5,-2148"/>
<text text-anchor="middle" x="1685" y="-2126.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge717" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1243.26,-2993.01C1311.52,-3004.11 1409.05,-3006.67 1464,-2948 1494.05,-2915.92 1454.65,-2189.73 1484,-2157 1521.08,-2115.65 1588.92,-2115.15 1635.21,-2120.77"/>
<polygon fill="gray" stroke="gray" points="1634.94,-2124.27 1645.32,-2122.14 1635.88,-2117.33 1634.94,-2124.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node149"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="1439,-2669 893,-2669 893,-2633 1439,-2633 1439,-2669"/>
<text text-anchor="middle" x="1166" y="-2647.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node350" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node350"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="1851.5,-1770 1518.5,-1770 1518.5,-1734 1851.5,-1734 1851.5,-1770"/>
<text text-anchor="middle" x="1685" y="-1748.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge765" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1243.28,-2669.03C1311.56,-2680.14 1409.1,-2682.71 1464,-2624 1496.07,-2589.7 1452.68,-1813.99 1484,-1779 1491.35,-1770.79 1499.91,-1764.19 1509.28,-1758.93"/>
<polygon fill="gray" stroke="gray" points="1511.14,-1761.91 1518.49,-1754.28 1507.98,-1755.66 1511.14,-1761.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node150"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1203.5,-7531 1128.5,-7531 1128.5,-7495 1203.5,-7495 1203.5,-7531"/>
<text text-anchor="middle" x="1166" y="-7509.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node151"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="1729.5,-7531 1640.5,-7531 1640.5,-7495 1729.5,-7495 1729.5,-7531"/>
<text text-anchor="middle" x="1685" y="-7509.3" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="gray" d="M1203.77,-7513C1293.63,-7513 1524.72,-7513 1630.14,-7513"/>
<polygon fill="gray" stroke="gray" points="1630.24,-7516.5 1640.24,-7513 1630.24,-7509.5 1630.24,-7516.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node154"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="2212,-7760 2062,-7760 2062,-7724 2212,-7724 2212,-7760"/>
<text text-anchor="middle" x="2137" y="-7738.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="gray" d="M1729.73,-7511.58C1775.74,-7512.65 1846.79,-7522.04 1886,-7566 1926.96,-7611.92 1862.99,-7658.99 1906,-7703 1943.14,-7741.01 2002.63,-7750.3 2051.8,-7750.33"/>
<polygon fill="gray" stroke="gray" points="2051.85,-7753.83 2061.81,-7750.21 2051.77,-7746.83 2051.85,-7753.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M1729.53,-7500.15C1849.5,-7467.7 2187.88,-7396.52 2368,-7566 2433.69,-7627.81 2332.89,-7702.56 2396,-7767 2420.16,-7791.67 2457.29,-7799.44 2490.51,-7800.6"/>
<polygon fill="gray" stroke="gray" points="2490.62,-7804.1 2500.67,-7800.76 2490.73,-7797.1 2490.62,-7804.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node152"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="2164,-6981 2110,-6981 2110,-6945 2164,-6945 2164,-6981"/>
<text text-anchor="middle" x="2137" y="-6959.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge613" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M2164.05,-6961.02C2211.34,-6958.93 2311.62,-6961.72 2368,-7016 2472.6,-7116.71 2543.7,-7591.42 2560.29,-7712.06"/>
<polygon fill="gray" stroke="gray" points="2556.82,-7712.56 2561.64,-7722 2563.76,-7711.62 2556.82,-7712.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge614" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M2164.16,-6959.94C2213.02,-6955.87 2317.74,-6955.2 2368,-7016 2421.2,-7080.36 2340.67,-7704.46 2396,-7767 2419.15,-7793.17 2456.77,-7800.92 2490.54,-7801.69"/>
<polygon fill="gray" stroke="gray" points="2490.87,-7805.19 2500.88,-7801.71 2490.89,-7798.19 2490.87,-7805.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node153"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="2219,-7831 2055,-7831 2055,-7795 2219,-7795 2219,-7831"/>
<text text-anchor="middle" x="2137" y="-7809.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M2219.28,-7798.14C2270.04,-7788.95 2336.79,-7777.04 2396,-7767 2423.25,-7762.38 2453.01,-7757.53 2479.82,-7753.24"/>
<polygon fill="gray" stroke="gray" points="2480.62,-7756.66 2489.94,-7751.62 2479.51,-7749.74 2480.62,-7756.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="3128,-7778 2812,-7778 2812,-7742 3128,-7742 3128,-7778"/>
<text text-anchor="middle" x="2970" y="-7756.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M2219.04,-7816.16C2269.85,-7817.98 2336.74,-7820.08 2396,-7821 2471.1,-7822.16 2663.55,-7847.06 2734,-7821 2749.37,-7815.31 2747.19,-7804.02 2762,-7797 2775.6,-7790.55 2790.18,-7785.22 2805.09,-7780.82"/>
<polygon fill="gray" stroke="gray" points="2806.24,-7784.13 2814.92,-7778.05 2804.34,-7777.39 2806.24,-7784.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M2219.13,-7809.38C2297.41,-7805.89 2414.85,-7800.65 2490.46,-7797.28"/>
<polygon fill="gray" stroke="gray" points="2491.01,-7800.76 2500.85,-7796.82 2490.7,-7793.77 2491.01,-7800.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="3116.5,-7842 2823.5,-7842 2823.5,-7806 3116.5,-7806 3116.5,-7842"/>
<text text-anchor="middle" x="2970" y="-7820.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M2219.22,-7822.1C2269.96,-7827.33 2336.7,-7833.36 2396,-7836 2546.07,-7842.68 2583.83,-7839.83 2734,-7836 2759.62,-7835.35 2786.8,-7834.29 2813.23,-7833.07"/>
<polygon fill="gray" stroke="gray" points="2813.49,-7836.57 2823.32,-7832.6 2813.16,-7829.57 2813.49,-7836.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M2212.2,-7741.65C2286.81,-7741.3 2401.64,-7740.76 2479.65,-7740.4"/>
<polygon fill="gray" stroke="gray" points="2479.95,-7743.89 2489.93,-7740.35 2479.92,-7736.89 2479.95,-7743.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M2640.39,-7743.69C2685.76,-7745.94 2745.68,-7748.92 2801.91,-7751.71"/>
<polygon fill="gray" stroke="gray" points="2801.83,-7755.21 2811.99,-7752.21 2802.18,-7748.22 2801.83,-7755.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node159"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="3481,-8452 3331,-8452 3331,-8416 3481,-8416 3481,-8452"/>
<text text-anchor="middle" x="3406" y="-8430.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge512" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M3128.26,-7767.78C3144.13,-7774.46 3158.58,-7783.88 3170,-7797 3214.34,-7847.91 3152.65,-8353.98 3198,-8404 3228.2,-8437.31 3277.61,-8445.42 3320.59,-8444.91"/>
<polygon fill="gray" stroke="gray" points="3320.89,-8448.4 3330.79,-8444.63 3320.7,-8441.4 3320.89,-8448.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge715" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M2629.41,-7798.72C2678.65,-7802.39 2749.07,-7807.63 2813.04,-7812.39"/>
<polygon fill="gray" stroke="gray" points="2813.02,-7815.9 2823.25,-7813.15 2813.53,-7808.92 2813.02,-7815.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node161"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="3470,-8506 3342,-8506 3342,-8470 3470,-8470 3470,-8506"/>
<text text-anchor="middle" x="3406" y="-8484.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge734" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M3104.91,-7842.04C3130.1,-7851.53 3153.63,-7865.76 3170,-7887 3208.97,-7937.58 3154.71,-8414.06 3198,-8461 3231.01,-8496.79 3286.37,-8502.45 3331.55,-8499.75"/>
<polygon fill="gray" stroke="gray" points="3331.89,-8503.24 3341.61,-8499.01 3331.37,-8496.26 3331.89,-8503.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="gray" d="M3481.1,-8422.17C3526.18,-8419.53 3581.21,-8425.3 3614,-8461 3660.95,-8512.11 3593.42,-9035.43 3642,-9085 3709.02,-9153.39 4005.66,-9043.95 4072,-9113 4127.29,-9170.55 4057.81,-10486.96 4108,-10549 4112.73,-10554.85 4118.49,-10559.57 4124.87,-10563.36"/>
<polygon fill="gray" stroke="gray" points="4123.42,-10566.55 4133.92,-10567.97 4126.6,-10560.31 4123.42,-10566.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" d="M3481.24,-8421.83C3526.52,-8419.02 3581.73,-8424.71 3614,-8461 3695.08,-8552.17 3560.72,-10566 3642,-10657 3681.21,-10700.9 3752.94,-10701.07 3802.47,-10694.66"/>
<polygon fill="gray" stroke="gray" points="3802.97,-10698.13 3812.38,-10693.26 3801.99,-10691.2 3802.97,-10698.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node160"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3061.5,-8452 2878.5,-8452 2878.5,-8416 3061.5,-8416 3061.5,-8452"/>
<text text-anchor="middle" x="2970" y="-8430.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M3061.72,-8434C3138.02,-8434 3246.27,-8434 3320.7,-8434"/>
<polygon fill="gray" stroke="gray" points="3320.97,-8437.5 3330.97,-8434 3320.97,-8430.5 3320.97,-8437.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M3061.72,-8445.29C3141.82,-8455.25 3257.12,-8469.6 3331.56,-8478.86"/>
<polygon fill="gray" stroke="gray" points="3331.42,-8482.37 3341.78,-8480.13 3332.29,-8475.43 3331.42,-8482.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge561" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="gray" d="M3424.98,-8506.21C3466.9,-8549.96 3570.81,-8666.31 3614,-8786 3638.75,-8854.6 3593.4,-9058.62 3642,-9113 3771.88,-9258.31 3946.44,-9049.94 4072,-9199 4168.67,-9313.76 4013.54,-10432.41 4108,-10549 4112.74,-10554.85 4118.5,-10559.56 4124.88,-10563.35"/>
<polygon fill="gray" stroke="gray" points="4123.43,-10566.54 4133.93,-10567.96 4126.61,-10560.3 4123.43,-10566.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge562" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" d="M3425.55,-8506.01C3468.69,-8549.35 3575.06,-8664.86 3614,-8786 3629.91,-8835.48 3607.33,-10618.27 3642,-10657 3681.26,-10700.85 3752.97,-10701.04 3802.5,-10694.64"/>
<polygon fill="gray" stroke="gray" points="3802.99,-10698.11 3812.4,-10693.24 3802.01,-10691.18 3802.99,-10698.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node162"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="3027.5,-8506 2912.5,-8506 2912.5,-8470 3027.5,-8470 3027.5,-8506"/>
<text text-anchor="middle" x="2970" y="-8484.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge694" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M3027.74,-8488C3105.68,-8488 3245.94,-8488 3331.73,-8488"/>
<polygon fill="gray" stroke="gray" points="3331.91,-8491.5 3341.91,-8488 3331.91,-8484.5 3331.91,-8491.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="2241.5,-7989 2032.5,-7989 2032.5,-7953 2241.5,-7953 2241.5,-7989"/>
<text text-anchor="middle" x="2137" y="-7967.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node166"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="2648.5,-7989 2481.5,-7989 2481.5,-7953 2648.5,-7953 2648.5,-7989"/>
<text text-anchor="middle" x="2565" y="-7967.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="gray" d="M2241.67,-7971C2311.71,-7971 2403.39,-7971 2471.07,-7971"/>
<polygon fill="gray" stroke="gray" points="2471.29,-7974.5 2481.29,-7971 2471.29,-7967.5 2471.29,-7974.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node164"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="3042.5,-7989 2897.5,-7989 2897.5,-7953 3042.5,-7953 3042.5,-7989"/>
<text text-anchor="middle" x="2970" y="-7967.3" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="3462.5,-8342 3349.5,-8342 3349.5,-8306 3462.5,-8306 3462.5,-8342"/>
<text text-anchor="middle" x="3406" y="-8320.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge524" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="gray" d="M3042.65,-7973.01C3084.91,-7977.93 3136.5,-7991.01 3170,-8024 3202.58,-8056.08 3174.57,-8083.73 3198,-8123 3243.3,-8198.93 3324.54,-8265.71 3370.63,-8299.86"/>
<polygon fill="gray" stroke="gray" points="3368.67,-8302.77 3378.8,-8305.85 3372.81,-8297.12 3368.67,-8302.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<g id="a_node165"><a xlink:title="pub fn verify_search( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSt...">
<polygon fill="white" stroke="black" points="2191,-7935 2083,-7935 2083,-7899 2191,-7899 2191,-7935"/>
<text text-anchor="middle" x="2137" y="-7913.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge728" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="gray" d="M2191.02,-7922.92C2237.66,-7928.2 2307.38,-7936.27 2368,-7944 2401.66,-7948.29 2438.52,-7953.29 2471.11,-7957.82"/>
<polygon fill="gray" stroke="gray" points="2470.69,-7961.29 2481.08,-7959.2 2471.66,-7954.36 2470.69,-7961.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="edge737" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<path fill="none" stroke="gray" d="M2648.53,-7971C2718.32,-7971 2817.79,-7971 2887.34,-7971"/>
<polygon fill="gray" stroke="gray" points="2887.38,-7974.5 2897.38,-7971 2887.38,-7967.5 2887.38,-7974.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="gray" d="M3462.81,-8328.7C3511.68,-8336.09 3580.05,-8355.11 3614,-8404 3651.41,-8457.87 3598.33,-10716.06 3642,-10765 3671.78,-10798.37 3720.36,-10806.48 3763.71,-10805.64"/>
<polygon fill="gray" stroke="gray" points="3763.86,-10809.13 3773.73,-10805.28 3763.62,-10802.14 3763.86,-10809.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node168"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3061,-8369 2879,-8369 2879,-8333 3061,-8333 3061,-8369"/>
<text text-anchor="middle" x="2970" y="-8347.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="gray" d="M3061.19,-8345.39C3144.09,-8340.23 3265.03,-8332.71 3339.17,-8328.1"/>
<polygon fill="gray" stroke="gray" points="3339.55,-8331.58 3349.32,-8327.46 3339.12,-8324.59 3339.55,-8331.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node169"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="3043,-8315 2897,-8315 2897,-8279 3043,-8279 3043,-8315"/>
<text text-anchor="middle" x="2970" y="-8293.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge764" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="gray" d="M3043.15,-8301.49C3125.51,-8306.61 3259.08,-8314.92 3338.84,-8319.88"/>
<polygon fill="gray" stroke="gray" points="3339.05,-8323.4 3349.25,-8320.53 3339.49,-8316.42 3339.05,-8323.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node170"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="1253,-2179 1079,-2179 1079,-2143 1253,-2143 1253,-2179"/>
<text text-anchor="middle" x="1166" y="-2157.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge474" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1251.16,-2179.04C1318.76,-2188.1 1410.89,-2187.24 1464,-2131 1499.13,-2093.8 1449.5,-1708.78 1484,-1671 1494.66,-1659.33 1507.77,-1650.93 1522.15,-1645.02"/>
<polygon fill="gray" stroke="gray" points="1523.58,-1648.22 1531.76,-1641.48 1521.17,-1641.65 1523.58,-1648.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge473" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1253.32,-2178.55C1320.1,-2186.67 1410.02,-2184.76 1464,-2131 1494.08,-2101.04 1454.42,-1971.46 1484,-1941 1508.05,-1916.24 1543.21,-1906.53 1577.37,-1903.97"/>
<polygon fill="gray" stroke="gray" points="1577.65,-1907.46 1587.44,-1903.41 1577.27,-1900.47 1577.65,-1907.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge470" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1253.24,-2155.83C1362.57,-2149.27 1547.33,-2138.19 1635.01,-2132.94"/>
<polygon fill="gray" stroke="gray" points="1635.43,-2136.42 1645.21,-2132.33 1635.01,-2129.43 1635.43,-2136.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge472" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1253.32,-2178.85C1320.33,-2187.2 1410.55,-2185.47 1464,-2131 1502.1,-2092.17 1446.55,-1926.46 1484,-1887 1497.72,-1872.54 1515.22,-1863.18 1534.14,-1857.35"/>
<polygon fill="gray" stroke="gray" points="1535.12,-1860.71 1543.84,-1854.7 1533.27,-1853.96 1535.12,-1860.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge471" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1253.03,-2170.4C1315.63,-2173.13 1400.23,-2167.99 1464,-2131 1477.23,-2123.33 1470.9,-2110.89 1484,-2103 1513.51,-2085.22 1549.85,-2077.11 1583.43,-2073.87"/>
<polygon fill="gray" stroke="gray" points="1584.07,-2077.33 1593.75,-2073.02 1583.5,-2070.36 1584.07,-2077.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node171"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="1197,-2096 1135,-2096 1135,-2060 1197,-2060 1197,-2096"/>
<text text-anchor="middle" x="1166" y="-2074.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge709" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1197.21,-2086.05C1257.75,-2100.16 1394.09,-2121.33 1464,-2048 1521.89,-1987.28 1427.13,-1732.68 1484,-1671 1494.71,-1659.38 1507.87,-1651.01 1522.26,-1645.12"/>
<polygon fill="gray" stroke="gray" points="1523.7,-1648.32 1531.89,-1641.59 1521.29,-1641.75 1523.7,-1648.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge711" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1197.34,-2085.45C1256.9,-2098.09 1389.79,-2116.22 1464,-2048 1499.62,-2015.26 1448.94,-1974.33 1484,-1941 1508.68,-1917.54 1543.45,-1908 1577.09,-1905.19"/>
<polygon fill="gray" stroke="gray" points="1577.73,-1908.66 1587.48,-1904.53 1577.28,-1901.67 1577.73,-1908.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge712" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1197.03,-2081.02C1282.85,-2089.65 1529.78,-2114.49 1635.27,-2125.1"/>
<polygon fill="gray" stroke="gray" points="1635.03,-2128.59 1645.33,-2126.11 1635.73,-2121.63 1635.03,-2128.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge713" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1197.24,-2085.73C1257.23,-2099.07 1391.73,-2118.64 1464,-2048 1515.57,-1997.6 1433.28,-1938.26 1484,-1887 1497.91,-1872.94 1515.42,-1863.77 1534.25,-1858.01"/>
<polygon fill="gray" stroke="gray" points="1535.18,-1861.39 1543.9,-1855.38 1533.34,-1854.63 1535.18,-1861.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge710" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1197.03,-2077.88C1270.85,-2077.6 1463.83,-2076.85 1583.51,-2076.39"/>
<polygon fill="gray" stroke="gray" points="1583.8,-2079.89 1593.78,-2076.35 1583.77,-2072.89 1583.8,-2079.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node172"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1193,-2013 1139,-2013 1139,-1977 1193,-1977 1193,-2013"/>
<text text-anchor="middle" x="1166" y="-1991.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1193.07,-2001.68C1250.57,-2014.68 1389.1,-2036.27 1464,-1965 1506.99,-1924.1 1441.7,-1874.62 1484,-1833 1497.43,-1819.78 1514.05,-1810.93 1531.92,-1805.18"/>
<polygon fill="gray" stroke="gray" points="1533.32,-1808.42 1541.97,-1802.31 1531.39,-1801.7 1533.32,-1808.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1193.3,-2001.91C1251.26,-2015.39 1390.66,-2037.87 1464,-1965 1522.98,-1906.4 1426.01,-1838.58 1484,-1779 1491.5,-1771.29 1500.08,-1765.05 1509.36,-1760.02"/>
<polygon fill="gray" stroke="gray" points="1511.03,-1763.1 1518.47,-1755.57 1507.95,-1756.82 1511.03,-1763.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="1269.5,-1411 1062.5,-1411 1062.5,-1375 1269.5,-1375 1269.5,-1411"/>
<text text-anchor="middle" x="1166" y="-1389.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge495" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1269.82,-1382.12C1335.2,-1381.36 1416.26,-1392.96 1464,-1446 1505.59,-1492.2 1441.44,-1679.69 1484,-1725 1491.36,-1732.84 1499.83,-1739.18 1509.04,-1744.29"/>
<polygon fill="gray" stroke="gray" points="1507.58,-1747.46 1518.09,-1748.8 1510.7,-1741.2 1507.58,-1747.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge494" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1269.82,-1381.5C1335.64,-1380.37 1417.19,-1391.79 1464,-1446 1511.73,-1501.28 1435.1,-2048.75 1484,-2103 1521.18,-2144.25 1589,-2144.77 1635.26,-2139.18"/>
<polygon fill="gray" stroke="gray" points="1635.91,-2142.63 1645.36,-2137.83 1634.98,-2135.69 1635.91,-2142.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node174"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="1257,-1357 1075,-1357 1075,-1321 1257,-1321 1257,-1357"/>
<text text-anchor="middle" x="1166" y="-1335.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node344" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node344"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1752,-523 1618,-523 1618,-487 1752,-487 1752,-523"/>
<text text-anchor="middle" x="1685" y="-501.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge511" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="gray" d="M1168.56,-1320.93C1177.78,-1225.74 1233.64,-778.53 1484,-558 1517.99,-528.06 1567.02,-514.76 1608.03,-508.96"/>
<polygon fill="gray" stroke="gray" points="1608.53,-512.43 1618,-507.68 1607.63,-505.49 1608.53,-512.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge508" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1244.93,-1320.98C1312.87,-1310.36 1408.91,-1308.53 1464,-1366 1495.79,-1399.17 1452.94,-1745.15 1484,-1779 1497.11,-1793.29 1513.9,-1802.66 1532.17,-1808.57"/>
<polygon fill="gray" stroke="gray" points="1531.27,-1811.96 1541.85,-1811.36 1533.21,-1805.23 1531.27,-1811.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge510" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1245.49,-1320.97C1313.32,-1310.5 1408.88,-1308.92 1464,-1366 1519.5,-1423.48 1429.76,-1666.33 1484,-1725 1491.39,-1732.99 1499.93,-1739.45 1509.24,-1744.61"/>
<polygon fill="gray" stroke="gray" points="1507.87,-1747.84 1518.38,-1749.18 1511,-1741.58 1507.87,-1747.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge507" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1244.12,-1320.96C1312.24,-1310.08 1409.04,-1307.88 1464,-1366 1507.92,-1412.45 1441.1,-1893.61 1484,-1941 1498.68,-1957.22 1518.1,-1967.13 1539.07,-1972.85"/>
<polygon fill="gray" stroke="gray" points="1538.26,-1976.26 1548.8,-1975.19 1539.9,-1969.45 1538.26,-1976.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge509" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1243.57,-1320.97C1311.79,-1309.93 1409.08,-1307.48 1464,-1366 1520.06,-1425.74 1429.26,-2042.06 1484,-2103 1521.11,-2144.32 1588.95,-2144.82 1635.23,-2139.21"/>
<polygon fill="gray" stroke="gray" points="1635.89,-2142.65 1645.33,-2137.85 1634.96,-2135.72 1635.89,-2142.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node175"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="1816.5,-11080 1553.5,-11080 1553.5,-11044 1816.5,-11044 1816.5,-11080"/>
<text text-anchor="middle" x="1685" y="-11058.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node177"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="2181.5,-11080 2092.5,-11080 2092.5,-11044 2181.5,-11044 2181.5,-11080"/>
<text text-anchor="middle" x="2137" y="-11058.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="gray" d="M1816.76,-11062C1905.19,-11062 2017.33,-11062 2082.44,-11062"/>
<polygon fill="gray" stroke="gray" points="2082.47,-11065.5 2092.47,-11062 2082.47,-11058.5 2082.47,-11065.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node176"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="1818,-11134 1552,-11134 1552,-11098 1818,-11098 1818,-11134"/>
<text text-anchor="middle" x="1685" y="-11112.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node178"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="2184,-11134 2090,-11134 2090,-11098 2184,-11098 2184,-11134"/>
<text text-anchor="middle" x="2137" y="-11112.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="gray" d="M1818.28,-11116C1905.28,-11116 2014.71,-11116 2079.8,-11116"/>
<polygon fill="gray" stroke="gray" points="2079.86,-11119.5 2089.86,-11116 2079.86,-11112.5 2079.86,-11119.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node247"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2997,-11399 2943,-11399 2943,-11363 2997,-11363 2997,-11399"/>
<text text-anchor="middle" x="2970" y="-11377.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="gray" d="M2181.86,-11065.75C2228.29,-11070.05 2303.61,-11077.95 2368,-11089 2532.39,-11117.21 2620.28,-11049.98 2734,-11172 2789.8,-11231.87 2703.47,-11296.8 2762,-11354 2807.18,-11398.16 2886.81,-11394.7 2933.02,-11387.99"/>
<polygon fill="gray" stroke="gray" points="2933.57,-11391.45 2942.91,-11386.44 2932.48,-11384.54 2933.57,-11391.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node249"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="2602,-11217 2528,-11217 2528,-11181 2602,-11181 2602,-11217"/>
<text text-anchor="middle" x="2565" y="-11195.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="gray" d="M2181.83,-11058.12C2230.24,-11055.81 2309.12,-11058.01 2368,-11089 2384.72,-11097.8 2380.88,-11109.66 2396,-11121 2433.51,-11149.12 2482.79,-11170.51 2518.26,-11183.72"/>
<polygon fill="gray" stroke="gray" points="2517.28,-11187.08 2527.88,-11187.22 2519.68,-11180.51 2517.28,-11187.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node248"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="2592,-11291 2538,-11291 2538,-11255 2592,-11255 2592,-11291"/>
<text text-anchor="middle" x="2565" y="-11269.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge698" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="gray" d="M2184.44,-11115.41C2234.79,-11117.12 2315.02,-11127 2368,-11169 2390.12,-11186.53 2374.29,-11207.96 2396,-11226 2433.63,-11257.28 2490.67,-11267.8 2527.64,-11271.3"/>
<polygon fill="gray" stroke="gray" points="2527.71,-11274.82 2537.96,-11272.15 2528.28,-11267.84 2527.71,-11274.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node179"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1720,-10997 1650,-10997 1650,-10961 1720,-10961 1720,-10997"/>
<text text-anchor="middle" x="1685" y="-10975.3" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="gray" d="M1720.29,-10978.77C1764.2,-10980.33 1840.11,-10989.57 1886,-11032 1905.71,-11050.23 1885.04,-11072.22 1906,-11089 1954.6,-11127.9 2028.54,-11129.63 2079.4,-11124.91"/>
<polygon fill="gray" stroke="gray" points="2079.98,-11128.37 2089.57,-11123.85 2079.26,-11121.41 2079.98,-11128.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node180"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1717.5,-10943 1652.5,-10943 1652.5,-10907 1717.5,-10907 1717.5,-10943"/>
<text text-anchor="middle" x="1685" y="-10921.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge465" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="gray" d="M1717.73,-10926.54C1757.65,-10929.1 1827.99,-10935.67 1886,-10952 1962.33,-10973.48 2045.61,-11013.84 2094.19,-11039.24"/>
<polygon fill="gray" stroke="gray" points="2092.67,-11042.39 2103.14,-11043.96 2095.93,-11036.2 2092.67,-11042.39"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().</title>
<g id="a_node181"><a xlink:title=" &#160;&#160;&#160;pub fn from_slice(bytes: &amp;[u8]) &#45;&gt; Option&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO use Iterator::array_chunks once that&#39;s stabilized. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// See https://github.com/rust&#45;lang/rust/issues/100450. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chu...">
<polygon fill="white" stroke="black" points="3900,-3393 3814,-3393 3814,-3357 3900,-3357 3900,-3393"/>
<text text-anchor="middle" x="3857" y="-3371.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_slice</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge430" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="gray" d="M3813.98,-3376.79C3758.25,-3381.79 3663.98,-3400.1 3628,-3466 3615.87,-3488.22 3615.87,-10733.78 3628,-10756 3653.09,-10801.95 3711.8,-10810.5 3763.5,-10807.79"/>
<polygon fill="gray" stroke="gray" points="3763.99,-10811.26 3773.73,-10807.11 3763.52,-10804.28 3763.99,-10811.26"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().</title>
<g id="a_node182"><a xlink:title="pub fn scalar_from_slice_canonical(bytes: &amp;[u8]) &#45;&gt; Option&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 32]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_canonical_bytes(scalar_bytes).into(...">
<polygon fill="white" stroke="black" points="3509,-8088 3303,-8088 3303,-8052 3509,-8052 3509,-8088"/>
<text text-anchor="middle" x="3406" y="-8066.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_canonical</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge467" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="gray" d="M3464.18,-8088.05C3513.62,-8107.02 3582.04,-8142.16 3614,-8199 3648.94,-8261.13 3594.57,-10711.79 3642,-10765 3671.82,-10798.45 3720.53,-10806.53 3763.95,-10805.64"/>
<polygon fill="gray" stroke="gray" points="3764.12,-10809.14 3773.99,-10805.28 3763.87,-10802.14 3764.12,-10809.14"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().</title>
<g id="a_node183"><a xlink:title="pub fn scalar_from_slice_wide(bytes: &amp;[u8]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="3492.5,-8034 3319.5,-8034 3319.5,-7998 3492.5,-7998 3492.5,-8034"/>
<text text-anchor="middle" x="3406" y="-8012.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge540" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M3492.64,-8003.48C3535.39,-8002.41 3584.2,-8009.97 3614,-8043 3652.79,-8086 3610.07,-9036.69 3642,-9085 3757.91,-9260.37 3956.15,-9106.59 4072,-9282 4156.23,-9409.53 4011.82,-10538.23 4108,-10657 4108.5,-10657.61 4109.01,-10658.22 4109.53,-10658.81"/>
<polygon fill="gray" stroke="gray" points="4107.21,-10661.43 4116.86,-10665.8 4112.04,-10656.37 4107.21,-10661.43"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node184"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="2592,-5758 2538,-5758 2538,-5722 2592,-5722 2592,-5758"/>
<text text-anchor="middle" x="2565" y="-5736.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node189"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="2998,-3393 2942,-3393 2942,-3357 2998,-3357 2998,-3393"/>
<text text-anchor="middle" x="2970" y="-3371.3" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2569.57,-5721.8C2590.21,-5615.53 2694.79,-5064.38 2734,-4609 2739.49,-4545.22 2725.38,-3509.51 2762,-3457 2800.73,-3401.47 2883.36,-3383.54 2931.69,-3377.75"/>
<polygon fill="gray" stroke="gray" points="2932.18,-3381.22 2941.74,-3376.67 2931.42,-3374.26 2932.18,-3381.22"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node185"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2194.5,-5812 2079.5,-5812 2079.5,-5776 2194.5,-5776 2194.5,-5812"/>
<text text-anchor="middle" x="2137" y="-5790.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M2194.62,-5799.61C2360.19,-5818.47 2851.85,-5892.31 3170,-6128 3458.61,-6341.81 3429.31,-6494.57 3642,-6784 3830.54,-7040.57 3969.62,-7055.51 4072,-7357 4101.48,-7443.8 4050.85,-10585.32 4108,-10657 4108.49,-10657.62 4109,-10658.22 4109.51,-10658.82"/>
<polygon fill="gray" stroke="gray" points="4107.17,-10661.42 4116.79,-10665.85 4112.03,-10656.39 4107.17,-10661.42"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="gray" d="M2194.57,-5786.83C2283.45,-5775.56 2453.31,-5754.03 2527.64,-5744.61"/>
<polygon fill="gray" stroke="gray" points="2528.42,-5748.04 2537.9,-5743.31 2527.54,-5741.09 2528.42,-5748.04"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node186"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="2629,-5812 2501,-5812 2501,-5776 2629,-5776 2629,-5812"/>
<text text-anchor="middle" x="2565" y="-5790.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="gray" d="M2194.57,-5794C2270.83,-5794 2406.71,-5794 2490.72,-5794"/>
<polygon fill="gray" stroke="gray" points="2490.95,-5797.5 2500.95,-5794 2490.95,-5790.5 2490.95,-5797.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="3455,-3393 3357,-3393 3357,-3357 3455,-3357 3455,-3393"/>
<text text-anchor="middle" x="3406" y="-3371.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge763" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2629.26,-5798.41C2663.7,-5797.51 2705.06,-5790.64 2734,-5767 3159.87,-5419.06 3064.95,-5148.81 3170,-4609 3182.23,-4546.16 3161.38,-3509.51 3198,-3457 3231.54,-3408.9 3298.03,-3389.01 3346.63,-3380.79"/>
<polygon fill="gray" stroke="gray" points="3347.37,-3384.22 3356.71,-3379.21 3346.29,-3377.3 3347.37,-3384.22"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M3455.2,-3388.17C3502.42,-3400.52 3576.61,-3418.48 3642,-3428 3689.39,-3434.9 4039.21,-3422.1 4072,-3457 4140.47,-3529.88 4045.89,-10578.62 4108,-10657 4108.49,-10657.62 4108.99,-10658.23 4109.51,-10658.82"/>
<polygon fill="gray" stroke="gray" points="4107.16,-10661.42 4116.77,-10665.87 4112.03,-10656.4 4107.16,-10661.42"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().</title>
<path fill="none" stroke="gray" d="M3455.05,-3375C3540.03,-3375 3716.13,-3375 3803.9,-3375"/>
<polygon fill="gray" stroke="gray" points="3803.9,-3378.5 3813.9,-3375 3803.9,-3371.5 3803.9,-3378.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="2657.5,-3413 2472.5,-3413 2472.5,-3377 2657.5,-3377 2657.5,-3413"/>
<text text-anchor="middle" x="2565" y="-3391.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M2582.56,-3413.15C2618.34,-3453.71 2702.25,-3556.35 2734,-3660 2795.8,-3861.73 2711.15,-4404.24 2762,-4609 3079.8,-5888.74 3766.29,-5988.32 4072,-7271 4093.81,-7362.5 4049.37,-10583.45 4108,-10657 4108.49,-10657.62 4109,-10658.22 4109.51,-10658.82"/>
<polygon fill="gray" stroke="gray" points="4107.17,-10661.42 4116.79,-10665.85 4112.03,-10656.39 4107.17,-10661.42"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2657.72,-3398.95C2690.6,-3400.19 2727.96,-3401.39 2762,-3402 2943.3,-3405.24 2988.96,-3412.37 3170,-3402 3230.54,-3398.53 3299.43,-3390.08 3346.89,-3383.55"/>
<polygon fill="gray" stroke="gray" points="3347.56,-3386.99 3356.98,-3382.15 3346.59,-3380.06 3347.56,-3386.99"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2657.7,-3390.45C2744.21,-3386.16 2869.59,-3379.93 2931.51,-3376.86"/>
<polygon fill="gray" stroke="gray" points="2931.78,-3380.35 2941.6,-3376.36 2931.44,-3373.36 2931.78,-3380.35"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M2998.27,-3378.13C3041.65,-3384.62 3125.96,-3403.72 3170,-3457 3209.6,-3504.9 3151.2,-3553.11 3198,-3594 3267.77,-3654.97 3528.85,-3585.47 3614,-3622 3868.09,-3731.01 3960.15,-3790.14 4072,-4043 4109.16,-4127.01 4050.93,-10585.02 4108,-10657 4108.49,-10657.62 4108.99,-10658.23 4109.51,-10658.82"/>
<polygon fill="gray" stroke="gray" points="4107.16,-10661.42 4116.77,-10665.87 4112.03,-10656.39 4107.16,-10661.42"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2998.15,-3375C3067.44,-3375 3252.05,-3375 3346.93,-3375"/>
<polygon fill="gray" stroke="gray" points="3346.93,-3378.5 3356.93,-3375 3346.93,-3371.5 3346.93,-3378.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node190"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="537,-6634 483,-6634 483,-6598 537,-6598 537,-6634"/>
<text text-anchor="middle" x="510" y="-6612.3" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M537.23,-6608.11C600.99,-6590.72 764.97,-6557.14 848,-6643 881.25,-6677.38 834.93,-7038.44 868,-7073 935.81,-7143.87 1065.91,-7124.63 1128.97,-7109.84"/>
<polygon fill="gray" stroke="gray" points="1129.97,-7113.2 1138.86,-7107.43 1128.31,-7106.4 1129.97,-7113.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M537.11,-6608.22C600.6,-6591.1 764.02,-6558.06 848,-6643 893.57,-6689.09 829.32,-6881.99 868,-6934 930.61,-7018.2 1064.38,-7039.11 1128.82,-7044.29"/>
<polygon fill="gray" stroke="gray" points="1128.69,-7047.79 1138.92,-7045.02 1129.19,-7040.81 1128.69,-7047.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M537.17,-6617.9C608.91,-6622.47 806.1,-6630.65 848,-6586 878.16,-6553.86 839.28,-5826.43 868,-5793 915.8,-5737.35 1000.2,-5726.73 1066.84,-5728.52"/>
<polygon fill="gray" stroke="gray" points="1066.83,-5732.03 1076.95,-5728.89 1067.09,-5725.03 1066.83,-5732.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node237"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="1253,-5949 1079,-5949 1079,-5913 1253,-5913 1253,-5949"/>
<text text-anchor="middle" x="1166" y="-5927.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M537.15,-6617.88C608.84,-6622.41 805.92,-6630.49 848,-6586 893.99,-6537.38 824.19,-6034.59 868,-5984 916.43,-5928.07 1001.84,-5917.73 1068.67,-5919.69"/>
<polygon fill="gray" stroke="gray" points="1068.68,-5923.19 1078.81,-5920.08 1068.95,-5916.2 1068.68,-5923.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node191"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="537,-6688 483,-6688 483,-6652 537,-6652 537,-6688"/>
<text text-anchor="middle" x="510" y="-6666.3" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M537.03,-6664.59C601.05,-6652.96 766.89,-6633.45 848,-6723 900.3,-6780.74 813.85,-7017 868,-7073 936.19,-7143.51 1066.11,-7124.45 1129.05,-7109.77"/>
<polygon fill="gray" stroke="gray" points="1130.02,-7113.14 1138.92,-7107.38 1128.37,-7106.33 1130.02,-7113.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M537.29,-6664.69C601.19,-6653.5 765.44,-6635.2 848,-6723 880.26,-6757.31 839.41,-6896.57 868,-6934 931.54,-7017.17 1064.27,-7038.58 1128.56,-7044.09"/>
<polygon fill="gray" stroke="gray" points="1128.39,-7047.59 1138.63,-7044.87 1128.93,-7040.61 1128.39,-7047.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M537.35,-6678.01C601.4,-6695.67 765.96,-6729.81 848,-6643 880.44,-6608.67 837.25,-5828.86 868,-5793 915.75,-5737.31 1000.16,-5726.7 1066.81,-5728.5"/>
<polygon fill="gray" stroke="gray" points="1066.81,-5732 1076.93,-5728.87 1067.06,-5725.01 1066.81,-5732"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M537.32,-6677.98C601.28,-6695.55 765.66,-6729.53 848,-6643 898.5,-6589.93 820.12,-6039.45 868,-5984 916.35,-5928 1001.76,-5917.67 1068.62,-5919.65"/>
<polygon fill="gray" stroke="gray" points="1068.63,-5923.15 1078.76,-5920.05 1068.91,-5916.16 1068.63,-5923.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node192"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="144,-5982 16,-5982 16,-5946 144,-5946 144,-5982"/>
<text text-anchor="middle" x="80" y="-5960.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node193"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="597,-5982 423,-5982 423,-5946 597,-5946 597,-5982"/>
<text text-anchor="middle" x="510" y="-5960.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="gray" d="M144.15,-5964C214.91,-5964 330.44,-5964 412.53,-5964"/>
<polygon fill="gray" stroke="gray" points="412.62,-5967.5 422.62,-5964 412.62,-5960.5 412.62,-5967.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M597.08,-5955.37C671.31,-5952.66 777.38,-5960.69 848,-6017 866.71,-6031.92 851.42,-6049.74 868,-6067 1218.11,-6431.64 1415.08,-6411.42 1906,-6532 1955.94,-6544.27 2329.79,-6525.58 2368,-6560 2545.59,-6720 2562.28,-7546.47 2563.84,-7711.36"/>
<polygon fill="gray" stroke="gray" points="2560.34,-7711.69 2563.93,-7721.66 2567.34,-7711.63 2560.34,-7711.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M590.31,-5982.04C666.67,-5994.3 780.26,-5998.3 848,-5934 893.91,-5890.43 824.05,-5838.55 868,-5793 918.32,-5740.85 1000.99,-5729.59 1066.35,-5730.25"/>
<polygon fill="gray" stroke="gray" points="1066.62,-5733.76 1076.69,-5730.46 1066.76,-5726.76 1066.62,-5733.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node194"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="1224.5,-7394 1107.5,-7394 1107.5,-7358 1224.5,-7358 1224.5,-7394"/>
<text text-anchor="middle" x="1166" y="-7372.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="gray" d="M1224.77,-7371.44C1293.92,-7362.62 1407.43,-7336.76 1464,-7261 1496.68,-7217.23 1466.74,-7067.83 1484,-7016 1524,-6895.88 1618.33,-6775.09 1661.6,-6723.71"/>
<polygon fill="gray" stroke="gray" points="1664.28,-6725.95 1668.09,-6716.07 1658.95,-6721.42 1664.28,-6725.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node195"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="1224.5,-7448 1107.5,-7448 1107.5,-7412 1224.5,-7412 1224.5,-7448"/>
<text text-anchor="middle" x="1166" y="-7426.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge585" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="gray" d="M1224.52,-7437.65C1365.26,-7452.71 1727.05,-7468.55 1886,-7261 1930.4,-7203.02 1879.83,-7001.17 1906,-6933 1949.63,-6819.35 2055.04,-6715.33 2106.6,-6669.16"/>
<polygon fill="gray" stroke="gray" points="2109.23,-6671.5 2114.4,-6662.25 2104.59,-6666.26 2109.23,-6671.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M1242.99,-1631.01C1311.31,-1642.19 1409.09,-1644.88 1464,-1586 1500.46,-1546.9 1445.81,-661.4 1484,-624 1515.91,-592.75 1853.12,-593.77 1886,-624 1925.07,-659.92 1868.12,-824.83 1906,-862 1979.44,-934.06 2275.81,-846.32 2368,-892 2590.16,-1002.07 2646.67,-1080.96 2734,-1313 2765.67,-1397.15 2704.13,-7718.18 2762,-7787 2775.69,-7803.28 2793.87,-7814.07 2813.79,-7821.02"/>
<polygon fill="gray" stroke="gray" points="2812.79,-7824.37 2823.38,-7824.04 2814.89,-7817.7 2812.79,-7824.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node197"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="624,-1604 396,-1604 396,-1568 624,-1568 624,-1604"/>
<text text-anchor="middle" x="510" y="-1582.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="gray" d="M624.17,-1590.67C748.15,-1595.79 945.15,-1603.92 1064.06,-1608.83"/>
<polygon fill="gray" stroke="gray" points="1064.12,-1612.34 1074.25,-1609.25 1064.41,-1605.34 1064.12,-1612.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="gray" d="M624.17,-1581.33C749.93,-1576.14 950.81,-1567.84 1069.12,-1562.96"/>
<polygon fill="gray" stroke="gray" points="1069.4,-1566.45 1079.25,-1562.54 1069.12,-1559.46 1069.4,-1566.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge605" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="gray" d="M1249.11,-1577.01C1317.11,-1586.59 1410.9,-1586.48 1464,-1529 1499.18,-1490.92 1446.95,-632.27 1484,-596 1547.84,-533.51 1796.92,-589.26 1886,-596 2266.14,-624.75 2484.95,-436.37 2734,-725 2797.38,-798.45 2701.84,-7633.89 2762,-7710 2772.92,-7723.82 2786.95,-7734.23 2802.55,-7742.01"/>
<polygon fill="gray" stroke="gray" points="2801.36,-7745.32 2811.91,-7746.3 2804.27,-7738.95 2801.36,-7745.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node199"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="1856,-6662 1514,-6662 1514,-6626 1856,-6626 1856,-6662"/>
<text text-anchor="middle" x="1685" y="-6640.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="gray" d="M1856.13,-6644C1945.31,-6644 2046.74,-6644 2099.59,-6644"/>
<polygon fill="gray" stroke="gray" points="2099.81,-6647.5 2109.81,-6644 2099.81,-6640.5 2099.81,-6647.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node200"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="1801.5,-6608 1568.5,-6608 1568.5,-6572 1801.5,-6572 1801.5,-6608"/>
<text text-anchor="middle" x="1685" y="-6586.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="gray" d="M1801.59,-6603.87C1900.27,-6615.71 2036.04,-6632 2099.96,-6639.68"/>
<polygon fill="gray" stroke="gray" points="2099.6,-6643.16 2109.95,-6640.87 2100.44,-6636.21 2099.6,-6643.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M1749.15,-6691.16C1887.07,-6680.16 2215.11,-6676.27 2368,-6865 2431.12,-6942.91 2329.79,-7691.7 2396,-7767 2419.07,-7793.24 2456.68,-7800.99 2490.47,-7801.75"/>
<polygon fill="gray" stroke="gray" points="2490.81,-7805.25 2500.81,-7801.77 2490.82,-7798.25 2490.81,-7805.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M2164.11,-6641.75C2211.94,-6639.18 2313.71,-6641.23 2368,-6698 2513.21,-6849.85 2555.3,-7559.49 2562.71,-7711.35"/>
<polygon fill="gray" stroke="gray" points="2559.23,-7711.86 2563.2,-7721.68 2566.22,-7711.53 2559.23,-7711.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node203"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="1254,-7226 1078,-7226 1078,-7190 1254,-7190 1254,-7226"/>
<text text-anchor="middle" x="1166" y="-7204.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="gray" d="M1254.12,-7203.45C1365.31,-7197.64 1553.5,-7187.82 1639.15,-7183.34"/>
<polygon fill="gray" stroke="gray" points="1639.51,-7186.83 1649.32,-7182.81 1639.15,-7179.84 1639.51,-7186.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M1193.19,-7099.96C1245.39,-7099.38 1365.83,-7095.46 1464,-7073 1668.55,-7026.19 1699.53,-6944.49 1906,-6907 2108.03,-6870.31 2207.04,-6779.51 2368,-6907 2499.26,-7010.96 2551.33,-7577.68 2561.9,-7711.62"/>
<polygon fill="gray" stroke="gray" points="2558.43,-7712.17 2562.69,-7721.87 2565.41,-7711.63 2558.43,-7712.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node205"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="2172.5,-7226 2101.5,-7226 2101.5,-7190 2172.5,-7190 2172.5,-7226"/>
<text text-anchor="middle" x="2137" y="-7204.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M2157.09,-7226.01C2202.75,-7270.41 2318.19,-7390.71 2368,-7517 2388.51,-7569 2357.43,-7726.54 2396,-7767 2419.92,-7792.09 2457.22,-7799.85 2490.6,-7800.9"/>
<polygon fill="gray" stroke="gray" points="2490.77,-7804.4 2500.81,-7801.02 2490.85,-7797.4 2490.77,-7804.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node206"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="1257,-7172 1075,-7172 1075,-7136 1257,-7136 1257,-7172"/>
<text text-anchor="middle" x="1166" y="-7150.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="gray" d="M1257.05,-7158.7C1368.7,-7164.53 1554.59,-7174.24 1639.38,-7178.67"/>
<polygon fill="gray" stroke="gray" points="1639.28,-7182.17 1649.45,-7179.2 1639.65,-7175.18 1639.28,-7182.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge586" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M1193.31,-7031.9C1246.6,-7003.95 1371.8,-6941.32 1484,-6908 1672.92,-6851.9 2214.58,-6713.3 2368,-6837 2509.51,-6951.09 2554.07,-7570.78 2562.44,-7711.54"/>
<polygon fill="gray" stroke="gray" points="2558.97,-7712.13 2563.04,-7721.91 2565.95,-7711.72 2558.97,-7712.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge597" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M1694.97,-7162.94C1720.19,-7114.49 1797.08,-6981.98 1906,-6933 1952.82,-6911.95 2331.1,-6897.32 2368,-6933 2434.65,-6997.45 2334.69,-7697.45 2396,-7767 2419.1,-7793.21 2456.71,-7800.96 2490.5,-7801.72"/>
<polygon fill="gray" stroke="gray" points="2490.83,-7805.22 2500.84,-7801.75 2490.85,-7798.22 2490.83,-7805.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge596" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="gray" d="M1720.56,-7183.07C1801.14,-7187.91 2001.39,-7199.92 2091.19,-7205.31"/>
<polygon fill="gray" stroke="gray" points="2091.13,-7208.81 2101.32,-7205.92 2091.55,-7201.83 2091.13,-7208.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge446" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="gray" d="M1255.03,-5735.02C1424.69,-5727.24 1788.78,-5719.88 1886,-5793 1906.45,-5808.38 1887.31,-5829.51 1906,-5847 2062.39,-5993.33 2238.54,-5813.39 2368,-5984 2427.88,-6062.92 2331.16,-7692.1 2396,-7767 2418.87,-7793.41 2456.46,-7801.18 2490.29,-7801.9"/>
<polygon fill="gray" stroke="gray" points="2490.65,-7805.4 2500.65,-7801.91 2490.66,-7798.4 2490.65,-7805.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node210"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="2176.5,-6497 2097.5,-6497 2097.5,-6461 2176.5,-6461 2176.5,-6497"/>
<text text-anchor="middle" x="2137" y="-6475.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M2176.9,-6475.87C2228.48,-6474.05 2318.7,-6479.36 2368,-6532 2535.34,-6710.7 2560.23,-7546.61 2563.53,-7711.65"/>
<polygon fill="gray" stroke="gray" points="2560.04,-7712.02 2563.73,-7721.95 2567.04,-7711.89 2560.04,-7712.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node211"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="741.5,-7340 278.5,-7340 278.5,-7304 741.5,-7304 741.5,-7340"/>
<text text-anchor="middle" x="510" y="-7318.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge554" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="gray" d="M738.06,-7340.04C774.82,-7343 812.46,-7346.06 848,-7349 934.08,-7356.11 1033.29,-7364.61 1097.46,-7370.15"/>
<polygon fill="gray" stroke="gray" points="1097.19,-7373.64 1107.45,-7371.01 1097.79,-7366.66 1097.19,-7373.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge552" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="gray" d="M606.73,-7303.98C680.02,-7295.77 779.79,-7297.36 848,-7349 868.4,-7364.45 847.68,-7387.44 868,-7403 933.27,-7452.96 1031.8,-7451.34 1097.25,-7442.9"/>
<polygon fill="gray" stroke="gray" points="1098.03,-7446.33 1107.46,-7441.49 1097.07,-7439.39 1098.03,-7446.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge551" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M588.79,-7340.03C665.37,-7352.75 780.39,-7357.49 848,-7292 901.06,-7240.6 814.99,-7178.45 868,-7127 938.22,-7058.86 1066.61,-7076.61 1129.03,-7090.57"/>
<polygon fill="gray" stroke="gray" points="1128.28,-7093.99 1138.82,-7092.85 1129.87,-7087.17 1128.28,-7093.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge549" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M586.7,-7340.02C663.58,-7353.37 780.64,-7359.21 848,-7292 882.6,-7257.48 833.44,-7107.55 868,-7073 937.2,-7003.83 1066.08,-7022.07 1128.82,-7036.36"/>
<polygon fill="gray" stroke="gray" points="1128.12,-7039.79 1138.66,-7038.69 1129.74,-7032.98 1128.12,-7039.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge550" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M741.55,-7323.95C789.93,-7319.37 831.38,-7309.93 848,-7292 904.63,-7230.93 814.11,-5856.5 868,-5793 915.47,-5737.07 999.9,-5726.48 1066.64,-5728.35"/>
<polygon fill="gray" stroke="gray" points="1066.64,-5731.85 1076.77,-5728.73 1066.91,-5724.86 1066.64,-5731.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge553" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M741.53,-7323.92C789.9,-7319.35 831.36,-7309.91 848,-7292 897.47,-7238.76 820.92,-6039.36 868,-5984 916.01,-5927.55 1001.67,-5917.31 1068.7,-5919.44"/>
<polygon fill="gray" stroke="gray" points="1068.73,-5922.94 1078.87,-5919.86 1069.02,-5915.95 1068.73,-5922.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node212"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="653,-7448 367,-7448 367,-7412 653,-7412 653,-7448"/>
<text text-anchor="middle" x="510" y="-7426.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge674" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="gray" d="M653.26,-7418.76C713.36,-7413.97 784.09,-7408.28 848,-7403 934.08,-7395.89 1033.29,-7387.39 1097.46,-7381.85"/>
<polygon fill="gray" stroke="gray" points="1097.79,-7385.34 1107.45,-7380.99 1097.19,-7378.36 1097.79,-7385.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge669" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="gray" d="M653.31,-7430C790.77,-7430 993.02,-7430 1097.3,-7430"/>
<polygon fill="gray" stroke="gray" points="1097.39,-7433.5 1107.39,-7430 1097.39,-7426.5 1097.39,-7433.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge671" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M581.57,-7448.05C658.41,-7463.01 779.47,-7472.05 848,-7403 891.32,-7359.35 824.92,-7170.88 868,-7127 936.72,-7057.01 1066.39,-7075.82 1129.16,-7090.34"/>
<polygon fill="gray" stroke="gray" points="1128.46,-7093.77 1139,-7092.7 1130.09,-7086.96 1128.46,-7093.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge673" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M581.03,-7448.06C657.97,-7463.23 779.67,-7472.67 848,-7403 899.44,-7350.55 816.84,-7125.73 868,-7073 936.31,-7002.6 1066.17,-7021.61 1129.07,-7036.25"/>
<polygon fill="gray" stroke="gray" points="1128.39,-7039.69 1138.93,-7038.64 1130.04,-7032.89 1128.39,-7039.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge670" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M578.53,-7448.02C655.84,-7464.09 780.47,-7475.25 848,-7403 878.54,-7370.32 839.07,-5827.11 868,-5793 915.45,-5737.05 999.88,-5726.46 1066.62,-5728.34"/>
<polygon fill="gray" stroke="gray" points="1066.63,-5731.84 1076.75,-5728.72 1066.89,-5724.84 1066.63,-5731.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge672" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M578.85,-7448.07C656.16,-7464.08 780.51,-7475.09 848,-7403 901.88,-7345.45 816.96,-6044.09 868,-5984 915.98,-5927.52 1001.64,-5917.28 1068.68,-5919.42"/>
<polygon fill="gray" stroke="gray" points="1068.71,-5922.93 1078.85,-5919.85 1069.01,-5915.93 1068.71,-5922.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node213"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="592,-7394 428,-7394 428,-7358 592,-7358 592,-7394"/>
<text text-anchor="middle" x="510" y="-7372.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge782" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="gray" d="M592.18,-7376C722.48,-7376 975.93,-7376 1097.19,-7376"/>
<polygon fill="gray" stroke="gray" points="1097.45,-7379.5 1107.45,-7376 1097.45,-7372.5 1097.45,-7379.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge781" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="gray" d="M592.04,-7382.38C660.31,-7387.78 760.55,-7395.77 848,-7403 934.08,-7410.11 1033.29,-7418.61 1097.46,-7424.15"/>
<polygon fill="gray" stroke="gray" points="1097.19,-7427.64 1107.45,-7425.01 1097.79,-7420.66 1097.19,-7427.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge783" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M592.25,-7380.98C680.37,-7384.47 813.17,-7383.48 848,-7349 883.2,-7314.15 832.99,-7162.04 868,-7127 937.16,-7057.79 1066.06,-7076.05 1128.81,-7090.35"/>
<polygon fill="gray" stroke="gray" points="1128.12,-7093.78 1138.65,-7092.69 1129.73,-7086.97 1128.12,-7093.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge779" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M592.36,-7381.09C680.58,-7384.68 813.48,-7383.79 848,-7349 891.32,-7305.35 824.92,-7116.88 868,-7073 936.72,-7003.01 1066.39,-7021.82 1129.16,-7036.34"/>
<polygon fill="gray" stroke="gray" points="1128.46,-7039.77 1139,-7038.7 1130.09,-7032.96 1128.46,-7039.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge778" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M592.34,-7381.44C680.92,-7385.38 814.48,-7384.85 848,-7349 877.52,-7317.43 840.04,-5825.96 868,-5793 915.46,-5737.06 999.89,-5726.47 1066.63,-5728.34"/>
<polygon fill="gray" stroke="gray" points="1066.63,-5731.85 1076.76,-5728.73 1066.9,-5724.85 1066.63,-5731.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge780" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M592.33,-7381.43C680.89,-7385.36 814.44,-7384.82 848,-7349 899.85,-7293.65 818.89,-6041.79 868,-5984 915.99,-5927.53 1001.66,-5917.29 1068.69,-5919.43"/>
<polygon fill="gray" stroke="gray" points="1068.72,-5922.94 1078.86,-5919.85 1069.01,-5915.94 1068.72,-5922.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node214"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="655,-6771 365,-6771 365,-6735 655,-6735 655,-6771"/>
<text text-anchor="middle" x="510" y="-6749.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M581.27,-6734.97C658.15,-6719.92 779.51,-6710.7 848,-6780 893.87,-6826.42 822.37,-7026.34 868,-7073 936.57,-7143.14 1066.31,-7124.25 1129.13,-7109.69"/>
<polygon fill="gray" stroke="gray" points="1130.07,-7113.07 1138.97,-7107.32 1128.43,-7106.26 1130.07,-7113.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M584.68,-6734.98C661.03,-6721.13 778.71,-6714.03 848,-6780 897.99,-6827.59 825.16,-6879.89 868,-6934 932.97,-7016.06 1065.01,-7038.01 1128.84,-7043.87"/>
<polygon fill="gray" stroke="gray" points="1128.59,-7047.36 1138.85,-7044.7 1129.17,-7040.38 1128.59,-7047.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M655.24,-6758.63C734.43,-6758.27 821.78,-6751.05 848,-6723 883.29,-6685.25 834.4,-5832.26 868,-5793 915.7,-5737.26 1000.11,-5726.65 1066.78,-5728.47"/>
<polygon fill="gray" stroke="gray" points="1066.77,-5731.97 1076.9,-5728.84 1067.03,-5724.98 1066.77,-5731.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M655.18,-6758.57C734.35,-6758.2 821.7,-6750.98 848,-6723 904.26,-6663.15 814.42,-6046.26 868,-5984 916.26,-5927.93 1001.68,-5917.59 1068.56,-5919.6"/>
<polygon fill="gray" stroke="gray" points="1068.58,-5923.1 1078.71,-5920 1068.86,-5916.11 1068.58,-5923.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node215"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="575.5,-7149 444.5,-7149 444.5,-7113 575.5,-7113 575.5,-7149"/>
<text text-anchor="middle" x="510" y="-7127.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M575.8,-7127.93C711.66,-7121.49 1022.52,-7106.75 1128.68,-7101.72"/>
<polygon fill="gray" stroke="gray" points="1129.06,-7105.21 1138.88,-7101.24 1128.73,-7098.22 1129.06,-7105.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M575.66,-7141.87C647.5,-7150.51 764.38,-7154 848,-7104 862.07,-7095.59 853.97,-7081.49 868,-7073 950.32,-7023.18 1069.64,-7031.46 1128.85,-7039.75"/>
<polygon fill="gray" stroke="gray" points="1128.45,-7043.22 1138.85,-7041.23 1129.47,-7036.3 1128.45,-7043.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="gray" d="M575.65,-7116.02C650.22,-7102.84 772.25,-7094.41 848,-7158 875.08,-7180.73 840.03,-7213.37 868,-7235 972.77,-7316.03 1332.51,-7250.9 1464,-7235 1525.94,-7227.51 1595.6,-7208.57 1639.62,-7195.24"/>
<polygon fill="gray" stroke="gray" points="1640.89,-7198.51 1649.43,-7192.24 1638.84,-7191.82 1640.89,-7198.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node216"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="637,-7095 383,-7095 383,-7059 637,-7059 637,-7095"/>
<text text-anchor="middle" x="510" y="-7073.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="gray" d="M637.12,-7071.14C719.93,-7070.2 818.22,-7075.58 848,-7104 898.89,-7152.56 824.65,-7205.61 868,-7261 923.46,-7331.87 1028.44,-7359.11 1097.56,-7369.55"/>
<polygon fill="gray" stroke="gray" points="1097.09,-7373.02 1107.49,-7370.97 1098.08,-7366.09 1097.09,-7373.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="gray" d="M637.21,-7070.61C720.36,-7069.39 819.04,-7074.65 848,-7104 894.78,-7151.4 821.48,-7355.35 868,-7403 926.4,-7462.81 1029.28,-7457.92 1097.3,-7446.14"/>
<polygon fill="gray" stroke="gray" points="1098.28,-7449.52 1107.49,-7444.28 1097.02,-7442.64 1098.28,-7449.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M637.1,-7081.43C789.38,-7086.79 1036.56,-7095.48 1128.79,-7098.73"/>
<polygon fill="gray" stroke="gray" points="1128.88,-7102.23 1139,-7099.09 1129.13,-7095.24 1128.88,-7102.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M637.1,-7071.02C789.38,-7063.8 1036.56,-7052.09 1128.79,-7047.72"/>
<polygon fill="gray" stroke="gray" points="1129.17,-7051.2 1139,-7047.23 1128.84,-7044.21 1129.17,-7051.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M637.23,-7083.83C720.69,-7085.29 819.74,-7080.13 848,-7050 895.78,-6999.06 822.74,-5846.19 868,-5793 915.54,-5737.13 999.96,-5726.53 1066.68,-5728.39"/>
<polygon fill="gray" stroke="gray" points="1066.68,-5731.89 1076.81,-5728.77 1066.94,-5724.9 1066.68,-5731.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M637.2,-7083.8C720.65,-7085.25 819.7,-7080.09 848,-7050 888.58,-7006.85 829.55,-6029.06 868,-5984 916.11,-5927.63 1001.76,-5917.38 1068.76,-5919.49"/>
<polygon fill="gray" stroke="gray" points="1068.79,-5922.99 1078.92,-5919.91 1069.08,-5916 1068.79,-5922.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node217"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="756.5,-6825 263.5,-6825 263.5,-6789 756.5,-6789 756.5,-6825"/>
<text text-anchor="middle" x="510" y="-6803.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M756.9,-6805.34C798.2,-6810.01 832.67,-6818.72 848,-6834 885.75,-6871.62 830.45,-7035.18 868,-7073 936.94,-7142.43 1065.94,-7124.07 1128.77,-7109.69"/>
<polygon fill="gray" stroke="gray" points="1129.7,-7113.07 1138.62,-7107.35 1128.08,-7106.26 1129.7,-7113.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M589.44,-6788.99C665.14,-6776.6 778.25,-6772 848,-6834 881.88,-6864.11 838.67,-6899.44 868,-6934 935.42,-7013.43 1065.25,-7036.63 1128.53,-7043.32"/>
<polygon fill="gray" stroke="gray" points="1128.53,-7046.84 1138.82,-7044.33 1129.21,-7039.87 1128.53,-7046.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M756.8,-6809.48C798.43,-6804.79 833.06,-6795.86 848,-6780 885.61,-6740.08 832.37,-5834.69 868,-5793 915.66,-5737.23 1000.07,-5726.62 1066.75,-5728.45"/>
<polygon fill="gray" stroke="gray" points="1066.75,-5731.95 1076.88,-5728.83 1067.01,-5724.96 1066.75,-5731.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M756.75,-6809.43C798.38,-6804.74 833.02,-6795.82 848,-6780 878.41,-6747.87 839.18,-6017.56 868,-5984 916.21,-5927.88 1001.63,-5917.55 1068.53,-5919.57"/>
<polygon fill="gray" stroke="gray" points="1068.55,-5923.08 1078.68,-5919.98 1068.83,-5916.08 1068.55,-5923.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node218"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="604.5,-7257 415.5,-7257 415.5,-7221 604.5,-7221 604.5,-7257"/>
<text text-anchor="middle" x="510" y="-7235.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M592.22,-7257.01C667.54,-7268.61 778.22,-7271.96 848,-7212 877.44,-7186.71 838.7,-7152.45 868,-7127 941.53,-7063.13 1067.37,-7078.55 1128.94,-7091.22"/>
<polygon fill="gray" stroke="gray" points="1128.44,-7094.69 1138.95,-7093.37 1129.91,-7087.85 1128.44,-7094.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="gray" d="M604.53,-7249.1C672.67,-7257.58 766.87,-7271.6 848,-7292 857.13,-7294.3 858.72,-7297.42 868,-7299 1314.3,-7374.85 1438.54,-7333.67 1886,-7265 1958.66,-7253.85 2041.6,-7233.37 2091.32,-7220.23"/>
<polygon fill="gray" stroke="gray" points="2092.35,-7223.58 2101.11,-7217.63 2090.55,-7216.82 2092.35,-7223.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node219"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="574,-7203 446,-7203 446,-7167 574,-7167 574,-7203"/>
<text text-anchor="middle" x="510" y="-7181.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M574.05,-7195.68C645.74,-7204.45 763.75,-7208.38 848,-7158 862.07,-7149.59 853.97,-7135.49 868,-7127 950.32,-7077.18 1069.64,-7085.46 1128.85,-7093.75"/>
<polygon fill="gray" stroke="gray" points="1128.45,-7097.22 1138.85,-7095.23 1129.47,-7090.3 1128.45,-7097.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="gray" d="M574.03,-7171.33C647.62,-7159.22 769.27,-7151.67 848,-7212 868.98,-7228.08 846.4,-7252.78 868,-7268 976.26,-7344.29 1331.69,-7273.9 1464,-7268 1700.96,-7257.44 1983.53,-7226.04 2091.28,-7213.38"/>
<polygon fill="gray" stroke="gray" points="2091.93,-7216.83 2101.45,-7212.18 2091.11,-7209.88 2091.93,-7216.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node220"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="733.5,-6933 286.5,-6933 286.5,-6897 733.5,-6897 733.5,-6933"/>
<text text-anchor="middle" x="510" y="-6911.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M586.14,-6896.98C662.3,-6883.59 778.51,-6877.31 848,-6942 891.11,-6982.13 825.11,-7032.64 868,-7073 939.11,-7139.91 1066.63,-7122.89 1128.86,-7109.29"/>
<polygon fill="gray" stroke="gray" points="1130.01,-7112.62 1138.98,-7106.98 1128.45,-7105.79 1130.01,-7112.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M733.65,-6925.33C772.01,-6929.24 811.32,-6934.62 848,-6942 952.94,-6963.11 1071.57,-7007.94 1129.44,-7031.24"/>
<polygon fill="gray" stroke="gray" points="1128.27,-7034.55 1138.85,-7035.06 1130.9,-7028.06 1128.27,-7034.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M733.5,-6919.66C785.22,-6915.83 830.36,-6906.76 848,-6888 889.68,-6843.67 828.51,-5839.29 868,-5793 915.61,-5737.19 1000.02,-5726.58 1066.72,-5728.42"/>
<polygon fill="gray" stroke="gray" points="1066.72,-5731.93 1076.84,-5728.8 1066.98,-5724.93 1066.72,-5731.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M733.9,-6919.58C785.43,-6915.74 830.37,-6906.68 848,-6888 882.48,-6851.47 835.33,-6022.16 868,-5984 916.2,-5927.71 1001.84,-5917.45 1068.82,-5919.54"/>
<polygon fill="gray" stroke="gray" points="1068.84,-5923.04 1078.98,-5919.95 1069.13,-5916.05 1068.84,-5923.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node221"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="639,-6987 381,-6987 381,-6951 639,-6951 639,-6987"/>
<text text-anchor="middle" x="510" y="-6965.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="gray" d="M639.06,-6962.95C721.57,-6962.02 818.71,-6967.51 848,-6996 907.28,-7053.66 809.03,-7123.02 868,-7181 920.5,-7232.62 1006.32,-7235.22 1072.23,-7227.34"/>
<polygon fill="gray" stroke="gray" points="1072.75,-7230.8 1082.22,-7226.04 1071.86,-7223.86 1072.75,-7230.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M594.44,-6950.98C669.48,-6939.95 778.32,-6937.51 848,-6996 875.08,-7018.73 841.04,-7050.12 868,-7073 942.08,-7135.86 1067.13,-7121.08 1128.63,-7108.7"/>
<polygon fill="gray" stroke="gray" points="1129.58,-7112.08 1138.64,-7106.59 1128.13,-7105.23 1129.58,-7112.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M639.25,-6976.96C702.25,-6981.46 779.22,-6987.83 848,-6996 950.3,-7008.15 1070.19,-7028.83 1128.9,-7039.38"/>
<polygon fill="gray" stroke="gray" points="1128.33,-7042.84 1138.79,-7041.17 1129.57,-7035.95 1128.33,-7042.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M639.44,-6975.85C722.42,-6977.18 819.97,-6971.84 848,-6942 891.71,-6895.47 826.59,-5841.59 868,-5793 915.58,-5737.17 1000,-5726.56 1066.71,-5728.41"/>
<polygon fill="gray" stroke="gray" points="1066.71,-5731.91 1076.83,-5728.79 1066.97,-5724.92 1066.71,-5731.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M639.41,-6975.82C722.37,-6977.13 819.92,-6971.79 848,-6942 884.51,-6903.26 833.4,-6024.46 868,-5984 916.17,-5927.68 1001.81,-5917.43 1068.8,-5919.52"/>
<polygon fill="gray" stroke="gray" points="1068.82,-5923.02 1078.96,-5919.94 1069.11,-5916.03 1068.82,-5923.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node222"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="749.5,-6879 270.5,-6879 270.5,-6843 749.5,-6843 749.5,-6879"/>
<text text-anchor="middle" x="510" y="-6857.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M749.84,-6858.9C794.14,-6863.35 831.64,-6872.09 848,-6888 907.28,-6945.66 809.03,-7015.02 868,-7073 937.77,-7141.59 1066.38,-7123.63 1128.94,-7109.52"/>
<polygon fill="gray" stroke="gray" points="1129.81,-7112.91 1138.75,-7107.22 1128.21,-7106.1 1129.81,-7112.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M617.01,-6842.98C688.64,-6836.72 781.85,-6840.75 848,-6888 866.14,-6900.96 851.85,-6918.63 868,-6934 942.91,-7005.29 1067.57,-7032.24 1128.8,-7041.56"/>
<polygon fill="gray" stroke="gray" points="1128.37,-7045.03 1138.77,-7043 1129.38,-7038.1 1128.37,-7045.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M749.6,-6864.26C794.42,-6859.8 832.21,-6850.78 848,-6834 887.64,-6791.88 830.44,-5836.99 868,-5793 915.63,-5737.21 1000.05,-5726.6 1066.74,-5728.44"/>
<polygon fill="gray" stroke="gray" points="1066.74,-5731.94 1076.86,-5728.81 1067,-5724.94 1066.74,-5731.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M749.55,-6864.21C794.37,-6859.76 832.18,-6850.74 848,-6834 880.44,-6799.67 837.25,-6019.86 868,-5984 916.24,-5927.75 1001.88,-5917.48 1068.84,-5919.56"/>
<polygon fill="gray" stroke="gray" points="1068.86,-5923.06 1079,-5919.97 1069.15,-5916.07 1068.86,-5923.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node223"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="584.5,-7041 435.5,-7041 435.5,-7005 584.5,-7005 584.5,-7041"/>
<text text-anchor="middle" x="510" y="-7019.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge686" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="gray" d="M584.74,-7005.23C660.86,-6991.67 778.08,-6984.91 848,-7050 891.11,-7090.13 825.11,-7140.64 868,-7181 920.26,-7230.17 1002.97,-7234.02 1067.86,-7227.2"/>
<polygon fill="gray" stroke="gray" points="1068.58,-7230.64 1078.11,-7226.02 1067.78,-7223.69 1068.58,-7230.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge688" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="gray" d="M584.61,-7013.49C655.9,-7007.72 765.08,-7008.14 848,-7050 860.09,-7056.1 855.94,-7066.83 868,-7073 953.05,-7116.51 1069.79,-7111.32 1128.35,-7105.04"/>
<polygon fill="gray" stroke="gray" points="1129.06,-7108.48 1138.59,-7103.86 1128.26,-7101.53 1129.06,-7108.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge684" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="gray" d="M584.75,-7025.59C724.78,-7030.52 1024.44,-7041.06 1128.5,-7044.72"/>
<polygon fill="gray" stroke="gray" points="1128.68,-7048.22 1138.8,-7045.08 1128.93,-7041.23 1128.68,-7048.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge687" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M584.88,-7028.07C673.2,-7032.34 813.46,-7032.8 848,-6996 893.74,-6947.26 824.66,-5843.89 868,-5793 915.56,-5737.15 999.98,-5726.55 1066.69,-5728.4"/>
<polygon fill="gray" stroke="gray" points="1066.69,-5731.9 1076.82,-5728.78 1066.96,-5724.91 1066.69,-5731.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge685" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="gray" d="M584.86,-7028.06C673.16,-7032.31 813.4,-7032.75 848,-6996 886.55,-6955.06 831.47,-6026.76 868,-5984 916.14,-5927.65 1001.78,-5917.4 1068.78,-5919.5"/>
<polygon fill="gray" stroke="gray" points="1068.81,-5923.01 1078.94,-5919.92 1069.09,-5916.01 1068.81,-5923.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node224"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="648.5,-5575 371.5,-5575 371.5,-5539 648.5,-5539 648.5,-5575"/>
<text text-anchor="middle" x="510" y="-5553.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M586.77,-5538.94C662.87,-5525.7 778.53,-5519.72 848,-5584 889.62,-5622.51 826.78,-5671.06 868,-5710 919.85,-5758.99 1001.8,-5763.97 1066.49,-5758.11"/>
<polygon fill="gray" stroke="gray" points="1067.12,-5761.56 1076.72,-5757.08 1066.42,-5754.6 1067.12,-5761.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node225"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="537,-5845 483,-5845 483,-5809 537,-5809 537,-5845"/>
<text text-anchor="middle" x="510" y="-5823.3" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M537.11,-5827.17C594.18,-5827.06 734.01,-5824.09 848,-5800 857.21,-5798.05 858.89,-5795.39 868,-5793 933.49,-5775.81 1008.57,-5762.47 1066.86,-5753.47"/>
<polygon fill="gray" stroke="gray" points="1067.45,-5756.92 1076.8,-5751.95 1066.39,-5750 1067.45,-5756.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node234"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="1244,-5895 1088,-5895 1088,-5859 1244,-5859 1244,-5895"/>
<text text-anchor="middle" x="1166" y="-5873.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="gray" d="M537.04,-5828.99C627.03,-5835.87 927.58,-5858.85 1077.88,-5870.34"/>
<polygon fill="gray" stroke="gray" points="1077.76,-5873.84 1088,-5871.11 1078.29,-5866.86 1077.76,-5873.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node235"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="1240.5,-5841 1091.5,-5841 1091.5,-5805 1240.5,-5805 1240.5,-5841"/>
<text text-anchor="middle" x="1166" y="-5819.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="gray" d="M537.04,-5826.84C627.73,-5826.29 932.25,-5824.42 1081.34,-5823.51"/>
<polygon fill="gray" stroke="gray" points="1081.39,-5827.01 1091.37,-5823.45 1081.35,-5820.01 1081.39,-5827.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node226"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="707.5,-5791 312.5,-5791 312.5,-5755 707.5,-5755 707.5,-5791"/>
<text text-anchor="middle" x="510" y="-5769.3" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M707.66,-5763.08C826.17,-5757.1 971.98,-5749.74 1066.63,-5744.96"/>
<polygon fill="gray" stroke="gray" points="1066.96,-5748.45 1076.77,-5744.45 1066.61,-5741.46 1066.96,-5748.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="gray" d="M610.9,-5754.99C683.54,-5747.62 780.55,-5750.29 848,-5800 867.27,-5814.2 848.81,-5835.7 868,-5850 927.5,-5894.35 1013.48,-5897.5 1077.63,-5891.68"/>
<polygon fill="gray" stroke="gray" points="1078.13,-5895.15 1087.73,-5890.68 1077.43,-5888.19 1078.13,-5895.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="gray" d="M707.66,-5788.04C832.52,-5797.58 987.69,-5809.44 1081.4,-5816.61"/>
<polygon fill="gray" stroke="gray" points="1081.15,-5820.1 1091.39,-5817.37 1081.69,-5813.12 1081.15,-5820.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node227"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="654,-5737 366,-5737 366,-5701 654,-5701 654,-5737"/>
<text text-anchor="middle" x="510" y="-5715.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M654.12,-5723.6C779.16,-5727.61 957.35,-5733.33 1066.86,-5736.85"/>
<polygon fill="gray" stroke="gray" points="1066.8,-5740.35 1076.91,-5737.17 1067.02,-5733.35 1066.8,-5740.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="gray" d="M588.83,-5700.99C664.61,-5688.43 778.26,-5683.54 848,-5746 883.06,-5777.4 833.11,-5818.41 868,-5850 923.86,-5900.57 1012.19,-5902.37 1078.02,-5894.51"/>
<polygon fill="gray" stroke="gray" points="1078.5,-5897.97 1087.97,-5893.22 1077.61,-5891.03 1078.5,-5897.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="gray" d="M615.19,-5700.99C687.12,-5694.41 781.44,-5698.06 848,-5746 866.42,-5759.27 849.72,-5779.54 868,-5793 928.91,-5837.84 1016.9,-5841.3 1081.29,-5836"/>
<polygon fill="gray" stroke="gray" points="1081.78,-5839.47 1091.42,-5835.07 1081.14,-5832.49 1081.78,-5839.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node228"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="691,-5683 329,-5683 329,-5647 691,-5647 691,-5683"/>
<text text-anchor="middle" x="510" y="-5661.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M691.12,-5658C743.42,-5661.58 799.48,-5671.12 848,-5692 858.98,-5696.73 857.06,-5705.16 868,-5710 930.27,-5737.56 1006.86,-5744.74 1066.67,-5745.19"/>
<polygon fill="gray" stroke="gray" points="1066.87,-5748.69 1076.87,-5745.2 1066.88,-5741.69 1066.87,-5748.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node229"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="640.5,-5629 379.5,-5629 379.5,-5593 640.5,-5593 640.5,-5629"/>
<text text-anchor="middle" x="510" y="-5607.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge437" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M596.03,-5592.99C670.84,-5582.38 778.39,-5580.56 848,-5638 873.62,-5659.14 842.6,-5688.6 868,-5710 922.17,-5755.65 1003.16,-5761.1 1066.89,-5756.27"/>
<polygon fill="gray" stroke="gray" points="1067.3,-5759.75 1076.97,-5755.41 1066.71,-5752.78 1067.3,-5759.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node230"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="840,-5521 180,-5521 180,-5485 840,-5485 840,-5521"/>
<text text-anchor="middle" x="510" y="-5499.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge528" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M835.33,-5521.08C840.36,-5523.77 844.63,-5526.73 848,-5530 905.78,-5586.04 810.8,-5653.37 868,-5710 918.86,-5760.36 1001.29,-5765.11 1066.42,-5758.81"/>
<polygon fill="gray" stroke="gray" points="1067.14,-5762.25 1076.72,-5757.71 1066.4,-5755.29 1067.14,-5762.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node231"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="622,-5467 398,-5467 398,-5431 622,-5431 622,-5467"/>
<text text-anchor="middle" x="510" y="-5445.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge593" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M622.16,-5443.05C707.92,-5441.08 817,-5445.16 848,-5476 885,-5512.81 831.38,-5672.81 868,-5710 918.39,-5761.18 1001.26,-5765.73 1066.68,-5759.15"/>
<polygon fill="gray" stroke="gray" points="1067.47,-5762.59 1077.02,-5758.01 1066.7,-5755.63 1067.47,-5762.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node232"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="725.5,-5413 294.5,-5413 294.5,-5377 725.5,-5377 725.5,-5413"/>
<text text-anchor="middle" x="510" y="-5391.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge726" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M581.26,-5376.98C658.12,-5361.95 779.47,-5352.74 848,-5422 893.12,-5467.6 823.35,-5663.93 868,-5710 918.52,-5762.12 1002.66,-5766.19 1068.51,-5759.19"/>
<polygon fill="gray" stroke="gray" points="1068.97,-5762.66 1078.5,-5758.03 1068.16,-5755.7 1068.97,-5762.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node233"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="729.5,-5899 290.5,-5899 290.5,-5863 729.5,-5863 729.5,-5899"/>
<text text-anchor="middle" x="510" y="-5877.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge741" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="gray" d="M601.28,-5899.01C675.36,-5908.37 778.94,-5908.37 848,-5854 870.42,-5836.35 846.46,-5811.71 868,-5793 922.05,-5746.05 1003.05,-5734.12 1066.81,-5733.21"/>
<polygon fill="gray" stroke="gray" points="1066.91,-5736.71 1076.89,-5733.15 1066.87,-5729.71 1066.91,-5736.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge742" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="gray" d="M729.68,-5879.66C848.63,-5878.94 989.13,-5878.08 1077.66,-5877.53"/>
<polygon fill="gray" stroke="gray" points="1077.94,-5881.03 1087.92,-5877.47 1077.9,-5874.03 1077.94,-5881.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge743" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="gray" d="M729.85,-5867.23C769.27,-5863.68 809.92,-5859.31 848,-5854 856.98,-5852.75 859.03,-5851.3 868,-5850 939.57,-5839.62 1021.45,-5832.53 1081.09,-5828.23"/>
<polygon fill="gray" stroke="gray" points="1081.48,-5831.71 1091.21,-5827.51 1080.98,-5824.73 1081.48,-5831.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node236"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="1712,-5925 1658,-5925 1658,-5889 1712,-5889 1712,-5925"/>
<text text-anchor="middle" x="1685" y="-5903.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="gray" d="M1244.12,-5881.48C1357.5,-5888.05 1564.71,-5900.08 1647.96,-5904.91"/>
<polygon fill="gray" stroke="gray" points="1647.76,-5908.4 1657.95,-5905.49 1648.17,-5901.41 1647.76,-5908.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="gray" d="M1240.67,-5826.36C1301.03,-5829.9 1388.5,-5836.88 1464,-5850 1529.86,-5861.45 1604.9,-5882.71 1648.13,-5895.78"/>
<polygon fill="gray" stroke="gray" points="1647.3,-5899.19 1657.89,-5898.75 1649.34,-5892.49 1647.3,-5899.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge574" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M1712.13,-5905.72C1825.91,-5900.76 2276.44,-5887.52 2368,-5984 2403.63,-6021.54 2391.1,-6397.47 2396,-6449 2444.31,-6957.25 2538.16,-7573.7 2559.58,-7711.7"/>
<polygon fill="gray" stroke="gray" points="2556.16,-7712.51 2561.16,-7721.85 2563.08,-7711.43 2556.16,-7712.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge648" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="gray" d="M1253.16,-5940.06C1315.23,-5942.71 1399.13,-5938.05 1464,-5904 1476.29,-5897.55 1471.43,-5885.89 1484,-5880 1645.8,-5804.22 1707.36,-5876.67 1886,-5880 1993.17,-5882 2291.7,-5822.72 2368,-5898 2389.82,-5919.53 2393.24,-6418.47 2396,-6449 2441.93,-6957.47 2537.6,-7573.75 2559.48,-7711.71"/>
<polygon fill="gray" stroke="gray" points="2556.06,-7712.53 2561.09,-7721.86 2562.98,-7711.43 2556.06,-7712.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<g id="a_node238"><a xlink:title="fn random_scalar&lt;R: Rng + CryptoRng&gt;(r: &amp;mut R) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;r.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="3465.5,-11399 3346.5,-11399 3346.5,-11363 3465.5,-11363 3465.5,-11399"/>
<text text-anchor="middle" x="3406" y="-11377.3" font-family="Helvetica,sans-Serif" font-size="14.00">random_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M3458.47,-11362.99C3613.71,-11308.62 4067.05,-11149.45 4072,-11143 4130.69,-11066.61 4045.27,-10784.11 4108,-10711 4108.63,-10710.27 4109.28,-10709.55 4109.94,-10708.85"/>
<polygon fill="gray" stroke="gray" points="4112.44,-10711.31 4117.56,-10702.03 4107.78,-10706.09 4112.44,-10711.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node239"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3045,-11217 2895,-11217 2895,-11181 3045,-11181 3045,-11217"/>
<text text-anchor="middle" x="2970" y="-11195.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="gray" d="M2974.38,-11180.64C2988,-11112.31 3045.64,-10871.33 3198,-10765 3235.62,-10738.75 3286.63,-10731.86 3328.61,-10731.6"/>
<polygon fill="gray" stroke="gray" points="3328.77,-10735.1 3338.79,-10731.66 3328.81,-10728.1 3328.77,-10735.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<g id="a_node240"><a xlink:title=" &#160;&#160;&#160;fn to_ristretto_scalar(b: &amp;[u8]) &#45;&gt; Option&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_canonical_bytes(b.try_into().ok()?).into_option() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3476,-11271 3336,-11271 3336,-11235 3476,-11235 3476,-11271"/>
<text text-anchor="middle" x="3406" y="-11249.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="gray" d="M3476.21,-11243.86C3523,-11233.81 3581.9,-11212.79 3614,-11169 3660.13,-11106.07 3588.1,-10875.42 3642,-10819 3672.65,-10786.91 3720.78,-10778.75 3763.64,-10779.23"/>
<polygon fill="gray" stroke="gray" points="3763.74,-10782.73 3773.83,-10779.51 3763.93,-10775.74 3763.74,-10782.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node241"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3007,-11271 2933,-11271 2933,-11235 3007,-11235 3007,-11271"/>
<text text-anchor="middle" x="2970" y="-11249.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="gray" d="M3007.25,-11260.27C3052.51,-11266.99 3128.96,-11270.2 3170,-11226 3239.83,-11150.79 3127.98,-10840.03 3198,-10765 3230.46,-10730.22 3284.06,-10724.01 3328.59,-10726.21"/>
<polygon fill="gray" stroke="gray" points="3328.61,-10729.72 3338.81,-10726.87 3329.06,-10722.74 3328.61,-10729.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<path fill="none" stroke="gray" d="M3007.26,-11253C3076.94,-11253 3231.02,-11253 3325.65,-11253"/>
<polygon fill="gray" stroke="gray" points="3325.74,-11256.5 3335.74,-11253 3325.74,-11249.5 3325.74,-11256.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<g id="a_node242"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new(req: &amp;svrb::request4::Create) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auth_commitment: to_ristretto_pt(&amp;req.auth_commitment) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode auth_commitment&#39; )...">
<polygon fill="white" stroke="black" points="2997,-11345 2943,-11345 2943,-11309 2997,-11309 2997,-11345"/>
<text text-anchor="middle" x="2970" y="-11323.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<path fill="none" stroke="gray" d="M2997.17,-11322.54C3060.96,-11311.66 3226.48,-11283.44 3325.95,-11266.48"/>
<polygon fill="gray" stroke="gray" points="3326.68,-11269.9 3335.95,-11264.77 3325.51,-11263 3326.68,-11269.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().</title>
<g id="a_node243"><a xlink:title=" &#160;&#160;&#160;fn scalars_summing_to_works() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(n in 1usize..10)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut seed = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.try_fill_bytes(&amp;mut seed...">
<polygon fill="white" stroke="black" points="2668,-11473 2462,-11473 2462,-11437 2668,-11437 2668,-11473"/>
<text text-anchor="middle" x="2565" y="-11451.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to_works</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M2636.07,-11473.02C2885.18,-11532.41 3731.29,-11692.87 4072,-11231 4140.76,-11137.79 4033.19,-10799.43 4108,-10711 4108.51,-10710.4 4109.03,-10709.8 4109.56,-10709.22"/>
<polygon fill="gray" stroke="gray" points="4112.05,-10711.69 4117.03,-10702.34 4107.31,-10706.55 4112.05,-10711.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<g id="a_node245"><a xlink:title="fn scalars_summing_to&lt;R: Rng + CryptoRng&gt;(n: NonZeroUsize, s: &amp;Scalar, rng: &amp;mut R) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut v: Vec&lt;Scalar&gt; = repeat_with(|| random_scalar(rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.take(n.get() &#45; 1) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3049,-11473 2891,-11473 2891,-11437 3049,-11437 3049,-11473"/>
<text text-anchor="middle" x="2970" y="-11451.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="gray" d="M2668.21,-11455C2733.71,-11455 2817.86,-11455 2880.49,-11455"/>
<polygon fill="gray" stroke="gray" points="2880.74,-11458.5 2890.74,-11455 2880.74,-11451.5 2880.74,-11458.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<g id="a_node244"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn create(&amp;mut self, req_bytes: &amp;[u8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.versions.clear(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2594.5,-11345 2535.5,-11345 2535.5,-11309 2594.5,-11309 2594.5,-11345"/>
<text text-anchor="middle" x="2565" y="-11323.3" font-family="Helvetica,sans-Serif" font-size="14.00">create</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<path fill="none" stroke="gray" d="M2594.66,-11327C2666.28,-11327 2852.98,-11327 2932.39,-11327"/>
<polygon fill="gray" stroke="gray" points="2932.86,-11330.5 2942.86,-11327 2932.86,-11323.5 2932.86,-11330.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="gray" d="M3049.02,-11442.78C3085.75,-11436.94 3130.15,-11429.76 3170,-11423 3225.96,-11413.5 3289.3,-11402.15 3336.11,-11393.64"/>
<polygon fill="gray" stroke="gray" points="3336.93,-11397.05 3346.14,-11391.81 3335.67,-11390.16 3336.93,-11397.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node246"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="2208.5,-11291 2065.5,-11291 2065.5,-11255 2208.5,-11255 2208.5,-11291"/>
<text text-anchor="middle" x="2137" y="-11269.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge462" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="gray" d="M2208.75,-11263.59C2260.5,-11257.19 2332.47,-11249.32 2396,-11246 2546.02,-11238.17 2583.79,-11243.76 2734,-11246 2799.45,-11246.97 2875.12,-11249.48 2922.52,-11251.21"/>
<polygon fill="gray" stroke="gray" points="2922.65,-11254.71 2932.78,-11251.59 2922.91,-11247.72 2922.65,-11254.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="edge460" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<path fill="none" stroke="gray" d="M2208.82,-11281.98C2299.47,-11293.47 2453.36,-11312.97 2525.07,-11322.06"/>
<polygon fill="gray" stroke="gray" points="2524.67,-11325.54 2535.03,-11323.33 2525.55,-11318.6 2524.67,-11325.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge461" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="gray" d="M2183.25,-11291.12C2234.08,-11310.55 2319.5,-11340.42 2396,-11354 2596.2,-11389.53 2841.53,-11385.56 2932.66,-11382.5"/>
<polygon fill="gray" stroke="gray" points="2932.88,-11385.99 2942.75,-11382.14 2932.63,-11379 2932.88,-11385.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge464" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="gray" d="M2208.82,-11273C2300.64,-11273 2457.32,-11273 2527.79,-11273"/>
<polygon fill="gray" stroke="gray" points="2527.94,-11276.5 2537.94,-11273 2527.94,-11269.5 2527.94,-11276.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge463" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="gray" d="M2208.82,-11260.7C2296.5,-11245.47 2443.32,-11219.96 2517.74,-11207.04"/>
<polygon fill="gray" stroke="gray" points="2518.49,-11210.46 2527.75,-11205.3 2517.29,-11203.56 2518.49,-11210.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge566" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="gray" d="M2997.17,-11381C3063.19,-11381 3238.21,-11381 3336.16,-11381"/>
<polygon fill="gray" stroke="gray" points="3336.26,-11384.5 3346.26,-11381 3336.26,-11377.5 3336.26,-11384.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge571" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="gray" d="M2592.14,-11269.17C2628.71,-11265.39 2695,-11264.51 2734,-11300 2770.68,-11333.37 2722.78,-11377.65 2762,-11408 2797.85,-11435.74 3124.74,-11410.59 3170,-11408 3226.15,-11404.78 3289.48,-11397.28 3336.23,-11391"/>
<polygon fill="gray" stroke="gray" points="3336.81,-11394.45 3346.25,-11389.64 3335.87,-11387.52 3336.81,-11394.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge572" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="gray" d="M2592.12,-11265.8C2629.52,-11255.72 2700.58,-11237.34 2762,-11226 2802.24,-11218.57 2847.25,-11212.44 2885,-11207.91"/>
<polygon fill="gray" stroke="gray" points="2885.42,-11211.39 2894.94,-11206.74 2884.59,-11204.44 2885.42,-11211.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge570" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="gray" d="M2592.29,-11269.01C2629.03,-11265.04 2695.53,-11263.94 2734,-11300 2774.9,-11338.35 2720.98,-11384.78 2762,-11423 2793.4,-11452.26 2839.84,-11461.34 2880.78,-11462.63"/>
<polygon fill="gray" stroke="gray" points="2880.73,-11466.13 2890.79,-11462.8 2880.85,-11459.13 2880.73,-11466.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge692" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M2571.73,-11180.96C2596.8,-11101.12 2697.11,-10771.23 2734,-10492 2747.85,-10387.2 2714.56,-9635.47 2762,-9541 2872.9,-9320.18 2964.61,-9277.17 3198,-9196 3384.72,-9131.06 3956.16,-9201.8 4072,-9362 4152.83,-9473.79 4021.03,-10495.92 4108,-10603 4125.7,-10624.79 4157.6,-10630.83 4182.92,-10631.83"/>
<polygon fill="gray" stroke="gray" points="4182.9,-10635.33 4192.96,-10631.99 4183.01,-10628.33 4182.9,-10635.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge689" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" d="M2571.85,-11180.97C2597.4,-11101.2 2699.46,-10771.53 2734,-10492 2741.58,-10430.66 2718.02,-8310.43 2762,-8267 2896.72,-8133.97 3479.34,-8133.91 3614,-8267 3661.22,-8313.67 3597.8,-10607.46 3642,-10657 3681.18,-10700.92 3752.92,-10701.09 3802.46,-10694.67"/>
<polygon fill="gray" stroke="gray" points="3802.96,-10698.13 3812.37,-10693.26 3801.98,-10691.2 3802.96,-10698.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge690" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="gray" d="M2602.03,-11202.71C2637.92,-11207.8 2693.4,-11219.55 2734,-11246 2750.4,-11256.68 2744.51,-11271.21 2762,-11280 2843.12,-11320.74 3080.87,-11282.82 3170,-11300 3235.61,-11312.65 3307.82,-11339.63 3354.64,-11358.97"/>
<polygon fill="gray" stroke="gray" points="3353.37,-11362.24 3363.95,-11362.86 3356.07,-11355.78 3353.37,-11362.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge691" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="gray" d="M2602.12,-11199C2665.3,-11199 2797.47,-11199 2884.7,-11199"/>
<polygon fill="gray" stroke="gray" points="2884.85,-11202.5 2894.85,-11199 2884.85,-11195.5 2884.85,-11202.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node250"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1756.5,-6032 1613.5,-6032 1613.5,-5996 1756.5,-5996 1756.5,-6032"/>
<text text-anchor="middle" x="1685" y="-6010.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node251"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="2201,-6032 2073,-6032 2073,-5996 2201,-5996 2201,-6032"/>
<text text-anchor="middle" x="2137" y="-6010.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="gray" d="M1756.81,-6014C1840.29,-6014 1978.34,-6014 2062.84,-6014"/>
<polygon fill="gray" stroke="gray" points="2062.87,-6017.5 2072.87,-6014 2062.87,-6010.5 2062.87,-6017.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M1690.53,-6032.14C1706.91,-6093.39 1769.48,-6292.99 1906,-6369 1995.7,-6418.94 2286.8,-6431.83 2368,-6369 2407.22,-6338.65 2359.32,-6294.37 2396,-6261 2431.65,-6228.56 2490.1,-6226.51 2527.81,-6229.28"/>
<polygon fill="gray" stroke="gray" points="2527.59,-6232.77 2537.86,-6230.17 2528.2,-6225.8 2527.59,-6232.77"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="gray" d="M1689.52,-6032.02C1703.28,-6096.84 1760,-6318.73 1906,-6404 1994.65,-6455.78 2285.22,-6464.73 2368,-6404 2401.43,-6379.47 2364.63,-6342.11 2396,-6315 2425.7,-6289.33 2469.83,-6283.04 2505.41,-6282.92"/>
<polygon fill="gray" stroke="gray" points="2505.63,-6286.42 2515.68,-6283.05 2505.72,-6279.42 2505.63,-6286.42"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M2201.16,-6013.89C2251.45,-6016.97 2320.98,-6028.7 2368,-6067 2391.13,-6085.84 2376.35,-6105.56 2396,-6128 2433.12,-6170.4 2491.3,-6201.86 2528.53,-6219.07"/>
<polygon fill="gray" stroke="gray" points="2527.42,-6222.41 2537.98,-6223.34 2530.31,-6216.03 2527.42,-6222.41"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node252"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1203.5,-6032 1128.5,-6032 1128.5,-5996 1203.5,-5996 1203.5,-6032"/>
<text text-anchor="middle" x="1166" y="-6010.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge668" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="gray" d="M1203.77,-6014C1286.62,-6014 1489.55,-6014 1603.32,-6014"/>
<polygon fill="gray" stroke="gray" points="1603.37,-6017.5 1613.37,-6014 1603.37,-6010.5 1603.37,-6017.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node253"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2282.5,-6252 1991.5,-6252 1991.5,-6216 2282.5,-6216 2282.5,-6252"/>
<text text-anchor="middle" x="2137" y="-6230.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M2282.52,-6234C2369.61,-6234 2473.8,-6234 2527.69,-6234"/>
<polygon fill="gray" stroke="gray" points="2527.78,-6237.5 2537.78,-6234 2527.78,-6230.5 2527.78,-6237.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="gray" d="M2282.52,-6250.52C2310.88,-6253.88 2340.38,-6257.48 2368,-6261 2414.29,-6266.9 2466.65,-6274.15 2505.6,-6279.64"/>
<polygon fill="gray" stroke="gray" points="2505.32,-6283.14 2515.71,-6281.07 2506.3,-6276.21 2505.32,-6283.14"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2576.98,-6215.96C2608.95,-6162.25 2701.76,-5997.77 2734,-5847 2747.88,-5782.07 2724.37,-3511.7 2762,-3457 2800.38,-3401.22 2883.14,-3383.39 2931.58,-3377.68"/>
<polygon fill="gray" stroke="gray" points="2932.09,-3381.15 2941.66,-3376.61 2931.35,-3374.19 2932.09,-3381.15"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<g id="a_node255"><a xlink:title=" &#160;&#160;&#160;fn from_parts_without_soft_limit( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;validate_prefix(nickname)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let discriminator = valida...">
<polygon fill="white" stroke="black" points="2246.5,-6360 2027.5,-6360 2027.5,-6324 2246.5,-6324 2246.5,-6360"/>
<text text-anchor="middle" x="2137" y="-6338.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts_without_soft_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<g id="a_node259"><a xlink:title="fn make_scalars(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Vec&lt;Scalar&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Ok(vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(nickname, discriminator)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname_scalar(nickname)?, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2620,-6360 2510,-6360 2510,-6324 2620,-6324 2620,-6360"/>
<text text-anchor="middle" x="2565" y="-6338.3" font-family="Helvetica,sans-Serif" font-size="14.00">make_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<path fill="none" stroke="gray" d="M2246.6,-6342C2326.51,-6342 2432.46,-6342 2499.45,-6342"/>
<polygon fill="gray" stroke="gray" points="2499.86,-6345.5 2509.86,-6342 2499.86,-6338.5 2499.86,-6345.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<g id="a_node256"><a xlink:title="fn username_sha_scalar(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Scalar, UsernameError&gt; { &#160;&#160;&#160;&#160;let mut hash = Sha512::new(); &#160;&#160;&#160;&#160;hash.update(nickname.as_bytes()); &#160;&#160;&#160;&#160;hash.update([0x00]); &#160;&#160;&#160;&#160;hash....">
<polygon fill="white" stroke="black" points="3052.5,-6414 2887.5,-6414 2887.5,-6378 3052.5,-6378 3052.5,-6414"/>
<text text-anchor="middle" x="2970" y="-6392.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_sha_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" d="M2971.89,-6414.25C2978.7,-6545.05 3026.83,-7339.17 3198,-7489 3267.74,-7550.05 3550.56,-7451.43 3614,-7519 3673.66,-7582.55 3584.06,-10591.88 3642,-10657 3681.12,-10700.97 3752.87,-10701.13 3802.44,-10694.69"/>
<polygon fill="gray" stroke="gray" points="3802.94,-10698.16 3812.35,-10693.28 3801.95,-10691.23 3802.94,-10698.16"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().</title>
<g id="a_node257"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_should_produce_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(&amp;nickname, discriminator).u...">
<polygon fill="white" stroke="black" points="2713.5,-6414 2416.5,-6414 2416.5,-6378 2713.5,-6378 2713.5,-6414"/>
<text text-anchor="middle" x="2565" y="-6392.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_should_produce_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="gray" d="M2713.77,-6396C2768.51,-6396 2828.96,-6396 2877.28,-6396"/>
<polygon fill="gray" stroke="gray" points="2877.4,-6399.5 2887.4,-6396 2877.4,-6392.5 2877.4,-6399.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node258"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="2264,-6306 2010,-6306 2010,-6270 2264,-6270 2264,-6306"/>
<text text-anchor="middle" x="2137" y="-6284.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="gray" d="M2264.29,-6273.64C2298,-6269.68 2334.4,-6265.29 2368,-6261 2423.83,-6253.88 2488.49,-6244.81 2527.8,-6239.21"/>
<polygon fill="gray" stroke="gray" points="2528.3,-6242.67 2537.71,-6237.79 2527.31,-6235.74 2528.3,-6242.67"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="gray" d="M2264.08,-6288C2343.98,-6288 2443.58,-6288 2505.49,-6288"/>
<polygon fill="gray" stroke="gray" points="2505.84,-6291.5 2515.84,-6288 2505.84,-6284.5 2505.84,-6291.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge435" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="gray" d="M2620.35,-6349.28C2686.18,-6358.1 2798.08,-6373.1 2877.33,-6383.72"/>
<polygon fill="gray" stroke="gray" points="2876.94,-6387.2 2887.32,-6385.05 2877.87,-6380.26 2876.94,-6387.2"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge697" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2614.22,-6292.83C2651.15,-6293.83 2701.18,-6288.98 2734,-6261 2764.27,-6235.2 2748.22,-6213.31 2762,-6176 2927.54,-5727.63 3073.78,-5649.17 3170,-5181 3189.28,-5087.17 3143.52,-3535.79 3198,-3457 3231.35,-3408.76 3297.87,-3388.9 3346.53,-3380.72"/>
<polygon fill="gray" stroke="gray" points="3347.29,-3384.15 3356.63,-3379.15 3346.21,-3377.23 3347.29,-3384.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<g id="a_node261"><a xlink:title="fn key_derivation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;let mut info_sho = poksho::ShoHmacSha256::new(b&#39; ExampleEndorsements&#39; ); &#160;&#160;&#160;&#160;info_sho....">
<polygon fill="white" stroke="black" points="2195.5,-4167 2078.5,-4167 2078.5,-4131 2195.5,-4131 2195.5,-4167"/>
<text text-anchor="middle" x="2137" y="-4145.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<g id="a_node279"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKCredential_Endorsements_ServerRootKeyPair_generate_20240207&#39; ,...">
<polygon fill="white" stroke="black" points="2604.5,-4304 2525.5,-4304 2525.5,-4268 2604.5,-4268 2604.5,-4304"/>
<text text-anchor="middle" x="2565" y="-4282.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2195.57,-4149.53C2242.92,-4151.42 2311.22,-4157.55 2368,-4176 2429.5,-4195.98 2493.51,-4236.19 2531.01,-4262.06"/>
<polygon fill="gray" stroke="gray" points="2529.3,-4265.14 2539.5,-4267.99 2533.3,-4259.4 2529.3,-4265.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<g id="a_node281"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.derive_key_from_tag_scalar(&amp;t) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2610.5,-4358 2519.5,-4358 2519.5,-4322 2610.5,-4322 2610.5,-4358"/>
<text text-anchor="middle" x="2565" y="-4336.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="gray" d="M2195.72,-4138.61C2247.47,-4132.84 2322.11,-4133.84 2368,-4176 2413.77,-4218.04 2351.14,-4269.99 2396,-4313 2425.63,-4341.4 2472.58,-4346.93 2509.33,-4346.04"/>
<polygon fill="gray" stroke="gray" points="2509.55,-4349.54 2519.4,-4345.64 2509.26,-4342.54 2509.55,-4349.54"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node282"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="2610.5,-4412 2519.5,-4412 2519.5,-4376 2610.5,-4376 2610.5,-4412"/>
<text text-anchor="middle" x="2565" y="-4390.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M2195.53,-4138.1C2247.69,-4131.83 2323.09,-4132.36 2368,-4176 2429.53,-4235.79 2335.75,-4305.92 2396,-4367 2424.92,-4396.32 2472.15,-4401.71 2509.18,-4400.55"/>
<polygon fill="gray" stroke="gray" points="2509.52,-4404.03 2519.34,-4400.06 2509.18,-4397.04 2509.52,-4404.03"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node262"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1722.5,-4167 1647.5,-4167 1647.5,-4131 1722.5,-4131 1722.5,-4167"/>
<text text-anchor="middle" x="1685" y="-4145.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<path fill="none" stroke="gray" d="M1722.83,-4149C1798.37,-4149 1971.85,-4149 2068.27,-4149"/>
<polygon fill="gray" stroke="gray" points="2068.49,-4152.5 2078.49,-4149 2068.49,-4145.5 2068.49,-4152.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node263"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="2209,-4221 2065,-4221 2065,-4185 2209,-4185 2209,-4221"/>
<text text-anchor="middle" x="2137" y="-4199.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="gray" d="M1722.58,-4153.55C1766.24,-4158.96 1841.43,-4168.25 1906,-4176 1955.35,-4181.92 2010.67,-4188.42 2054.69,-4193.56"/>
<polygon fill="gray" stroke="gray" points="2054.42,-4197.05 2064.76,-4194.73 2055.23,-4190.1 2054.42,-4197.05"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<g id="a_node264"><a xlink:title="fn attribute_key_inversion(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let key_pair = KeyPair::&lt;ExampleDomain&gt;::derive_from(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; KeyPair...">
<polygon fill="white" stroke="black" points="2226,-1579 2048,-1579 2048,-1543 2226,-1543 2226,-1579"/>
<text text-anchor="middle" x="2137" y="-1557.3" font-family="Helvetica,sans-Serif" font-size="14.00">attribute_key_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<path fill="none" stroke="gray" d="M1692.98,-4130.77C1723.49,-4050.08 1845.3,-3716.38 1886,-3430 1893.1,-3380.05 1874.37,-1653.3 1906,-1614 1937.18,-1575.26 1990.49,-1561.34 2037.94,-1557.41"/>
<polygon fill="gray" stroke="gray" points="2038.23,-1560.9 2047.97,-1556.72 2037.75,-1553.92 2038.23,-1560.9"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge482" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M2209.11,-4214.86C2259.83,-4219.02 2326.19,-4215.02 2368,-4176 2417.26,-4130.02 2344.71,-4070.7 2396,-4027 2492.96,-3944.4 2841.62,-4012 2969,-4012 2969,-4012 2969,-4012 3407,-4012 3702.88,-4012 3867.13,-3829.53 4072,-4043 4135.09,-4108.74 4051.39,-10531.6 4108,-10603 4125.44,-10624.99 4157.36,-10631.02 4182.76,-10631.96"/>
<polygon fill="gray" stroke="gray" points="4182.79,-10635.46 4192.83,-10632.09 4182.88,-10628.46 4182.79,-10635.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<g id="a_node273"><a xlink:title=" &#160;&#160;&#160;pub fn from_blinding_scalar(scalar: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_inv: scalar.invert(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2645,-4520 2485,-4520 2485,-4484 2645,-4484 2645,-4520"/>
<text text-anchor="middle" x="2565" y="-4498.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_blinding_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge483" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M2209.08,-4199.45C2260.81,-4200.99 2328.47,-4212.33 2368,-4256 2433.86,-4328.74 2327.74,-4404.51 2396,-4475 2416.31,-4495.98 2445.99,-4504.78 2474.76,-4507.68"/>
<polygon fill="gray" stroke="gray" points="2474.64,-4511.18 2484.89,-4508.47 2475.19,-4504.21 2474.64,-4511.18"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node275"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="2592,-4466 2538,-4466 2538,-4430 2592,-4430 2592,-4466"/>
<text text-anchor="middle" x="2565" y="-4444.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge477" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M2209.11,-4199.94C2260.5,-4201.79 2327.72,-4213.3 2368,-4256 2419.04,-4310.11 2343.17,-4368.63 2396,-4421 2430.33,-4455.03 2489.4,-4456.59 2527.57,-4453.28"/>
<polygon fill="gray" stroke="gray" points="2528.15,-4456.74 2537.74,-4452.25 2527.44,-4449.78 2528.15,-4456.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node277"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="2598,-4574 2532,-4574 2532,-4538 2598,-4538 2598,-4574"/>
<text text-anchor="middle" x="2565" y="-4552.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge476" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M2209.13,-4199.16C2261.06,-4200.53 2328.95,-4211.77 2368,-4256 2408.36,-4301.72 2354.13,-4484.66 2396,-4529 2427.61,-4562.47 2483,-4565.2 2521.49,-4562.2"/>
<polygon fill="gray" stroke="gray" points="2522.24,-4565.65 2531.87,-4561.23 2521.59,-4558.68 2522.24,-4565.65"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge479" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2209.3,-4216.89C2296.06,-4233.8 2440.21,-4261.88 2515.24,-4276.5"/>
<polygon fill="gray" stroke="gray" points="2514.87,-4279.99 2525.35,-4278.47 2516.21,-4273.12 2514.87,-4279.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge478" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="gray" d="M2209.19,-4203.83C2258.47,-4207.85 2323.05,-4220.36 2368,-4256 2390.12,-4273.53 2373.31,-4296.22 2396,-4313 2428.32,-4336.9 2473.74,-4343.02 2509.21,-4343.51"/>
<polygon fill="gray" stroke="gray" points="2509.4,-4347.01 2519.4,-4343.5 2509.4,-4340.01 2509.4,-4347.01"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge481" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M2209.21,-4200.93C2259.98,-4203.39 2326.36,-4215.21 2368,-4256 2404.35,-4291.6 2358.48,-4332.64 2396,-4367 2426.17,-4394.63 2472.86,-4400.27 2509.37,-4399.62"/>
<polygon fill="gray" stroke="gray" points="2509.49,-4403.12 2519.37,-4399.29 2509.26,-4396.12 2509.49,-4403.12"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="node294" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<g id="a_node294"><a xlink:title=" &#160;&#160;&#160;fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) &#160;&#160;...">
<polygon fill="white" stroke="black" points="3900.5,-4091 3813.5,-4091 3813.5,-4055 3900.5,-4055 3900.5,-4091"/>
<text text-anchor="middle" x="3857" y="-4069.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge480" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2209.25,-4213.9C2259.37,-4217.4 2324.93,-4213.01 2368,-4176 2403.65,-4145.36 2358.63,-4102.52 2396,-4074 2509.55,-3987.36 3554.86,-4052.5 3803.23,-4069.32"/>
<polygon fill="gray" stroke="gray" points="3803.22,-4072.83 3813.44,-4070.02 3803.7,-4065.85 3803.22,-4072.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<g id="a_node265"><a xlink:title=" &#160;&#160;&#160;pub fn inverse_of&lt;D2: Domain&gt;(other: &amp;KeyPair&lt;D2&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_ne!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D2::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; You must provide a new domain for an inverse key&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="2609,-2339 2521,-2339 2521,-2303 2609,-2303 2609,-2339"/>
<text text-anchor="middle" x="2565" y="-2317.3" font-family="Helvetica,sans-Serif" font-size="14.00">inverse_of</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="gray" d="M2226.15,-1557.12C2275.65,-1560.09 2334.11,-1573.17 2368,-1614 2416.09,-1671.93 2346.49,-2234.29 2396,-2291 2423.7,-2322.72 2472.43,-2328.47 2510.3,-2327.3"/>
<polygon fill="gray" stroke="gray" points="2510.84,-2330.78 2520.66,-2326.81 2510.51,-2323.79 2510.84,-2330.78"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<g id="a_node266"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a1 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a2 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_scalars(a1, a2) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2614.5,-2393 2515.5,-2393 2515.5,-2357 2614.5,-2357 2614.5,-2393"/>
<text text-anchor="middle" x="2565" y="-2371.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2226.2,-1557.08C2275.71,-1560.03 2334.17,-1573.11 2368,-1614 2420.03,-1676.88 2341.89,-2286.9 2396,-2348 2422.58,-2378.02 2468.21,-2383.8 2505.21,-2382.6"/>
<polygon fill="gray" stroke="gray" points="2505.58,-2386.08 2515.39,-2382.09 2505.23,-2379.09 2505.58,-2386.08"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M2609.34,-2312.18C2825.4,-2270.98 3787.21,-2121.37 4072,-2658 4123.73,-2755.47 4039.48,-10516.5 4108,-10603 4125.43,-10625 4157.35,-10631.03 4182.75,-10631.97"/>
<polygon fill="gray" stroke="gray" points="4182.78,-10635.47 4192.83,-10632.09 4182.87,-10628.47 4182.78,-10635.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge458" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2614.74,-2371.89C2811.81,-2359.8 3542.55,-2320.12 3614,-2391 3661.46,-2438.08 3627.3,-3528.78 3642,-3594 3683.21,-3776.82 3796.42,-3975.2 3839.27,-4046.02"/>
<polygon fill="gray" stroke="gray" points="3836.41,-4048.06 3844.6,-4054.78 3842.39,-4044.42 3836.41,-4048.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<g id="a_node267"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CredentialPrivateKey::generate(randomness).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3445.5,-3505 3366.5,-3505 3366.5,-3469 3445.5,-3469 3445.5,-3505"/>
<text text-anchor="middle" x="3406" y="-3483.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<g id="a_node268"><a xlink:title=" &#160;&#160;&#160;fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ShoHmacSha256::new(b&#39; Signal_ZKCredential_CredentialPrivateKey_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_an...">
<polygon fill="white" stroke="black" points="3896.5,-3532 3817.5,-3532 3817.5,-3496 3896.5,-3496 3896.5,-3532"/>
<text text-anchor="middle" x="3857" y="-3510.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<path fill="none" stroke="gray" d="M3445.67,-3489.33C3527.31,-3494.23 3717.13,-3505.65 3807.06,-3511.06"/>
<polygon fill="gray" stroke="gray" points="3807.07,-3514.56 3817.26,-3511.67 3807.49,-3507.58 3807.07,-3514.56"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M3857,-3532.01C3857,-3702.86 3857,-3873.71 3857,-4044.56"/>
<polygon fill="gray" stroke="gray" points="3853.5,-4044.77 3857,-4054.77 3860.5,-4044.77 3853.5,-4044.77"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node269"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="3030.5,-3559 2909.5,-3559 2909.5,-3523 3030.5,-3523 3030.5,-3559"/>
<text text-anchor="middle" x="2970" y="-3537.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M3011.91,-3559.14C3056.67,-3578.14 3130.98,-3607.23 3198,-3622 3288.65,-3641.98 3535.64,-3610.22 3614,-3660 3760.05,-3752.78 3828.61,-3967.83 3849.12,-4044.89"/>
<polygon fill="gray" stroke="gray" points="3845.79,-4046.02 3851.69,-4054.82 3852.57,-4044.26 3845.79,-4046.02"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().</title>
<g id="a_node270"><a xlink:title=" &#160;&#160;&#160;fn round_trip_key_pair() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = CredentialKeyPair::generate([0x42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let deserialized: Cr...">
<polygon fill="white" stroke="black" points="3046,-3505 2894,-3505 2894,-3469 3046,-3469 3046,-3505"/>
<text text-anchor="middle" x="2970" y="-3483.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M3046.1,-3487C3135.08,-3487 3280.74,-3487 3356.22,-3487"/>
<polygon fill="gray" stroke="gray" points="3356.39,-3490.5 3366.39,-3487 3356.39,-3483.5 3356.39,-3490.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<g id="a_node271"><a xlink:title=" &#160;&#160;&#160;pub fn for_first_point_of_attribute&lt;D&gt;(key_pair: &amp;crate::attributes::KeyPair&lt;D&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_blinding_scalar(key_pair.a1) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2237,-4544 2037,-4544 2037,-4508 2237,-4508 2237,-4544"/>
<text text-anchor="middle" x="2137" y="-4522.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_first_point_of_attribute</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M2237.07,-4520.42C2308.89,-4516.37 2405.18,-4510.95 2474.64,-4507.03"/>
<polygon fill="gray" stroke="gray" points="2474.9,-4510.53 2484.69,-4506.47 2474.51,-4503.54 2474.9,-4510.53"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node272"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="3074.5,-4574 2865.5,-4574 2865.5,-4538 3074.5,-4538 3074.5,-4574"/>
<text text-anchor="middle" x="2970" y="-4552.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="gray" d="M3030.27,-4574.01C3225.07,-4636.87 3845.97,-4867.12 4072,-5310 4138.16,-5439.63 4017.51,-10435.03 4108,-10549 4112.68,-10554.89 4118.4,-10559.64 4124.75,-10563.45"/>
<polygon fill="gray" stroke="gray" points="4123.28,-10566.63 4133.78,-10568.08 4126.48,-10560.4 4123.28,-10566.63"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M2645.2,-4497.34C2676.23,-4499.59 2710.06,-4507.69 2734,-4529 2768.16,-4559.4 2744.99,-4585.56 2762,-4628 3225.05,-5783.24 3765.84,-5896.66 4072,-7103 4095.92,-7197.24 4047.41,-10526.96 4108,-10603 4125.49,-10624.95 4157.41,-10630.98 4182.79,-10631.93"/>
<polygon fill="gray" stroke="gray" points="4182.81,-10635.44 4192.86,-10632.07 4182.9,-10628.44 4182.81,-10635.44"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node274"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="2181,-4358 2093,-4358 2093,-4322 2181,-4322 2181,-4358"/>
<text text-anchor="middle" x="2137" y="-4336.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M2181.44,-4331.83C2232.46,-4324.9 2316.63,-4322.22 2368,-4367 2405.38,-4399.58 2359.32,-4441.63 2396,-4475 2417.21,-4494.3 2446.49,-4502.84 2474.68,-4506.02"/>
<polygon fill="gray" stroke="gray" points="2474.72,-4509.53 2484.99,-4506.95 2475.35,-4502.56 2474.72,-4509.53"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M2181.15,-4333.77C2230.74,-4328.97 2312.43,-4328.6 2368,-4367 2390.24,-4382.37 2374.09,-4405.16 2396,-4421 2434.57,-4448.88 2491.12,-4452.36 2527.76,-4451.11"/>
<polygon fill="gray" stroke="gray" points="2528.16,-4454.6 2537.98,-4450.62 2527.83,-4447.61 2528.16,-4454.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M2181.17,-4331.25C2232.73,-4323.54 2318.23,-4319.86 2368,-4367 2421.05,-4417.25 2344.03,-4477.64 2396,-4529 2428.65,-4561.27 2483.56,-4564.31 2521.68,-4561.72"/>
<polygon fill="gray" stroke="gray" points="2522.28,-4565.18 2531.95,-4560.86 2521.7,-4558.2 2522.28,-4565.18"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2181.27,-4335.18C2227.52,-4329.97 2302.99,-4321.29 2368,-4313 2418.31,-4306.58 2475.78,-4298.59 2515.42,-4292.97"/>
<polygon fill="gray" stroke="gray" points="2515.95,-4296.43 2525.35,-4291.56 2514.96,-4289.5 2515.95,-4296.43"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="gray" d="M2181.19,-4340C2259.24,-4340 2423.63,-4340 2509.36,-4340"/>
<polygon fill="gray" stroke="gray" points="2509.42,-4343.5 2519.42,-4340 2509.42,-4336.5 2509.42,-4343.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M2181.27,-4344.82C2227.52,-4350.03 2302.99,-4358.71 2368,-4367 2415.8,-4373.1 2470.07,-4380.62 2509.37,-4386.18"/>
<polygon fill="gray" stroke="gray" points="2508.88,-4389.64 2519.27,-4387.58 2509.86,-4382.71 2508.88,-4389.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2181.18,-4348.76C2232.75,-4356.48 2318.25,-4360.16 2368,-4313 2421.34,-4262.43 2341.06,-4198.84 2396,-4150 2399.36,-4147.01 3541.9,-4088.92 3803.21,-4075.67"/>
<polygon fill="gray" stroke="gray" points="3803.39,-4079.17 3813.2,-4075.17 3803.04,-4072.18 3803.39,-4079.17"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2592.04,-4452.8C2629.74,-4458.06 2698.83,-4461.08 2734,-4421 2804.68,-4340.46 2700.5,-3544.75 2762,-3457 2800.86,-3401.56 2883.44,-3383.6 2931.73,-3377.78"/>
<polygon fill="gray" stroke="gray" points="2932.21,-3381.25 2941.77,-3376.69 2931.45,-3374.29 2932.21,-3381.25"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="gray" d="M2592.27,-4450.45C2625.65,-4453.98 2684.85,-4461.56 2734,-4475 2746.9,-4478.53 2749.44,-4481.41 2762,-4486 2809.01,-4503.17 2862.54,-4521.23 2903.39,-4534.71"/>
<polygon fill="gray" stroke="gray" points="2902.36,-4538.06 2912.96,-4537.86 2904.55,-4531.41 2902.36,-4538.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node276"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="2187.5,-4466 2086.5,-4466 2086.5,-4430 2187.5,-4430 2187.5,-4466"/>
<text text-anchor="middle" x="2137" y="-4444.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M2187.7,-4454.3C2258,-4463.21 2387.63,-4479.64 2474.83,-4490.7"/>
<polygon fill="gray" stroke="gray" points="2474.62,-4494.2 2484.98,-4491.98 2475.5,-4487.25 2474.62,-4494.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M2187.7,-4448C2274.48,-4448 2451.65,-4448 2527.84,-4448"/>
<polygon fill="gray" stroke="gray" points="2527.91,-4451.5 2537.91,-4448 2527.91,-4444.5 2527.91,-4451.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M2187.72,-4450.52C2236.48,-4454.88 2311.53,-4466.74 2368,-4499 2383.84,-4508.05 2379.9,-4520.42 2396,-4529 2435.15,-4549.86 2486.18,-4555.54 2521.68,-4556.67"/>
<polygon fill="gray" stroke="gray" points="2521.64,-4560.17 2531.71,-4556.88 2521.79,-4553.17 2521.64,-4560.17"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2187.92,-4457.01C2239.35,-4463.24 2318.75,-4463.93 2368,-4421 2405.38,-4388.42 2359.32,-4346.37 2396,-4313 2427.86,-4284.02 2477.92,-4279.29 2515.11,-4280.59"/>
<polygon fill="gray" stroke="gray" points="2515.07,-4284.09 2525.24,-4281.1 2515.43,-4277.1 2515.07,-4284.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="gray" d="M2187.51,-4454.81C2237.51,-4458.99 2314.75,-4457.8 2368,-4421 2390.24,-4405.63 2374.09,-4382.84 2396,-4367 2428.47,-4343.53 2473.68,-4337.35 2509.03,-4336.73"/>
<polygon fill="gray" stroke="gray" points="2509.19,-4340.23 2519.18,-4336.69 2509.17,-4333.23 2509.19,-4340.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M2187.84,-4442.44C2234.45,-4437.17 2305.98,-4428.91 2368,-4421 2415.8,-4414.9 2470.07,-4407.38 2509.37,-4401.82"/>
<polygon fill="gray" stroke="gray" points="2509.86,-4405.29 2519.27,-4400.42 2508.88,-4398.36 2509.86,-4405.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2187.69,-4457.68C2239.69,-4464.68 2320.27,-4466.2 2368,-4421 2421.05,-4370.75 2342.5,-4308.77 2396,-4259 2420.89,-4235.84 3580.55,-4144.11 3614,-4138 3680.26,-4125.89 3754.89,-4104.65 3803.53,-4089.76"/>
<polygon fill="gray" stroke="gray" points="3804.68,-4093.07 3813.21,-4086.77 3802.62,-4086.38 3804.68,-4093.07"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2598.29,-4557.46C2633.89,-4557.64 2691.72,-4553.54 2734,-4529 3001.08,-4373.98 3059.62,-4276.41 3170,-3988 3191.12,-3932.82 3163.52,-3504.98 3198,-3457 3232.12,-3409.53 3298.17,-3389.53 3346.52,-3381.11"/>
<polygon fill="gray" stroke="gray" points="3347.24,-3384.54 3356.55,-3379.48 3346.12,-3377.63 3347.24,-3384.54"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="gray" d="M2598.3,-4556C2653.37,-4556 2767.93,-4556 2855.22,-4556"/>
<polygon fill="gray" stroke="gray" points="2855.45,-4559.5 2865.45,-4556 2855.45,-4552.5 2855.45,-4559.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node278"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="2208.5,-4304 2065.5,-4304 2065.5,-4268 2208.5,-4268 2208.5,-4304"/>
<text text-anchor="middle" x="2137" y="-4282.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M2208.61,-4274.98C2258.91,-4271.28 2324.97,-4275.48 2368,-4313 2405.38,-4345.58 2359.32,-4387.63 2396,-4421 2431.65,-4453.44 2490.1,-4455.49 2527.81,-4452.72"/>
<polygon fill="gray" stroke="gray" points="2528.2,-4456.2 2537.86,-4451.83 2527.59,-4449.23 2528.2,-4456.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M2208.7,-4273.54C2259.89,-4268.89 2327.03,-4272.52 2368,-4313 2436.86,-4381.04 2328.6,-4459.52 2396,-4529 2427.96,-4561.95 2483.02,-4564.85 2521.36,-4562.03"/>
<polygon fill="gray" stroke="gray" points="2522.05,-4565.49 2531.7,-4561.11 2521.43,-4558.51 2522.05,-4565.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2208.82,-4286C2295.48,-4286 2439.92,-4286 2515.12,-4286"/>
<polygon fill="gray" stroke="gray" points="2515.26,-4289.5 2525.26,-4286 2515.26,-4282.5 2515.26,-4289.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="gray" d="M2208.51,-4293.91C2254.05,-4299.1 2314.56,-4306.18 2368,-4313 2415.8,-4319.1 2470.07,-4326.62 2509.37,-4332.18"/>
<polygon fill="gray" stroke="gray" points="2508.88,-4335.64 2519.27,-4333.58 2509.86,-4328.71 2508.88,-4335.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M2208.61,-4277.89C2257.48,-4275.95 2321.78,-4281.06 2368,-4313 2390.24,-4328.37 2374.09,-4351.16 2396,-4367 2428.47,-4390.47 2473.68,-4396.65 2509.03,-4397.27"/>
<polygon fill="gray" stroke="gray" points="2509.17,-4400.77 2519.18,-4397.31 2509.19,-4393.77 2509.17,-4400.77"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2208.61,-4296.69C2259.42,-4300.15 2326.11,-4295.36 2368,-4256 2415.52,-4211.36 2346.25,-4154.14 2396,-4112 2450.69,-4065.68 3547.8,-4070.76 3803.19,-4072.58"/>
<polygon fill="gray" stroke="gray" points="3803.3,-4076.08 3813.32,-4072.65 3803.35,-4069.08 3803.3,-4076.08"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge560" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2604.76,-4287.91C2770.84,-4295.61 3422.63,-4320.91 3614,-4254 3706.55,-4221.64 3792.93,-4140.08 3832.84,-4098.39"/>
<polygon fill="gray" stroke="gray" points="3835.41,-4100.76 3839.74,-4091.09 3830.32,-4095.95 3835.41,-4100.76"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node280"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="2235,-4412 2039,-4412 2039,-4376 2235,-4376 2235,-4412"/>
<text text-anchor="middle" x="2137" y="-4390.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge632" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M2235.27,-4385.62C2279.25,-4386.53 2329.8,-4394.6 2368,-4421 2390.24,-4436.37 2374.09,-4459.16 2396,-4475 2418.6,-4491.34 2447.38,-4499.3 2474.71,-4502.84"/>
<polygon fill="gray" stroke="gray" points="2474.37,-4506.32 2484.7,-4503.95 2475.14,-4499.36 2474.37,-4506.32"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge635" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M2235.14,-4404.97C2276.16,-4409.71 2324.43,-4415.44 2368,-4421 2423.83,-4428.12 2488.49,-4437.19 2527.8,-4442.79"/>
<polygon fill="gray" stroke="gray" points="2527.31,-4446.26 2537.71,-4444.21 2528.3,-4439.33 2527.31,-4446.26"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge634" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M2235.27,-4381.9C2280.58,-4381.65 2332.24,-4389.83 2368,-4421 2405.38,-4453.58 2359.32,-4495.63 2396,-4529 2429.75,-4559.71 2483.94,-4563.19 2521.62,-4561.12"/>
<polygon fill="gray" stroke="gray" points="2522.04,-4564.6 2531.77,-4560.41 2521.55,-4557.61 2522.04,-4564.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge633" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2235.27,-4402.38C2279.25,-4401.47 2329.8,-4393.4 2368,-4367 2390.24,-4351.63 2374.09,-4328.84 2396,-4313 2430.32,-4288.19 2478.88,-4282.7 2514.97,-4282.67"/>
<polygon fill="gray" stroke="gray" points="2515.23,-4286.18 2525.27,-4282.81 2515.32,-4279.18 2515.23,-4286.18"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge637" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="gray" d="M2235.14,-4383.03C2276.16,-4378.29 2324.43,-4372.56 2368,-4367 2415.8,-4360.9 2470.07,-4353.38 2509.37,-4347.82"/>
<polygon fill="gray" stroke="gray" points="2509.86,-4351.29 2519.27,-4346.42 2508.88,-4344.36 2509.86,-4351.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge636" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M2235.2,-4394C2319.99,-4394 2439.95,-4394 2509.08,-4394"/>
<polygon fill="gray" stroke="gray" points="2509.32,-4397.5 2519.32,-4394 2509.32,-4390.5 2509.32,-4397.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge631" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2235.2,-4406.98C2280.91,-4407.55 2332.93,-4399.4 2368,-4367 2414.93,-4323.65 2348.6,-4268.84 2396,-4226 2446.43,-4180.43 3546.54,-4118.36 3614,-4110 3679.37,-4101.9 3754.28,-4090.04 3803.22,-4081.95"/>
<polygon fill="gray" stroke="gray" points="3803.97,-4085.38 3813.26,-4080.29 3802.82,-4078.47 3803.97,-4085.38"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge646" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2610.66,-4348C2759.86,-4372.66 3251.99,-4437.24 3614,-4289 3714.05,-4248.03 3800.13,-4147.04 3836.93,-4099.09"/>
<polygon fill="gray" stroke="gray" points="3839.78,-4101.13 3843.02,-4091.05 3834.19,-4096.91 3839.78,-4101.13"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge682" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M2610.57,-4392.05C2718.15,-4389.66 2995.98,-4397.49 3170,-4529 3814.48,-5016.06 3861.48,-5327.09 4072,-6107 4088.27,-6167.29 4069.14,-10554.12 4108,-10603 4125.47,-10624.97 4157.39,-10631 4182.78,-10631.95"/>
<polygon fill="gray" stroke="gray" points="4182.8,-10635.45 4192.84,-10632.08 4182.89,-10628.45 4182.8,-10635.45"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge683" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2610.84,-4388.12C2648.82,-4385.84 2702.06,-4389.44 2734,-4421 2785.97,-4472.36 2706.11,-4535.94 2762,-4583 2900.71,-4699.79 2994.09,-4627.01 3170,-4583 3387,-4528.71 3438.38,-4484.54 3614,-4346 3710.6,-4269.8 3799.94,-4152.04 3837.42,-4099.68"/>
<polygon fill="gray" stroke="gray" points="3840.46,-4101.45 3843.39,-4091.27 3834.75,-4097.39 3840.46,-4101.45"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node283"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="2592,-3011 2538,-3011 2538,-2975 2592,-2975 2592,-3011"/>
<text text-anchor="middle" x="2565" y="-2989.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2592.2,-2996.03C2627.37,-3001.18 2690.45,-3014.37 2734,-3046 2848.3,-3129 2928.11,-3284.8 2957.03,-3347.67"/>
<polygon fill="gray" stroke="gray" points="2953.91,-3349.27 2961.23,-3356.93 2960.29,-3346.38 2953.91,-3349.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="gray" d="M2592.04,-2992.74C2630.07,-2993.93 2699.95,-3002.35 2734,-3046 2798.08,-3128.15 2690.95,-3437.8 2762,-3514 2796.01,-3550.47 2853.26,-3555.54 2898.94,-3552.42"/>
<polygon fill="gray" stroke="gray" points="2899.41,-3555.9 2909.09,-3551.59 2898.84,-3548.92 2899.41,-3555.9"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node284" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node284"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="2593,-2957 2537,-2957 2537,-2921 2593,-2921 2593,-2957"/>
<text text-anchor="middle" x="2565" y="-2935.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2593.2,-2939.11C2683.16,-2940.7 2976.33,-2955.83 3170,-3082 3278.43,-3152.64 3359.97,-3289.83 3391.15,-3347.95"/>
<polygon fill="gray" stroke="gray" points="3388.11,-3349.69 3395.89,-3356.89 3394.3,-3346.42 3388.11,-3349.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="node285" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<g id="a_node285"><a xlink:title=" &#160;&#160;&#160;pub fn blind( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn RevealedAttribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedPoint&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This is technically something you can do with just th...">
<polygon fill="white" stroke="black" points="2997,-3870 2943,-3870 2943,-3834 2997,-3834 2997,-3870"/>
<text text-anchor="middle" x="2970" y="-3848.3" font-family="Helvetica,sans-Serif" font-size="14.00">blind</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2997.01,-3858.49C3119.07,-3888.98 3636.19,-4018.11 3803.52,-4059.9"/>
<polygon fill="gray" stroke="gray" points="3802.79,-4063.32 3813.34,-4062.35 3804.48,-4056.53 3802.79,-4063.32"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node286" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node286"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="2592,-3762 2538,-3762 2538,-3726 2592,-3726 2592,-3762"/>
<text text-anchor="middle" x="2565" y="-3740.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2592.26,-3748.51C2629.59,-3753.26 2697.49,-3755.46 2734,-3717 2774.01,-3674.85 2726.81,-3503.25 2762,-3457 2802.8,-3403.38 2884.02,-3384.76 2931.69,-3378.34"/>
<polygon fill="gray" stroke="gray" points="2932.4,-3381.78 2941.9,-3377.08 2931.54,-3374.83 2932.4,-3381.78"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="gray" d="M2592.11,-3746.76C2627.74,-3749.1 2691.96,-3748.09 2734,-3717 2756.69,-3700.22 2742.7,-3680.6 2762,-3660 2803.67,-3615.52 2865.77,-3582.88 2911.07,-3563.15"/>
<polygon fill="gray" stroke="gray" points="2912.65,-3566.28 2920.47,-3559.13 2909.9,-3559.84 2912.65,-3566.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2592.26,-3742.62C2735.88,-3735.46 3426.61,-3706.34 3614,-3798 3727.37,-3853.46 3810.4,-3988.19 3842,-4045.97"/>
<polygon fill="gray" stroke="gray" points="3838.97,-4047.73 3846.79,-4054.87 3845.13,-4044.41 3838.97,-4047.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="node287" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<g id="a_node287"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn Attribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedAttribute&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The points in a regular verifiably encrypted attribute ...">
<polygon fill="white" stroke="black" points="2600,-3870 2530,-3870 2530,-3834 2600,-3834 2600,-3870"/>
<text text-anchor="middle" x="2565" y="-3848.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="gray" d="M2600.01,-3852C2675.23,-3852 2855.12,-3852 2932.54,-3852"/>
<polygon fill="gray" stroke="gray" points="2932.77,-3855.5 2942.77,-3852 2932.77,-3848.5 2932.77,-3855.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node288" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node288"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="2593,-3708 2537,-3708 2537,-3672 2593,-3672 2593,-3708"/>
<text text-anchor="middle" x="2565" y="-3686.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2575.05,-3671.73C2598.64,-3626.32 2666.84,-3508.28 2762,-3457 2922.73,-3370.38 2988.97,-3432.74 3170,-3409 3230.36,-3401.08 3299.27,-3390.99 3346.79,-3383.86"/>
<polygon fill="gray" stroke="gray" points="3347.53,-3387.29 3356.89,-3382.34 3346.48,-3380.37 3347.53,-3387.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="node289" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<g id="a_node289"><a xlink:title=" &#160;&#160;&#160;fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y: sho.get_scalar(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3445.5,-3843 3366.5,-3843 3366.5,-3807 3445.5,-3807 3445.5,-3843"/>
<text text-anchor="middle" x="3406" y="-3821.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M3445.86,-3838C3488.3,-3852.83 3557.72,-3878.94 3614,-3909 3693.91,-3951.68 3780.03,-4014.57 3824.86,-4048.74"/>
<polygon fill="gray" stroke="gray" points="3822.93,-4051.67 3833,-4054.98 3827.19,-4046.12 3822.93,-4051.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair(). -->
<g id="node290" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().</title>
<g id="a_node290"><a xlink:title="fn round_trip_key_pair() { &#160;&#160;&#160;&#160;let key_pair = BlindingKeyPair::generate(&amp;mut poksho::ShoSha256::new(b&#39; test&#39; )); &#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;let deserialized: Blin...">
<polygon fill="white" stroke="black" points="2641,-3816 2489,-3816 2489,-3780 2641,-3780 2641,-3816"/>
<text text-anchor="middle" x="2565" y="-3794.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="node291" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<g id="a_node291"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BlindingPrivateKey::generate(sho).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3009.5,-3816 2930.5,-3816 2930.5,-3780 3009.5,-3780 3009.5,-3816"/>
<text text-anchor="middle" x="2970" y="-3794.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge583" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2641.33,-3798C2722.91,-3798 2850.67,-3798 2920.1,-3798"/>
<polygon fill="gray" stroke="gray" points="2920.32,-3801.5 2930.32,-3798 2920.32,-3794.5 2920.32,-3801.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="edge590" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<path fill="none" stroke="gray" d="M3009.51,-3800.4C3088.56,-3805.31 3268.97,-3816.54 3356.11,-3821.96"/>
<polygon fill="gray" stroke="gray" points="3356.06,-3825.46 3366.26,-3822.59 3356.5,-3818.48 3356.06,-3825.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node292" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node292"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="2599.5,-3148 2530.5,-3148 2530.5,-3112 2599.5,-3112 2599.5,-3148"/>
<text text-anchor="middle" x="2565" y="-3126.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2595.63,-3148.02C2668.27,-3192.17 2854.95,-3305.67 2933.42,-3353.37"/>
<polygon fill="gray" stroke="gray" points="2931.63,-3356.38 2942,-3358.58 2935.27,-3350.4 2931.63,-3356.38"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="gray" d="M2599.79,-3123.89C2749.05,-3099.07 3353.47,-3021.82 3614,-3345 3648.95,-3388.35 3627.36,-3540.28 3642,-3594 3691.28,-3774.82 3799.59,-3974.41 3840.2,-4045.79"/>
<polygon fill="gray" stroke="gray" points="3837.25,-4047.67 3845.25,-4054.61 3843.32,-4044.2 3837.25,-4047.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node293" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node293"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2593,-3094 2537,-3094 2537,-3058 2593,-3058 2593,-3094"/>
<text text-anchor="middle" x="2565" y="-3072.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge714" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2593.04,-3075.97C2680.72,-3076.86 2963.4,-3087.44 3170,-3183 3259.17,-3224.25 3343.13,-3307.28 3382.15,-3349.34"/>
<polygon fill="gray" stroke="gray" points="3379.78,-3351.94 3389.12,-3356.94 3384.94,-3347.2 3379.78,-3351.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge650" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M3859.64,-4091.22C3876.58,-4280.67 4020.3,-5910.2 4072,-7233 4073.86,-7280.52 4078.36,-10619.81 4108,-10657 4108.49,-10657.62 4109,-10658.22 4109.51,-10658.82"/>
<polygon fill="gray" stroke="gray" points="4107.17,-10661.42 4116.79,-10665.85 4112.03,-10656.39 4107.17,-10661.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="node295" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<g id="a_node295"><a xlink:title="fn bench_server_param_serialization(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;&#160;let serialized_secret_params = zkgroup::seri...">
<polygon fill="white" stroke="black" points="1292,-1494 1040,-1494 1040,-1458 1292,-1458 1292,-1494"/>
<text text-anchor="middle" x="1166" y="-1472.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_server_param_serialization</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1292.27,-1464.71C1353.28,-1466.55 1422.3,-1480.93 1464,-1529 1505.82,-1577.21 1441.17,-2055.69 1484,-2103 1521.27,-2144.17 1589.07,-2144.71 1635.29,-2139.15"/>
<polygon fill="gray" stroke="gray" points="1635.94,-2142.59 1645.39,-2137.8 1635.01,-2135.65 1635.94,-2142.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node296" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node296"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="547.5,-1494 472.5,-1494 472.5,-1458 547.5,-1458 547.5,-1494"/>
<text text-anchor="middle" x="510" y="-1472.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<path fill="none" stroke="gray" d="M547.56,-1476C638.15,-1476 876.69,-1476 1029.36,-1476"/>
<polygon fill="gray" stroke="gray" points="1029.75,-1479.5 1039.75,-1476 1029.75,-1472.5 1029.75,-1479.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node297" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node297"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="1311,-2370 1021,-2370 1021,-2334 1311,-2334 1311,-2370"/>
<text text-anchor="middle" x="1166" y="-2348.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="gray" d="M547.67,-1468.57C618.17,-1456.68 772.34,-1442.73 848,-1529 877.17,-1562.26 837.76,-2292.71 868,-2325 920.26,-2380.8 1011.05,-2381.21 1078.54,-2371.57"/>
<polygon fill="gray" stroke="gray" points="1079.38,-2374.98 1088.74,-2370.01 1078.32,-2368.06 1079.38,-2374.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node298" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node298"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="1280,-2262 1052,-2262 1052,-2226 1280,-2226 1280,-2262"/>
<text text-anchor="middle" x="1166" y="-2240.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="gray" d="M547.64,-1468.6C618.08,-1456.76 772.16,-1442.88 848,-1529 898.32,-1586.14 816.12,-2158.27 868,-2214 918.55,-2268.3 1005.44,-2271.25 1072.21,-2263.31"/>
<polygon fill="gray" stroke="gray" points="1072.86,-2266.75 1082.33,-2262 1071.96,-2259.81 1072.86,-2266.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node299" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node299"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="1274,-2316 1058,-2316 1058,-2280 1274,-2280 1274,-2316"/>
<text text-anchor="middle" x="1166" y="-2294.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="gray" d="M547.65,-1468.59C618.13,-1456.72 772.26,-1442.8 848,-1529 902.44,-1590.96 811.57,-2210.85 868,-2271 920.23,-2326.67 1010.81,-2327.17 1078.24,-2317.59"/>
<polygon fill="gray" stroke="gray" points="1079.07,-2321 1088.43,-2316.04 1078.02,-2314.08 1079.07,-2321"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge581" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="gray" d="M1242.76,-2370.04C1311.15,-2381.33 1409.21,-2384.16 1464,-2325 1517.99,-2266.71 1427.43,-950.79 1484,-895 1522.19,-857.34 1860.59,-890.16 2034.2,-909.81"/>
<polygon fill="gray" stroke="gray" points="2034.05,-913.31 2044.38,-910.96 2034.84,-906.36 2034.05,-913.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge580" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M1311.06,-2341.2C1367.25,-2345.2 1426.94,-2361.23 1464,-2405 1497.22,-2444.24 1471.48,-4206.13 1484,-4256 1520.48,-4401.28 1621.73,-4552.94 1664.52,-4612.64"/>
<polygon fill="gray" stroke="gray" points="1661.7,-4614.71 1670.39,-4620.77 1667.37,-4610.61 1661.7,-4614.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node338" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node338"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="1836,-4819 1534,-4819 1534,-4783 1836,-4783 1836,-4819"/>
<text text-anchor="middle" x="1685" y="-4797.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge576" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="gray" d="M1311.11,-2341.16C1367.31,-2345.15 1426.99,-2361.18 1464,-2405 1506.46,-2455.28 1440.48,-4724.63 1484,-4774 1495.03,-4786.52 1508.88,-4795.31 1524.11,-4801.33"/>
<polygon fill="gray" stroke="gray" points="1523.17,-4804.71 1533.77,-4804.73 1525.5,-4798.11 1523.17,-4804.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge575" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="gray" d="M1311.12,-2341.15C1367.31,-2345.15 1427,-2361.18 1464,-2405 1507.42,-2456.43 1439.5,-4777.51 1484,-4828 1507.98,-4855.21 1545.27,-4864.83 1581.18,-4866.63"/>
<polygon fill="gray" stroke="gray" points="1581.16,-4870.14 1591.27,-4866.94 1581.38,-4863.14 1581.16,-4870.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge578" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M1311.1,-2341.16C1367.3,-2345.16 1426.99,-2361.19 1464,-2405 1504.54,-2452.98 1442.46,-4618.89 1484,-4666 1524.2,-4711.59 1601.77,-4707.79 1647.59,-4700.6"/>
<polygon fill="gray" stroke="gray" points="1648.42,-4704.01 1657.69,-4698.88 1647.24,-4697.11 1648.42,-4704.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge579" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M1311.12,-2341.15C1367.32,-2345.15 1427,-2361.18 1464,-2405 1508.39,-2457.58 1438.51,-4830.38 1484,-4882 1516.45,-4918.82 1573.28,-4923.43 1618.08,-4920.06"/>
<polygon fill="gray" stroke="gray" points="1618.67,-4923.52 1628.32,-4919.13 1618.04,-4916.54 1618.67,-4923.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge577" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1250.64,-2370.03C1317.46,-2379.11 1408.79,-2378.7 1464,-2325 1517.9,-2272.57 1431.25,-2210.59 1484,-2157 1522.73,-2117.65 1589.56,-2116.52 1635.22,-2121.46"/>
<polygon fill="gray" stroke="gray" points="1634.85,-2124.94 1645.2,-2122.67 1635.69,-2117.99 1634.85,-2124.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge621" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="gray" d="M1248.53,-2262.01C1316.66,-2271.74 1410.93,-2271.86 1464,-2214 1516.2,-2157.09 1429,-878.22 1484,-824 1547.62,-761.29 1814.25,-770.77 1886,-824 1910.62,-842.26 1882.7,-870.08 1906,-890 1940.89,-919.84 1990.26,-929.46 2034.31,-930.95"/>
<polygon fill="gray" stroke="gray" points="2034.43,-934.45 2044.5,-931.16 2034.57,-927.45 2034.43,-934.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge625" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M1248.85,-2262.04C1316.93,-2271.71 1410.97,-2271.73 1464,-2214 1511.55,-2162.24 1437.33,-1001.55 1484,-949 1512.69,-916.69 1560.16,-909.25 1601.65,-910.21"/>
<polygon fill="gray" stroke="gray" points="1601.65,-913.71 1611.78,-910.61 1601.92,-906.71 1601.65,-913.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge624" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="gray" d="M1248.84,-2262.03C1316.92,-2271.7 1410.95,-2271.71 1464,-2214 1509.54,-2164.46 1439.3,-1053.29 1484,-1003 1512.17,-971.31 1558.4,-963.54 1599.32,-964.17"/>
<polygon fill="gray" stroke="gray" points="1599.22,-967.67 1609.32,-964.49 1599.44,-960.67 1599.22,-967.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge629" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="gray" d="M1248.54,-2262.01C1316.66,-2271.75 1410.94,-2271.87 1464,-2214 1490.81,-2184.76 1471.66,-823.7 1484,-786 1519.29,-678.18 1611.88,-576.05 1657.64,-530.24"/>
<polygon fill="gray" stroke="gray" points="1660.18,-532.64 1664.82,-523.12 1655.26,-527.67 1660.18,-532.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge626" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1280.14,-2242.69C1341.04,-2241.98 1417.88,-2241.09 1488.15,-2240.27"/>
<polygon fill="gray" stroke="gray" points="1488.51,-2243.77 1498.47,-2240.15 1488.43,-2236.77 1488.51,-2243.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge623" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1251.7,-2262C1319.17,-2270.89 1410.82,-2269.81 1464,-2214 1522.49,-2152.62 1426.55,-1895.35 1484,-1833 1497.14,-1818.74 1513.95,-1809.38 1532.23,-1803.47"/>
<polygon fill="gray" stroke="gray" points="1533.26,-1806.82 1541.9,-1800.69 1531.33,-1800.09 1533.26,-1806.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node348" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node348"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="2321.5,-2232 1952.5,-2232 1952.5,-2196 2321.5,-2196 2321.5,-2232"/>
<text text-anchor="middle" x="2137" y="-2210.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge630" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1280.1,-2227.87C1340.09,-2225.39 1411.94,-2232.77 1464,-2271 1482.63,-2284.68 1464.77,-2306.18 1484,-2319 1632.66,-2418.11 1710.85,-2354.29 1886,-2319 1963.82,-2303.32 2047.59,-2262.74 2095.71,-2236.86"/>
<polygon fill="gray" stroke="gray" points="2097.45,-2239.9 2104.56,-2232.05 2094.1,-2233.75 2097.45,-2239.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge627" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1251.12,-2262C1318.7,-2271.04 1410.82,-2270.17 1464,-2214 1497.26,-2178.86 1451.33,-1814.69 1484,-1779 1491.35,-1770.97 1499.86,-1764.49 1509.15,-1759.31"/>
<polygon fill="gray" stroke="gray" points="1510.91,-1762.34 1518.27,-1754.72 1507.76,-1756.08 1510.91,-1762.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge628" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1255.58,-2262C1322.25,-2269.94 1410.94,-2267.57 1464,-2214 1498.39,-2179.28 1450.2,-2030.29 1484,-1995 1498.91,-1979.44 1518.2,-1969.79 1538.9,-1964.12"/>
<polygon fill="gray" stroke="gray" points="1539.94,-1967.47 1548.83,-1961.72 1538.29,-1960.67 1539.94,-1967.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge622" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1280.01,-2259.93C1340.52,-2262.23 1412.9,-2254.24 1464,-2214 1485.09,-2197.39 1463.19,-2173.96 1484,-2157 1526.12,-2122.68 1590.59,-2120.03 1634.89,-2123.28"/>
<polygon fill="gray" stroke="gray" points="1634.87,-2126.79 1645.13,-2124.16 1635.47,-2119.81 1634.87,-2126.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="node302" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<g id="a_node302"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentialWithPniZkcPr...">
<polygon fill="white" stroke="black" points="1719.5,-2966 1650.5,-2966 1650.5,-2930 1719.5,-2930 1719.5,-2966"/>
<text text-anchor="middle" x="1685" y="-2944.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge777" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="gray" d="M1243.81,-2279.99C1311.96,-2269.06 1408.99,-2266.75 1464,-2325 1509.5,-2373.17 1439.56,-2871.85 1484,-2921 1522.67,-2963.77 1594.26,-2962.71 1640.47,-2956.5"/>
<polygon fill="gray" stroke="gray" points="1641.12,-2959.94 1650.5,-2955.02 1640.09,-2953.02 1641.12,-2959.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node304" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node304"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="1749,-2804 1621,-2804 1621,-2768 1749,-2768 1749,-2804"/>
<text text-anchor="middle" x="1685" y="-2782.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge771" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="gray" d="M1244.63,-2280C1312.61,-2269.31 1408.89,-2267.38 1464,-2325 1497.36,-2359.89 1451.4,-2723.39 1484,-2759 1515.21,-2793.09 1567.37,-2799.22 1610.59,-2797.15"/>
<polygon fill="gray" stroke="gray" points="1611.04,-2800.62 1620.8,-2796.5 1610.6,-2793.64 1611.04,-2800.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node305" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node305"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="1718,-2750 1652,-2750 1652,-2714 1718,-2714 1718,-2750"/>
<text text-anchor="middle" x="1685" y="-2728.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge774" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="gray" d="M1274,-2284.14C1334.42,-2281.77 1408.67,-2288.52 1464,-2325 1499.88,-2348.66 1629.51,-2617.18 1671.08,-2704.64"/>
<polygon fill="gray" stroke="gray" points="1668.03,-2706.39 1675.48,-2713.92 1674.36,-2703.39 1668.03,-2706.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node306" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node306"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="1713,-2858 1657,-2858 1657,-2822 1713,-2822 1713,-2858"/>
<text text-anchor="middle" x="1685" y="-2836.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge772" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1244.37,-2279.99C1312.41,-2269.21 1408.95,-2267.14 1464,-2325 1501.41,-2364.31 1447.46,-2772.88 1484,-2813 1524.6,-2857.58 1601,-2854.42 1646.71,-2847.57"/>
<polygon fill="gray" stroke="gray" points="1647.5,-2850.98 1656.81,-2845.92 1646.37,-2844.08 1647.5,-2850.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge775" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="gray" d="M1242.75,-2316.04C1311.15,-2327.33 1409.2,-2330.16 1464,-2271 1517.2,-2213.57 1428.25,-916.96 1484,-862 1547.61,-799.28 1806.57,-821.12 1886,-862 1899.6,-869 1892.92,-882.08 1906,-890 1944.07,-913.05 1992.08,-922.17 2034.38,-925.09"/>
<polygon fill="gray" stroke="gray" points="2034.25,-928.59 2044.43,-925.68 2034.65,-921.6 2034.25,-928.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge773" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M1242.74,-2316.03C1311.12,-2327.31 1409.17,-2330.13 1464,-2271 1513.94,-2217.14 1435.24,-1003.94 1484,-949 1512.68,-916.68 1560.15,-909.24 1601.64,-910.2"/>
<polygon fill="gray" stroke="gray" points="1601.64,-913.7 1611.77,-910.6 1601.92,-906.71 1601.64,-913.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge776" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1256.3,-2316.01C1322.02,-2323.72 1409.14,-2321.49 1464,-2271 1501.85,-2236.17 1446.92,-2192.65 1484,-2157 1523.6,-2118.93 1589.72,-2117.36 1635.01,-2121.87"/>
<polygon fill="gray" stroke="gray" points="1634.87,-2125.37 1645.19,-2123.02 1635.65,-2118.42 1634.87,-2125.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node300" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node300"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="2193.5,-2912 2080.5,-2912 2080.5,-2876 2193.5,-2876 2193.5,-2912"/>
<text text-anchor="middle" x="2137" y="-2890.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2193.55,-2884.03C2245.23,-2878.16 2321.12,-2878.74 2368,-2921 2410.29,-2959.12 2354.87,-3006.63 2396,-3046 2430.63,-3079.15 2488.59,-3082.38 2526.56,-3080.27"/>
<polygon fill="gray" stroke="gray" points="2526.97,-3083.75 2536.7,-3079.55 2526.48,-3076.77 2526.97,-3083.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node301" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node301"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="2198.5,-2804 2075.5,-2804 2075.5,-2768 2198.5,-2768 2198.5,-2804"/>
<text text-anchor="middle" x="2137" y="-2782.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2198.78,-2785.72C2246.16,-2787.24 2312.93,-2793.27 2368,-2813 2433.05,-2836.31 2498.55,-2884.61 2534.94,-2914.17"/>
<polygon fill="gray" stroke="gray" points="2533.17,-2917.25 2543.11,-2920.9 2537.62,-2911.84 2533.17,-2917.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node303" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node303"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="2200,-2966 2074,-2966 2074,-2930 2200,-2930 2200,-2966"/>
<text text-anchor="middle" x="2137" y="-2944.3" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="gray" d="M1719.82,-2948C1792.57,-2948 1965.28,-2948 2063.82,-2948"/>
<polygon fill="gray" stroke="gray" points="2064,-2951.5 2074,-2948 2064,-2944.5 2064,-2951.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M2200.06,-2945.82C2251.59,-2947.46 2323.42,-2958.23 2368,-3001 2401.92,-3033.55 2361,-3071.61 2396,-3103 2429.47,-3133.02 2482.52,-3136.89 2520.04,-3135.09"/>
<polygon fill="gray" stroke="gray" points="2520.42,-3138.57 2530.18,-3134.45 2519.98,-3131.59 2520.42,-3138.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node307" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node307"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2229.5,-2858 2044.5,-2858 2044.5,-2822 2229.5,-2822 2229.5,-2858"/>
<text text-anchor="middle" x="2137" y="-2836.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="gray" d="M1749.05,-2793.83C1793.03,-2799.27 1853.08,-2806.65 1906,-2813 1948.04,-2818.05 1994.42,-2823.51 2034.45,-2828.2"/>
<polygon fill="gray" stroke="gray" points="2034.15,-2831.68 2044.49,-2829.37 2034.96,-2824.73 2034.15,-2831.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="gray" d="M1718,-2735.84C1790.02,-2744.48 1966.28,-2765.63 2065.38,-2777.53"/>
<polygon fill="gray" stroke="gray" points="2064.96,-2781 2075.31,-2778.72 2065.79,-2774.05 2064.96,-2781"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="gray" d="M1713.09,-2843.37C1754.6,-2848.53 1836.46,-2858.65 1906,-2867 1961.3,-2873.64 2024.09,-2881 2070.08,-2886.36"/>
<polygon fill="gray" stroke="gray" points="2069.88,-2889.86 2080.22,-2887.53 2070.69,-2882.9 2069.88,-2889.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M2229.55,-2828.31C2276.03,-2827.46 2330.45,-2834.98 2368,-2867 2402.8,-2896.67 2361.84,-2935.6 2396,-2966 2432,-2998.04 2490.36,-3000.21 2527.95,-2997.57"/>
<polygon fill="gray" stroke="gray" points="2528.29,-3001.05 2537.96,-2996.71 2527.7,-2994.07 2528.29,-3001.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node308" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node308"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="1769,-2912 1601,-2912 1601,-2876 1769,-2876 1769,-2912"/>
<text text-anchor="middle" x="1685" y="-2890.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge723" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M1769.1,-2882.27C1810.36,-2881.45 1857.38,-2889.01 1886,-2921 1918.2,-2956.99 1872.58,-3755.15 1906,-3790 1977.21,-3864.25 2286.64,-3757.03 2368,-3820 2399.45,-3844.35 2363.77,-3881.69 2396,-3905 2535.36,-4005.82 3041.66,-4019.51 3170,-3905 3210.89,-3868.52 3172.01,-3708.24 3198,-3660 3235.12,-3591.1 3311.98,-3538.44 3360.88,-3510.17"/>
<polygon fill="gray" stroke="gray" points="3362.7,-3513.16 3369.67,-3505.18 3359.24,-3507.08 3362.7,-3513.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge721" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="gray" d="M1769.06,-2894C1855.83,-2894 1990.19,-2894 2069.99,-2894"/>
<polygon fill="gray" stroke="gray" points="2070.4,-2897.5 2080.4,-2894 2070.4,-2890.5 2070.4,-2897.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge722" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="gray" d="M1769.06,-2901.46C1808.33,-2900.66 1853.59,-2892.95 1886,-2867 1905.98,-2851 1885.88,-2828.82 1906,-2813 1950.57,-2777.95 2015.84,-2773.32 2065.47,-2776.24"/>
<polygon fill="gray" stroke="gray" points="2065.27,-2779.73 2075.49,-2776.94 2065.76,-2772.75 2065.27,-2779.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge720" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="gray" d="M1769.04,-2904.3C1810.23,-2909.38 1860.73,-2915.56 1906,-2921 1958.7,-2927.33 2018.21,-2934.31 2063.49,-2939.59"/>
<polygon fill="gray" stroke="gray" points="2063.18,-2943.07 2073.51,-2940.75 2063.99,-2936.12 2063.18,-2943.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge719" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="gray" d="M1769.04,-2883.7C1810.23,-2878.62 1860.73,-2872.44 1906,-2867 1948.04,-2861.95 1994.42,-2856.49 2034.45,-2851.8"/>
<polygon fill="gray" stroke="gray" points="2034.96,-2855.27 2044.49,-2850.63 2034.15,-2848.32 2034.96,-2855.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="node336" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<g id="a_node336"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_GroupSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1724.5,-1048 1645.5,-1048 1645.5,-1012 1724.5,-1012 1724.5,-1048"/>
<text text-anchor="middle" x="1685" y="-1026.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge718" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1600.99,-2908.24C1551.33,-2911.25 1494.3,-2903.57 1474,-2858 1460.04,-2826.66 1468.16,-1656.81 1474,-1623 1513.2,-1395.87 1631.04,-1140.45 1671.33,-1057.55"/>
<polygon fill="gray" stroke="gray" points="1674.6,-1058.83 1675.84,-1048.31 1668.31,-1055.76 1674.6,-1058.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node309" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node309"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="1274,-5567 1058,-5567 1058,-5531 1274,-5531 1274,-5567"/>
<text text-anchor="middle" x="1166" y="-5545.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="gray" d="M1274.31,-5557.94C1330.8,-5562.85 1401.19,-5569.29 1464,-5576 1525.28,-5582.54 1596,-5591.47 1640.35,-5597.23"/>
<polygon fill="gray" stroke="gray" points="1640.12,-5600.73 1650.49,-5598.56 1641.03,-5593.79 1640.12,-5600.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1274.12,-5549C1390.36,-5549 1569.66,-5549 1646.71,-5549"/>
<polygon fill="gray" stroke="gray" points="1646.89,-5552.5 1656.89,-5549 1646.89,-5545.5 1646.89,-5552.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node318" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node318"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="1762,-5675 1608,-5675 1608,-5639 1762,-5639 1762,-5675"/>
<text text-anchor="middle" x="1685" y="-5653.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="gray" d="M1274.25,-5532.39C1335.68,-5528.84 1410.86,-5535.32 1464,-5576 1484.32,-5591.56 1464.02,-5614 1484,-5630 1515.51,-5655.23 1559.16,-5663.22 1597.65,-5664.38"/>
<polygon fill="gray" stroke="gray" points="1597.78,-5667.88 1607.83,-5664.53 1597.88,-5660.88 1597.78,-5667.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node310" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node310"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="1843.5,-5459 1526.5,-5459 1526.5,-5423 1843.5,-5423 1843.5,-5459"/>
<text text-anchor="middle" x="1685" y="-5437.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="gray" d="M1831.84,-5459.01C1856.59,-5462.03 1882.03,-5465.12 1906,-5468 1974.51,-5476.23 2054.54,-5485.56 2099.85,-5490.82"/>
<polygon fill="gray" stroke="gray" points="2099.44,-5494.29 2109.78,-5491.97 2100.25,-5487.34 2099.44,-5494.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="gray" d="M1843.7,-5441C1932.67,-5441 2037.09,-5441 2093.92,-5441"/>
<polygon fill="gray" stroke="gray" points="2093.96,-5444.5 2103.96,-5441 2093.96,-5437.5 2093.96,-5444.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="gray" d="M1843.55,-5445.36C1858.9,-5450.6 1873.42,-5457.93 1886,-5468 1905.98,-5484 1885.88,-5506.18 1906,-5522 1961.94,-5566 2050.48,-5562.06 2099.8,-5555.44"/>
<polygon fill="gray" stroke="gray" points="2100.6,-5558.86 2109.99,-5553.96 2099.59,-5551.93 2100.6,-5558.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M1719.92,-5606.04C1851.29,-5617.44 2321.67,-5654.76 2368,-5609 2412.75,-5564.8 2375.15,-3404.34 2396,-3345 2424.11,-3264.97 2495.09,-3191.71 2535.22,-3154.9"/>
<polygon fill="gray" stroke="gray" points="2537.74,-3157.34 2542.81,-3148.03 2533.04,-3152.15 2537.74,-3157.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M2164.23,-5501.52C2212.74,-5511.81 2316.22,-5525.25 2368,-5468 2431.25,-5398.07 2334.25,-3842.26 2396,-3771 2427.92,-3734.16 2488.47,-3733.59 2527.5,-3737.84"/>
<polygon fill="gray" stroke="gray" points="2527.54,-3741.38 2537.89,-3739.14 2528.4,-3734.43 2527.54,-3741.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node313" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node313"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="1307,-5513 1025,-5513 1025,-5477 1307,-5477 1307,-5513"/>
<text text-anchor="middle" x="1166" y="-5491.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="gray" d="M1307.01,-5477.57C1360.91,-5478.08 1420.01,-5488.32 1464,-5522 1484.32,-5537.56 1464.02,-5560 1484,-5576 1528.06,-5611.28 1595.86,-5612.85 1640.08,-5609.16"/>
<polygon fill="gray" stroke="gray" points="1640.61,-5612.63 1650.23,-5608.19 1639.95,-5605.66 1640.61,-5612.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1307.22,-5506.83C1356.79,-5511.26 1412.9,-5516.54 1464,-5522 1528.33,-5528.87 1603.06,-5538.36 1646.78,-5544.07"/>
<polygon fill="gray" stroke="gray" points="1646.57,-5547.57 1656.94,-5545.4 1647.48,-5540.63 1646.57,-5547.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="gray" d="M1257.53,-5476.98C1323.02,-5469.54 1409.28,-5472.12 1464,-5522 1500.08,-5554.89 1448.65,-5596.34 1484,-5630 1513.76,-5658.34 1558.23,-5666.38 1597.69,-5666.77"/>
<polygon fill="gray" stroke="gray" points="1597.89,-5670.27 1607.87,-5666.71 1597.85,-5663.27 1597.89,-5670.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2159.96,-5422.96C2208.59,-5381.44 2324.51,-5273.36 2368,-5153 2395.11,-5077.95 2343.66,-3777.23 2396,-3717 2427.71,-3680.52 2487.51,-3679.64 2526.54,-3683.76"/>
<polygon fill="gray" stroke="gray" points="2526.61,-3687.29 2536.96,-3685.03 2527.46,-3680.34 2526.61,-3687.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node315" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node315"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="1299,-5675 1033,-5675 1033,-5639 1299,-5639 1299,-5675"/>
<text text-anchor="middle" x="1166" y="-5653.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge493" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="gray" d="M1299.04,-5645.89C1350.55,-5641.33 1410.07,-5635.76 1464,-5630 1525.28,-5623.46 1596,-5614.53 1640.35,-5608.77"/>
<polygon fill="gray" stroke="gray" points="1641.03,-5612.21 1650.49,-5607.44 1640.12,-5605.27 1641.03,-5612.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge491" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1299.12,-5674.44C1355.07,-5674.87 1417.85,-5665.33 1464,-5630 1484.32,-5614.44 1464.02,-5592 1484,-5576 1530.34,-5538.9 1602.94,-5539.08 1646.74,-5543.45"/>
<polygon fill="gray" stroke="gray" points="1646.37,-5546.92 1656.7,-5544.56 1647.15,-5539.97 1646.37,-5546.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge492" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="gray" d="M1299.13,-5657C1392.95,-5657 1516.22,-5657 1597.67,-5657"/>
<polygon fill="gray" stroke="gray" points="1597.89,-5660.5 1607.89,-5657 1597.89,-5653.5 1597.89,-5660.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge537" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="gray" d="M2164,-5551.93C2208.67,-5555.72 2301.58,-5558.07 2368,-5522 2591.84,-5400.45 2643.48,-5319.08 2734,-5081 2799.19,-4909.54 2715.96,-4433.57 2762,-4256 2801.78,-4102.58 2906.81,-3940.88 2950.02,-3878.6"/>
<polygon fill="gray" stroke="gray" points="2953.07,-3880.34 2955.93,-3870.14 2947.33,-3876.33 2953.07,-3880.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge538" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2164.36,-5555.36C2212.61,-5565.27 2315.03,-5577.88 2368,-5522 2401.78,-5486.37 2379.51,-5127.25 2396,-5081 2482.64,-4837.96 2650.74,-4853.22 2734,-4609 2762.13,-4526.5 2703.33,-3889.46 2762,-3825 2801.09,-3782.05 2872.35,-3782.29 2920.19,-3788.48"/>
<polygon fill="gray" stroke="gray" points="2919.92,-3791.98 2930.32,-3789.92 2920.91,-3785.05 2919.92,-3791.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge569" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M1713.34,-5553.45C1754.84,-5559.95 1836.29,-5571.74 1906,-5576 1957.24,-5579.13 2331.5,-5612.09 2368,-5576 2416.85,-5527.7 2351.15,-3155.04 2396,-3103 2427.69,-3066.23 2487.91,-3065.54 2526.98,-3069.76"/>
<polygon fill="gray" stroke="gray" points="2526.56,-3073.24 2536.92,-3070.99 2527.42,-3066.29 2526.56,-3073.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge603" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="gray" d="M1762.13,-5666.71C1803.91,-5667.62 1853.65,-5660.81 1886,-5630 1921.35,-5596.34 1870.36,-5555.36 1906,-5522 1958.34,-5473.01 2049.36,-5479.17 2099.78,-5487.42"/>
<polygon fill="gray" stroke="gray" points="2099.44,-5490.91 2109.89,-5489.19 2100.64,-5484.02 2099.44,-5490.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge602" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="gray" d="M1762.35,-5667.42C1804.47,-5668.64 1854.47,-5661.89 1886,-5630 1937.01,-5578.41 1854.55,-5519.14 1906,-5468 1955.05,-5419.24 2042.04,-5423.82 2093.83,-5432.07"/>
<polygon fill="gray" stroke="gray" points="2093.25,-5435.52 2103.7,-5433.76 2094.43,-5428.62 2093.25,-5435.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge604" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="gray" d="M1762.08,-5649.97C1799.66,-5645.68 1845.52,-5639.21 1886,-5630 1963.87,-5612.28 2052.14,-5580.92 2100.18,-5562.86"/>
<polygon fill="gray" stroke="gray" points="2101.68,-5566.03 2109.8,-5559.22 2099.21,-5559.48 2101.68,-5566.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node319" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node319"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="1303.5,-5621 1028.5,-5621 1028.5,-5585 1303.5,-5585 1303.5,-5621"/>
<text text-anchor="middle" x="1166" y="-5599.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge609" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="gray" d="M1303.51,-5603C1415.29,-5603 1566.55,-5603 1640.14,-5603"/>
<polygon fill="gray" stroke="gray" points="1640.42,-5606.5 1650.42,-5603 1640.42,-5599.5 1640.42,-5606.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge607" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1303.86,-5591.47C1354.24,-5586.98 1411.75,-5581.58 1464,-5576 1528.33,-5569.13 1603.06,-5559.64 1646.78,-5553.93"/>
<polygon fill="gray" stroke="gray" points="1647.48,-5557.37 1656.94,-5552.6 1646.57,-5550.43 1647.48,-5557.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge608" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="gray" d="M1303.86,-5614.53C1354.24,-5619.02 1411.75,-5624.42 1464,-5630 1508.18,-5634.72 1557.26,-5640.67 1597.84,-5645.79"/>
<polygon fill="gray" stroke="gray" points="1597.6,-5649.29 1607.96,-5647.07 1598.48,-5642.34 1597.6,-5649.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node320" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node320"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1802,-5513 1568,-5513 1568,-5477 1802,-5477 1802,-5513"/>
<text text-anchor="middle" x="1685" y="-5491.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge661" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="gray" d="M1802.18,-5495C1900.61,-5495 2035.63,-5495 2099.58,-5495"/>
<polygon fill="gray" stroke="gray" points="2099.58,-5498.5 2109.58,-5495 2099.58,-5491.5 2099.58,-5498.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge659" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="gray" d="M1802.16,-5480.63C1835.67,-5476.51 1872.28,-5472.05 1906,-5468 1971.55,-5460.13 2047.64,-5451.25 2093.78,-5445.89"/>
<polygon fill="gray" stroke="gray" points="2094.47,-5449.33 2103.99,-5444.7 2093.66,-5442.38 2094.47,-5449.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge660" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="gray" d="M1802.16,-5509.37C1835.67,-5513.49 1872.28,-5517.95 1906,-5522 1974.51,-5530.23 2054.54,-5539.56 2099.85,-5544.82"/>
<polygon fill="gray" stroke="gray" points="2099.44,-5548.29 2109.78,-5545.97 2100.25,-5541.34 2099.44,-5548.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M2171.61,-3189.74C2216.49,-3185.24 2298.42,-3176.46 2368,-3166 2420.72,-3158.07 2480.98,-3146.65 2520.61,-3138.8"/>
<polygon fill="gray" stroke="gray" points="2521.34,-3142.23 2530.47,-3136.84 2519.98,-3135.36 2521.34,-3142.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M2201.39,-3082.47C2248.11,-3079.42 2312.84,-3072.73 2368,-3058 2381.08,-3054.51 2383.31,-3050.71 2396,-3046 2440.83,-3029.37 2493.55,-3013.29 2527.82,-3003.28"/>
<polygon fill="gray" stroke="gray" points="2529.2,-3006.53 2537.83,-3000.38 2527.25,-2999.8 2529.2,-3006.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2170.08,-3034.04C2216.79,-3036.95 2304.84,-3036.57 2368,-3001 2385.36,-2991.23 2378.79,-2976.03 2396,-2966 2436.3,-2942.51 2490.81,-2937.73 2526.66,-2937.51"/>
<polygon fill="gray" stroke="gray" points="2526.68,-2941.01 2536.7,-2937.56 2526.72,-2934.01 2526.68,-2941.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge431" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2165.19,-3137.52C2208.52,-3134.78 2295.71,-3127.71 2368,-3112 2380.77,-3109.22 2383.29,-3106.05 2396,-3103 2440.52,-3092.33 2492.7,-3084.69 2526.96,-3080.31"/>
<polygon fill="gray" stroke="gray" points="2527.49,-3083.77 2536.98,-3079.06 2526.63,-3076.83 2527.49,-3083.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2170.26,-3965.2C2220.08,-3974.22 2315.49,-3982.82 2368,-3931 2436.27,-3863.62 2329.17,-3785.81 2396,-3717 2429.49,-3682.52 2488.27,-3680.96 2526.67,-3684.41"/>
<polygon fill="gray" stroke="gray" points="2526.61,-3687.92 2536.92,-3685.49 2527.34,-3680.96 2526.61,-3687.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2165,-3852.21C2214.31,-3854.58 2318.42,-3851.54 2368,-3790 2415.93,-3730.51 2345.28,-3160.13 2396,-3103 2428,-3066.96 2487.45,-3065.89 2526.37,-3069.86"/>
<polygon fill="gray" stroke="gray" points="2526.42,-3073.39 2536.76,-3071.08 2527.24,-3066.44 2526.42,-3073.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M2164.01,-4018.02C2211.68,-4027.36 2313.2,-4039.08 2368,-3985 2436.27,-3917.62 2329.17,-3839.81 2396,-3771 2429.77,-3736.23 2489.26,-3734.94 2527.63,-3738.49"/>
<polygon fill="gray" stroke="gray" points="2527.54,-3742 2537.86,-3739.6 2528.29,-3735.04 2527.54,-3742"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge543" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M2171.58,-3911.84C2222.29,-3921.46 2317.81,-3930.52 2368,-3877 2408.49,-3833.82 2375.26,-3400.44 2396,-3345 2425.72,-3265.55 2496.06,-3192.06 2535.65,-3155.06"/>
<polygon fill="gray" stroke="gray" points="2538.16,-3157.51 2543.14,-3148.15 2533.41,-3152.36 2538.16,-3157.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge736" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="gray" d="M2164.02,-4069.54C2209.11,-4074.33 2303.16,-4078.24 2368,-4039 2386.88,-4027.57 2377.92,-4010.65 2396,-3998 2523.02,-3909.15 2583.79,-3950.28 2734,-3912 2804.56,-3894.02 2887.02,-3872.95 2933.11,-3861.17"/>
<polygon fill="gray" stroke="gray" points="2934.1,-3864.53 2942.92,-3858.67 2932.37,-3857.75 2934.1,-3864.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge735" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2164.31,-4071.69C2211.57,-4080.24 2311.2,-4090.38 2368,-4039 2410.87,-4000.23 2352.76,-3950.35 2396,-3912 2452.46,-3861.92 2671.5,-3921.29 2734,-3879 2756.39,-3863.85 2739.86,-3840.51 2762,-3825 2808.26,-3792.59 2874.92,-3789.64 2919.99,-3792.28"/>
<polygon fill="gray" stroke="gray" points="2919.89,-3795.79 2930.11,-3792.99 2920.38,-3788.8 2919.89,-3795.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node400" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node400"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="2600,-106 2530,-106 2530,-70 2600,-70 2600,-106"/>
<text text-anchor="middle" x="2565" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M2186.37,-3285.96C2239.6,-3293.76 2323.51,-3296.16 2368,-3246 2419.78,-3187.62 2378.26,-512.99 2396,-437 2426.04,-308.28 2508.99,-171.48 2545.89,-114.89"/>
<polygon fill="gray" stroke="gray" points="2549.04,-116.48 2551.61,-106.2 2543.19,-112.63 2549.04,-116.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge716" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2219.25,-3344.42C2269.56,-3348.28 2331.35,-3342.9 2368,-3303 2433.8,-3231.36 2337.24,-2505.52 2396,-2428 2421.25,-2394.69 2467.41,-2381.84 2504.97,-2377.1"/>
<polygon fill="gray" stroke="gray" points="2505.75,-2380.54 2515.31,-2375.97 2504.98,-2373.58 2505.75,-2380.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="node332" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<g id="a_node332"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: Default::default(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: zkcredential::credentials::CredentialKeyPair::generate(ra...">
<polygon fill="white" stroke="black" points="2176.5,-2393 2097.5,-2393 2097.5,-2357 2176.5,-2357 2176.5,-2393"/>
<text text-anchor="middle" x="2137" y="-2371.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2176.51,-2383.28C2228.5,-2391.92 2320.11,-2397.79 2368,-2345 2432.75,-2273.61 2326.76,-1545.04 2396,-1478 2426.89,-1448.09 3139.38,-1447.81 3170,-1478 3247.94,-1554.84 3127.54,-3364.24 3198,-3448 3235.83,-3492.97 3307.74,-3496.85 3356.03,-3493.51"/>
<polygon fill="gray" stroke="gray" points="3356.58,-3496.97 3366.26,-3492.67 3356.01,-3490 3356.58,-3496.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2147.47,-940.28C2184.41,-1012.67 2319.17,-1287.2 2368,-1531 2376.92,-1575.53 2365.96,-2313.94 2396,-2348 2422.53,-2378.07 2468.15,-2383.84 2505.17,-2382.63"/>
<polygon fill="gray" stroke="gray" points="2505.55,-2386.12 2515.36,-2382.12 2505.2,-2379.13 2505.55,-2386.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge468" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M1758.13,-933.11C1800.98,-939.14 1856.45,-945.97 1906,-949 2008.48,-955.26 2293.45,-1019.59 2368,-949 2409.37,-909.83 2381.81,-492.18 2396,-437 2428.91,-308.99 2510.32,-171.81 2546.36,-115.01"/>
<polygon fill="gray" stroke="gray" points="2549.5,-116.59 2551.94,-106.28 2543.6,-112.82 2549.5,-116.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node376" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node376"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="2600,-485 2530,-485 2530,-449 2600,-449 2600,-485"/>
<text text-anchor="middle" x="2565" y="-463.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge573" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M1760.78,-982.21C1928.54,-995.37 2323.71,-1021.73 2368,-982 2410.77,-943.64 2376.69,-779.11 2396,-725 2429.58,-630.93 2503.65,-536.72 2541.21,-492.7"/>
<polygon fill="gray" stroke="gray" points="2543.9,-494.94 2547.78,-485.08 2538.6,-490.37 2543.9,-494.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge770" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="gray" d="M1724.71,-1026.85C1765.27,-1023.06 1830.65,-1015.59 1886,-1003 1953.56,-987.62 2028.95,-961.98 2079.1,-943.67"/>
<polygon fill="gray" stroke="gray" points="2080.61,-946.84 2088.78,-940.11 2078.19,-940.27 2080.61,-946.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M1777.76,-4629.13C1817.22,-4624.96 1863.86,-4620.12 1906,-4616 2138.34,-4593.26 2417.11,-4568.76 2521.66,-4559.67"/>
<polygon fill="gray" stroke="gray" points="2522.15,-4563.14 2531.81,-4558.78 2521.54,-4556.16 2522.15,-4563.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="node343" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<g id="a_node343"><a xlink:title=" &#160;&#160;&#160;fn derive_public_signing_key_from_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorsements::ServerRootPublicKey&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;zkcredent...">
<polygon fill="white" stroke="black" points="2293.5,-4661 1980.5,-4661 1980.5,-4625 2293.5,-4625 2293.5,-4661"/>
<text text-anchor="middle" x="2137" y="-4639.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_public_signing_key_from_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="gray" d="M1777.61,-4639.81C1832.86,-4640.31 1904.9,-4640.95 1969.89,-4641.52"/>
<polygon fill="gray" stroke="gray" points="1970.23,-4645.03 1980.26,-4641.62 1970.29,-4638.03 1970.23,-4645.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M1836.07,-4801.51C1978.23,-4797.06 2195.09,-4777.31 2368,-4705 2437.84,-4675.79 2504.86,-4615.68 2539.53,-4581.41"/>
<polygon fill="gray" stroke="gray" points="2542.24,-4583.65 2546.83,-4574.1 2537.28,-4578.7 2542.24,-4583.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="gray" d="M1836.05,-4797.49C1853.96,-4792.37 1871.14,-4784.84 1886,-4774 1902.7,-4761.81 1890.84,-4746.06 1906,-4732 1942.05,-4698.57 1992.03,-4677.22 2036.19,-4663.84"/>
<polygon fill="gray" stroke="gray" points="2037.2,-4667.2 2045.81,-4661.03 2035.23,-4660.48 2037.2,-4667.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="gray" d="M1778.65,-4861.81C1915.48,-4867.83 2176.1,-4863.53 2368,-4765 2451.59,-4722.08 2518.54,-4628.7 2547.89,-4582.7"/>
<polygon fill="gray" stroke="gray" points="2550.9,-4584.49 2553.26,-4574.16 2544.97,-4580.77 2550.9,-4584.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="gray" d="M1778.67,-4864.33C1816.34,-4863.06 1857.6,-4854.44 1886,-4828 1917.9,-4798.3 1877.81,-4765.24 1906,-4732 1934.84,-4698 1978.28,-4676.93 2019.66,-4663.9"/>
<polygon fill="gray" stroke="gray" points="2020.73,-4667.24 2029.29,-4661 2018.71,-4660.54 2020.73,-4667.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node340" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node340"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="1722.5,-4765 1647.5,-4765 1647.5,-4729 1722.5,-4729 1722.5,-4765"/>
<text text-anchor="middle" x="1685" y="-4743.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<path fill="none" stroke="gray" d="M1722.8,-4753.7C1767.58,-4759.54 1842.58,-4761.54 1886,-4720 1922.22,-4685.34 1873.65,-4647.3 1906,-4609 1936.3,-4573.12 1983.37,-4552.75 2027.05,-4541.19"/>
<polygon fill="gray" stroke="gray" points="2028.05,-4544.55 2036.9,-4538.71 2026.35,-4537.76 2028.05,-4544.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="gray" d="M1712.19,-4694.06C1831.33,-4698.61 2318.49,-4714.39 2368,-4670 2433.19,-4611.55 2334.61,-4537.43 2396,-4475 2429.98,-4440.44 2489.42,-4439.09 2527.72,-4442.58"/>
<polygon fill="gray" stroke="gray" points="2527.61,-4446.08 2537.92,-4443.66 2528.35,-4439.12 2527.61,-4446.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge429" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M1741.69,-4908.9C1875.83,-4905.31 2216.9,-4875.42 2368,-4670 2433.99,-4580.29 2319.14,-4501.59 2396,-4421 2424.51,-4391.1 2472.01,-4385.81 2509.24,-4387.17"/>
<polygon fill="gray" stroke="gray" points="2509.27,-4390.67 2519.45,-4387.71 2509.65,-4383.68 2509.27,-4390.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge724" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="gray" d="M2293.79,-4647.57C2321.67,-4641.28 2348.13,-4629.51 2368,-4609 2443.34,-4531.24 2321.15,-4445.23 2396,-4367 2424.56,-4337.15 2472.05,-4331.86 2509.27,-4333.2"/>
<polygon fill="gray" stroke="gray" points="2509.3,-4336.7 2519.47,-4333.74 2509.67,-4329.71 2509.3,-4336.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="node371" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<g id="a_node371"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CommitmentWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let commitment_system = SystemParams::get_hardcoded...">
<polygon fill="white" stroke="black" points="2592,-2476 2538,-2476 2538,-2440 2592,-2440 2592,-2476"/>
<text text-anchor="middle" x="2565" y="-2454.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="gray" d="M1752.2,-521.69C1916.05,-563.65 2330.07,-673.8 2368,-725 2424.33,-801.03 2334.66,-2355.95 2396,-2428 2427.76,-2465.3 2488.57,-2466.93 2527.66,-2463.41"/>
<polygon fill="gray" stroke="gray" points="2528.25,-2466.87 2537.83,-2462.34 2527.51,-2459.91 2528.25,-2466.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node386" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node386"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="2592,-2256 2538,-2256 2538,-2220 2592,-2220 2592,-2256"/>
<text text-anchor="middle" x="2565" y="-2234.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="gray" d="M1871.82,-2223.84C1876.91,-2220.08 1881.66,-2215.82 1886,-2211 1936.58,-2154.83 1851.77,-1583.66 1906,-1531 1942.83,-1495.24 2330.96,-1495.46 2368,-1531 2422.56,-1583.36 2345.78,-2154.46 2396,-2211 2428.28,-2247.34 2488.46,-2248.12 2527.35,-2244.04"/>
<polygon fill="gray" stroke="gray" points="2528.2,-2247.46 2537.71,-2242.79 2527.36,-2240.51 2528.2,-2247.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node385" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node385"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="2593,-1986 2537,-1986 2537,-1950 2593,-1950 2593,-1986"/>
<text text-anchor="middle" x="2565" y="-1964.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="gray" d="M1828.08,-1811.29C1850.07,-1805.72 1870.56,-1795.74 1886,-1779 1914.21,-1748.41 1875.8,-1433.63 1906,-1405 2055.02,-1263.74 2219.07,-1263.65 2368,-1405 2411.26,-1446.05 2356.15,-1896.63 2396,-1941 2428.21,-1976.86 2487.6,-1977.98 2526.45,-1974.07"/>
<polygon fill="gray" stroke="gray" points="2527.29,-1977.5 2536.82,-1972.86 2526.48,-1970.54 2527.29,-1977.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node381" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node381"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="2593,-1824 2537,-1824 2537,-1788 2593,-1788 2593,-1824"/>
<text text-anchor="middle" x="2565" y="-1802.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="gray" d="M1824.16,-1704.41C1847.66,-1699.05 1869.7,-1688.86 1886,-1671 1921.08,-1632.55 1868.42,-1239.01 1906,-1203 2054.26,-1060.94 2219.32,-1061.38 2368,-1203 2414.4,-1247.19 2353.27,-1731.25 2396,-1779 2428.14,-1814.92 2487.56,-1816.02 2526.42,-1812.09"/>
<polygon fill="gray" stroke="gray" points="2527.28,-1815.52 2536.8,-1810.88 2526.46,-1808.57 2527.28,-1815.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node382" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node382"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="2593,-2094 2537,-2094 2537,-2058 2593,-2058 2593,-2094"/>
<text text-anchor="middle" x="2565" y="-2072.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="gray" d="M2172.46,-2195.9C2221,-2171.18 2312.89,-2127.15 2396,-2103 2439.96,-2090.22 2492.26,-2083.02 2526.7,-2079.33"/>
<polygon fill="gray" stroke="gray" points="2527.19,-2082.79 2536.78,-2078.29 2526.47,-2075.83 2527.19,-2082.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="node388" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node388"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2176.5,-402 2097.5,-402 2097.5,-366 2176.5,-366 2176.5,-402"/>
<text text-anchor="middle" x="2137" y="-380.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M1694.92,-1625.7C1728.02,-1556.72 1844.06,-1305 1886,-1083 1892.66,-1047.72 1883.21,-464.75 1906,-437 1949.28,-384.31 2033.48,-377.72 2087.11,-379.57"/>
<polygon fill="gray" stroke="gray" points="2087.26,-383.08 2097.41,-380.04 2087.58,-376.09 2087.26,-383.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node389" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node389"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = credentials::convert_to_point_M2_recei...">
<polygon fill="white" stroke="black" points="2172,-348 2102,-348 2102,-312 2172,-312 2172,-348"/>
<text text-anchor="middle" x="2137" y="-326.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="gray" d="M1694.94,-1625.71C1728.13,-1556.74 1844.44,-1305.07 1886,-1083 1893.42,-1043.34 1878.77,-386.78 1906,-357 1952.29,-306.38 2039.05,-311.24 2091.77,-320.11"/>
<polygon fill="gray" stroke="gray" points="2091.37,-323.6 2101.83,-321.93 2092.61,-316.71 2091.37,-323.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="gray" d="M1851.8,-1750.56C2013.03,-1759.16 2250.32,-1800.5 2368,-1960 2429.86,-2043.84 2326.76,-2350.15 2396,-2428 2428.4,-2464.43 2488.55,-2466.42 2527.39,-2463.2"/>
<polygon fill="gray" stroke="gray" points="2528.14,-2466.64 2537.74,-2462.17 2527.45,-2459.68 2528.14,-2466.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="node374" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node374"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2604.5,-827 2525.5,-827 2525.5,-791 2604.5,-791 2604.5,-827"/>
<text text-anchor="middle" x="2565" y="-805.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M1851.81,-1749.36C1864.65,-1743.55 1876.34,-1735.63 1886,-1725 1925.03,-1682.04 1866.59,-1245.61 1906,-1203 1976.18,-1127.11 2281.66,-1205.83 2368,-1149 2483.34,-1073.09 2538.89,-904.29 2557.04,-837.25"/>
<polygon fill="gray" stroke="gray" points="2560.47,-837.95 2559.63,-827.39 2553.7,-836.17 2560.47,-837.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node375" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node375"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_struct: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let r1 = sho.get_scalar(); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2600,-773 2530,-773 2530,-737 2600,-737 2600,-773"/>
<text text-anchor="middle" x="2565" y="-751.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="gray" d="M1851.85,-1749.39C1864.68,-1743.58 1876.36,-1735.65 1886,-1725 1928.97,-1677.52 1863.21,-1196.64 1906,-1149 2044.6,-994.69 2224.98,-1233.23 2368,-1083 2414.32,-1034.35 2350.11,-831.06 2396,-782 2426.9,-748.97 2480.93,-745.79 2519.37,-748.57"/>
<polygon fill="gray" stroke="gray" points="2519.5,-752.1 2529.77,-749.49 2520.12,-745.12 2519.5,-752.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node380" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node380"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="2592,-2148 2538,-2148 2538,-2112 2592,-2112 2592,-2148"/>
<text text-anchor="middle" x="2565" y="-2126.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="gray" d="M1851.84,-1748.74C1864.58,-1743.04 1876.25,-1735.31 1886,-1725 1925.2,-1683.53 1864.11,-1507.75 1906,-1469 2056.74,-1329.58 2219.64,-1327.05 2368,-1469 2418.95,-1517.75 2349.09,-2050.35 2396,-2103 2428.33,-2139.29 2488.5,-2140.09 2527.37,-2136.02"/>
<polygon fill="gray" stroke="gray" points="2528.22,-2139.44 2537.72,-2134.77 2527.38,-2132.49 2528.22,-2139.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="node368" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<g id="a_node368"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid: uid_struct::UidStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile...">
<polygon fill="white" stroke="black" points="2734,-2667 2396,-2667 2396,-2631 2734,-2631 2734,-2667"/>
<text text-anchor="middle" x="2565" y="-2645.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge565" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1821.05,-1960.89C1980.61,-1960.77 2240.47,-1988.3 2368,-2154 2431.55,-2236.56 2326.09,-2544.75 2396,-2622 2396.54,-2622.6 2397.09,-2623.18 2397.64,-2623.76"/>
<polygon fill="gray" stroke="gray" points="2395.5,-2626.54 2405.23,-2630.73 2400.23,-2621.39 2395.5,-2626.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node383" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node383"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="2593,-2040 2537,-2040 2537,-2004 2593,-2004 2593,-2040"/>
<text text-anchor="middle" x="2565" y="-2018.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge563" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="gray" d="M1821.1,-1975.1C1845.75,-1969.93 1869,-1959.64 1886,-1941 1921.81,-1901.72 1867.63,-1499.79 1906,-1463 1980.1,-1391.94 2293.52,-1392.34 2368,-1463 2410.94,-1503.74 2356.44,-1950.97 2396,-1995 2428.21,-2030.85 2487.61,-2031.97 2526.45,-2028.07"/>
<polygon fill="gray" stroke="gray" points="2527.29,-2031.49 2536.82,-2026.86 2526.48,-2024.54 2527.29,-2031.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node384" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node384"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="2592,-2202 2538,-2202 2538,-2166 2592,-2166 2592,-2202"/>
<text text-anchor="middle" x="2565" y="-2180.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge564" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="gray" d="M1821.05,-1975.05C1845.7,-1969.89 1868.97,-1959.61 1886,-1941 1919.11,-1904.81 1870.54,-1533.89 1906,-1500 1943.11,-1464.53 2330.94,-1464.48 2368,-1500 2420.75,-1550.55 2347.44,-2102.41 2396,-2157 2428.3,-2193.31 2488.48,-2194.1 2527.36,-2190.03"/>
<polygon fill="gray" stroke="gray" points="2528.21,-2193.45 2537.72,-2188.78 2527.37,-2186.5 2528.21,-2193.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="node352" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<g id="a_node352"><a xlink:title=" &#160;&#160;&#160;pub fn verify_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::AnyProfileKeyCredentialPresenta...">
<polygon fill="white" stroke="black" points="1837.5,-2040 1532.5,-2040 1532.5,-2004 1837.5,-2004 1837.5,-2040"/>
<text text-anchor="middle" x="1685" y="-2018.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge591" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1837.69,-2035.1C1854.26,-2038.7 1870.66,-2043.25 1886,-2049 1974.93,-2082.35 2064.21,-2152.09 2108.08,-2189.33"/>
<polygon fill="gray" stroke="gray" points="2105.86,-2192.04 2115.73,-2195.89 2110.42,-2186.72 2105.86,-2192.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node378" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node378"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="2593,-1932 2537,-1932 2537,-1896 2593,-1896 2593,-1932"/>
<text text-anchor="middle" x="2565" y="-1910.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge595" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="gray" d="M1782.63,-1925.42C1820.17,-1924.29 1860.25,-1915.2 1886,-1887 1920.64,-1849.05 1868.89,-1460.54 1906,-1425 2054.3,-1282.98 2218.48,-1284.27 2368,-1425 2442.9,-1495.5 2326.95,-1810.77 2396,-1887 2428.36,-1922.72 2487.71,-1923.88 2526.51,-1920.02"/>
<polygon fill="gray" stroke="gray" points="2527.33,-1923.45 2536.86,-1918.82 2526.53,-1916.49 2527.33,-1923.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge678" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M1724.62,-2137.81C1770.53,-2144.58 1845.95,-2147.32 1886,-2103 1930.95,-2053.26 1867.07,-1554.57 1906,-1500 2125.11,-1192.88 2361.15,-1255.4 2734,-1313 2934.87,-1344.03 3048.76,-1287.87 3170,-1451 3236.19,-1540.05 3126.58,-3363.09 3198,-3448 3235.83,-3492.98 3307.74,-3496.85 3356.03,-3493.51"/>
<polygon fill="gray" stroke="gray" points="3356.58,-3496.97 3366.26,-3492.67 3356.01,-3490 3356.58,-3496.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge680" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M1724.67,-2131.81C1865.78,-2138.59 2345.86,-2163.32 2368,-2187 2400.6,-2221.86 2385.78,-3858.38 2396,-3905 2426.86,-4045.76 2511.52,-4198.31 2547.49,-4258.95"/>
<polygon fill="gray" stroke="gray" points="2544.69,-4261.09 2552.83,-4267.88 2550.7,-4257.5 2544.69,-4261.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="node365" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<g id="a_node365"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(S::NUM_ATTRS &gt;= 1, &#39; at least one attribute required&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S::NUM_ATTRS &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; mo...">
<polygon fill="white" stroke="black" points="2604.5,-2613 2525.5,-2613 2525.5,-2577 2604.5,-2577 2604.5,-2613"/>
<text text-anchor="middle" x="2565" y="-2591.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge681" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="gray" d="M1724.92,-2124.94C1855.7,-2108.9 2276.28,-2065.2 2368,-2154 2434.25,-2218.14 2333.86,-2499.87 2396,-2568 2425.39,-2600.22 2476.75,-2604.26 2514.96,-2601.9"/>
<polygon fill="gray" stroke="gray" points="2515.67,-2605.36 2525.37,-2601.09 2515.12,-2598.38 2515.67,-2605.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="node395" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<g id="a_node395"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signing_key = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = signing_key * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2176.5,-5010 2097.5,-5010 2097.5,-4974 2176.5,-4974 2176.5,-5010"/>
<text text-anchor="middle" x="2137" y="-4988.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge679" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M1724.82,-2122.02C1770.92,-2115.07 1846.53,-2112.16 1886,-2157 1937.49,-2215.48 1854.38,-4903.63 1906,-4962 1950.36,-5012.16 2034.13,-5009.81 2087.4,-5002.01"/>
<polygon fill="gray" stroke="gray" points="2087.97,-5005.46 2097.3,-5000.45 2086.88,-4998.55 2087.97,-5005.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node387" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node387"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="2592,-1878 2538,-1878 2538,-1842 2592,-1842 2592,-1878"/>
<text text-anchor="middle" x="2565" y="-1856.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge693" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="gray" d="M1826,-1866.05C1848.83,-1860.58 1870.15,-1850.44 1886,-1833 1924.81,-1790.29 1864.41,-1354.01 1906,-1314 2053.96,-1171.63 2218.95,-1172.77 2368,-1314 2409.92,-1353.72 2357.37,-1790.07 2396,-1833 2428.51,-1869.13 2488.63,-1869.97 2527.43,-1865.96"/>
<polygon fill="gray" stroke="gray" points="2528.26,-1869.39 2537.78,-1864.73 2527.43,-1862.44 2528.26,-1869.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="node356" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<g id="a_node356"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: NotarySignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.sig_public_key.verify(messag...">
<polygon fill="white" stroke="black" points="1749,-2310 1621,-2310 1621,-2274 1749,-2274 1749,-2310"/>
<text text-anchor="middle" x="1685" y="-2288.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node392" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node392"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="2165,-5118 2109,-5118 2109,-5082 2165,-5082 2165,-5118"/>
<text text-anchor="middle" x="2137" y="-5096.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge739" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="gray" d="M1698.55,-2310.08C1736.15,-2365.47 1847.63,-2538.95 1886,-2702 1893.54,-2734.06 1884.01,-5048.49 1906,-5073 1953.97,-5126.48 2047.03,-5118.45 2098.87,-5108.73"/>
<polygon fill="gray" stroke="gray" points="2099.84,-5112.11 2108.96,-5106.72 2098.47,-5105.24 2099.84,-5112.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="node364" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<g id="a_node364"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: receipt_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expi...">
<polygon fill="white" stroke="black" points="2688.5,-2559 2441.5,-2559 2441.5,-2523 2688.5,-2523 2688.5,-2559"/>
<text text-anchor="middle" x="2565" y="-2537.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge785" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1776.25,-2064.74C1942.12,-2046.24 2286.01,-2018.87 2368,-2098 2434.19,-2161.88 2334.59,-2442.51 2396,-2511 2405.88,-2522.02 2418.31,-2529.89 2431.91,-2535.4"/>
<polygon fill="gray" stroke="gray" points="2430.9,-2538.76 2441.49,-2538.86 2433.27,-2532.17 2430.9,-2538.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node379" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node379"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="2592,-1770 2538,-1770 2538,-1734 2592,-1734 2592,-1770"/>
<text text-anchor="middle" x="2565" y="-1748.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge784" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="gray" d="M1776.04,-2087.62C1815.45,-2087.4 1858.82,-2078.98 1886,-2049 1927,-2003.78 1862.06,-1542.37 1906,-1500 2053.81,-1357.47 2213.99,-1364.2 2368,-1500 2442.59,-1565.77 2327.5,-1649.9 2396,-1722 2429.48,-1757.24 2489.06,-1759.63 2527.52,-1756.81"/>
<polygon fill="gray" stroke="gray" points="2528.12,-1760.27 2537.77,-1755.89 2527.5,-1753.29 2528.12,-1760.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="node358" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<g id="a_node358"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, randomness: RandomnessBytes, message: &amp;[u8]) &#45;&gt; NotarySignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign&#39; , &#160;...">
<polygon fill="white" stroke="black" points="1712,-2202 1658,-2202 1658,-2166 1712,-2166 1712,-2202"/>
<text text-anchor="middle" x="1685" y="-2180.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node393" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node393"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2164,-5064 2110,-5064 2110,-5028 2164,-5028 2164,-5064"/>
<text text-anchor="middle" x="2137" y="-5042.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge786" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="gray" d="M1712.32,-2178.11C1755.94,-2170.08 1842.71,-2161.82 1886,-2211 1937.54,-2269.55 1853.95,-4960.9 1906,-5019 1954.19,-5072.79 2047.99,-5064.39 2099.67,-5054.59"/>
<polygon fill="gray" stroke="gray" points="2100.61,-5057.97 2109.72,-5052.56 2099.23,-5051.11 2100.61,-5057.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main(). -->
<g id="node359" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().</title>
<g id="a_node359"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;let mut randomness = [0u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut randomness); &#160;&#160;&#160;&#160;&#160;let secret_params = GenericServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1193,-397 1139,-397 1139,-361 1193,-361 1193,-397"/>
<text text-anchor="middle" x="1166" y="-375.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge611" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1193.3,-372.2C1299.73,-346.46 1701.57,-266.57 1886,-475 1920.42,-513.9 1871.52,-2306.15 1906,-2345 1950.45,-2395.08 2034.19,-2392.76 2087.43,-2384.98"/>
<polygon fill="gray" stroke="gray" points="2087.99,-2388.44 2097.33,-2383.42 2086.9,-2381.52 2087.99,-2388.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge610" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1193.25,-374.1C1252.38,-364.75 1396.1,-351.89 1464,-432 1494.01,-467.41 1453.24,-2068.23 1484,-2103 1520.8,-2144.6 1588.71,-2145.03 1635.09,-2139.33"/>
<polygon fill="gray" stroke="gray" points="1635.79,-2142.77 1645.22,-2137.95 1634.84,-2135.83 1635.79,-2142.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="node360" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<g id="a_node360"><a xlink:title=" &#160;&#160;&#160;pub fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3449.5,-2439 3362.5,-2439 3362.5,-2403 3449.5,-2403 3449.5,-2439"/>
<text text-anchor="middle" x="3406" y="-2417.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" d="M3427.2,-2439.17C3523.18,-2527.06 3934.19,-2921.16 4072,-3345 4103.4,-3441.58 4044.93,-10577.4 4108,-10657 4108.49,-10657.62 4108.99,-10658.23 4109.51,-10658.82"/>
<polygon fill="gray" stroke="gray" points="4107.16,-10661.42 4116.77,-10665.87 4112.03,-10656.4 4107.16,-10661.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time(). -->
<g id="node361" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().</title>
<g id="a_node361"><a xlink:title="pub fn encode_redemption_time(redemption_time: u32) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..4].copy_from_slice(&amp;redemption_time.to_be_bytes()); &#160;&#160;&#160;&#160;Sca...">
<polygon fill="white" stroke="black" points="2660.5,-1361 2469.5,-1361 2469.5,-1325 2660.5,-1325 2660.5,-1361"/>
<text text-anchor="middle" x="2565" y="-1339.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_redemption_time</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="gray" d="M2660.6,-1327.92C2943.05,-1289.01 3778.78,-1219.87 4072,-1707 4135.33,-1812.22 4031.77,-10452.72 4108,-10549 4112.67,-10554.9 4118.39,-10559.65 4124.74,-10563.47"/>
<polygon fill="gray" stroke="gray" points="4123.26,-10566.64 4133.75,-10568.1 4126.46,-10560.42 4123.26,-10566.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="node362" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<g id="a_node362"><a xlink:title="pub fn encode_receipt_serial_bytes(receipt_serial_bytes: ReceiptSerialBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..16].copy_from_slice(&amp;receipt_seria...">
<polygon fill="white" stroke="black" points="2670,-1415 2460,-1415 2460,-1379 2670,-1379 2670,-1415"/>
<text text-anchor="middle" x="2565" y="-1393.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge730" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="gray" d="M2670.17,-1385.89C2794.97,-1377.06 3007.56,-1376.5 3170,-1451 3677.97,-1683.95 3853.25,-1812.76 4072,-2327 4116.7,-2432.08 4037.1,-10459.48 4108,-10549 4112.67,-10554.9 4118.39,-10559.65 4124.74,-10563.46"/>
<polygon fill="gray" stroke="gray" points="4123.26,-10566.64 4133.76,-10568.1 4126.46,-10560.41 4123.26,-10566.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="node363" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<g id="a_node363"><a xlink:title="pub(crate) fn convert_to_point_M2_receipt_serial_bytes( &#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, ) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let receipt_serial_scala...">
<polygon fill="white" stroke="black" points="2288,-2559 1986,-2559 1986,-2523 2288,-2523 2288,-2559"/>
<text text-anchor="middle" x="2137" y="-2537.3" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_point_M2_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="gray" d="M2288.22,-2551.17C2318.52,-2545.75 2347.36,-2533.87 2368,-2511 2406.09,-2468.79 2366.24,-1536.44 2396,-1488 2416.47,-1454.67 2453.73,-1432.74 2487.96,-1418.78"/>
<polygon fill="gray" stroke="gray" points="2489.48,-1421.94 2497.52,-1415.05 2486.93,-1415.42 2489.48,-1421.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2688.63,-2546.14C2811.69,-2548.68 3006.01,-2545.56 3170,-2511 3238.39,-2496.59 3313.08,-2465.04 3359.48,-2443.4"/>
<polygon fill="gray" stroke="gray" points="3361.1,-2446.51 3368.66,-2439.08 3358.12,-2440.18 3361.1,-2446.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node369" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node369"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3030.5,-2665 2909.5,-2665 2909.5,-2629 3030.5,-2629 3030.5,-2665"/>
<text text-anchor="middle" x="2970" y="-2643.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="gray" d="M2688.51,-2558.27C2703.91,-2561.15 2719.37,-2564.39 2734,-2568 2796.55,-2583.43 2866.3,-2607.82 2913.44,-2625.43"/>
<polygon fill="gray" stroke="gray" points="2912.26,-2628.72 2922.85,-2628.96 2914.72,-2622.17 2912.26,-2628.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="node391" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<g id="a_node391"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1_from(receipt_expiration_time: Timestamp, receipt_level: ReceiptLevel) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[0u8; std::mem::size_of::&lt;Timestamp&gt;() + std::mem::size_of::&lt;Re...">
<polygon fill="white" stroke="black" points="3026,-1687 2914,-1687 2914,-1651 3026,-1651 3026,-1687"/>
<text text-anchor="middle" x="2970" y="-1665.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="gray" d="M2688.79,-2535.8C2705.44,-2530.55 2721.17,-2522.66 2734,-2511 2742,-2503.73 2921.84,-1842.69 2961.36,-1697.14"/>
<polygon fill="gray" stroke="gray" points="2964.82,-1697.76 2964.06,-1687.2 2958.07,-1695.93 2964.82,-1697.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2604.71,-2593.56C2720.56,-2588.93 3063.06,-2572.92 3170,-2542 3245.63,-2520.13 3325.43,-2473.23 3369.85,-2444.67"/>
<polygon fill="gray" stroke="gray" points="3371.77,-2447.6 3378.25,-2439.21 3367.96,-2441.73 3371.77,-2447.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="node366" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<g id="a_node366"><a xlink:title="pub(crate) fn convert_to_points_receipt_struct( &#160;&#160;&#160;&#160;receipt: receipt_struct::ReceiptStruct, ) &#45;&gt; Vec&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let m1 = receipt.calc_m1(); &#160;...">
<polygon fill="white" stroke="black" points="2257,-2613 2017,-2613 2017,-2577 2257,-2577 2257,-2613"/>
<text text-anchor="middle" x="2137" y="-2591.3" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_points_receipt_struct</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="gray" d="M2257.24,-2610.33C2298.01,-2608.77 2340.28,-2598.36 2368,-2568 2408.47,-2523.67 2364.62,-1539.16 2396,-1488 2416.45,-1454.66 2453.7,-1432.73 2487.94,-1418.76"/>
<polygon fill="gray" stroke="gray" points="2489.46,-1421.93 2497.5,-1415.04 2486.91,-1415.41 2489.46,-1421.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="node390" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<g id="a_node390"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m1_from(self.receipt_expiration_time, self.receipt_level) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2601.5,-1687 2528.5,-1687 2528.5,-1651 2601.5,-1651 2601.5,-1687"/>
<text text-anchor="middle" x="2565" y="-1665.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<path fill="none" stroke="gray" d="M2257.12,-2610.23C2297.88,-2608.66 2340.17,-2598.26 2368,-2568 2431.66,-2498.77 2339.15,-1796.92 2396,-1722 2424.34,-1684.65 2478.98,-1673.03 2518.26,-1669.71"/>
<polygon fill="gray" stroke="gray" points="2518.66,-1673.19 2528.4,-1669.01 2518.18,-1666.21 2518.66,-1673.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node367" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node367"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="2176.5,-2667 2097.5,-2667 2097.5,-2631 2176.5,-2631 2176.5,-2667"/>
<text text-anchor="middle" x="2137" y="-2645.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="gray" d="M2176.69,-2644.7C2222.42,-2639.56 2300.8,-2630.57 2368,-2622 2418.31,-2615.58 2475.78,-2607.59 2515.42,-2601.97"/>
<polygon fill="gray" stroke="gray" points="2515.95,-2605.43 2525.35,-2600.56 2514.96,-2598.5 2515.95,-2605.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M2176.56,-2649C2223.99,-2649 2307.79,-2649 2385.35,-2649"/>
<polygon fill="gray" stroke="gray" points="2385.75,-2652.5 2395.75,-2649 2385.75,-2645.5 2385.75,-2652.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2176.52,-2657.92C2228.51,-2667.41 2320.14,-2674.66 2368,-2622 2416.92,-2568.17 2383.58,-1384.67 2396,-1313 2428.63,-1124.7 2518.49,-911.05 2551.57,-836.44"/>
<polygon fill="gray" stroke="gray" points="2554.79,-837.8 2555.67,-827.24 2548.4,-834.95 2554.79,-837.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="gray" d="M2176.56,-2657.96C2228.61,-2667.5 2320.3,-2674.81 2368,-2622 2436.52,-2546.13 2329.1,-859.31 2396,-782 2425.9,-747.45 2481,-744.79 2519.93,-748.1"/>
<polygon fill="gray" stroke="gray" points="2519.65,-751.59 2529.95,-749.11 2520.35,-744.63 2519.65,-751.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="gray" d="M2176.61,-2657.67C2228.28,-2666.75 2319.06,-2673.39 2368,-2622 2431.13,-2555.71 2334.29,-2278.62 2396,-2211 2428.76,-2175.1 2488.81,-2174.19 2527.53,-2178.13"/>
<polygon fill="gray" stroke="gray" points="2527.51,-2181.65 2537.85,-2179.34 2528.33,-2174.7 2527.51,-2181.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="gray" d="M2176.78,-2657.84C2228.65,-2667.1 2319.67,-2673.96 2368,-2622 2415.5,-2570.94 2349.6,-2047.06 2396,-1995 2428.07,-1959.02 2487.51,-1957.94 2526.39,-1961.88"/>
<polygon fill="gray" stroke="gray" points="2526.44,-1965.41 2536.78,-1963.1 2527.26,-1958.46 2526.44,-1965.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge557" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2682.23,-2630.98C2708.44,-2627.15 2736.15,-2623.27 2762,-2620 2942.89,-2597.1 2998.44,-2638.76 3170,-2577 3253.15,-2547.07 3335.85,-2481.81 3377.42,-2445.91"/>
<polygon fill="gray" stroke="gray" points="3379.94,-2448.35 3385.17,-2439.14 3375.33,-2443.08 3379.94,-2448.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge559" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="gray" d="M2734.28,-2648.16C2792.07,-2647.88 2853.61,-2647.57 2899.17,-2647.35"/>
<polygon fill="gray" stroke="gray" points="2899.24,-2650.85 2909.22,-2647.3 2899.21,-2643.85 2899.24,-2650.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="node397" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<g id="a_node397"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m_from(timestamp: Timestamp) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20220524_Timestamp_Calc_m&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;timestamp.to_be_bytes(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3021.5,-1604 2918.5,-1604 2918.5,-1568 3021.5,-1568 3021.5,-1604"/>
<text text-anchor="middle" x="2970" y="-1582.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge558" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="gray" d="M2724.9,-2630.85C2728.13,-2628.16 2731.18,-2625.22 2734,-2622 2806.05,-2539.85 2693.78,-1724.35 2762,-1639 2796.31,-1596.08 2860.22,-1585.08 2907.99,-1583.44"/>
<polygon fill="gray" stroke="gray" points="2908.3,-1586.93 2918.23,-1583.22 2908.15,-1579.93 2908.3,-1586.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge568" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M3030.82,-2645.56C3071.61,-2642.65 3126,-2634.9 3170,-2615 3260.12,-2574.24 3343.94,-2489.55 3382.6,-2446.83"/>
<polygon fill="gray" stroke="gray" points="3385.44,-2448.9 3389.5,-2439.12 3380.23,-2444.24 3385.44,-2448.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node370" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node370"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="2205.5,-2476 2068.5,-2476 2068.5,-2440 2205.5,-2440 2205.5,-2476"/>
<text text-anchor="middle" x="2137" y="-2454.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="gray" d="M2205.5,-2458C2296.77,-2458 2456.32,-2458 2527.69,-2458"/>
<polygon fill="gray" stroke="gray" points="2527.96,-2461.5 2537.96,-2458 2527.96,-2454.5 2527.96,-2461.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="node372" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<g id="a_node372"><a xlink:title=" &#160;&#160;&#160;pub fn calc_j3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY_LEN].co...">
<polygon fill="white" stroke="black" points="3001.5,-2476 2938.5,-2476 2938.5,-2440 3001.5,-2440 3001.5,-2476"/>
<text text-anchor="middle" x="2970" y="-2454.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_j3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<path fill="none" stroke="gray" d="M2592.13,-2458C2660.63,-2458 2845.76,-2458 2928.31,-2458"/>
<polygon fill="gray" stroke="gray" points="2928.32,-2461.5 2938.32,-2458 2928.32,-2454.5 2928.32,-2461.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M3001.52,-2455.4C3074.62,-2449.17 3260.5,-2433.32 3352.19,-2425.5"/>
<polygon fill="gray" stroke="gray" points="3352.7,-2428.97 3362.37,-2424.63 3352.1,-2422 3352.7,-2428.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node373" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node373"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2223,-827 2051,-827 2051,-791 2223,-791 2223,-827"/>
<text text-anchor="middle" x="2137" y="-805.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="gray" d="M2223.22,-816.22C2274.11,-825.41 2335.07,-846.01 2368,-892 2417.68,-961.4 2340.62,-2363.06 2396,-2428 2427.72,-2465.19 2488.34,-2466.91 2527.42,-2463.42"/>
<polygon fill="gray" stroke="gray" points="2528.26,-2466.86 2537.84,-2462.33 2527.53,-2459.89 2528.26,-2466.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2223.18,-809C2310.78,-809 2444.14,-809 2515.28,-809"/>
<polygon fill="gray" stroke="gray" points="2515.32,-812.5 2525.31,-809 2515.31,-805.5 2515.32,-812.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="gray" d="M2223.18,-798.2C2312.56,-786.87 2449.59,-769.5 2519.55,-760.63"/>
<polygon fill="gray" stroke="gray" points="2520.3,-764.07 2529.78,-759.34 2519.42,-757.12 2520.3,-764.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2604.79,-815.92C2640.27,-823.44 2693.26,-837.76 2734,-862 2965.49,-999.74 3040.08,-1047.03 3170,-1283 3389.08,-1680.93 3404.57,-2259.25 3405.13,-2392.77"/>
<polygon fill="gray" stroke="gray" points="3401.63,-2392.97 3405.14,-2402.97 3408.63,-2392.96 3401.63,-2392.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge727" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2600.05,-750.11C2703.34,-737.39 3015.48,-714.95 3170,-881 3385.08,-1112.12 3403.31,-2202.52 3404.86,-2392.68"/>
<polygon fill="gray" stroke="gray" points="3401.36,-2392.75 3404.93,-2402.72 3408.36,-2392.7 3401.36,-2392.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M2600.2,-474.31C2699.41,-497.02 2991.48,-574.79 3170,-737 3771.3,-1283.37 3862.99,-1541.89 4072,-2327 4101.57,-2438.08 4036.64,-10512.89 4108,-10603 4125.43,-10625 4157.35,-10631.03 4182.75,-10631.97"/>
<polygon fill="gray" stroke="gray" points="4182.78,-10635.47 4192.82,-10632.09 4182.87,-10628.47 4182.78,-10635.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node377" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node377"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="2239.5,-485 2034.5,-485 2034.5,-449 2239.5,-449 2239.5,-485"/>
<text text-anchor="middle" x="2137" y="-463.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2206.64,-485.06C2260.87,-503.33 2333.06,-537.41 2368,-596 2417.87,-679.6 2332.27,-2274.41 2396,-2348 2422.25,-2378.31 2467.89,-2384.07 2504.99,-2382.79"/>
<polygon fill="gray" stroke="gray" points="2505.4,-2386.27 2515.2,-2382.26 2505.03,-2379.28 2505.4,-2386.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M2239.77,-467C2328.78,-467 2453.81,-467 2519.57,-467"/>
<polygon fill="gray" stroke="gray" points="2519.6,-470.5 2529.6,-467 2519.6,-463.5 2519.6,-470.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2593.29,-1914.4C2627.47,-1915.78 2687.23,-1921.15 2734,-1941 2748.32,-1947.08 2747.5,-1956.37 2762,-1962 2846.92,-1995 3106.83,-1936.35 3170,-2002 3206.43,-2039.86 3190.54,-2422 3198,-2474 3248.14,-2823.37 3364.88,-3237.36 3396.81,-3347.15"/>
<polygon fill="gray" stroke="gray" points="3393.46,-3348.2 3399.63,-3356.82 3400.18,-3346.24 3393.46,-3348.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="gray" d="M2536.78,-1909.1C2498.92,-1904.04 2431.09,-1901.64 2396,-1941 2349.6,-1993.06 2415.5,-2516.94 2368,-2568 2342.36,-2595.56 2304.71,-2606.58 2267.26,-2609.46"/>
<polygon fill="gray" stroke="gray" points="2267.01,-2605.96 2257.23,-2610.04 2267.42,-2612.95 2267.01,-2605.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2592.03,-1747.21C2629.72,-1741.95 2698.81,-1738.94 2734,-1779 2767.86,-1817.54 2753.61,-2651.39 2762,-2702 2804.8,-2960.08 2920.7,-3256.97 2957.57,-3347.44"/>
<polygon fill="gray" stroke="gray" points="2954.44,-3349.04 2961.47,-3356.97 2960.92,-3346.39 2954.44,-3349.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="gray" d="M2592.26,-1747.69C2625.38,-1742.16 2684.05,-1732.09 2734,-1722 2791.6,-1710.37 2856.76,-1695.54 2903.84,-1684.53"/>
<polygon fill="gray" stroke="gray" points="2904.66,-1687.93 2913.6,-1682.24 2903.06,-1681.11 2904.66,-1687.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2592.24,-2125.26C2629.86,-2120.15 2698.49,-2117.43 2734,-2157 2774.5,-2202.13 2751.45,-2642.29 2762,-2702 2807.51,-2959.61 2921.59,-3256.82 2957.79,-3347.4"/>
<polygon fill="gray" stroke="gray" points="2954.65,-3348.97 2961.62,-3356.94 2961.14,-3346.36 2954.65,-3348.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge486" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2593.3,-1802.95C2690.84,-1793.77 3024.1,-1777.41 3170,-1962 3205.33,-2006.7 3190.04,-2417.59 3198,-2474 3247.33,-2823.48 3364.66,-3237.39 3396.76,-3347.16"/>
<polygon fill="gray" stroke="gray" points="3393.42,-3348.21 3399.59,-3356.82 3400.14,-3346.24 3393.42,-3348.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge485" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="gray" d="M2536.74,-1801.07C2498.84,-1795.97 2430.96,-1793.52 2396,-1833 2341.82,-1894.18 2423.47,-2507.98 2368,-2568 2342.39,-2595.71 2304.64,-2606.74 2267.09,-2609.58"/>
<polygon fill="gray" stroke="gray" points="2266.83,-2606.09 2257.04,-2610.15 2267.22,-2613.08 2266.83,-2606.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge600" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2593.06,-2076.22C2627.27,-2077.41 2687.32,-2082.56 2734,-2103 2748.5,-2109.35 2749.42,-2115.39 2762,-2125 2941.49,-2262.12 3044.78,-2240.02 3170,-2428 3276.4,-2587.73 3378.56,-3206.65 3400.62,-3346.71"/>
<polygon fill="gray" stroke="gray" points="3397.18,-3347.33 3402.18,-3356.67 3404.09,-3346.25 3397.18,-3347.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge601" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="gray" d="M2593.09,-2080.78C2630.8,-2085.71 2698.45,-2087.95 2734,-2049 2795.57,-1981.55 2703.58,-1709.19 2762,-1639 2797.04,-1596.9 2860.53,-1585.73 2907.99,-1583.82"/>
<polygon fill="gray" stroke="gray" points="2908.26,-1587.32 2918.16,-1583.54 2908.07,-1580.32 2908.26,-1587.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge606" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2593.03,-2024.66C2705.22,-2035.95 3130.23,-2081.37 3170,-2125 3196.21,-2153.75 3192.07,-2435.55 3198,-2474 3251.77,-2822.83 3365.91,-3237.21 3397.02,-3347.12"/>
<polygon fill="gray" stroke="gray" points="3393.67,-3348.13 3399.77,-3356.8 3400.4,-3346.22 3393.67,-3348.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge645" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2592.21,-2179.29C2629.79,-2174.21 2698.37,-2171.53 2734,-2211 2770.61,-2251.57 2752.34,-2648.22 2762,-2702 2808.24,-2959.48 2921.82,-3256.78 2957.85,-3347.39"/>
<polygon fill="gray" stroke="gray" points="2954.7,-3348.95 2961.66,-3356.94 2961.2,-3346.35 2954.7,-3348.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge644" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="gray" d="M2592.22,-2188.73C2629.83,-2193.82 2698.43,-2196.53 2734,-2157 2811.11,-2071.31 2688.88,-1728.12 2762,-1639 2796.85,-1596.52 2860.68,-1585.45 2908.28,-1583.67"/>
<polygon fill="gray" stroke="gray" points="2908.57,-1587.17 2918.48,-1583.42 2908.4,-1580.17 2908.57,-1587.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge666" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2593.19,-1971.64C2626.52,-1976.27 2684.66,-1984.89 2734,-1995 2746.57,-1997.58 2749.36,-1999.83 2762,-2002 2851.76,-2017.42 3106.59,-1975.62 3170,-2041 3203.56,-2075.61 3191.02,-2426.3 3198,-2474 3249.07,-2823.23 3365.14,-3237.32 3396.86,-3347.15"/>
<polygon fill="gray" stroke="gray" points="3393.52,-3348.18 3399.66,-3356.81 3400.24,-3346.23 3393.52,-3348.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge667" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="gray" d="M2593.28,-1972.7C2630.89,-1977.46 2698.08,-1979.4 2734,-1941 2780.04,-1891.77 2718.26,-1690.28 2762,-1639 2797.55,-1597.33 2860.96,-1586.09 2908.26,-1584.05"/>
<polygon fill="gray" stroke="gray" points="2908.51,-1587.55 2918.4,-1583.74 2908.3,-1580.55 2908.51,-1587.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge695" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2592.31,-2237.79C2630.35,-2239.06 2699.87,-2247.61 2734,-2291 2762.3,-2326.97 2753.66,-2656.99 2762,-2702 2809.66,-2959.22 2922.29,-3256.69 2957.96,-3347.37"/>
<polygon fill="gray" stroke="gray" points="2954.81,-3348.91 2961.74,-3356.92 2961.32,-3346.34 2954.81,-3348.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge696" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2592.03,-2243.68C2709.42,-2269.28 3190.85,-2374.29 3352.09,-2409.46"/>
<polygon fill="gray" stroke="gray" points="3351.73,-2412.96 3362.24,-2411.67 3353.22,-2406.12 3351.73,-2412.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge732" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2592.01,-1855.23C2629.67,-1849.99 2698.72,-1847.01 2734,-1887 2763.97,-1920.97 2754.5,-2657.32 2762,-2702 2805.32,-2959.99 2920.87,-3256.95 2957.61,-3347.43"/>
<polygon fill="gray" stroke="gray" points="2954.48,-3349.03 2961.5,-3356.96 2960.96,-3346.38 2954.48,-3349.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge731" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2592.11,-1857.37C2682.31,-1849.72 2985.38,-1836 3170,-1974 3317.19,-2084.01 3380.88,-2313.51 3399.14,-2393.1"/>
<polygon fill="gray" stroke="gray" points="3395.73,-2393.89 3401.33,-2402.89 3402.56,-2392.37 3395.73,-2393.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2176.75,-380.81C2273.9,-374.2 2534.38,-365.11 2734,-437 2955.3,-516.7 3046.38,-536.89 3170,-737 3351.67,-1031.08 3397.62,-2196.47 3404.13,-2392.84"/>
<polygon fill="gray" stroke="gray" points="3400.63,-2393.04 3404.46,-2402.92 3407.63,-2392.81 3400.63,-2393.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge529" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2172.15,-320.54C2317.88,-282.47 2892.83,-156 3170,-446 3311.36,-593.9 3392.39,-2160.59 3403.64,-2392.4"/>
<polygon fill="gray" stroke="gray" points="3400.16,-2392.89 3404.14,-2402.71 3407.15,-2392.55 3400.16,-2392.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="edge530" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<path fill="none" stroke="gray" d="M2101.87,-320.89C2043.16,-307.99 1928.36,-293.35 1896,-366 1883.93,-393.1 1883.93,-2474.9 1896,-2502 1910.42,-2534.38 1941.14,-2549.77 1975.98,-2555.81"/>
<polygon fill="gray" stroke="gray" points="1975.5,-2559.27 1985.9,-2557.27 1976.52,-2552.35 1975.5,-2559.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge438" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="gray" d="M2601.76,-1669C2669.61,-1669 2817.87,-1669 2903.83,-1669"/>
<polygon fill="gray" stroke="gray" points="2903.99,-1672.5 2913.99,-1669 2903.99,-1665.5 2903.99,-1672.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge555" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2991.07,-1687.2C3029.75,-1723.1 3115.61,-1806.9 3170,-1891 3284.8,-2068.5 3369.4,-2311.47 3396.09,-2393.02"/>
<polygon fill="gray" stroke="gray" points="3392.78,-2394.16 3399.19,-2402.59 3399.43,-2391.99 3392.78,-2394.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="gray" d="M2157.36,-5118.05C2203.62,-5162.57 2320.28,-5283.3 2368,-5411 2395.78,-5485.33 2342.2,-5708.67 2396,-5767 2419.59,-5792.58 2457.05,-5800.34 2490.62,-5801.26"/>
<polygon fill="gray" stroke="gray" points="2490.86,-5804.76 2500.89,-5801.33 2490.92,-5797.76 2490.86,-5804.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="gray" d="M2164.34,-5040.63C2211.2,-5032.72 2309.62,-5023.73 2368,-5073 2470.2,-5159.25 2542.33,-5595.97 2559.87,-5711.78"/>
<polygon fill="gray" stroke="gray" points="2556.45,-5712.59 2561.4,-5721.96 2563.38,-5711.55 2556.45,-5712.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node394" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node394"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="1742.5,-5064 1627.5,-5064 1627.5,-5028 1742.5,-5028 1742.5,-5064"/>
<text text-anchor="middle" x="1685" y="-5042.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge433" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="gray" d="M1742.51,-5053.02C1786.94,-5058.52 1850.41,-5066.33 1906,-5073 1973.96,-5081.16 2053.24,-5090.41 2098.74,-5095.69"/>
<polygon fill="gray" stroke="gray" points="2098.4,-5099.17 2108.73,-5096.85 2099.2,-5092.22 2098.4,-5099.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge432" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="gray" d="M1742.54,-5046C1836.21,-5046 2021.04,-5046 2099.45,-5046"/>
<polygon fill="gray" stroke="gray" points="2099.79,-5049.5 2109.79,-5046 2099.79,-5042.5 2099.79,-5049.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge434" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M1742.51,-5038.98C1786.94,-5033.48 1850.41,-5025.67 1906,-5019 1968.53,-5011.49 2040.66,-5003.06 2087.22,-4997.65"/>
<polygon fill="gray" stroke="gray" points="2087.8,-5001.11 2097.33,-4996.48 2087,-4994.15 2087.8,-5001.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge754" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M2176.9,-5000.3C2228.89,-5008.85 2320.06,-5014.47 2368,-4962 2420.96,-4904.05 2352.17,-4321.13 2396,-4256 2606.88,-3942.63 2957.5,-4217.28 3170,-3905 3205.05,-3853.49 3189.6,-3406.73 3198,-3345 3246.82,-2986 3365,-2560.3 3396.93,-2448.82"/>
<polygon fill="gray" stroke="gray" points="3400.35,-2449.61 3399.75,-2439.03 3393.62,-2447.67 3400.35,-2449.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m(). -->
<g id="node396" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().</title>
<g id="a_node396"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m_from(self.timestamp) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2597,-1604 2533,-1604 2533,-1568 2597,-1568 2597,-1604"/>
<text text-anchor="middle" x="2565" y="-1582.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="gray" d="M2597.29,-1586C2664,-1586 2821.21,-1586 2908.29,-1586"/>
<polygon fill="gray" stroke="gray" points="2908.3,-1589.5 2918.3,-1586 2908.3,-1582.5 2908.3,-1589.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge547" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="gray" d="M3021.77,-1586.29C3066.47,-1589.29 3130.46,-1600.69 3170,-1639 3394.41,-1856.42 3406.6,-2279.14 3405.65,-2392.47"/>
<polygon fill="gray" stroke="gray" points="3402.15,-2392.7 3405.52,-2402.74 3409.15,-2392.79 3402.15,-2392.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node398" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node398"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2213,-52 2061,-52 2061,-16 2213,-16 2213,-52"/>
<text text-anchor="middle" x="2137" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2213.12,-19.9C2264.61,-14.99 2330.2,-19.02 2368,-61 2410.51,-108.21 2354.5,-2299.9 2396,-2348 2422.19,-2378.36 2467.84,-2384.12 2504.95,-2382.82"/>
<polygon fill="gray" stroke="gray" points="2505.36,-2386.31 2515.17,-2382.29 2505,-2379.32 2505.36,-2386.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M2213.15,-42.44C2258.1,-47.58 2316.35,-54.41 2368,-61 2420.08,-67.64 2479.84,-75.98 2519.54,-81.62"/>
<polygon fill="gray" stroke="gray" points="2519.29,-85.12 2529.68,-83.06 2520.28,-78.19 2519.29,-85.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node399" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node399"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="2213,-106 2061,-106 2061,-70 2213,-70 2213,-106"/>
<text text-anchor="middle" x="2137" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2183.91,-106.01C2239.07,-130.45 2329.06,-179.86 2368,-255 2394.75,-306.63 2357.99,-2304 2396,-2348 2422.21,-2378.35 2467.86,-2384.1 2504.96,-2382.81"/>
<polygon fill="gray" stroke="gray" points="2505.37,-2386.3 2515.18,-2382.28 2505.01,-2379.31 2505.37,-2386.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M2213.18,-88C2302.08,-88 2447.12,-88 2519.7,-88"/>
<polygon fill="gray" stroke="gray" points="2519.87,-91.5 2529.87,-88 2519.87,-84.5 2519.87,-91.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge556" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M2600.33,-91.5C2696.85,-102.63 2976.21,-143.87 3170,-264 3672.86,-575.72 3855.76,-692.3 4072,-1243 4119.51,-1364.01 4027.32,-10501.07 4108,-10603 4125.42,-10625.01 4157.35,-10631.04 4182.75,-10631.97"/>
<polygon fill="gray" stroke="gray" points="4182.78,-10635.47 4192.82,-10632.09 4182.87,-10628.47 4182.78,-10635.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node401" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node401"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="2360,-3593 1914,-3593 1914,-3557 2360,-3557 2360,-3593"/>
<text text-anchor="middle" x="2137" y="-3571.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2359.02,-3556.74C2362.16,-3554.03 2365.16,-3551.12 2368,-3548 2409.94,-3502.01 2358.58,-2477.73 2396,-2428 2421.13,-2394.61 2467.3,-2381.76 2504.89,-2377.04"/>
<polygon fill="gray" stroke="gray" points="2505.68,-2380.48 2515.24,-2375.92 2504.92,-2373.52 2505.68,-2380.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2359.07,-3556.78C2362.19,-3554.06 2365.17,-3551.13 2368,-3548 2443.24,-3464.58 2316.01,-1604.89 2396,-1526 2457.23,-1465.61 3108.75,-1465.63 3170,-1526 3246.06,-1600.96 3129.24,-3366.29 3198,-3448 3235.84,-3492.97 3307.75,-3496.85 3356.04,-3493.5"/>
<polygon fill="gray" stroke="gray" points="3356.58,-3496.97 3366.26,-3492.66 3356.01,-3489.99 3356.58,-3496.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M2356.68,-3593.11C2360.61,-3595.85 2364.39,-3598.8 2368,-3602 2407.39,-3636.86 2357.35,-3681.31 2396,-3717 2431.41,-3749.7 2489.93,-3751.69 2527.71,-3748.82"/>
<polygon fill="gray" stroke="gray" points="2528.14,-3752.3 2537.78,-3747.91 2527.51,-3745.33 2528.14,-3752.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="gray" d="M2358.14,-3593.3C2361.57,-3595.99 2364.86,-3598.89 2368,-3602 2438.92,-3672.35 2326.59,-3753.16 2396,-3825 2427.43,-3857.53 2481.35,-3860.81 2519.63,-3858.19"/>
<polygon fill="gray" stroke="gray" points="2520.31,-3861.64 2529.98,-3857.31 2519.72,-3854.67 2520.31,-3861.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2329.94,-3593.04C2342.91,-3595.63 2355.7,-3598.6 2368,-3602 2426.17,-3618.06 2489.1,-3648.97 2527.54,-3669.54"/>
<polygon fill="gray" stroke="gray" points="2526.3,-3672.86 2536.76,-3674.54 2529.64,-3666.7 2526.3,-3672.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2296.12,-3556.97C2320.21,-3554.07 2344.78,-3551.02 2368,-3548 2529.32,-3527.01 2593.65,-3461.74 2734,-3544 2755.97,-3556.88 2746.55,-3573.75 2762,-3594 2816.76,-3665.8 2896.12,-3736.91 2938.93,-3773.2"/>
<polygon fill="gray" stroke="gray" points="2936.83,-3776.01 2946.73,-3779.78 2941.34,-3770.66 2936.83,-3776.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M2358.26,-3556.82C2361.65,-3554.1 2364.9,-3551.16 2368,-3548 2413.16,-3501.92 2364.71,-3315.43 2396,-3259 2424.21,-3208.13 2481.7,-3170.87 2521.51,-3149.83"/>
<polygon fill="gray" stroke="gray" points="2523.19,-3152.9 2530.47,-3145.21 2519.98,-3146.68 2523.19,-3152.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2358.41,-3556.97C2361.75,-3554.19 2364.96,-3551.21 2368,-3548 2436.15,-3476.07 2329.4,-3176.36 2396,-3103 2428.4,-3067.31 2487.74,-3066.15 2526.52,-3070"/>
<polygon fill="gray" stroke="gray" points="2526.54,-3073.52 2536.88,-3071.19 2527.34,-3066.57 2526.54,-3073.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node402" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node402"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2174,-3755 2100,-3755 2100,-3719 2174,-3719 2174,-3755"/>
<text text-anchor="middle" x="2137" y="-3733.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="gray" d="M2174.4,-3745.25C2225.62,-3754.48 2318.24,-3761.99 2368,-3710 2427,-3648.35 2333.5,-3385.1 2396,-3327 2672.79,-3069.71 3198.53,-3279.58 3357.99,-3352.44"/>
<polygon fill="gray" stroke="gray" points="3356.97,-3355.83 3367.52,-3356.84 3359.9,-3349.47 3356.97,-3355.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="gray" d="M2174.34,-3745.19C2225.48,-3754.35 2318.01,-3761.77 2368,-3710 2420.96,-3655.14 2339.92,-3419.67 2396,-3368 2473.78,-3296.33 2817.6,-3348.54 2931.9,-3368.29"/>
<polygon fill="gray" stroke="gray" points="2931.47,-3371.77 2941.92,-3370.04 2932.68,-3364.87 2931.47,-3371.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="gray" d="M2174.36,-3742.06C2222.67,-3746.83 2308.79,-3748.38 2368,-3710 2388.4,-3696.77 2374.86,-3675.01 2396,-3663 2461.3,-3625.89 2676.54,-3614.62 2734,-3663 2789.89,-3710.06 2709.27,-3774.42 2762,-3825 2807.37,-3868.53 2886.31,-3865.46 2932.49,-3858.96"/>
<polygon fill="gray" stroke="gray" points="2933.3,-3862.38 2942.65,-3857.4 2932.24,-3855.46 2933.3,-3862.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M2174.32,-3737.6C2254.81,-3738.92 2447.41,-3742.08 2527.79,-3743.41"/>
<polygon fill="gray" stroke="gray" points="2527.87,-3746.91 2537.92,-3743.57 2527.98,-3739.91 2527.87,-3746.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2174.32,-3732.99C2254.43,-3724.15 2445.57,-3703.07 2526.63,-3694.12"/>
<polygon fill="gray" stroke="gray" points="2527.31,-3697.57 2536.87,-3692.99 2526.54,-3690.61 2527.31,-3697.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M2174.01,-3745.21C2225.18,-3754.51 2318.24,-3762.27 2368,-3710 2431.43,-3643.38 2357.82,-3380.69 2396,-3297 2424.53,-3234.47 2487.4,-3182.42 2527.62,-3153.8"/>
<polygon fill="gray" stroke="gray" points="2529.65,-3156.66 2535.84,-3148.06 2525.64,-3150.92 2529.65,-3156.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2174.16,-3745.35C2225.52,-3754.83 2318.81,-3762.8 2368,-3710 2414.02,-3660.6 2351.04,-3153.37 2396,-3103 2428.1,-3067.04 2487.52,-3065.95 2526.4,-3069.89"/>
<polygon fill="gray" stroke="gray" points="2526.45,-3073.42 2536.79,-3071.11 2527.26,-3066.47 2526.45,-3073.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node403" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node403"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="2202.5,-3431 2071.5,-3431 2071.5,-3395 2202.5,-3395 2202.5,-3431"/>
<text text-anchor="middle" x="2137" y="-3409.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="gray" d="M2202.57,-3424.87C2255.29,-3430.45 2327.47,-3427.92 2368,-3383 2445.07,-3297.59 2320.21,-2434.55 2396,-2348 2423.66,-2316.41 2472.4,-2311.58 2510.28,-2313.53"/>
<polygon fill="gray" stroke="gray" points="2510.43,-2317.04 2520.65,-2314.24 2510.91,-2310.06 2510.43,-2317.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2202.54,-3424.84C2255.24,-3430.41 2327.42,-3427.88 2368,-3383 2439.2,-3304.26 2331.99,-2512.69 2396,-2428 2421.2,-2394.66 2467.37,-2381.81 2504.94,-2377.08"/>
<polygon fill="gray" stroke="gray" points="2505.72,-2380.51 2515.28,-2375.95 2504.96,-2373.56 2505.72,-2380.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node404" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node404"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="2236.5,-3647 2037.5,-3647 2037.5,-3611 2236.5,-3611 2236.5,-3647"/>
<text text-anchor="middle" x="2137" y="-3625.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge449" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2236.55,-3644.44C2283.16,-3645.79 2335.58,-3637.59 2368,-3602 2411.94,-3553.77 2356.8,-2480.15 2396,-2428 2421.11,-2394.59 2467.28,-2381.75 2504.88,-2377.03"/>
<polygon fill="gray" stroke="gray" points="2505.66,-2380.47 2515.23,-2375.91 2504.91,-2373.51 2505.66,-2380.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge448" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2236.7,-3644.58C2283.35,-3645.97 2335.76,-3637.75 2368,-3602 2444.13,-3517.58 2315.07,-1635.83 2396,-1556 2426.61,-1525.8 3139.37,-1525.82 3170,-1556 3244.88,-1629.78 3130.3,-3367.58 3198,-3448 3235.85,-3492.96 3307.75,-3496.84 3356.04,-3493.5"/>
<polygon fill="gray" stroke="gray" points="3356.58,-3496.97 3366.26,-3492.66 3356.01,-3489.99 3356.58,-3496.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge455" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M2236.71,-3619.81C2280.61,-3620.64 2330.69,-3628.87 2368,-3656 2392.13,-3673.54 2372.25,-3698.95 2396,-3717 2433.89,-3745.8 2490.62,-3749.04 2527.47,-3747.49"/>
<polygon fill="gray" stroke="gray" points="2527.98,-3750.97 2537.77,-3746.91 2527.59,-3743.98 2527.98,-3750.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge454" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="gray" d="M2236.52,-3615.53C2282.12,-3614.96 2333.67,-3623.26 2368,-3656 2423.09,-3708.55 2342.03,-3771.29 2396,-3825 2427.96,-3856.81 2481.54,-3860.28 2519.59,-3857.9"/>
<polygon fill="gray" stroke="gray" points="2520.19,-3861.37 2529.88,-3857.1 2519.64,-3854.39 2520.19,-3861.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge451" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2236.65,-3639.38C2277.38,-3643.97 2325.03,-3649.76 2368,-3656 2423.53,-3664.07 2487.53,-3675.59 2526.87,-3682.93"/>
<polygon fill="gray" stroke="gray" points="2526.33,-3686.39 2536.81,-3684.8 2527.62,-3679.51 2526.33,-3686.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge453" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2236.56,-3628.24C2278.26,-3625.19 2326.65,-3617.97 2368,-3602 2382.27,-3596.49 2381.44,-3586.67 2396,-3582 2539.06,-3536.16 2594.03,-3527.45 2734,-3582 2833.16,-3620.65 2915.79,-3722.87 2950.89,-3771.53"/>
<polygon fill="gray" stroke="gray" points="2948.24,-3773.84 2956.89,-3779.97 2953.95,-3769.79 2948.24,-3773.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge452" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M2236.56,-3643.65C2282.74,-3644.68 2334.77,-3636.42 2368,-3602 2421.11,-3546.97 2359.42,-3326.16 2396,-3259 2423.82,-3207.92 2481.4,-3170.71 2521.34,-3149.74"/>
<polygon fill="gray" stroke="gray" points="2523.03,-3152.8 2530.33,-3145.13 2519.84,-3146.57 2523.03,-3152.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge450" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2236.65,-3644.01C2282.99,-3645.16 2335.14,-3636.92 2368,-3602 2444.11,-3521.12 2321.63,-3185.48 2396,-3103 2428.28,-3067.2 2487.65,-3066.07 2526.48,-3069.95"/>
<polygon fill="gray" stroke="gray" points="2526.5,-3073.48 2536.84,-3071.16 2527.31,-3066.53 2526.5,-3073.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential(). -->
<g id="node405" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().</title>
<g id="a_node405"><a xlink:title="fn test_room_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; RoomCredential&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair = Blindin...">
<polygon fill="white" stroke="black" points="2217,-3701 2057,-3701 2057,-3665 2217,-3665 2217,-3701"/>
<text text-anchor="middle" x="2137" y="-3679.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_room_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge500" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2217.09,-3696.59C2267.33,-3700.35 2329.86,-3695.18 2368,-3656 2416.4,-3606.27 2344.78,-3391.82 2396,-3345 2522.96,-3228.96 3033.35,-3240.54 3170,-3345 3207.69,-3373.81 3163.15,-3415.81 3198,-3448 3240.58,-3487.33 3309.79,-3492.91 3356.33,-3491.45"/>
<polygon fill="gray" stroke="gray" points="3356.64,-3494.94 3366.48,-3491.01 3356.34,-3487.95 3356.64,-3494.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge499" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2217.22,-3686.95C2263.46,-3686.11 2321.63,-3679.46 2368,-3656 2384.27,-3647.77 2379.27,-3633.27 2396,-3626 2533.78,-3566.13 2591.21,-3579.33 2734,-3626 2822.94,-3655.07 2906.1,-3732 2945.36,-3772.4"/>
<polygon fill="gray" stroke="gray" points="2942.94,-3774.94 2952.39,-3779.73 2948,-3770.09 2942.94,-3774.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node406" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node406"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2324.5,-3485 1949.5,-3485 1949.5,-3449 2324.5,-3449 2324.5,-3485"/>
<text text-anchor="middle" x="2137" y="-3463.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge532" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2324.57,-3469.31C2340.93,-3462.74 2355.86,-3453.28 2368,-3440 2443.92,-3356.99 2328.24,-2517.79 2396,-2428 2421.17,-2394.64 2467.34,-2381.79 2504.92,-2377.06"/>
<polygon fill="gray" stroke="gray" points="2505.7,-2380.5 2515.26,-2375.94 2504.94,-2373.54 2505.7,-2380.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge536" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2324.64,-3467.5C2340.72,-3461.2 2355.57,-3452.3 2368,-3440 2437.74,-3370.97 2322.35,-3285.84 2396,-3221 2428.28,-3192.59 3137.79,-3192.52 3170,-3221 3246.15,-3288.34 3128.44,-3373.87 3198,-3448 3237.98,-3490.61 3308.69,-3495.22 3356.2,-3492.67"/>
<polygon fill="gray" stroke="gray" points="3356.51,-3496.16 3366.26,-3492.01 3356.05,-3489.17 3356.51,-3496.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge531" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M2324.54,-3468.55C2340.8,-3462.09 2355.71,-3452.87 2368,-3440 2428.63,-3376.52 2341.62,-3114.91 2396,-3046 2427.33,-3006.3 2488.27,-2995.78 2527.5,-2993.3"/>
<polygon fill="gray" stroke="gray" points="2527.89,-2996.78 2537.71,-2992.8 2527.55,-2989.79 2527.89,-2996.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge535" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2324.7,-3468.7C2340.93,-3462.21 2355.79,-3452.94 2368,-3440 2440.42,-3363.26 2325.22,-3044.26 2396,-2966 2428.33,-2930.25 2487.69,-2929.1 2526.5,-2932.97"/>
<polygon fill="gray" stroke="gray" points="2526.52,-2936.5 2536.86,-2934.17 2527.33,-2929.55 2526.52,-2936.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge534" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M2324.6,-3467.85C2340.74,-3461.5 2355.61,-3452.49 2368,-3440 2408.45,-3399.21 2359.57,-3227.42 2396,-3183 2426.09,-3146.31 2481.4,-3134.63 2520.32,-3131.11"/>
<polygon fill="gray" stroke="gray" points="2520.63,-3134.6 2530.34,-3130.36 2520.1,-3127.62 2520.63,-3134.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge533" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2324.66,-3468.29C2340.84,-3461.86 2355.71,-3452.72 2368,-3440 2420.23,-3385.97 2344.93,-3158.13 2396,-3103 2428.75,-3067.64 2488,-3066.39 2526.66,-3070.13"/>
<polygon fill="gray" stroke="gray" points="2526.65,-3073.65 2536.98,-3071.29 2527.44,-3066.69 2526.65,-3073.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node407" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node407"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="2205.5,-3539 2068.5,-3539 2068.5,-3503 2205.5,-3503 2205.5,-3539"/>
<text text-anchor="middle" x="2137" y="-3517.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge640" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="gray" d="M2205.64,-3534.19C2257.99,-3540.07 2328.08,-3537.71 2368,-3494 2407.95,-3450.26 2360.35,-2475.31 2396,-2428 2421.15,-2394.62 2467.32,-2381.78 2504.9,-2377.05"/>
<polygon fill="gray" stroke="gray" points="2505.69,-2380.49 2515.25,-2375.93 2504.93,-2373.53 2505.69,-2380.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge643" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2205.63,-3533.27C2257.25,-3538.43 2326.39,-3535.54 2368,-3494 2442.44,-3419.69 2317.35,-3328.84 2396,-3259 2428.15,-3230.45 3137.44,-3230.91 3170,-3259 3234.29,-3314.47 3139.14,-3386.79 3198,-3448 3238.5,-3490.12 3309.08,-3494.85 3356.41,-3492.46"/>
<polygon fill="gray" stroke="gray" points="3356.68,-3495.95 3366.44,-3491.83 3356.24,-3488.97 3356.68,-3495.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge641" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="gray" d="M2205.75,-3533.85C2257.79,-3539.44 2327.43,-3536.84 2368,-3494 2436.59,-3421.57 2334.54,-3124.57 2396,-3046 2427.24,-3006.06 2488.48,-2995.62 2527.76,-2993.23"/>
<polygon fill="gray" stroke="gray" points="2528.15,-2996.71 2537.97,-2992.75 2527.82,-2989.72 2528.15,-2996.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge638" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2205.59,-3533.93C2257.73,-3539.61 2327.57,-3537.1 2368,-3494 2448.39,-3408.31 2317.45,-3053.38 2396,-2966 2428.22,-2930.15 2487.61,-2929.03 2526.45,-2932.93"/>
<polygon fill="gray" stroke="gray" points="2526.49,-2936.46 2536.82,-2934.14 2527.3,-2929.51 2526.49,-2936.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge642" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="gray" d="M2205.55,-3533.43C2257.31,-3538.73 2326.66,-3535.95 2368,-3494 2410.81,-3450.56 2362.16,-3271.73 2396,-3221 2424.85,-3177.75 2481.34,-3153.35 2520.81,-3140.93"/>
<polygon fill="gray" stroke="gray" points="2521.89,-3144.26 2530.45,-3138.03 2519.87,-3137.56 2521.89,-3144.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge639" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="gray" d="M2205.64,-3533.75C2257.63,-3539.28 2327.24,-3536.66 2368,-3494 2428.18,-3431.02 2337.17,-3167.24 2396,-3103 2428.55,-3067.45 2487.85,-3066.25 2526.58,-3070.05"/>
<polygon fill="gray" stroke="gray" points="2526.59,-3073.58 2536.92,-3071.23 2527.38,-3066.62 2526.59,-3073.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node408" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node408"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="1299.5,-5375 1032.5,-5375 1032.5,-5339 1299.5,-5339 1299.5,-5375"/>
<text text-anchor="middle" x="1166" y="-5353.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="gray" d="M1299.67,-5348.14C1357.97,-5351.66 1422.48,-5366.95 1464,-5411 1514.66,-5464.76 1432.12,-5523.41 1484,-5576 1524.18,-5616.73 1594.47,-5616.48 1640.11,-5610.97"/>
<polygon fill="gray" stroke="gray" points="1640.86,-5614.4 1650.3,-5609.6 1639.92,-5607.46 1640.86,-5614.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="gray" d="M1299.9,-5352.84C1495.34,-5348 1842.02,-5344.77 1886,-5381 1916.62,-5406.23 1876.46,-5441.52 1906,-5468 1959.24,-5515.73 2049.52,-5510.17 2099.67,-5502.33"/>
<polygon fill="gray" stroke="gray" points="2100.45,-5505.75 2109.73,-5500.64 2099.29,-5498.85 2100.45,-5505.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="gray" d="M1293.65,-5338.98C1438.31,-5321.98 1681.43,-5304.34 1886,-5343 1962.66,-5357.49 2045.92,-5394.91 2094.4,-5419.09"/>
<polygon fill="gray" stroke="gray" points="2093.11,-5422.36 2103.62,-5423.74 2096.26,-5416.11 2093.11,-5422.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="gray" d="M1299.74,-5366.51C1506.02,-5381.43 1880.61,-5409.14 1886,-5414 1922.27,-5446.68 1870.36,-5488.64 1906,-5522 1958.34,-5570.99 2049.36,-5564.83 2099.78,-5556.58"/>
<polygon fill="gray" stroke="gray" points="2100.64,-5559.98 2109.89,-5554.81 2099.44,-5553.09 2100.64,-5559.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1299.67,-5349.31C1357.44,-5353.19 1421.51,-5368.44 1464,-5411 1499.42,-5446.47 1447.78,-5487.34 1484,-5522 1527.24,-5563.37 1601.81,-5561.56 1646.66,-5555.77"/>
<polygon fill="gray" stroke="gray" points="1647.43,-5559.19 1656.84,-5554.32 1646.45,-5552.26 1647.43,-5559.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1296.5,-5338.97C1483.52,-5309.98 1814.71,-5246.62 1886,-5153 1931.86,-5092.78 1858.65,-2487.06 1906,-2428 1948.74,-2374.69 2033.39,-2368.34 2087.21,-2370.4"/>
<polygon fill="gray" stroke="gray" points="2087.06,-2373.89 2097.22,-2370.89 2087.4,-2366.9 2087.06,-2373.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node409" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node409"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="1878,-3233 1492,-3233 1492,-3197 1878,-3197 1878,-3233"/>
<text text-anchor="middle" x="1685" y="-3211.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="gray" d="M1716.46,-3196.86C1757.84,-3173.15 1834.81,-3132.27 1906,-3112 1957.23,-3097.42 2017.03,-3090.7 2062.81,-3087.61"/>
<polygon fill="gray" stroke="gray" points="2063.19,-3091.09 2072.95,-3086.96 2062.75,-3084.1 2063.19,-3091.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="gray" d="M1704.34,-3196.82C1739.8,-3162.91 1821.73,-3090.52 1906,-3058 1968.24,-3033.98 2046.44,-3029.75 2093.75,-3029.75"/>
<polygon fill="gray" stroke="gray" points="2093.91,-3033.26 2103.93,-3029.82 2093.96,-3026.26 2093.91,-3033.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1712.36,-3196.94C1757.71,-3164.11 1849.17,-3089.77 1886,-3001 1910.41,-2942.16 1865.47,-2477.15 1906,-2428 1949.38,-2375.39 2033.55,-2368.78 2087.15,-2370.6"/>
<polygon fill="gray" stroke="gray" points="2087.29,-2374.11 2097.44,-2371.07 2087.61,-2367.12 2087.29,-2374.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node410" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node410"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="1877,-3395 1493,-3395 1493,-3359 1877,-3359 1877,-3395"/>
<text text-anchor="middle" x="1685" y="-3373.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge488" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="gray" d="M1693.09,-3395.04C1730.48,-3490.11 1903.07,-3928.75 1906,-3931 1960.03,-3972.49 2043.3,-3970.88 2093.43,-3965.06"/>
<polygon fill="gray" stroke="gray" points="2094.13,-3968.5 2103.61,-3963.76 2093.24,-3961.55 2094.13,-3968.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge489" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="gray" d="M1691.99,-3395.2C1724.65,-3494.28 1880.82,-3965.04 1906,-3985 1961.89,-4029.3 2050.75,-4025.17 2100.06,-4018.46"/>
<polygon fill="gray" stroke="gray" points="2100.57,-4021.92 2109.96,-4017 2099.55,-4015 2100.57,-4021.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge490" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="gray" d="M1689.36,-3395.25C1707.68,-3492.82 1798.7,-3951.63 1906,-4039 1961.3,-4084.03 2050.39,-4079.62 2099.9,-4072.67"/>
<polygon fill="gray" stroke="gray" points="2100.47,-4076.12 2109.83,-4071.16 2099.42,-4069.2 2100.47,-4076.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge487" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1877.09,-3358.72C1880.22,-3356.04 1883.2,-3353.14 1886,-3350 1920.13,-3311.79 1873.66,-2467.74 1906,-2428 1949.04,-2375.11 2033.3,-2368.58 2087.02,-2370.5"/>
<polygon fill="gray" stroke="gray" points="2087.18,-2374.01 2097.33,-2370.98 2087.51,-2367.01 2087.18,-2374.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node411" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node411"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="1763,-3287 1607,-3287 1607,-3251 1763,-3251 1763,-3287"/>
<text text-anchor="middle" x="1685" y="-3265.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge516" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="gray" d="M1763.09,-3259.68C1800.3,-3254.9 1845.56,-3248.69 1886,-3242 1958.67,-3229.98 2042.58,-3212.87 2092.36,-3202.37"/>
<polygon fill="gray" stroke="gray" points="2093.09,-3205.79 2102.15,-3200.3 2091.64,-3198.94 2093.09,-3205.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge518" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="gray" d="M1763.48,-3279.1C1805.17,-3280.01 1854.37,-3273.05 1886,-3242 1927.72,-3201.05 1863.93,-3152.59 1906,-3112 1946.67,-3072.76 2012.02,-3068.47 2062.69,-3072.58"/>
<polygon fill="gray" stroke="gray" points="2062.65,-3076.1 2072.94,-3073.54 2063.31,-3069.13 2062.65,-3076.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge517" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="gray" d="M1763.02,-3279.6C1805.09,-3280.82 1854.82,-3273.99 1886,-3242 1943.41,-3183.08 1848.08,-3116.42 1906,-3058 1954.7,-3008.88 2041.81,-3013.59 2093.72,-3021.96"/>
<polygon fill="gray" stroke="gray" points="2093.16,-3025.41 2103.61,-3023.66 2094.35,-3018.51 2093.16,-3025.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge515" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1763.24,-3277.81C1804.34,-3278.18 1853.05,-3271.12 1886,-3242 1912.17,-3218.87 1879.63,-3188.9 1906,-3166 1959.56,-3119.48 2048.55,-3124.26 2098.69,-3131.73"/>
<polygon fill="gray" stroke="gray" points="2098.34,-3135.21 2108.77,-3133.34 2099.45,-3128.3 2098.34,-3135.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge514" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="gray" d="M1763.1,-3270.2C1852.28,-3271.59 1997.1,-3273.84 2077.51,-3275.09"/>
<polygon fill="gray" stroke="gray" points="2077.88,-3278.6 2087.94,-3275.25 2077.99,-3271.6 2077.88,-3278.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge513" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="gray" d="M1763.12,-3275.72C1800.55,-3279.92 1845.97,-3286.4 1886,-3296 1895.16,-3298.2 1896.82,-3300.88 1906,-3303 1951.15,-3313.42 2002.27,-3319.93 2044.83,-3323.94"/>
<polygon fill="gray" stroke="gray" points="2044.62,-3327.43 2054.89,-3324.85 2045.25,-3320.46 2044.62,-3327.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge519" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1763.06,-3280.53C1805.68,-3282.2 1855.96,-3275.53 1886,-3242 1916.19,-3208.31 1877.4,-2463.05 1906,-2428 1949.11,-2375.17 2033.36,-2368.63 2087.05,-2370.52"/>
<polygon fill="gray" stroke="gray" points="2087.2,-2374.03 2097.36,-2371 2087.53,-2367.04 2087.2,-2374.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node412" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node412"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="1826.5,-3341 1543.5,-3341 1543.5,-3305 1826.5,-3305 1826.5,-3341"/>
<text text-anchor="middle" x="1685" y="-3319.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge760" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="gray" d="M1826.57,-3317.02C1849.2,-3322.52 1870.31,-3332.66 1886,-3350 1929.34,-3397.9 1862.25,-3883.48 1906,-3931 1953.11,-3982.16 2041.55,-3976.51 2093.98,-3967.47"/>
<polygon fill="gray" stroke="gray" points="2094.76,-3970.88 2103.96,-3965.63 2093.49,-3964 2094.76,-3970.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge756" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1826.71,-3317.19C1849.25,-3322.7 1870.3,-3332.79 1886,-3350 1921.08,-3388.45 1871,-3779.48 1906,-3818 1954.32,-3871.17 2046.84,-3865.82 2098.59,-3857.66"/>
<polygon fill="gray" stroke="gray" points="2099.4,-3861.07 2108.68,-3855.95 2098.23,-3854.17 2099.4,-3861.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge755" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="gray" d="M1826.61,-3316.98C1849.24,-3322.49 1870.33,-3332.64 1886,-3350 1933.29,-3402.41 1858.26,-3933 1906,-3985 1954.84,-4038.2 2048.38,-4030.04 2099.84,-4020.43"/>
<polygon fill="gray" stroke="gray" points="2100.72,-4023.82 2109.85,-4018.44 2099.36,-4016.96 2100.72,-4023.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge758" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="gray" d="M1826.52,-3317.06C1849.16,-3322.57 1870.28,-3332.69 1886,-3350 1925.39,-3393.38 1866.23,-3833.96 1906,-3877 1952.68,-3927.52 2039.7,-3922.57 2092.29,-3913.73"/>
<polygon fill="gray" stroke="gray" points="2093.1,-3917.14 2102.32,-3911.93 2091.86,-3910.25 2093.1,-3917.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge757" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="gray" d="M1826.65,-3316.95C1849.27,-3322.46 1870.35,-3332.62 1886,-3350 1937.23,-3406.93 1854.27,-3982.52 1906,-4039 1954.77,-4092.26 2048.34,-4084.07 2099.82,-4074.45"/>
<polygon fill="gray" stroke="gray" points="2100.71,-4077.84 2109.84,-4072.46 2099.35,-4070.97 2100.71,-4077.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge761" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="gray" d="M1826.53,-3308.32C1911.18,-3299.48 2014.48,-3288.69 2077.73,-3282.09"/>
<polygon fill="gray" stroke="gray" points="2078.33,-3285.54 2087.91,-3281.02 2077.6,-3278.58 2078.33,-3285.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge762" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="gray" d="M1826.53,-3325.19C1897.62,-3326.29 1981.86,-3327.6 2044.49,-3328.58"/>
<polygon fill="gray" stroke="gray" points="2044.69,-3332.08 2054.75,-3328.74 2044.8,-3325.08 2044.69,-3332.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge759" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1826.73,-3329.13C1849.35,-3323.61 1870.41,-3313.43 1886,-3296 1918.16,-3260.05 1875.53,-2465.39 1906,-2428 1949.07,-2375.14 2033.33,-2368.6 2087.03,-2370.51"/>
<polygon fill="gray" stroke="gray" points="2087.19,-2374.02 2097.34,-2370.99 2087.52,-2367.03 2087.19,-2374.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node413" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node413"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="1237,-4711 1095,-4711 1095,-4675 1237,-4675 1237,-4711"/>
<text text-anchor="middle" x="1166" y="-4689.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge442" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1237.32,-4710.19C1305.94,-4722.29 1407.94,-4726.99 1464,-4666 1492.69,-4634.79 1476.9,-1655.79 1484,-1614 1521.85,-1391.14 1633.1,-1139.07 1671.1,-1057.21"/>
<polygon fill="gray" stroke="gray" points="1674.3,-1058.63 1675.36,-1048.09 1667.96,-1055.67 1674.3,-1058.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge440" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M1237.27,-4687.24C1297.49,-4682.15 1386.52,-4674.27 1464,-4666 1502.56,-4661.88 1544.85,-4656.82 1581.97,-4652.2"/>
<polygon fill="gray" stroke="gray" points="1582.8,-4655.62 1592.29,-4650.91 1581.93,-4648.68 1582.8,-4655.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge441" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="gray" d="M1201.08,-4711.14C1257.99,-4740.6 1376.72,-4798.5 1484,-4828 1515.09,-4836.55 1549.68,-4842.44 1581.23,-4846.48"/>
<polygon fill="gray" stroke="gray" points="1581.01,-4849.98 1591.36,-4847.73 1581.86,-4843.04 1581.01,-4849.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge444" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="gray" d="M1237.26,-4700.34C1344.53,-4711.54 1546.25,-4732.61 1637.3,-4742.12"/>
<polygon fill="gray" stroke="gray" points="1637.02,-4745.61 1647.33,-4743.17 1637.74,-4738.65 1637.02,-4745.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge443" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M1237.26,-4693C1348.86,-4693 1562.69,-4693 1647.78,-4693"/>
<polygon fill="gray" stroke="gray" points="1647.97,-4696.5 1657.97,-4693 1647.97,-4689.5 1647.97,-4696.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge439" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M1190,-4711.27C1240.1,-4749.99 1364.22,-4840.18 1484,-4882 1527.21,-4897.09 1578.4,-4903.81 1618.17,-4906.77"/>
<polygon fill="gray" stroke="gray" points="1618.07,-4910.27 1628.29,-4907.46 1618.55,-4903.29 1618.07,-4910.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge445" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1237.3,-4710.17C1305.91,-4722.26 1407.89,-4726.95 1464,-4666 1511.2,-4614.72 1437.92,-2209.29 1484,-2157 1520.72,-2115.33 1588.64,-2114.91 1635.05,-2120.64"/>
<polygon fill="gray" stroke="gray" points="1634.81,-2124.13 1645.19,-2122.02 1635.76,-2117.2 1634.81,-2124.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node414" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node414"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="1294.5,-4603 1037.5,-4603 1037.5,-4567 1294.5,-4567 1294.5,-4603"/>
<text text-anchor="middle" x="1166" y="-4581.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge617" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1189.62,-4566.89C1248.68,-4517.95 1406.94,-4375.94 1464,-4216 1488.29,-4147.92 1471.86,-1685.25 1484,-1614 1521.98,-1391.16 1633.15,-1139.08 1671.11,-1057.21"/>
<polygon fill="gray" stroke="gray" points="1674.32,-1058.63 1675.37,-1048.09 1667.97,-1055.67 1674.32,-1058.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge620" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M1294.64,-4595.72C1347.14,-4600.36 1408.53,-4606.08 1464,-4612 1502.56,-4616.12 1544.85,-4621.18 1581.97,-4625.8"/>
<polygon fill="gray" stroke="gray" points="1581.93,-4629.32 1592.29,-4627.09 1582.8,-4622.38 1581.93,-4629.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge616" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M1294.65,-4567.62C1351.7,-4566.64 1416.62,-4575.73 1464,-4612 1484.32,-4627.56 1464.02,-4650 1484,-4666 1530.62,-4703.33 1603.82,-4702.92 1647.54,-4698.48"/>
<polygon fill="gray" stroke="gray" points="1648.18,-4701.92 1657.72,-4697.31 1647.39,-4694.97 1648.18,-4701.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge619" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M1246.9,-4566.97C1314.46,-4556.89 1408.82,-4555.89 1464,-4612 1506.19,-4654.9 1442.76,-4838.2 1484,-4882 1517.42,-4917.5 1573.61,-4922.38 1617.93,-4919.45"/>
<polygon fill="gray" stroke="gray" points="1618.37,-4922.92 1628.06,-4918.63 1617.81,-4915.94 1618.37,-4922.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge618" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1189.6,-4566.88C1248.62,-4517.93 1406.77,-4375.88 1464,-4216 1483.27,-4162.15 1446.15,-2199.88 1484,-2157 1520.75,-2115.36 1588.67,-2114.94 1635.07,-2120.65"/>
<polygon fill="gray" stroke="gray" points="1634.82,-2124.15 1645.2,-2122.04 1635.77,-2117.21 1634.82,-2124.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node415" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node415"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="1267.5,-4657 1064.5,-4657 1064.5,-4621 1267.5,-4621 1267.5,-4657"/>
<text text-anchor="middle" x="1166" y="-4635.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge655" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1242.2,-4657.02C1310.69,-4668.47 1409.25,-4671.56 1464,-4612 1492.18,-4581.35 1477.02,-1655.05 1484,-1614 1521.87,-1391.15 1633.11,-1139.07 1671.1,-1057.21"/>
<polygon fill="gray" stroke="gray" points="1674.31,-1058.63 1675.37,-1048.09 1667.96,-1055.67 1674.31,-1058.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge652" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="gray" d="M1267.6,-4639C1358.35,-4639 1491.18,-4639 1582.27,-4639"/>
<polygon fill="gray" stroke="gray" points="1582.33,-4642.5 1592.33,-4639 1582.33,-4635.5 1582.33,-4642.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge651" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="gray" d="M1267.77,-4647.37C1325.3,-4652.34 1398.75,-4659.03 1464,-4666 1528.87,-4672.93 1604.29,-4682.52 1647.85,-4688.21"/>
<polygon fill="gray" stroke="gray" points="1647.58,-4691.7 1657.95,-4689.53 1648.49,-4684.76 1647.58,-4691.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge654" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M1248.32,-4620.98C1315.59,-4611.29 1408.76,-4610.86 1464,-4666 1498.11,-4700.06 1450.63,-4847.21 1484,-4882 1517.75,-4917.19 1573.9,-4922.1 1618.13,-4919.25"/>
<polygon fill="gray" stroke="gray" points="1618.54,-4922.73 1628.24,-4918.46 1617.99,-4915.75 1618.54,-4922.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge653" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1242.18,-4657C1310.66,-4668.44 1409.2,-4671.51 1464,-4612 1510.19,-4561.83 1438.91,-2208.16 1484,-2157 1520.72,-2115.33 1588.65,-2114.91 1635.05,-2120.64"/>
<polygon fill="gray" stroke="gray" points="1634.81,-2124.14 1645.19,-2122.03 1635.76,-2117.2 1634.81,-2124.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node416" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node416"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="1263,-1930 1069,-1930 1069,-1894 1263,-1894 1263,-1930"/>
<text text-anchor="middle" x="1166" y="-1908.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="gray" d="M1263.18,-1900.52C1330.17,-1898.43 1415.83,-1908.68 1464,-1965 1498.53,-2005.37 1448.62,-2881.37 1484,-2921 1522.4,-2964.01 1594.07,-2962.88 1640.37,-2956.59"/>
<polygon fill="gray" stroke="gray" points="1641.04,-2960.03 1650.42,-2955.09 1640.01,-2953.11 1641.04,-2960.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="gray" d="M1263.11,-1900.58C1330.06,-1898.52 1415.71,-1908.78 1464,-1965 1521.5,-2031.94 1425.09,-2693.29 1484,-2759 1514.86,-2793.42 1567.02,-2799.53 1610.34,-2797.37"/>
<polygon fill="gray" stroke="gray" points="1610.82,-2800.85 1620.57,-2796.71 1610.37,-2793.87 1610.82,-2800.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="gray" d="M1263.01,-1900.97C1329.68,-1899.15 1415.03,-1909.55 1464,-1965 1491.99,-1996.69 1472.93,-2304.19 1484,-2345 1523.62,-2491.1 1623.54,-2645.32 1665.26,-2705.64"/>
<polygon fill="gray" stroke="gray" points="1662.39,-2707.65 1670.97,-2713.85 1668.13,-2703.65 1662.39,-2707.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="gray" d="M1263.14,-1900.56C1330.1,-1898.48 1415.75,-1908.74 1464,-1965 1494.68,-2000.77 1452.57,-2777.89 1484,-2813 1524.21,-2857.93 1600.74,-2854.65 1646.59,-2847.68"/>
<polygon fill="gray" stroke="gray" points="1647.42,-2851.09 1656.71,-2846 1646.28,-2844.18 1647.42,-2851.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="gray" d="M1243.03,-1930.04C1311.37,-1941.25 1409.17,-1943.95 1464,-1885 1505.59,-1840.28 1440.43,-828.79 1484,-786 1547.74,-723.41 1817.13,-729.11 1886,-786 1922.29,-815.98 1871.87,-857.59 1906,-890 1939.63,-921.94 1989.49,-931.63 2034.19,-932.63"/>
<polygon fill="gray" stroke="gray" points="2034.21,-936.13 2044.24,-932.71 2034.27,-929.13 2034.21,-936.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1263.27,-1902.33C1328.96,-1901.4 1413,-1912.31 1464,-1965 1507.1,-2009.53 1439.96,-2059.39 1484,-2103 1523.23,-2141.85 1589.95,-2143.1 1635.44,-2138.32"/>
<polygon fill="gray" stroke="gray" points="1635.86,-2141.8 1645.38,-2137.15 1635.04,-2134.85 1635.86,-2141.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs(). -->
<g id="node417" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().</title>
<g id="a_node417"><a xlink:title="fn test_server_sigs() { &#160;&#160;&#160;&#160;let server_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.ge...">
<polygon fill="white" stroke="black" points="1230,-1876 1102,-1876 1102,-1840 1230,-1840 1230,-1876"/>
<text text-anchor="middle" x="1166" y="-1854.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_sigs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1230.3,-1842.87C1297.98,-1830.84 1403.66,-1824.71 1464,-1885 1498.41,-1919.39 1450.34,-2067.87 1484,-2103 1522.31,-2142.98 1589.55,-2143.89 1635.39,-2138.73"/>
<polygon fill="gray" stroke="gray" points="1635.92,-2142.19 1645.4,-2137.47 1635.05,-2135.24 1635.92,-2142.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="gray" d="M1230.14,-1842.54C1298.18,-1830.05 1404.66,-1823.36 1464,-1885 1522.64,-1945.92 1426.69,-2202.82 1484,-2265 1515.32,-2298.99 1567.48,-2305.12 1610.67,-2303.07"/>
<polygon fill="gray" stroke="gray" points="1611.11,-2306.55 1620.87,-2302.44 1610.67,-2299.57 1611.11,-2306.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="gray" d="M1230.2,-1842.71C1298.05,-1830.47 1404.12,-1824.07 1464,-1885 1506.48,-1928.22 1442.47,-2112.86 1484,-2157 1525.54,-2201.15 1602.29,-2197.95 1647.68,-2191.24"/>
<polygon fill="gray" stroke="gray" points="1648.37,-2194.68 1657.68,-2189.63 1647.25,-2187.77 1648.37,-2194.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption(). -->
<g id="node418" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().</title>
<g id="a_node418"><a xlink:title="fn test_blob_encryption() { &#160;&#160;&#160;&#160;let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1); &#160;&#160;&#160;&#160;let group_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::groups::GroupSecretParams::derive_from_m...">
<polygon fill="white" stroke="black" points="1246.5,-1714 1085.5,-1714 1085.5,-1678 1246.5,-1678 1246.5,-1714"/>
<text text-anchor="middle" x="1166" y="-1692.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_blob_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="gray" d="M1246.77,-1713.69C1314.96,-1723.62 1410.32,-1724.18 1464,-1666 1501.45,-1625.4 1444.55,-710.66 1484,-672 1547.8,-609.47 1820.01,-611.79 1886,-672 1921.94,-704.79 1872.41,-854.81 1906,-890 1938.34,-923.89 1988.72,-933.61 2034.09,-934.11"/>
<polygon fill="gray" stroke="gray" points="2034.3,-937.61 2044.29,-934.08 2034.28,-930.61 2034.3,-937.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify(). -->
<g id="node419" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().</title>
<g id="a_node419"><a xlink:title="fn test_profile_key_credential_presentation_v1_does_not_verify() { &#160;&#160;&#160;&#160;// Originally from test_integration_profile. &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(z...">
<polygon fill="white" stroke="black" points="1381.5,-1822 950.5,-1822 950.5,-1786 1381.5,-1786 1381.5,-1822"/>
<text text-anchor="middle" x="1166" y="-1800.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_presentation_v1_does_not_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge527" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="gray" d="M1243.01,-1822.03C1311.34,-1833.22 1409.13,-1835.92 1464,-1777 1502.97,-1735.16 1443.18,-788.04 1484,-748 1547.78,-685.45 1818.57,-689.4 1886,-748 1934.11,-789.81 1860.9,-844.97 1906,-890 1939.02,-922.97 1989.2,-932.67 2034.27,-933.4"/>
<polygon fill="gray" stroke="gray" points="2034.4,-936.9 2044.4,-933.41 2034.41,-929.9 2034.4,-936.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge526" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1250.93,-1785.97C1317.71,-1776.96 1408.81,-1777.47 1464,-1831 1516.71,-1882.12 1432.41,-1942.75 1484,-1995 1495,-2006.15 1508.27,-2014.22 1522.66,-2019.96"/>
<polygon fill="gray" stroke="gray" points="1521.67,-2023.33 1532.27,-2023.41 1524.03,-2016.74 1521.67,-2023.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge525" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1246.91,-1785.96C1314.47,-1775.88 1408.83,-1774.87 1464,-1831 1506.48,-1874.22 1442.47,-2058.86 1484,-2103 1521.95,-2143.33 1589.27,-2144.15 1635.23,-2138.88"/>
<polygon fill="gray" stroke="gray" points="1635.8,-2142.34 1645.27,-2137.59 1634.91,-2135.39 1635.8,-2142.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node420" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node420"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="1285.5,-1768 1046.5,-1768 1046.5,-1732 1285.5,-1732 1285.5,-1768"/>
<text text-anchor="middle" x="1166" y="-1746.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge705" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="gray" d="M1243.01,-1768.02C1311.33,-1779.22 1409.12,-1781.91 1464,-1723 1502.37,-1681.81 1443.81,-749.41 1484,-710 1547.79,-647.46 1819.44,-650.42 1886,-710 1915.99,-736.84 1877.94,-861.15 1906,-890 1938.6,-923.52 1988.87,-933.23 2034.11,-933.83"/>
<polygon fill="gray" stroke="gray" points="2034.28,-937.33 2044.28,-933.82 2034.27,-930.33 2034.28,-937.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge707" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M1243.58,-1768.05C1311.82,-1779.1 1409.12,-1781.56 1464,-1723 1522.83,-1660.23 1426.55,-1013.04 1484,-949 1512.86,-916.83 1560.33,-909.4 1601.78,-910.32"/>
<polygon fill="gray" stroke="gray" points="1601.77,-913.82 1611.9,-910.71 1602.04,-906.83 1601.77,-913.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge708" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="gray" d="M1243.56,-1768.03C1311.78,-1779.06 1409.07,-1781.5 1464,-1723 1518.78,-1664.66 1430.5,-1062.52 1484,-1003 1512.29,-971.53 1558.39,-963.74 1599.21,-964.3"/>
<polygon fill="gray" stroke="gray" points="1599.36,-967.8 1609.46,-964.61 1599.57,-960.81 1599.36,-967.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge703" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="gray" d="M1243.02,-1768.03C1311.35,-1779.23 1409.15,-1781.93 1464,-1723 1503.79,-1680.25 1458.75,-724.66 1484,-672 1516.15,-604.94 1589.49,-555.14 1637.86,-528.08"/>
<polygon fill="gray" stroke="gray" points="1639.79,-531.01 1646.88,-523.14 1636.43,-524.88 1639.79,-531.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge701" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1244.63,-1732C1312.61,-1721.31 1408.89,-1719.38 1464,-1777 1497.36,-1811.89 1451.4,-2175.39 1484,-2211 1486.05,-2213.24 1488.19,-2215.36 1490.42,-2217.37"/>
<polygon fill="gray" stroke="gray" points="1488.31,-2220.17 1498.28,-2223.75 1492.72,-2214.73 1488.31,-2220.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge700" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1285.62,-1759.68C1340.03,-1764.4 1405.34,-1770.47 1464,-1777 1489.89,-1779.88 1517.45,-1783.26 1543.99,-1786.68"/>
<polygon fill="gray" stroke="gray" points="1543.74,-1790.18 1554.11,-1787.99 1544.64,-1783.24 1543.74,-1790.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge704" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1285.61,-1750.46C1351.52,-1750.71 1434.8,-1751.04 1508.16,-1751.32"/>
<polygon fill="gray" stroke="gray" points="1508.43,-1754.82 1518.44,-1751.36 1508.45,-1747.82 1508.43,-1754.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge702" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="gray" d="M1250.93,-1731.97C1317.71,-1722.96 1408.81,-1723.47 1464,-1777 1516.71,-1828.12 1432.41,-1888.75 1484,-1941 1499.09,-1956.28 1518.42,-1965.79 1539.09,-1971.42"/>
<polygon fill="gray" stroke="gray" points="1538.46,-1974.87 1549,-1973.81 1540.1,-1968.07 1538.46,-1974.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge699" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1248.33,-1731.96C1315.61,-1722.27 1408.79,-1721.83 1464,-1777 1498.41,-1811.39 1450.34,-1959.87 1484,-1995 1494.94,-2006.41 1508.23,-2014.64 1522.71,-2020.46"/>
<polygon fill="gray" stroke="gray" points="1521.79,-2023.84 1532.38,-2023.94 1524.16,-2017.26 1521.79,-2023.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge706" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1245.75,-1732C1313.51,-1721.62 1408.81,-1720.17 1464,-1777 1514.56,-1829.07 1434.58,-2049.84 1484,-2103 1521.7,-2143.56 1589.08,-2144.33 1635.12,-2138.98"/>
<polygon fill="gray" stroke="gray" points="1635.72,-2142.43 1645.18,-2137.68 1634.82,-2135.49 1635.72,-2142.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node421" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node421"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="1201.5,-534 1130.5,-534 1130.5,-498 1201.5,-498 1201.5,-534"/>
<text text-anchor="middle" x="1166" y="-512.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1176.16,-534.11C1218.52,-618.84 1396.17,-985.63 1464,-1309 1472.27,-1348.43 1456.66,-1641.41 1484,-1671 1498.05,-1686.2 1516.26,-1695.83 1535.98,-1701.64"/>
<polygon fill="gray" stroke="gray" points="1535.2,-1705.05 1545.76,-1704.19 1536.97,-1698.28 1535.2,-1705.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="gray" d="M1175.33,-534.18C1235.13,-664.64 1598.68,-1457.84 1671.36,-1616.42"/>
<polygon fill="gray" stroke="gray" points="1668.37,-1618.3 1675.72,-1625.94 1674.74,-1615.39 1668.37,-1618.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1176.31,-534.08C1219.34,-618.67 1399.5,-984.95 1464,-1309 1470.27,-1340.51 1462.44,-1863.18 1484,-1887 1507.32,-1912.77 1542.61,-1922.62 1577.08,-1925.02"/>
<polygon fill="gray" stroke="gray" points="1577.09,-1928.53 1587.25,-1925.53 1577.43,-1921.54 1577.09,-1928.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="gray" d="M1176.38,-534.07C1219.71,-618.6 1401.02,-984.65 1464,-1309 1472.41,-1352.32 1454.54,-2070.15 1484,-2103 1521.07,-2144.35 1588.91,-2144.85 1635.21,-2139.23"/>
<polygon fill="gray" stroke="gray" points="1635.88,-2142.67 1645.32,-2137.86 1634.94,-2135.73 1635.88,-2142.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="gray" d="M1176.29,-534.08C1219.2,-618.7 1398.92,-985.06 1464,-1309 1469.74,-1337.56 1464.41,-1811.44 1484,-1833 1497.55,-1847.92 1515.11,-1857.5 1534.2,-1863.38"/>
<polygon fill="gray" stroke="gray" points="1533.42,-1866.8 1543.99,-1866.06 1535.27,-1860.05 1533.42,-1866.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1176.37,-534.07C1219.64,-618.61 1400.73,-984.7 1464,-1309 1471.88,-1349.37 1456.52,-2018.4 1484,-2049 1508.72,-2076.52 1547.06,-2085.93 1583.59,-2087.49"/>
<polygon fill="gray" stroke="gray" points="1583.75,-2091 1593.83,-2087.73 1583.92,-2084 1583.75,-2091"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node422" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node422"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="1252,-480 1080,-480 1080,-444 1252,-444 1252,-480"/>
<text text-anchor="middle" x="1166" y="-458.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge746" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="gray" d="M1252.18,-457.85C1431.91,-449.89 1837.46,-436.5 1886,-475 1914.38,-497.5 1881.79,-527.06 1906,-554 2052.36,-716.84 2241.5,-546.29 2368,-725 2425.33,-806 2331.7,-2435.41 2396,-2511 2405.67,-2522.37 2418.04,-2530.42 2431.67,-2536.03"/>
<polygon fill="gray" stroke="gray" points="2430.7,-2539.4 2441.29,-2539.53 2433.09,-2532.82 2430.7,-2539.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge750" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="gray" d="M1252.15,-478.65C1318.5,-486.33 1408.4,-484.27 1464,-432 1504.03,-394.37 1442.55,-346.07 1484,-310 1511.72,-285.89 2361.45,-293.53 2368,-300 2412.83,-344.28 2354.84,-2520.3 2396,-2568 2424.7,-2601.26 2476.75,-2604.99 2515.33,-2602.27"/>
<polygon fill="gray" stroke="gray" points="2515.67,-2605.76 2525.33,-2601.41 2515.06,-2598.78 2515.67,-2605.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge745" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="gray" d="M1252.19,-479.31C1319.01,-487.51 1409.54,-485.82 1464,-432 1492.16,-404.18 1454.48,-281.37 1484,-255 1520.62,-222.28 2332.98,-220.57 2368,-255 2432.67,-318.57 2336.6,-1818.49 2396,-1887 2427.66,-1923.52 2487.48,-1924.39 2526.53,-1920.26"/>
<polygon fill="gray" stroke="gray" points="2527.45,-1923.67 2536.95,-1918.98 2526.6,-1916.72 2527.45,-1923.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge747" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="gray" d="M1252.34,-479.76C1319.47,-488.28 1410.36,-486.82 1464,-432 1503.44,-391.69 1442.58,-217.28 1484,-179 1520.07,-145.67 2332.96,-144.59 2368,-179 2429.17,-239.07 2340.37,-1656.76 2396,-1722 2427.72,-1759.19 2488.33,-1760.91 2527.42,-1757.42"/>
<polygon fill="gray" stroke="gray" points="2528.26,-1760.86 2537.84,-1756.33 2527.53,-1753.89 2528.26,-1760.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge752" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="gray" d="M1252.13,-479.56C1319.15,-487.97 1409.98,-486.45 1464,-432 1497.8,-397.94 1448.53,-249.32 1484,-217 1520.3,-183.92 2332.96,-182.59 2368,-217 2429.92,-277.82 2339.12,-1713.45 2396,-1779 2427.68,-1815.51 2487.49,-1816.38 2526.53,-1812.25"/>
<polygon fill="gray" stroke="gray" points="2527.45,-1815.67 2536.95,-1810.98 2526.6,-1808.72 2527.45,-1815.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge751" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="gray" d="M1252.05,-456.2C1315.85,-452.15 1405.35,-447.11 1484,-445 1573.3,-442.61 1815.16,-390.57 1886,-445 1913.36,-466.02 1879.58,-497.82 1906,-520 1984.93,-586.25 2297.51,-484.82 2368,-560 2416.38,-611.6 2349.53,-1779.66 2396,-1833 2428.02,-1869.75 2488.55,-1870.34 2527.54,-1866.12"/>
<polygon fill="gray" stroke="gray" points="2528.43,-1869.54 2537.92,-1864.83 2527.57,-1862.59 2528.43,-1869.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge749" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M1252.12,-470.35C1314.46,-472.6 1399.13,-467.3 1464,-432 1476.5,-425.2 1471.29,-413.39 1484,-407 1589.31,-354.08 1954.29,-372 2087.15,-380.56"/>
<polygon fill="gray" stroke="gray" points="2087.22,-384.07 2097.42,-381.23 2087.67,-377.08 2087.22,-384.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge748" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="gray" d="M1252.02,-476.78C1317.19,-483.08 1405.58,-480.08 1464,-432 1487.67,-412.52 1459.9,-384.93 1484,-366 1578.18,-292.02 1961,-315.63 2091.88,-326.14"/>
<polygon fill="gray" stroke="gray" points="2091.7,-329.64 2101.95,-326.96 2092.27,-322.66 2091.7,-329.64"/>
</g>
</g>
</svg>
