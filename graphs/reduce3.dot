digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "field.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce()." [label="reduce", tooltip="    fn reduce(mut limbs: [u64; 5]) -> FieldElement51 {         const LOW_51_BIT_MASK: u64 = (1u64 << 51) - 1;          // Since the input limbs are bounded by 2^64, the biggest         // carry-out is...", fillcolor=green, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [label="as_bytes", tooltip="    pub fn as_bytes(&self) -> [u8; 32] {         // Let h = limbs[0] + limbs[1]*2^51 + ... + limbs[4]*2^204.         //         // Write h = pq + r with 0 <= r < p.         //         // We want to co...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "edwards.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [label="decompress", tooltip="    pub fn decompress(&self) -> Option<EdwardsPoint> {         let (is_valid_y_coord, X, Y, Z) = decompress::step_1(self);          if is_valid_y_coord.into() {             Some(decompress::step_2(sel...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [label="compress", tooltip="    pub fn compress(&self) -> CompressedEdwardsY {         let recip = self.Z.invert();         let x = &self.X * &recip;         let y = &self.Y * &recip;         let mut s: [u8; 32];          s = y....", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/decompress/step_1()." [label="step_1", tooltip="    pub(super) fn step_1(         repr: &CompressedEdwardsY,     ) -> (Choice, FieldElement, FieldElement, FieldElement) {         let Y = FieldElement::from_bytes(repr.as_bytes());         let Z = Fi...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery()." [label="to_montgomery", tooltip="    pub fn to_montgomery(&self) -> MontgomeryPoint {         // We have u = (1+y)/(1-y) = (Z+Y)/(Z-Y).         //         // The denominator is zero only when y=1, the identity point of         // the...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_2 {
    label = "field.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq()." [label="ct_eq", tooltip="    fn ct_eq(&self, other: &FieldElement) -> Choice {         self.as_bytes().ct_eq(&other.as_bytes())     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt()." [label="invsqrt", tooltip="    pub(crate) fn invsqrt(&self) -> (Choice, FieldElement) {         FieldElement::sqrt_ratio_i(&FieldElement::ONE, self)     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative()." [label="is_negative", tooltip="    pub(crate) fn is_negative(&self) -> Choice {         let bytes = self.as_bytes();         (bytes[0] & 1).into()     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." [label="sqrt_ratio_i", tooltip="    pub(crate) fn sqrt_ratio_i(u: &FieldElement, v: &FieldElement) -> (Choice, FieldElement) {         // Using the same trick as in ed25519 decoding, we merge the         // inversion, the square roo...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero()." [label="is_zero", tooltip="    pub(crate) fn is_zero(&self) -> Choice {         let zero = [0u8; 32];         let bytes = self.as_bytes();          bytes.ct_eq(&zero)     }", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_3 {
    label = "jacobi_quartic.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv()." [label="elligator_inv", tooltip="    pub(crate) fn elligator_inv(&self) -> (Choice, FieldElement) {         let mut out = FieldElement::ZERO;          // Special case: s = 0.  If s is zero, either t = 1 or t = -1.         // If t=1, ...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_4 {
    label = "lizard_ristretto.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator()." [label="from_uniform_bytes_single_elligator", tooltip="    pub fn from_uniform_bytes_single_elligator(bytes: &[u8; 32]) -> RistrettoPoint {         RistrettoPoint::elligator_ristretto_flavor(&FieldElement::from_bytes(bytes))     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode()." [label="lizard_encode", tooltip="    pub fn lizard_encode<D: Digest>(data: &[u8; 16]) -> RistrettoPoint     where         D: Digest<OutputSize = U32>,     {         let mut fe_bytes: [u8; 32] = Default::default();          let digest...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse()." [label="elligator_ristretto_flavor_inverse", tooltip="    pub fn elligator_ristretto_flavor_inverse(&self) -> (u8, [FieldElement; 8]) {         // Elligator2 computes a Point from a FieldElement in two steps: first         // it computes a (s,t) on the J...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits()." [label="decode_253_bits", tooltip="    pub fn decode_253_bits(&self) -> (u8, [[u8; 32]; 8]) {         let mut ret = [[0u8; 32]; 8];         let (mask, fes) = self.elligator_ristretto_flavor_inverse();          for j in 0..8 {          ...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto()." [label="to_jacobi_quartic_ristretto", tooltip="    fn to_jacobi_quartic_ristretto(self) -> [JacobiPoint; 4] {         let x2 = self.0.X.square(); // X^2         let y2 = self.0.Y.square(); // Y^2         let y4 = y2.square(); // Y^4         let z2...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode()." [label="lizard_decode", tooltip="    pub fn lizard_decode<D: Digest>(&self) -> Option<[u8; 16]>     where         D: Digest<OutputSize = U32>,     {         let mut result: [u8; 16] = Default::default();         let mut h: [u8; 32] =...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_5 {
    label = "montgomery.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." [label="to_edwards", tooltip="    pub fn to_edwards(&self, sign: u8) -> Option<EdwardsPoint> {         // To decompress the Montgomery u coordinate to an         // `EdwardsPoint`, we apply the birational map to obtain the        ...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_6 {
    label = "ristretto.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_1()." [label="step_1", tooltip="    pub(super) fn step_1(repr: &CompressedRistretto) -> (Choice, Choice, FieldElement) {         // Step 1. Check s for validity:         // 1.a) s must be 32 bytes (we get this from the type system) ...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [label="from_uniform_bytes", tooltip="    pub fn from_uniform_bytes(bytes: &[u8; 64]) -> RistrettoPoint {         // This follows the one-way map construction from the Ristretto RFC:         // https://datatracker.ietf.org/doc/html/draft-...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [label="decompress", tooltip="    pub fn decompress(&self) -> Option<RistrettoPoint> {         let (s_encoding_is_canonical, s_is_negative, s) = decompress::step_1(self);          if (!s_encoding_is_canonical | s_is_negative).into...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [label="compress", tooltip="    pub fn compress(&self) -> CompressedRistretto {         let mut X = self.0.X;         let mut Y = self.0.Y;         let Z = &self.0.Z;         let T = &self.0.T;          let u1 = &(Z + &Y) * &(Z ...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_2()." [label="step_2", tooltip="    pub(super) fn step_2(s: FieldElement) -> (Choice, Choice, Choice, RistrettoPoint) {         // Step 2.  Compute (X:Y:Z:T).         let one = FieldElement::ONE;         let ss = s.square();        ...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." [label="elligator_ristretto_flavor", tooltip="    pub(crate) fn elligator_ristretto_flavor(r_0: &FieldElement) -> RistrettoPoint {         let i = &constants::SQRT_M1;         let d = &constants::EDWARDS_D;         let one_minus_d_sq = &constants...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_7 {
    label = "verifying.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()." [label="recompute_R", tooltip="    fn recompute_R<CtxDigest>(         &self,         context: Option<&[u8]>,         signature: &InternalSignature,         M: &[u8],     ) -> CompressedEdwardsY     where         CtxDigest: Digest<O...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." [label="raw_verify", tooltip="    pub(crate) fn raw_verify<CtxDigest>(         &self,         message: &[u8],         signature: &ed25519::Signature,     ) -> Result<(), SignatureError>     where         CtxDigest: Digest<OutputSi...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes()." [label="from_bytes", tooltip="    pub fn from_bytes(bytes: &[u8; PUBLIC_KEY_LENGTH]) -> Result<VerifyingKey, SignatureError> {         let compressed = CompressedEdwardsY(*bytes);         let point = compressed             .decomp...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier<ed25519::Signature>`]verify()." [label="verify", tooltip="    fn verify(&self, message: &[u8], signature: &ed25519::Signature) -> Result<(), SignatureError> {         self.raw_verify::<Sha512>(message, signature)     }", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_8 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished()." [label="KeyTransparency_Distinguished", tooltip="async fn KeyTransparency_Distinguished(     // TODO: it is currently possible to pass an env that does not match chat     environment: AsType<Environment, u8>,     chat_connection: &UnauthenticatedCha...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Search()." [label="KeyTransparency_Search", tooltip="async fn KeyTransparency_Search(     // TODO: it is currently possible to pass an env that does not match chat     environment: AsType<Environment, u8>,     chat_connection: &UnauthenticatedChatConnec...", fillcolor=white, style="filled"]
  }
  subgraph cluster_9 {
    label = "protocol.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ServerCertificate_New()." [label="ServerCertificate_New", tooltip="fn ServerCertificate_New(     key_id: u32,     server_key: &PublicKey,     trust_root: &PrivateKey, ) -> Result<ServerCertificate> {     let mut rng = rand::rngs::OsRng.unwrap_err();     ServerCertifi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity()." [label="IdentityKey_VerifyAlternateIdentity", tooltip="fn IdentityKey_VerifyAlternateIdentity(     public_key: &PublicKey,     other_identity: &PublicKey,     signature: &[u8], ) -> Result<bool> {     let identity = IdentityKey::new(*public_key);     let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature()." [label="SenderKeyMessage_VerifySignature", tooltip="fn SenderKeyMessage_VerifySignature(skm: &SenderKeyMessage, pubkey: &PublicKey) -> Result<bool> {     skm.verify_signature(pubkey) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SealedSender_DecryptMessage()." [label="SealedSender_DecryptMessage", tooltip="async fn SealedSender_DecryptMessage(     message: &[u8],     trust_root: &PublicKey,     timestamp: Timestamp,     local_e164: Option<String>,     local_uuid: String,     local_device_id: u32,     se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPrivateKey_Sign()." [label="ECPrivateKey_Sign", tooltip="fn ECPrivateKey_Sign(key: &PrivateKey, message: &[u8]) -> Result<Vec<u8>> {     let mut rng = rand::rngs::OsRng.unwrap_err();     Ok(key.calculate_signature(message, &mut rng)?.into_vec()) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_EncryptMessage()." [label="GroupCipher_EncryptMessage", tooltip="async fn GroupCipher_EncryptMessage(     sender: &ProtocolAddress,     distribution_id: Uuid,     message: &[u8],     store: &mut dyn SenderKeyStore, ) -> Result<CiphertextMessage> {     let mut rng =...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity()." [label="IdentityKeyPair_SignAlternateIdentity", tooltip="fn IdentityKeyPair_SignAlternateIdentity(     public_key: &PublicKey,     private_key: &PrivateKey,     other_identity: &PublicKey, ) -> Result<Vec<u8>> {     let mut rng = rand::rngs::OsRng.unwrap_er...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle()." [label="SessionBuilder_ProcessPreKeyBundle", tooltip="async fn SessionBuilder_ProcessPreKeyBundle(     bundle: &PreKeyBundle,     protocol_address: &ProtocolAddress,     session_store: &mut dyn SessionStore,     identity_key_store: &mut dyn IdentityKeySt...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_Validate()." [label="SenderCertificate_Validate", tooltip="fn SenderCertificate_Validate(     cert: &SenderCertificate,     key: &PublicKey,     time: Timestamp, ) -> Result<bool> {     cert.validate(key, time) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_DecryptMessage()." [label="GroupCipher_DecryptMessage", tooltip="async fn GroupCipher_DecryptMessage(     sender: &ProtocolAddress,     message: &[u8],     store: &mut dyn SenderKeyStore, ) -> Result<Vec<u8>> {     group_decrypt(message, store, sender).await }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_New()." [label="SenderCertificate_New", tooltip="fn SenderCertificate_New(     sender_uuid: String,     sender_e164: Option<String>,     sender_device_id: u32,     sender_key: &PublicKey,     expiration: Timestamp,     signer_cert: &ServerCertificat...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPublicKey_Verify()." [label="ECPublicKey_Verify", tooltip="fn ECPublicKey_Verify(key: &PublicKey, message: &[u8], signature: &[u8]) -> bool {     key.verify_signature(message, signature) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_New()." [label="SenderKeyMessage_New", tooltip="fn SenderKeyMessage_New(     message_version: u8,     distribution_id: Uuid,     chain_id: u32,     iteration: u32,     ciphertext: &[u8],     pk: &PrivateKey, ) -> Result<SenderKeyMessage> {     let ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_10 {
    label = "usernames.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Verify()." [label="Username_Verify", tooltip="pub fn Username_Verify(     proof: &[u8],     hash: &[u8], ) -> Result<(), ::usernames::ProofVerificationFailure> {     if hash.len() != 32 {         return Err(::usernames::ProofVerificationFailure);...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." [label="Username_Proof", tooltip="pub fn Username_Proof(username: String, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(&username)?.proof(randomness) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_HashFromParts()." [label="Username_HashFromParts", tooltip="pub fn Username_HashFromParts(     nickname: String,     discriminator: String,     min_len: u32,     max_len: u32, ) -> Result<[u8; 32], UsernameError> {     let limits = NicknameLimits::new(min_len ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Hash()." [label="Username_Hash", tooltip="pub fn Username_Hash(username: String) -> Result<[u8; 32], UsernameError> {     Username::new(&username).map(|un| un.hash()) }", fillcolor=white, style="filled"]
  }
  subgraph cluster_11 {
    label = "zkgroup.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic()." [label="BackupAuthCredentialRequest_IssueDeterministic", tooltip="fn BackupAuthCredentialRequest_IssueDeterministic(     request_bytes: &[u8],     redemption_time: Timestamp,     backup_level: AsType<BackupLevel, u8>,     credential_type: AsType<BackupCredentialType...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId()." [label="CallLinkSecretParams_EncryptUserId", tooltip="fn CallLinkSecretParams_EncryptUserId(     params_bytes: &[u8],     user_id: Aci, ) -> Serialized<UuidCiphertext> {     let params = zkgroup::deserialize::<CallLinkSecretParams>(params_bytes)         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic()." [label="ServerSecretParams_SignDeterministic", tooltip="fn ServerSecretParams_SignDeterministic(     params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     message: &[u8], ) -> [u8; SIGNATURE_LEN] {     params.sign(*randomness, message) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId()." [label="CallLinkSecretParams_DecryptUserId", tooltip="fn CallLinkSecretParams_DecryptUserId(     params_bytes: &[u8],     user_id: Serialized<UuidCiphertext>, ) -> Result<Aci, ZkGroupVerificationFailure> {     let params = zkgroup::deserialize::<CallLink...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId()." [label="GroupSecretParams_EncryptServiceId", tooltip="fn GroupSecretParams_EncryptServiceId(     params: Serialized<GroupSecretParams>,     service_id: ServiceId, ) -> Serialized<UuidCiphertext> {     params.encrypt_service_id(service_id).into() }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation()." [label="ServerSecretParams_VerifyProfileKeyCredentialPresentation", tooltip="fn ServerSecretParams_VerifyProfileKeyCredentialPresentation(     server_secret_params: &ServerSecretParams,     group_public_params: Serialized<GroupPublicParams>,     presentation_bytes: &[u8],     ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse()." [label="BackupAuthCredentialRequestContext_ReceiveResponse", tooltip="fn BackupAuthCredentialRequestContext_ReceiveResponse(     context_bytes: &[u8],     response_bytes: &[u8],     expected_redemption_time: Timestamp,     params_bytes: &[u8], ) -> Result<Vec<u8>, ZkGro...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ProfileKey_GetCommitment()." [label="ProfileKey_GetCommitment", tooltip="fn ProfileKey_GetCommitment(     profile_key: Serialized<ProfileKey>,     user_id: Aci, ) -> Serialized<ProfileKeyCommitment> {     profile_key.get_commitment(user_id).into() }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature()." [label="ServerPublicParams_VerifySignature", tooltip="fn ServerPublicParams_VerifySignature(     server_public_params: &ServerPublicParams,     message: &[u8],     notary_signature: &[u8; SIGNATURE_LEN], ) -> Result<(), ZkGroupVerificationFailure> {     ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic()." [label="CreateCallLinkCredentialRequestContext_NewDeterministic", tooltip="fn CreateCallLinkCredentialRequestContext_NewDeterministic(     room_id: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8> {     let context = CreateCallLinkCredentialRequestContext::new(room...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify()." [label="CallLinkAuthCredentialPresentation_Verify", tooltip="fn CallLinkAuthCredentialPresentation_Verify(     presentation_bytes: &[u8],     now: Timestamp,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8], ) -> Result<(), ZkGroupVerificationF...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential()." [label="ServerPublicParams_ReceiveReceiptCredential", tooltip="fn ServerPublicParams_ReceiveReceiptCredential(     server_public_params: &ServerPublicParams,     request_context: Serialized<ReceiptCredentialRequestContext>,     response: Serialized<ReceiptCredent...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." [label="GroupSendEndorsementsResponse_IssueDeterministic", tooltip="fn GroupSendEndorsementsResponse_IssueDeterministic(     concatenated_group_member_ciphertexts: &[u8],     key_pair: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8> {     assert!(concatenat...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse()." [label="CreateCallLinkCredentialRequestContext_ReceiveResponse", tooltip="fn CreateCallLinkCredentialRequestContext_ReceiveResponse(     context_bytes: &[u8],     response_bytes: &[u8],     user_id: Aci,     params_bytes: &[u8], ) -> Result<Vec<u8>, ZkGroupVerificationFailu...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic()." [label="ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic", tooltip="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     group_secret_params: Serial...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic()." [label="ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic", tooltip="fn ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     group_secret_params: Serialized<Gr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic()." [label="ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic", tooltip="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(     server_secret_params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     request: Serialized<ProfileKeyCredential...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation()." [label="ServerSecretParams_VerifyAuthCredentialPresentation", tooltip="fn ServerSecretParams_VerifyAuthCredentialPresentation(     server_secret_params: &ServerSecretParams,     group_public_params: Serialized<GroupPublicParams>,     presentation_bytes: &[u8],     curren...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic()." [label="ServerPublicParams_CreateReceiptCredentialPresentationDeterministic", tooltip="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     receipt_credential: Serialized<Receipt...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive()." [label="CallLinkAuthCredentialResponse_Receive", tooltip="fn CallLinkAuthCredentialResponse_Receive(     response_bytes: &[u8],     user_id: Aci,     redemption_time: Timestamp,     params_bytes: &[u8], ) -> Result<Vec<u8>, ZkGroupVerificationFailure> {     ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic()." [label="CallLinkAuthCredentialResponse_IssueDeterministic", tooltip="fn CallLinkAuthCredentialResponse_IssueDeterministic(     user_id: Aci,     redemption_time: Timestamp,     params_bytes: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8> {     let params = ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic()." [label="CreateCallLinkCredential_PresentDeterministic", tooltip="fn CreateCallLinkCredential_PresentDeterministic(     credential_bytes: &[u8],     room_id: &[u8],     user_id: Aci,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8],     randomness: ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendFullToken_Verify()." [label="GroupSendFullToken_Verify", tooltip="fn GroupSendFullToken_Verify(     token: &[u8],     user_ids: ServiceIdSequence<'_>,     now: Timestamp,     key_pair: &[u8], ) -> Result<(), ZkGroupVerificationFailure> {     let token = zkgroup::des...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic()." [label="ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic", tooltip="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     user_id: Aci,     profile_key: Se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify()." [label="BackupAuthCredentialPresentation_Verify", tooltip="fn BackupAuthCredentialPresentation_Verify(     presentation_bytes: &[u8],     now: Timestamp,     server_params_bytes: &[u8], ) -> Result<(), ZkGroupVerificationFailure> {     let presentation = binc...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken()." [label="GroupSendEndorsement_ToToken", tooltip="fn GroupSendEndorsement_ToToken(     endorsement: &[u8],     group_params: Serialized<GroupSecretParams>, ) -> Vec<u8> {     let endorsement = zkgroup::deserialize::<GroupSendEndorsement>(endorsement)...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken()." [label="GroupSendEndorsement_CallLinkParams_ToToken", tooltip="fn GroupSendEndorsement_CallLinkParams_ToToken(     endorsement: &[u8],     call_link_secret_params_serialized: &[u8], ) -> Vec<u8> {     let call_link_params =         zkgroup::deserialize::<CallLink...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New()." [label="BackupAuthCredentialRequestContext_New", tooltip="fn BackupAuthCredentialRequestContext_New(backup_key: &[u8; 32], uuid: Uuid) -> Vec<u8> {     let backup_key: libsignal_account_keys::BackupKey =         libsignal_account_keys::BackupKey(*backup_key)...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey()." [label="GroupSecretParams_DecryptProfileKey", tooltip="fn GroupSecretParams_DecryptProfileKey(     params: Serialized<GroupSecretParams>,     profile_key: Serialized<ProfileKeyCiphertext>,     user_id: Aci, ) -> Result<Serialized<ProfileKey>, ZkGroupVerif...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic()." [label="CreateCallLinkCredentialRequest_IssueDeterministic", tooltip="fn CreateCallLinkCredentialRequest_IssueDeterministic(     request_bytes: &[u8],     user_id: Aci,     timestamp: Timestamp,     params_bytes: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts", tooltip="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(     response_bytes: &[u8],     concatenated_group_member_ciphertexts: &[u8],     local_user_ciphertext: &[u8],     now: Timestamp,   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds", tooltip="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(     response_bytes: &[u8],     group_members: ServiceIdSequence<'_>,     local_user: ServiceId,     now: Timestamp,     group_params: ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic()." [label="BackupAuthCredential_PresentDeterministic", tooltip="fn BackupAuthCredential_PresentDeterministic(     credential_bytes: &[u8],     server_params_bytes: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Result<Vec<u8>, ZkGroupVerificationFailure> {    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation()." [label="ServerSecretParams_VerifyReceiptCredentialPresentation", tooltip="fn ServerSecretParams_VerifyReceiptCredentialPresentation(     server_secret_params: &ServerSecretParams,     presentation: Serialized<ReceiptCredentialPresentation>, ) -> Result<(), ZkGroupVerificati...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify()." [label="CreateCallLinkCredentialPresentation_Verify", tooltip="fn CreateCallLinkCredentialPresentation_Verify(     presentation_bytes: &[u8],     room_id: &[u8],     now: Timestamp,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8], ) -> Result<()...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic()." [label="CallLinkAuthCredential_PresentDeterministic", tooltip="fn CallLinkAuthCredential_PresentDeterministic(     credential_bytes: &[u8],     user_id: Aci,     redemption_time: Timestamp,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8],     ra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId()." [label="GroupSecretParams_DecryptServiceId", tooltip="fn GroupSecretParams_DecryptServiceId(     params: Serialized<GroupSecretParams>,     ciphertext: Serialized<UuidCiphertext>, ) -> Result<ServiceId, ZkGroupVerificationFailure> {     params.decrypt_se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId()." [label="ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId", tooltip="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(     params: &ServerPublicParams,     aci: Aci,     pni: Pni,     redemption_time: Timestamp,     auth_credential_with_pni_response_bytes:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential()." [label="ServerPublicParams_ReceiveExpiringProfileKeyCredential", tooltip="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential(     server_public_params: &ServerPublicParams,     request_context: Serialized<ProfileKeyCredentialRequestContext>,     response: Serialized<...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic()." [label="ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic", tooltip="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(     server_secret_params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     aci: Aci,     pni: Pni,     redemption_time:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic()." [label="ServerSecretParams_IssueReceiptCredentialDeterministic", tooltip="fn ServerSecretParams_IssueReceiptCredentialDeterministic(     server_secret_params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     request: Serialized<ReceiptCredentialRequest>,     ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey()." [label="GroupSecretParams_EncryptProfileKey", tooltip="fn GroupSecretParams_EncryptProfileKey(     params: Serialized<GroupSecretParams>,     profile_key: Serialized<ProfileKey>,     user_id: Aci, ) -> Serialized<ProfileKeyCiphertext> {     params        ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_12 {
    label = "curve.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, generation, key_agreement, signatures);  criterion_main!(benches);", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 signatures()." [label="signatures", tooltip="pub fn signatures(c: &mut Criterion) {     let rng = &mut rng();     let alice_key = KeyPair::generate(rng);     let mut some_data = [0; 1024];     rng.fill(&mut some_data);      c.bench_function(' ge...", fillcolor=white, style="filled"]
  }
  subgraph cluster_13 {
    label = "ed_to_xed.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 main()." [label="main", tooltip="fn main() {     let mut input = vec![];     std::io::stdin()         .read_to_end(&mut input)         .expect(' can read input' );     let key = boring::pkey::PKey::public_key_from_pem(&input).expect(...", fillcolor=white, style="filled"]
  }
  subgraph cluster_14 {
    label = "curve.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [label="calculate_signature_for_multipart_message", tooltip="    pub fn calculate_signature_for_multipart_message<R: CryptoRng + Rng>(         &self,         message: &[&[u8]],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         match self....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[KeyPair]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R: CryptoRng + Rng>(         &self,         message: &[u8],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         self.private_key.calculate_signature...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R: CryptoRng + Rng>(         &self,         message: &[u8],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         self.calculate_signature_for_multipa...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." [label="test_large_signatures", tooltip="    fn test_large_signatures() -> Result<(), CurveError> {         let mut csprng = OsRng.unwrap_err();         let key_pair = KeyPair::generate(&mut csprng);         let mut message = [0u8; 1024 * 10...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [label="verify_signature_for_multipart_message", tooltip="    pub fn verify_signature_for_multipart_message(         &self,         message: &[&[u8]],         signature: &[u8],     ) -> bool {         match &self.key {             PublicKeyData::DjbPublicKey...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(&self, message: &[u8], signature: &[u8]) -> bool {         self.verify_signature_for_multipart_message(&[message], signature)     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_15 {
    label = "curve25519.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [             0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05,             0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R>(         &self,         csprng: &mut R,         message: &[&[u8]],     ) -> [u8; SIGNATURE_LENGTH]     where         R: CryptoRng + Rng,     {         let mut random_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         their_public_key: &[u8; PUBLIC_KEY_LENGTH],         message: &[&[u8]],         signature: &[u8; SIGNATURE_LENGTH],     ) -> bool {         let mont_point = Montgom...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." [label="test_random_signatures", tooltip="    fn test_random_signatures() {         let mut csprng = OsRng.unwrap_err();         for _ in 0..50 {             let mut message = [0u8; 64];             csprng.fill_bytes(&mut message);           ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_16 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [label="bench_verify_search", tooltip="fn bench_verify_search(c: &mut Criterion) {     let sig_key = VerifyingKey::from_bytes(&hex!(         ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'      ))     .unwrap();     let...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." [label="benches", tooltip="criterion_group!(benches, bench_verify_search); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_17 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [label="verify_search", tooltip="    pub fn verify_search(         &self,         request: SlimSearchRequest,         response: FullSearchResponse,         context: SearchContext,         force_monitor: bool,         now: SystemTime,...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_monitor()." [label="verify_monitor", tooltip="    pub fn verify_monitor<'a>(         &'a self,         request: &'a MonitorRequest,         response: &'a MonitorResponse,         context: MonitorContext,         now: SystemTime,     ) -> Result<M...", fillcolor=white, style="filled"]
  }
  subgraph cluster_18 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_monitor()." [label="verify_monitor", tooltip="pub fn verify_monitor<'a>(     config: &'a PublicConfig,     req: &'a MonitorRequest,     res: &'a MonitorResponse,     context: MonitorContext,     now: SystemTime, ) -> Result<MonitorStateUpdate> { ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [label="evaluate_vrf_proof", tooltip="fn evaluate_vrf_proof(     proof: &[u8],     vrf_key: &vrf::PublicKey,     search_key: &[u8], ) -> Result<[u8; 32]> {     let proof = proof.try_into().map_err(|_| MalformedProof)?;     Ok(vrf_key.proo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." [label="can_verify_search_response", tooltip="    fn can_verify_search_response() {         let sig_key = VerifyingKey::from_bytes(&hex!(             ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'          ))         .unwrap(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [label="verify_search_internal", tooltip="fn verify_search_internal(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     monitor: bool,     now: SystemTime, ) -> Result<SearchSta...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_tree_head_signature()." [label="verify_tree_head_signature", tooltip="fn verify_tree_head_signature(     config: &PublicConfig,     head: &SingleSignatureTreeHead,     root: &[u8; 32],     verifying_key: &VerifyingKey, ) -> Result<()> {     let raw = marshal_tree_head_t...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." [label="verify_search", tooltip="pub fn verify_search(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     force_monitor: bool,     now: SystemTime, ) -> Result<SearchSt...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." [label="verify_full_tree_head", tooltip="fn verify_full_tree_head(     config: &PublicConfig,     fth: &FullTreeHead,     root: [u8; 32],     last_tree_head: Option<&LastTreeHead>,     last_distinguished_tree_head: Option<&LastTreeHead>,    ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_19 {
    label = "vrf.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." [label="test_proof_to_hash_fails", tooltip="    fn test_proof_to_hash_fails() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();              assert!(pk.proof_to_hash(b' a' , &v.pi).is_err());            ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [label="proof_to_hash", tooltip="fn proof_to_hash(gamma: &EdwardsPoint) -> [u8; 32] {     let mut hasher = Sha512::new();     hasher.update([SUITE_ID, DOMAIN_SEPARATOR_PROOF]);     hasher.update(gamma.mul_by_cofactor().compress().0);...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." [label="test_proof_to_hash", tooltip="    fn test_proof_to_hash() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();             let index = pk.proof_to_hash(v.alpha, &v.pi).unwrap();             as...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [label="proof_to_hash", tooltip="    pub fn proof_to_hash(&self, m: &[u8], proof: &[u8; 80]) -> Result<[u8; 32]> {         // Decode proof into its component parts: gamma, c, and s.         let gamma = CompressedEdwardsY(proof[..32]....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." [label="test_encode_to_curve_try_and_increment", tooltip="    fn test_encode_to_curve_try_and_increment() {         for v in TEST_VECTORS {             let got = encode_to_curve_try_and_increment(&v.pk, v.alpha)                 .compress()                 .0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [label="encode_to_curve_try_and_increment", tooltip="fn encode_to_curve_try_and_increment(salt: &[u8], data: &[u8]) -> EdwardsPoint {     let mut hasher = Sha512::new();      for i in 0u8..=u8::MAX {         hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [label="try_from", tooltip="    fn try_from(public_key: [u8; 32]) -> Result<Self> {         match CompressedEdwardsY(public_key).decompress() {             None => Err(Error::InvalidCurvePoint),             Some(pt) if pt.is_sma...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/try_and_increment_terminates()." [label="try_and_increment_terminates", tooltip="    fn try_and_increment_terminates() {         proptest!(|(data: [u8; 34])| {             let _ = encode_to_curve_try_and_increment(&data[..32], &data[32..]);         })     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_20 {
    label = "gift_badge.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data()." [label="test_data", tooltip="        fn test_data() -> Self {             Self {                 receiptCredentialPresentation: zkgroup::serialize(&Self::test_data_presentation()),                 state: proto::gift_badge::State:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/gift_badge()." [label="gift_badge", tooltip="    fn gift_badge(modifier: impl FnOnce(&mut proto::GiftBadge)) -> Result<(), GiftBadgeError> {         let mut gift_badge = proto::GiftBadge::test_data();         modifier(&mut gift_badge);         G...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." [label="test_data_presentation", tooltip="        fn test_data_presentation() -> ReceiptCredentialPresentation {             const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32];              let server_params = zkgroup::ServerSecretParams::gene...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge()." [label="valid_gift_badge", tooltip="    fn valid_gift_badge() {         assert_eq!(             proto::GiftBadge::test_data().try_into(),             Ok(GiftBadge::Valid {                 receipt_credential_presentation: proto::GiftBadg...", fillcolor=white, style="filled"]
  }
  subgraph cluster_21 {
    label = "scramble.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit<Scrambler>`]accept()." [label="accept", tooltip="    fn accept(&mut self, visitor: &mut Scrambler) {         let Self {             chatId: _,             authorId: _,             dateSent: _,             expireStartDate: _,             expiresInMs:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit<Scrambler>`]accept()." [label="accept", tooltip="    fn accept(&mut self, visitor: &mut Scrambler) {         let Self {             item,             special_fields: _,         } = self;          if let Some(item) = item {             use proto::fra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." [label="accept", tooltip="    fn accept(&mut self, visitor: &mut Scrambler) {         let Self {             receiptCredentialPresentation,             state: _,             special_fields: _,         } = self;          if let...", fillcolor=white, style="filled"]
  }
  subgraph cluster_22 {
    label = "fetch_profile_key_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." [label="main", tooltip="async fn main() -> anyhow::Result<()> {     env_logger::builder()         .filter_module(module_path!(), log::LevelFilter::Info)         .parse_default_env()         .init();      let Config {        ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_23 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_returns_data_not_requested()." [label="search_returns_data_not_requested", tooltip="    fn search_returns_data_not_requested(skip: &[AccountDataField]) {         let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT;          let aci = test_account::aci();         let...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [label="distinguished", tooltip="    async fn distinguished(         &self,         last_distinguished: Option<LastTreeHead>,     ) -> Result<SearchStateUpdate, RequestError<Error>> {         let ChatDistinguishedResponse {          ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [label="verify_chat_search_response", tooltip="fn verify_chat_search_response(     kt: &KeyTransparency,     aci: &Aci,     e164: Option<E164>,     username_hash: Option<UsernameHash>,     stored_account_data: Option<AccountData>,     chat_search_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]monitor()." [label="monitor", tooltip="    async fn monitor(         &self,         aci: &Aci,         e164: Option<E164>,         username_hash: Option<UsernameHash<'_>>,         account_data: AccountData,         last_distinguished_tree_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data()." [label="search_does_not_return_requested_data", tooltip="    fn search_does_not_return_requested_data(skip: &[AccountDataField]) {         let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT;          let aci = test_account::aci();        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [label="search", tooltip="    async fn search(         &self,         aci: &Aci,         aci_identity_key: &PublicKey,         e164: Option<(E164, Vec<u8>)>,         username_hash: Option<UsernameHash<'_>>,         stored_acco...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." [label="verify_single_search_response", tooltip="fn verify_single_search_response(     kt: &KeyTransparency,     search_key: Vec<u8>,     response: CondensedTreeSearchResponse,     monitoring_data: Option<MonitoringData>,     full_tree_head: &FullTr...", fillcolor=white, style="filled"]
  }
  subgraph cluster_24 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test()." [label="monitor_permutations_integration_test", tooltip="    async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SK...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_permutations_integration_test()." [label="search_permutations_integration_test", tooltip="    async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKI...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." [label="prompt", tooltip="        fn prompt(text: &str) {             println!(' {} >' , text);              let mut input = String::new();              std::io::stdin()                 .read_line(&mut input)                 ....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt()." [label="search_for_account_that_isnt", tooltip="    async fn search_for_account_that_isnt() {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running integration tests is not enabled'...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_deleted_account()." [label="search_for_deleted_account", tooltip="    async fn search_for_deleted_account() {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running integration tests is not enabled' )...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/distinguished_integration_test()." [label="distinguished_integration_test", tooltip="    async fn distinguished_integration_test(have_last_distinguished: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running in...", fillcolor=white, style="filled"]
  }
  subgraph cluster_25 {
    label = "profiles.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." [label="test_successful_request", tooltip="    async fn test_successful_request() {         let randomness = zkgroup::TEST_ARRAY_32;         let server_params = zkgroup::ServerSecretParams::generate(randomness);         let aci = Aci::parse_fr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_unsuccessful_requests()." [label="test_unsuccessful_requests", tooltip="    async fn test_unsuccessful_requests(         response: chat::Response,     ) -> RequestError<ProfileKeyCredentialRequestError> {         let randomness = zkgroup::TEST_ARRAY_32;         let server...", fillcolor=white, style="filled"]
  }
  subgraph cluster_26 {
    label = "env.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 env/impl#[PublicConfig][`From<KeyTransConfig>`]from()." [label="from", tooltip="    fn from(src: KeyTransConfig) -> Self {         let KeyTransConfig {             signing_key_material,             vrf_key_material,             auditor_key_material,         } = src;         let s...", fillcolor=white, style="filled"]
  }
  subgraph cluster_27 {
    label = "ppss_ops.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error()." [label="do_backup_fails_with_the_first_error", tooltip="    async fn do_backup_fails_with_the_first_error() {         let backup = do_prepare::<TestEnv>(b' ' );         let result = do_backup::<TestEnv>(NotConnectedResults, &backup).await;         assert_m...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." [label="do_prepare", tooltip="pub fn do_prepare<Env: PpssSetup>(password: &[u8]) -> Backup4 {     let server_ids = Env::server_ids();     let mut rng = OsRng.unwrap_err();     Backup4::new(         server_ids.as_ref(),         pas...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [label="do_restore", tooltip="pub async fn do_restore<Env: PpssSetup>(     connect_results: impl IntoConnectionResults,     password: &[u8], ) -> Result<Secret, Error> {     let mut rng = OsRng.unwrap_err();     let ConnectionCont...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error()." [label="do_restore_fails_with_the_first_error", tooltip="    async fn do_restore_fails_with_the_first_error() {         let result = do_restore::<TestEnv>(NotConnectedResults, b' ' ).await;         assert_matches!(result, Err(crate::svrb::Error::ConnectionT...", fillcolor=white, style="filled"]
  }
  subgraph cluster_28 {
    label = "traits.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Backup]prepare()." [label="prepare", tooltip="    fn prepare(&self, password: &[u8]) -> Backup4 {         ppss_ops::do_prepare::<T::Env>(password)     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Restore]restore()." [label="restore", tooltip="    async fn restore(&self, password: &[u8]) -> Result<Secret, Error> {         ppss_ops::do_restore::<T::Env>(self.connect().await, password).await     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_29 {
    label = "sign.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." [label="verify_signature", tooltip="pub fn verify_signature(     signature: &[u8],     public_key: RistrettoPoint,     message: &[u8], ) -> Result<(), PokshoError> {     let mut st = Statement::new();     st.add(' public_key' , &[(' pri...", fillcolor=white, style="filled"]
    "rust-analyzer cargo poksho 0.7.0 sign/sign()." [label="sign", tooltip="pub fn sign(     private_key: Scalar,     public_key: RistrettoPoint,     message: &[u8],     randomness: &[u8], ) -> Result<Vec<u8>, PokshoError> {     let mut st = Statement::new();     st.add(' pub...", fillcolor=white, style="filled"]
    "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let mut block64 = [0u8; 64];         let mut block32 = [0u8; 32];         let mut block100 = [0u8; 100];         for i in 0..32 {             block32[i] = i as u8;   ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_30 {
    label = "statement.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." [label="test_complex_statement", tooltip="    fn test_complex_statement() {         let mut block32 = [0u8; 32];         let mut block64a = [0u8; 64];         let mut block64b = [0u8; 64];         let mut block64c = [0u8; 64];         let mut...", fillcolor=white, style="filled"]
    "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [label="prove", tooltip="    pub fn prove(         &self,         scalar_args: &ScalarArgs,         point_args: &PointArgs,         message: &[u8],         randomness: &[u8], // must be 32 bytes     ) -> Result<Vec<u8>, Poksh...", fillcolor=white, style="filled"]
    "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [label="verify_proof", tooltip="    pub fn verify_proof(         &self,         proof_bytes: &[u8],         point_args: &PointArgs,         message: &[u8],     ) -> Result<(), PokshoError> {         let proof = Proof::from_slice(pro...", fillcolor=white, style="filled"]
  }
  subgraph cluster_31 {
    label = "kem.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_kem); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_32 {
    label = "ratchet.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." [label="ratchet_forward", tooltip="pub fn ratchet_forward(c: &mut Criterion) {     ratchet_forward_result(c).expect(' success' ); }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." [label="ratchet_forward_result", tooltip="pub fn ratchet_forward_result(c: &mut Criterion) -> Result<(), SignalProtocolError> {     let mut group = c.benchmark_group(' ratchet' );     group.sampling_mode(SamplingMode::Flat);     group.sample_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet()." [label="ratchet", tooltip="criterion_group!(ratchet, ratchet_forward);  criterion_main!(ratchet);", fillcolor=white, style="filled"]
  }
  subgraph cluster_33 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." [label="v1", tooltip="pub fn v1(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();      let alice_address = ProtocolAddress::new(         ' 9d0652a3-dcc3-4d11-975f-74d61598733f' .to_owned(),         DeviceId::new(1...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." [label="v2", tooltip="pub fn v2(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();      let alice_address = ProtocolAddress::new(         ' 9d0652a3-dcc3-4d11-975f-74d61598733f' .to_owned(),         DeviceId::new(1...", fillcolor=white, style="filled"]
  }
  subgraph cluster_34 {
    label = "session.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." [label="session_encrypt_result", tooltip="pub fn session_encrypt_result(c: &mut Criterion) -> Result<(), SignalProtocolError> {     let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?;      let alice_address = ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." [label="session_encrypt", tooltip="pub fn session_encrypt(c: &mut Criterion) {     session_encrypt_result(c).expect(' success' ); }", fillcolor=white, style="filled"]
  }
  subgraph cluster_35 {
    label = "group_cipher.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [label="group_decrypt", tooltip="pub async fn group_decrypt(     skm_bytes: &[u8],     sender_key_store: &mut dyn SenderKeyStore,     sender: &ProtocolAddress, ) -> Result<Vec<u8>> {     let skm = SenderKeyMessage::try_from(skm_bytes...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [label="group_encrypt", tooltip="pub async fn group_encrypt<R: Rng + CryptoRng>(     sender_key_store: &mut dyn SenderKeyStore,     sender: &ProtocolAddress,     distribution_id: Uuid,     plaintext: &[u8],     csprng: &mut R, ) -> R...", fillcolor=white, style="filled"]
  }
  subgraph cluster_36 {
    label = "identity_key.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." [label="test_alternate_identity_signing", tooltip="    fn test_alternate_identity_signing() -> Result<()> {         let mut rng = OsRng.unwrap_err();         let primary = IdentityKeyPair::generate(&mut rng);         let secondary = IdentityKeyPair::g...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." [label="sign_alternate_identity", tooltip="    pub fn sign_alternate_identity<R: Rng + CryptoRng>(         &self,         other: &IdentityKey,         rng: &mut R,     ) -> Result<Box<[u8]>> {         Ok(self.private_key.calculate_signature_fo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [label="verify_alternate_identity", tooltip="    pub fn verify_alternate_identity(&self, other: &IdentityKey, signature: &[u8]) -> Result<bool> {         Ok(self.public_key.verify_signature_for_multipart_message(             &[                 A...", fillcolor=white, style="filled"]
  }
  subgraph cluster_37 {
    label = "protocol.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(&self, signature_key: &PublicKey) -> Result<bool> {         let valid = signature_key.verify_signature(             &self.serialized[..self.serialized.len() - Self::SIGNATU...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [label="new", tooltip="    pub fn new<R: CryptoRng + Rng>(         message_version: u8,         distribution_id: Uuid,         chain_id: u32,         iteration: u32,         ciphertext: Box<[u8]>,         csprng: &mut R,   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize()." [label="test_sender_key_message_serialize_deserialize", tooltip="    fn test_sender_key_message_serialize_deserialize() -> Result<()> {         let mut csprng = OsRng.unwrap_err();         let signature_key_pair = KeyPair::generate(&mut csprng);         let sender_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." [label="test_decryption_error_message", tooltip="    fn test_decryption_error_message() -> Result<()> {         let mut csprng = OsRng.unwrap_err();         let identity_key_pair = KeyPair::generate(&mut csprng);         let base_key_pair = KeyPair:...", fillcolor=white, style="filled"]
  }
  subgraph cluster_38 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." [label="test_lossless_round_trip", tooltip="fn test_lossless_round_trip() -> Result<()> {     let trust_root = PrivateKey::deserialize(&[0u8; 32])?;      // To test a hypothetical addition of a new field:     //     // Step 1: temporarily add a...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [label="sealed_sender_decrypt", tooltip="pub async fn sealed_sender_decrypt(     ciphertext: &[u8],     trust_root: &PublicKey,     timestamp: Timestamp,     local_e164: Option<String>,     local_uuid: String,     local_device_id: DeviceId, ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         key_id: u32,         key: PublicKey,         trust_root: &PrivateKey,         rng: &mut R,     ) -> Result<Self> {         let certificate_pb = proto::seale...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [label="validate", tooltip="    pub fn validate(&self, trust_root: &PublicKey) -> Result<bool> {         if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&self.key_id()?) {             log::error!(                 ' received serve...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         sender_uuid: String,         sender_e164: Option<String>,         key: PublicKey,         sender_device_id: DeviceId,         expiration: Timestamp,        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [label="validate", tooltip="    pub fn validate(&self, trust_root: &PublicKey, validation_time: Timestamp) -> Result<bool> {         if !self.signer.validate(trust_root)? {             log::error!(                 ' sender certi...", fillcolor=white, style="filled"]
  }
  subgraph cluster_39 {
    label = "session.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [label="process_prekey_bundle", tooltip="pub async fn process_prekey_bundle<R: Rng + CryptoRng>(     remote_address: &ProtocolAddress,     session_store: &mut dyn SessionStore,     identity_store: &mut dyn IdentityKeyStore,     bundle: &PreK...", fillcolor=white, style="filled"]
  }
  subgraph cluster_40 {
    label = "kyber_prekey.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." [label="generate", tooltip="    pub fn generate(         kyber_key_type: kem::KeyType,         id: KyberPreKeyId,         signing_key: &PrivateKey,     ) -> Result<KyberPreKeyRecord> {         let mut rng = rand::rngs::OsRng.unw...", fillcolor=white, style="filled"]
  }
  subgraph cluster_41 {
    label = "groups.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." [label="group_no_recv_session", tooltip="fn group_no_recv_session() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err().unwrap_err();          let device_id = DeviceId::new(1).unwrap();         let se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." [label="group_sealed_sender_multiple_devices", tooltip="fn group_sealed_sender_multiple_devices() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_send_session()." [label="group_no_send_session", tooltip="fn group_no_send_session() -> Result<(), SignalProtocolError> {     let mut csprng = OsRng.unwrap_err().unwrap_err();      let sender_address = ProtocolAddress::new(' +14159999111' .to_owned(), Device...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." [label="group_message_key_limit", tooltip="fn group_message_key_limit() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." [label="group_large_messages", tooltip="fn group_large_messages() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' ....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." [label="group_basic_ratchet", tooltip="fn group_basic_ratchet() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' .t...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." [label="group_too_far_in_the_future", tooltip="fn group_too_far_in_the_future() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +1415999...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." [label="group_sealed_sender_multiple_devices_and_excluded_recipients", tooltip="fn group_sealed_sender_multiple_devices_and_excluded_recipients() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." [label="group_basic_encrypt_decrypt", tooltip="fn group_basic_encrypt_decrypt() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +1415999...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." [label="group_late_join", tooltip="fn group_late_join() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' .to_ow...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." [label="group_out_of_order", tooltip="fn group_out_of_order() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' .to...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." [label="group_sealed_sender", tooltip="fn group_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let bob_device...", fillcolor=white, style="filled"]
  }
  subgraph cluster_42 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." [label="test_sender_key_in_sealed_sender", tooltip="fn test_sender_key_in_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." [label="test_decryption_error_in_sealed_sender", tooltip="fn test_decryption_error_in_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();       ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." [label="test_server_cert", tooltip="fn test_server_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut rng);    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." [label="test_sender_cert", tooltip="fn test_sender_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut rng);    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." [label="test_sealed_sender_multi_recipient_redundant_empty_devices", tooltip="fn test_sealed_sender_multi_recipient_redundant_empty_devices() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::n...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." [label="test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id", tooltip="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = Devi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." [label="test_revoked_server_cert", tooltip="fn test_revoked_server_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut r...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." [label="test_sealed_sender_multi_recipient_encrypt_with_archived_session", tooltip="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceI...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." [label="test_sealed_sender_multi_recipient", tooltip="fn test_sealed_sender_multi_recipient() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         le...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." [label="test_sealed_sender", tooltip="fn test_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let bob_device_id ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_43 {
    label = "session.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." [label="prekey_message_failed_decryption_does_not_update_stores", tooltip="fn prekey_message_failed_decryption_does_not_update_stores() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." [label="test_zero_is_a_valid_prekey_id", tooltip="fn test_zero_is_a_valid_prekey_id() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14151111111' .to_owned(), D...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." [label="test_longer_sessions", tooltip="fn test_longer_sessions() -> TestResult {     init_logger();     run(         2000,         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdChoice...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." [label="test_duplicate_message_error_returned", tooltip="fn test_duplicate_message_error_returned() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         let bob_device_id ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." [label="test_unacknowledged_sessions_eventually_expire", tooltip="fn test_unacknowledged_sessions_eventually_expire() -> TestResult {     async {         const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90);          let mut csprng = OsRng.u...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." [label="test_repeat_bundle_message", tooltip="fn test_repeat_bundle_message() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_pre_key(3133.into())   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." [label="test_basic_simultaneous_initiate", tooltip="fn test_basic_simultaneous_initiate() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoice::Random)  ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." [label="test_optional_one_time_prekey", tooltip="fn test_optional_one_time_prekey() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_signed_pre_key(22.in...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." [label="x3dh_prekey_rejected_as_invalid_message_specifically", tooltip="fn x3dh_prekey_rejected_as_invalid_message_specifically() {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         let bob_device_id...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." [label="test_simultaneous_initiate_lost_message", tooltip="fn test_simultaneous_initiate_lost_message() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoice::Ra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [label="run", tooltip="    fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) -> TestResult {         async {             let mut csprng = OsRng.unwrap_err();              let alice_device_id = DeviceId::new(1).unwrap()...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_empty_if_disabled()." [label="test_pqr_state_empty_if_disabled", tooltip="fn test_pqr_state_empty_if_disabled() -> TestResult {     run(UsePQRatchet::No, UsePQRatchet::No)?;     run(UsePQRatchet::No, UsePQRatchet::Yes)?;     run(UsePQRatchet::Yes, UsePQRatchet::No)?;      f...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." [label="test_simultaneous_initiate_lost_message_repeated_messages", tooltip="fn test_simultaneous_initiate_lost_message_repeated_messages() -> TestResult {     run(         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdCh...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." [label="prekey_message_to_archived_session", tooltip="fn prekey_message_to_archived_session() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14151111111' .to_owned(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." [label="test_simultaneous_initiate_repeated_messages", tooltip="fn test_simultaneous_initiate_repeated_messages() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoic...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." [label="test_basic_prekey", tooltip="fn test_basic_prekey() -> TestResult {     run(         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdChoice::Next);             builder.add_kyb...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." [label="test_signedprekey_not_saved", tooltip="fn test_signedprekey_not_saved() -> TestResult {     run(         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdChoice::Next);             build...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." [label="prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived", tooltip="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." [label="test_bad_message_bundle", tooltip="fn test_bad_message_bundle() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_pre_key(3133.into())      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." [label="test_simultaneous_initiate_with_lossage", tooltip="fn test_simultaneous_initiate_with_lossage() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoice::Ra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." [label="test_chain_jump_over_limit", tooltip="fn test_chain_jump_over_limit() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_pre_key(31337.into())  ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." [label="test_pqr_state_and_message_contents_nonempty_if_enabled", tooltip="fn test_pqr_state_and_message_contents_nonempty_if_enabled() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." [label="test_bad_signed_pre_key_signature", tooltip="fn test_bad_signed_pre_key_signature() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let bob_address =             ProtocolAddress::new(' +14151111112' .to_owned(), ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." [label="test_chain_jump_over_limit_with_self", tooltip="fn test_chain_jump_over_limit_with_self() -> TestResult {     let mut store_builder_one = TestStoreBuilder::new();     let mut store_builder_two = TestStoreBuilder::from_store(&store_builder_one.store...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." [label="test_message_key_limits", tooltip="fn test_message_key_limits() -> TestResult {     run(initialize_sessions_v4()?)?;      fn run(sessions: (SessionRecord, SessionRecord)) -> TestResult {         async {             let (alice_session_r...", fillcolor=white, style="filled"]
  }
  subgraph cluster_44 {
    label = "mod.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." [label="sign", tooltip="    fn sign(&mut self, message: &[u8]) -> Box<[u8]> {         let identity_key_pair = self             .store             .get_identity_key_pair()             .now_or_never()             .expect(' syn...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [label="add_signed_pre_key", tooltip="    pub fn add_signed_pre_key(&mut self, id_choice: IdChoice) {         let id = self.gen_id(id_choice);         if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() {             asser...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [label="add_kyber_pre_key", tooltip="    pub fn add_kyber_pre_key(&mut self, id_choice: IdChoice) {         let id = self.gen_id(id_choice);         if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() {             assert!...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [label="with_kyber_pre_key", tooltip="    pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) -> Self {         self.add_kyber_pre_key(id_choice);         self     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [label="with_signed_pre_key", tooltip="    pub fn with_signed_pre_key(mut self, id_choice: IdChoice) -> Self {         self.add_signed_pre_key(id_choice);         self     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [label="create_pre_key_bundle", tooltip="pub async fn create_pre_key_bundle<R: Rng + CryptoRng>(     store: &mut dyn ProtocolStore,     mut csprng: &mut R, ) -> Result<PreKeyBundle, SignalProtocolError> {     let pre_key_pair = KeyPair::gene...", fillcolor=white, style="filled"]
  }
  subgraph cluster_45 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore2<'_>`]restore()." [label="restore", tooltip="    pub fn restore(self, responses2_bytes: &[Vec<u8>]) -> Result<Secret, Error> {         if responses2_bytes.len() != self.server_ids.len() {             return Err(Error::NumServers {               ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." [label="full_create_restore", tooltip="    fn full_create_restore() {         let mut rng = OsRng.unwrap_err();         let server_ids = vec![1u64, 2u64, 3u64];         let mut servers = server_ids             .iter()             .map(|_| ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." [label="new", tooltip="        fn new(req: &svrb::request4::Create) -> Self {             Self {                 auth_commitment: to_ristretto_pt(&req.auth_commitment)                     .expect(' decode auth_commitment' )...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [label="restore2", tooltip="    pub fn restore2<R: Rng + CryptoRng>(         self,         responses1_bytes: &[Vec<u8>],         handshake_hashes: &[&[u8]],         rng: &mut R,     ) -> Result<Restore2<'a>, Error> {         if ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." [label="restore1", tooltip="        fn restore1(&mut self, req_bytes: &[u8]) -> Vec<u8> {             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )                 .inner         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 input_hash_pt()." [label="input_hash_pt", tooltip="fn input_hash_pt(input: &[u8; 64]) -> RistrettoPoint {     RistrettoPoint::from_uniform_bytes(input) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." [label="auth_commitments", tooltip="fn auth_commitments(     server_ids: &[u64],     input: &[u8; 64],     auth_pt: &RistrettoPoint, ) -> Vec<(Scalar, RistrettoPoint)> {     let k_auth = auth_secret(input, auth_pt);     server_ids      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [label="to_ristretto_pt", tooltip="fn to_ristretto_pt(b: &[u8]) -> Option<RistrettoPoint> {     CompressedRistretto::from_slice(b).ok()?.decompress() }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(server_ids: &'a [u64], password: &[u8], rng: &mut R) -> Self {         let blind = random_scalar(rng);         let input = password_to_uniform_input(password);      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." [label="restore2", tooltip="        fn restore2(&self, req_bytes: &[u8], handshake_hash: &[u8]) -> Vec<u8> {             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )             ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 auth_pt()." [label="auth_pt", tooltip="fn auth_pt(input: &[u8; 64], k_oprf: &Scalar) -> RistrettoPoint {     input_hash_pt(input) * k_oprf }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." [label="create", tooltip="        fn create(&mut self, req_bytes: &[u8]) {             self.versions.clear();             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )          ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 auth_secret()." [label="auth_secret", tooltip="fn auth_secret(input: &[u8; 64], auth_pt: &RistrettoPoint) -> [u8; 32] {     Kdf::make(         b' Signal_SVR_MasterAuthorizationKey_20240823' ,         input,         &auth_pt.compress().to_bytes(), ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         server_ids: &[u64],         password: &[u8],         max_tries: NonZeroU32,         rng: &mut R,     ) -> Self {         assert!(!server_ids.is_empty());   ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_46 {
    label = "usernames_benchmarks.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_usernames); criterion_main!(benches);", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username_hash()." [label="username_hash", tooltip="pub fn username_hash(username: &str) -> Result<[u8; 32], UsernameError> {     Username::new(username).map(|un| un.hash()) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [label="bench_usernames", tooltip="fn bench_usernames(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();     let usernames =         Username::candidates_from(&mut rng, ' signal' , NicknameLimits::default()).unwrap();      let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username_proof()." [label="username_proof", tooltip="pub fn username_proof(username: &str, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(username)?.proof(randomness) }", fillcolor=white, style="filled"]
  }
  subgraph cluster_47 {
    label = "constants.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 constants/test/generate_points()." [label="generate_points", tooltip="    fn generate_points() {         let mut sho = Sho::new(b' Signal_Username_20230130_Constant_Points_Generate' , b' ' );         for p in BASE_POINTS.iter() {             assert_eq!(&sho.get_point(),...", fillcolor=white, style="filled"]
  }
  subgraph cluster_48 {
    label = "username.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [label="proof", tooltip="    pub fn proof(&self, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {         let hash = Self::hash_from_scalars(&self.scalars);         let scalar_args = Self::make_scalar_args(&self.sca...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [label="verify_proof", tooltip="    pub fn verify_proof(proof: &[u8], hash: [u8; 32]) -> Result<(), ProofVerificationFailure> {         let hash_point = CompressedRistretto(hash)             .decompress()             .ok_or(ProofVer...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." [label="valid_usernames_proof_and_verify", tooltip="    fn valid_usernames_proof_and_verify() {         proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| {             let username = Username::new(&Username::format_parts...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." [label="many_random_makes_valid_usernames", tooltip="    fn many_random_makes_valid_usernames() {         let mut rng = rand::rng();         let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap());         let nickname = ' _SiGNA1' ;      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames()." [label="valid_usernames", tooltip="    fn valid_usernames() {         for username in [' He110.01' , ' usr.999999999' , ' _identifier.42' , ' LOUD.700' ] {             let parsed = Username::new(username).unwrap();             _ = pars...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [label="hash", tooltip="    pub fn hash(&self) -> [u8; 32] {         *Self::hash_from_scalars(&self.scalars).compress().as_bytes()     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_49 {
    label = "endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." [label="endorsement_flow", tooltip="fn endorsement_flow(c: &mut Criterion) {     let mut group = c.benchmark_group(' endorsements' );      let mut input_sho = poksho::ShoSha256::new(b' test' );     let inputs: Vec<RistrettoPoint> = (0.....", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_50 {
    label = "attributes.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 attributes/derive_impl()." [label="derive_impl", tooltip="    fn derive_impl<D: Domain>() -> [RistrettoPoint; 2] {         let mut sho = poksho::ShoHmacSha256::new(b' Signal_ZKCredential_Domain_20231011' );         sho.absorb_and_ratchet(D::ID.as_bytes());  ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_51 {
    label = "credentials.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core()." [label="credential_core", tooltip="    pub(crate) fn credential_core(&self, M: &[RistrettoPoint], sho: &mut dyn ShoApi) -> Credential {         assert!(             M.len() <= NUM_SUPPORTED_ATTRS,             ' more than {NUM_SUPPORTED...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize()." [label="serialize", tooltip="    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>     where         S: serde::Serializer,     {         self.private_key.serialize(serializer)     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate()." [label="generate", tooltip="    fn generate() -> Self {         let mut sho = ShoSha256::new(b' Signal_ZKCredential_ConstantSystemParams_generate_20230410' );         let G_w = sho.get_point();         let G_wprime = sho.get_poi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 credentials/tests/test_system()." [label="test_system", tooltip="    fn test_system() {         let params = SystemParams::generate();         let serialized = bincode::serialize(&params).expect(' can serialize' );         println!(' PARAMS = {serialized:#x?}' );  ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_52 {
    label = "endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [label="issue", tooltip="    pub fn issue(         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         private_key: &ServerDerivedKeyPair,         randomness: [u8; RANDOMNESS_LEN],     ) -> EndorsementR...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [label="to_token", tooltip="    pub fn to_token(&self, client_key: &ClientDecryptionKey) -> Box<[u8]> {         let P = self.R * client_key.a_inv;         Self::to_token_raw(P)     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." [label="generate_weights_for_proof", tooltip="    fn generate_weights_for_proof(         public_key: &ServerDerivedPublicKey,         E: &[RistrettoPoint],         R: &[CompressedRistretto],     ) -> Vec<Scalar> {         debug_assert_eq!(E.len()...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." [label="default_is_identity", tooltip="    fn default_is_identity() {         assert_eq!(Endorsement::combine([]).R, Endorsement::default().R);          let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt()." [label="fmt", tooltip="    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {         self.compress().fmt(f)     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." [label="round_trip", tooltip="        fn round_trip<T: Serialize + for<'a> Deserialize<'a> + PartialDefault>(             value: &T,             expected_len: usize,         ) {             let bincode_options = bincode::DefaultOp...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." [label="to_token_raw", tooltip="    fn to_token_raw(unblinded_endorsement: RistrettoPoint) -> Box<[u8]> {         // Skip the Sho for this, we're hashing a single point into a single bitstring. We don't         // need domain separa...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`]decompress()." [label="decompress", tooltip="    pub fn decompress(self) -> Result<Endorsement<RistrettoPoint>, VerificationFailure> {         match self.R.decompress() {             Some(R) => Ok(Endorsement { R }),             None => Err(Veri...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." [label="default_flow", tooltip="    fn default_flow() {         let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]);          // Client          let client_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." [label="combining_endorsements", tooltip="    fn combining_endorsements() {         let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]);          // Client          l...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         server_public_key: &ServerDerivedPublicKey,     ) -> Result<ReceivedEndorsements, V...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [label="verify", tooltip="    pub fn verify(&self, point: &RistrettoPoint, token: &[u8]) -> Result<(), VerificationFailure> {         let P = self.sk_prime * point;         let expected = Endorsement::to_token_raw(P);         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress()." [label="compress", tooltip="    pub fn compress(self) -> Endorsement<CompressedRistretto> {         Endorsement {             R: self.R.compress(),         }     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_53 {
    label = "issuance.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [label="verify", tooltip="    pub fn verify(         mut self,         public_key: &CredentialPublicKey,         // Even though it would work with a borrow, this deliberately consumes         // IssuanceProof to indicate that ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [label="issue", tooltip="    pub fn issue(         mut self,         key_pair: &CredentialKeyPair,         randomness: [u8; RANDOMNESS_LEN],     ) -> IssuanceProof {         self.finalize_public_attrs();          let mut sho ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]finalize_public_attrs()." [label="finalize_public_attrs", tooltip="    fn finalize_public_attrs(&mut self) {         debug_assert!(self.attr_points[0] == RistrettoPoint::identity());         self.attr_points[0] = self.public_attrs.get_point();     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_54 {
    label = "blind.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]finalize_public_attrs()." [label="finalize_public_attrs", tooltip="    fn finalize_public_attrs(&mut self) {         self.inner.finalize_public_attrs()     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [label="issue", tooltip="    pub fn issue(         mut self,         key_pair: &CredentialKeyPair,         blinding_key: &BlindingPublicKey,         randomness: [u8; RANDOMNESS_LEN],     ) -> BlindedIssuanceProof {         se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [label="verify", tooltip="    pub fn verify(         mut self,         public_key: &CredentialPublicKey,         blinding_key: &BlindingKeyPair,         proof: BlindedIssuanceProof,     ) -> Result<Credential, VerificationFail...", fillcolor=white, style="filled"]
  }
  subgraph cluster_55 {
    label = "presentation.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [label="present", tooltip="    pub fn present(         self,         public_key: &CredentialPublicKey,         credential: &Credential,         randomness: [u8; RANDOMNESS_LEN],     ) -> PresentationProof {         let credenti...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [label="verify", tooltip="    pub fn verify(         mut self,         key_pair: &CredentialKeyPair,         proof: &PresentationProof,     ) -> Result<(), VerificationFailure> {         self.finalize_public_attrs();          ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]finalize_public_attrs()." [label="finalize_public_attrs", tooltip="    fn finalize_public_attrs(&mut self) {         debug_assert!(self.core.attr_points[0] == RistrettoPoint::identity());         self.core.attr_points[0] = self.public_attrs.get_point();     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_56 {
    label = "sho.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [label="get_point", tooltip="    fn get_point(&mut self) -> RistrettoPoint {         let mut point_bytes = [0u8; 64];         self.squeeze_and_ratchet_into(&mut point_bytes);         RistrettoPoint::from_uniform_bytes(&point_byte...", fillcolor=white, style="filled"]
  }
  subgraph cluster_57 {
    label = "serialization.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_58 {
    label = "zkgroup_benchmarks.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." [label="benchmark_integration_auth", tooltip="fn benchmark_integration_auth(c: &mut Criterion) {     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params.get...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." [label="benchmark_group_send_endorsements", tooltip="pub fn benchmark_group_send_endorsements(c: &mut Criterion) {     const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp =         zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023-04-13 00:00:00 U...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." [label="benchmark_integration_profile", tooltip="pub fn benchmark_integration_profile(c: &mut Criterion) {     // SERVER     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = ser...", fillcolor=white, style="filled"]
  }
  subgraph cluster_59 {
    label = "auth_credential_with_pni.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         public_params: &ServerPublicParams,         aci: Aci,         pni: Pni,         redemption_time: crate::Timestamp,     ) -> Result<AuthCredentialWithPni, ZkGr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present()." [label="present", tooltip="    pub fn present(         &self,         public_params: &ServerPublicParams,         group_secret_params: &GroupSecretParams,         randomness: RandomnessBytes,     ) -> AnyAuthCredentialPresentat...", fillcolor=white, style="filled"]
  }
  subgraph cluster_60 {
    label = "zkc.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." [label="issue_credential", tooltip="    pub fn issue_credential(         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         params: &ServerSecretParams,         randomness: RandomnessBytes,     ) -> Self {         S...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." [label="present", tooltip="    pub fn present(         &self,         public_params: &ServerPublicParams,         group_secret_params: &GroupSecretParams,         randomness: RandomnessBytes,     ) -> AuthCredentialWithPniZkcPr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." [label="verify_for_key", tooltip="    pub(crate) fn verify_for_key(         &self,         credential_key: &CredentialKeyPair,         group_public_params: &GroupPublicParams,         redemption_time: Timestamp,     ) -> Result<(), Zk...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." [label="issue_receive_present", tooltip="    fn issue_receive_present() {         const ACI: Aci = Aci::from_uuid_bytes([b'a'; 16]);         const PNI: Pni = Pni::from_uuid_bytes([b'p'; 16]);         const REDEMPTION_TIME: Timestamp = Timest...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." [label="issue_credential_for_key", tooltip="    pub(crate) fn issue_credential_for_key(         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         credential_key: &CredentialKeyPair,         randomness: RandomnessBytes,    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         public_params: &ServerPublicParams,     ) -> Result<AuthCredentialWithPniZkc, ZkGroupV...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         params: &ServerSecretParams,         group_public_params: &GroupPublicParams,         redemption_time: Timestamp,     ) -> Result<(), ZkGroupVerificationFailu...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." [label="present_for_key", tooltip="    pub(crate) fn present_for_key(         &self,         public_key: &CredentialPublicKey,         group_secret_params: &GroupSecretParams,         randomness: RandomnessBytes,     ) -> AuthCredentia...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." [label="receive_for_key", tooltip="    pub(crate) fn receive_for_key(         self,         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         public_key: &CredentialPublicKey,     ) -> Result<AuthCredentialWithPni...", fillcolor=white, style="filled"]
  }
  subgraph cluster_61 {
    label = "auth_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." [label="test_client_enforces_timestamp_granularity", tooltip="    fn test_client_enforces_timestamp_granularity() {         let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary!          let request_context = Back...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." [label="test_server_verify_wrong_receipt_level", tooltip="    fn test_server_verify_wrong_receipt_level() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let valid_presentation =             credential.present(&server_secret_pa...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." [label="test_client_enforces_timestamp", tooltip="    fn test_client_enforces_timestamp() {         let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP;          let request_context = BackupAuthCredentialRequestContext::new(&KEY, ACI.into());     ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." [label="test_server_verify_wrong_redemption", tooltip="    fn test_server_verify_wrong_redemption() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let valid_presentation =             credential.present(&server_secret_param...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new()." [label="new", tooltip="    fn new(backup_id: &libsignal_account_keys::BackupId) -> Self {         Self(Sho::new(b' 20231003_Signal_BackupId' , &backup_id.0).get_point())     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." [label="new", tooltip="    pub fn new<const VERSION: u8>(         backup_key: &libsignal_account_keys::BackupKey<VERSION>,         aci: libsignal_core::Aci,     ) -> Self {         // derive the backup-id (blinded in the is...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." [label="test_server_verify_expiration", tooltip="    fn test_server_verify_expiration() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let presentation =             credential.present(&server_secret_params().get_publ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [label="present", tooltip="    pub fn present(         &self,         server_params: &GenericServerPublicParams,         randomness: RandomnessBytes,     ) -> BackupAuthCredentialPresentation {         BackupAuthCredentialPrese...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [label="generate_credential", tooltip="    fn generate_credential(redemption_time: Timestamp) -> BackupAuthCredential {         // client generated materials; issuance request         let request_context = BackupAuthCredentialRequestContex...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         current_time: Timestamp,         server_params: &GenericServerSecretParams,     ) -> Result<(), ZkGroupVerificationFailure> {         let acceptable_start_tim...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [label="receive", tooltip="    pub fn receive(         self,         response: BackupAuthCredentialResponse,         params: &GenericServerPublicParams,         expected_redemption_time: Timestamp,     ) -> Result<BackupAuthCre...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." [label="test_server_verify_wrong_backup_id", tooltip="    fn test_server_verify_wrong_backup_id() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let valid_presentation =             credential.present(&server_secret_params...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [label="issue", tooltip="    pub fn issue(         &self,         redemption_time: Timestamp,         backup_level: BackupLevel,         credential_type: BackupCredentialType,         params: &GenericServerSecretParams,      ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_62 {
    label = "auth_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." [label="issue_credential", tooltip="    pub fn issue_credential(         user_id: libsignal_core::Aci,         redemption_time: Timestamp,         params: &GenericServerSecretParams,         randomness: RandomnessBytes,     ) -> CallLin...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         current_time: Timestamp,         server_params: &GenericServerSecretParams,         call_link_params: &CallLinkPublicParams,     ) -> Result<(), ZkGroupVerifi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." [label="present", tooltip="    pub fn present(         &self,         user_id: libsignal_core::Aci,         redemption_time: Timestamp,         server_params: &GenericServerPublicParams,         call_link_params: &CallLinkSecre...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         user_id: libsignal_core::Aci,         redemption_time: Timestamp,         params: &GenericServerPublicParams,     ) -> Result<CallLinkAuthCredential, ZkGroupV...", fillcolor=white, style="filled"]
  }
  subgraph cluster_63 {
    label = "create_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()." [label="new", tooltip="    pub fn new(room_id: &[u8], randomness: RandomnessBytes) -> Self {         let mut sho =             poksho::ShoHmacSha256::new(b' 20230413_Signal_CreateCallLinkCredentialRequest' );         sho.ab...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         room_id: &[u8],         current_time: Timestamp,         server_params: &GenericServerSecretParams,         call_link_params: &CallLinkPublicParams,     ) -> ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." [label="receive", tooltip="    pub fn receive(         self,         response: CreateCallLinkCredentialResponse,         user_id: libsignal_core::Aci,         params: &GenericServerPublicParams,     ) -> Result<CreateCallLinkCr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new()." [label="new", tooltip="    fn new(room_id: &[u8]) -> Self {         Self(Sho::new(b' 20230413_Signal_CallLinkRoomId' , room_id).get_point())     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." [label="issue", tooltip="    pub fn issue(         &self,         user_id: libsignal_core::Aci,         timestamp: Timestamp,         params: &GenericServerSecretParams,         randomness: RandomnessBytes,     ) -> CreateCal...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." [label="present", tooltip="    pub fn present(         &self,         room_id: &[u8],         user_id: libsignal_core::Aci,         server_params: &GenericServerPublicParams,         call_link_params: &CallLinkSecretParams,    ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_64 {
    label = "params.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid()." [label="encrypt_uid", tooltip="    pub fn encrypt_uid(&self, user_id: libsignal_core::Aci) -> api::groups::UuidCiphertext {         let uid = crypto::uid_struct::UidStruct::from_service_id(user_id.into());         self.encrypt_uid_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()." [label="decrypt_uid", tooltip="    pub fn decrypt_uid(         &self,         ciphertext: api::groups::UuidCiphertext,     ) -> Result<libsignal_core::Aci, ZkGroupVerificationFailure> {         let uid = crypto::uid_encryption::Uid...", fillcolor=white, style="filled"]
  }
  subgraph cluster_65 {
    label = "group_params.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()." [label="decrypt_profile_key", tooltip="    pub fn decrypt_profile_key(         &self,         ciphertext: api::groups::ProfileKeyCiphertext,         user_id: libsignal_core::Aci,     ) -> Result<api::profiles::ProfileKey, ZkGroupVerificati...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [label="encrypt_service_id", tooltip="    pub fn encrypt_service_id(         &self,         service_id: libsignal_core::ServiceId,     ) -> api::groups::UuidCiphertext {         let uid = crypto::uid_struct::UidStruct::from_service_id(ser...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key()." [label="encrypt_profile_key", tooltip="    pub fn encrypt_profile_key(         &self,         profile_key: api::profiles::ProfileKey,         user_id: libsignal_core::Aci,     ) -> api::groups::ProfileKeyCiphertext {         self.encrypt_p...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()." [label="decrypt_service_id", tooltip="    pub fn decrypt_service_id(         &self,         ciphertext: api::groups::UuidCiphertext,     ) -> Result<libsignal_core::ServiceId, ZkGroupVerificationFailure> {         crypto::uid_encryption::...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes()." [label="encrypt_profile_key_bytes", tooltip="    pub fn encrypt_profile_key_bytes(         &self,         profile_key_bytes: ProfileKeyBytes,         user_id: libsignal_core::Aci,     ) -> api::groups::ProfileKeyCiphertext {         let profile_...", fillcolor=white, style="filled"]
  }
  subgraph cluster_66 {
    label = "group_send_endorsement.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [label="receive_with_ciphertexts", tooltip="    pub fn receive_with_ciphertexts(         self,         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         now: Timestamp,         root_public_key: impl AsRef<zkcredential::endor...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." [label="verify", tooltip="    pub fn verify(         &self,         user_ids: impl IntoIterator<Item = libsignal_core::ServiceId>,         now: Timestamp,         key_pair: &GroupSendDerivedKeyPair,     ) -> Result<(), ZkGroup...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." [label="receive_with_service_ids_single_threaded", tooltip="    pub fn receive_with_service_ids_single_threaded(         self,         user_ids: impl IntoIterator<Item = libsignal_core::ServiceId>,         now: Timestamp,         group_params: &GroupSecretPara...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [label="receive_with_service_ids", tooltip="    pub fn receive_with_service_ids<T>(         self,         user_ids: T,         now: Timestamp,         group_params: &GroupSecretParams,         root_public_key: impl AsRef<zkcredential::endorseme...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [label="to_token", tooltip="    pub fn to_token<T: AsRef<uid_encryption::KeyPair>>(&self, key_pair: T) -> GroupSendToken {         let client_key =             zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto>`]decompress()." [label="decompress", tooltip="    pub fn decompress(         self,     ) -> Result<         GroupSendEndorsement<curve25519_dalek_signal::RistrettoPoint>,         ZkGroupDeserializationFailure,     > {         Ok(GroupSendEndorsem...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [label="issue", tooltip="    pub fn issue(         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         key_pair: &GroupSendDerivedKeyPair,         randomness: RandomnessBytes,     ) -> Self {         // Note...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress()." [label="compress", tooltip="    pub fn compress(         self,     ) -> GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto> {         GroupSendEndorsement {             reserved: self.reserved,         ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_67 {
    label = "profile_key.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()." [label="get_commitment", tooltip="    pub fn get_commitment(         &self,         user_id: libsignal_core::Aci,     ) -> api::profiles::ProfileKeyCommitment {         let uid_bytes = uuid::Uuid::from(user_id).into_bytes();         l...", fillcolor=white, style="filled"]
  }
  subgraph cluster_68 {
    label = "server_params.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." [label="verify_receipt_credential_presentation", tooltip="    pub fn verify_receipt_credential_presentation(         &self,         presentation: &api::receipts::ReceiptCredentialPresentation,     ) -> Result<(), ZkGroupVerificationFailure> {         present...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." [label="verify_expiring_profile_key_credential_presentation", tooltip="    pub fn verify_expiring_profile_key_credential_presentation(         &self,         group_public_params: api::groups::GroupPublicParams,         presentation: &api::profiles::ExpiringProfileKeyCred...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [label="issue_expiring_profile_key_credential", tooltip="    pub fn issue_expiring_profile_key_credential(         &self,         randomness: RandomnessBytes,         request: &api::profiles::ProfileKeyCredentialRequest,         aci: libsignal_core::Aci,   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [label="receive_expiring_profile_key_credential", tooltip="    pub fn receive_expiring_profile_key_credential(         &self,         context: &api::profiles::ProfileKeyCredentialRequestContext,         response: &api::profiles::ExpiringProfileKeyCredentialRe...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation()." [label="verify_auth_credential_presentation", tooltip="    pub fn verify_auth_credential_presentation(         &self,         group_public_params: api::groups::GroupPublicParams,         presentation: &api::auth::AnyAuthCredentialPresentation,         cur...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." [label="create_expiring_profile_key_credential_presentation", tooltip="    pub fn create_expiring_profile_key_credential_presentation(         &self,         randomness: RandomnessBytes,         group_secret_params: api::groups::GroupSecretParams,         expiring_profil...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [label="create_receipt_credential_presentation", tooltip="    pub fn create_receipt_credential_presentation(         &self,         randomness: RandomnessBytes,         receipt_credential: &api::receipts::ReceiptCredential,     ) -> api::receipts::ReceiptCre...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." [label="sign", tooltip="    pub fn sign(&self, randomness: RandomnessBytes, message: &[u8]) -> NotarySignatureBytes {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign' ,  ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [label="issue_receipt_credential", tooltip="    pub fn issue_receipt_credential(         &self,         randomness: RandomnessBytes,         request: &api::receipts::ReceiptCredentialRequest,         receipt_expiration_time: Timestamp,         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." [label="verify_profile_key_credential_presentation", tooltip="    pub fn verify_profile_key_credential_presentation(         &self,         group_public_params: api::groups::GroupPublicParams,         presentation: &api::profiles::AnyProfileKeyCredentialPresenta...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [label="receive_receipt_credential", tooltip="    pub fn receive_receipt_credential(         &self,         context: &api::receipts::ReceiptCredentialRequestContext,         response: &api::receipts::ReceiptCredentialResponse,     ) -> Result<api...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [label="create_profile_key_credential_request_context", tooltip="    pub fn create_profile_key_credential_request_context(         &self,         randomness: RandomnessBytes,         aci: libsignal_core::Aci,         profile_key: api::profiles::ProfileKey,     ) ->...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         &self,         message: &[u8],         signature: NotarySignatureBytes,     ) -> Result<(), ZkGroupVerificationFailure> {         self.sig_public_key.verify(messag...", fillcolor=white, style="filled"]
  }
  subgraph cluster_69 {
    label = "sho.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [label="get_point", tooltip="    pub fn get_point(&mut self) -> RistrettoPoint {         RistrettoPoint::from_uniform_bytes(&self.internal_sho.squeeze_and_ratchet_as_array())     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator()." [label="get_point_single_elligator", tooltip="    pub fn get_point_single_elligator(&mut self) -> RistrettoPoint {         RistrettoPoint::from_uniform_bytes_single_elligator(             &self.internal_sho.squeeze_and_ratchet_as_array(),        ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_70 {
    label = "credentials.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]credential_core()." [label="credential_core", tooltip="    fn credential_core(         &self,         M: &[RistrettoPoint],         sho: &mut Sho,     ) -> (Scalar, RistrettoPoint, RistrettoPoint) {         assert!(             M.len() <= S::NUM_ATTRS,   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." [label="test_mac", tooltip="    fn test_mac() {         // It doesn't really matter *which* credential we test here, we just want to generally know         // we've set things up correctly. (Also, the credentials hardcoded here ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate()." [label="generate", tooltip="    fn generate() -> Self {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_Constant_Credentials_SystemParams_Generate' ,             b' ' ,         );         let G_w = sho.get...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()." [label="create_blinded_expiring_profile_key_credential", tooltip="    pub fn create_blinded_expiring_profile_key_credential(         &self,         uid: uid_struct::UidStruct,         public_key: profile_key_credential_request::PublicKey,         ciphertext: profile...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system()." [label="test_system", tooltip="    fn test_system() {         let params = SystemParams::generate();         println!(' PARAMS = {:#x?}' , bincode::serialize(&params));         assert!(SystemParams::generate() == SystemParams::get_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()." [label="create_blinded_receipt_credential", tooltip="    pub fn create_blinded_receipt_credential(         &self,         public_key: receipt_credential_request::PublicKey,         ciphertext: receipt_credential_request::Ciphertext,         receipt_expi...", fillcolor=white, style="filled"]
  }
  subgraph cluster_71 {
    label = "profile_key_commitment.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate()." [label="generate", tooltip="    pub fn generate() -> Self {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_Constant_ProfileKeyCommitment_SystemParams_Generate' ,             b' ' ,         );         let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system()." [label="test_system", tooltip="    fn test_system() {         let params = SystemParams::generate();         println!(' PARAMS = {:#x?}' , bincode::serialize(&params));         assert!(SystemParams::generate() == SystemParams::get_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment()." [label="test_commitment", tooltip="    fn test_commitment() {         let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16);         let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...", fillcolor=white, style="filled"]
  }
  subgraph cluster_72 {
    label = "profile_key_credential_request.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response()." [label="test_request_response", tooltip="    fn test_request_response() {         let mut sho = Sho::new(b' Test_Profile_Key_Credential_Request' , b' ' );          // client         let blind_key_pair = KeyPair::generate(&mut sho);          ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_73 {
    label = "profile_key_encryption.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()." [label="decrypt", tooltip="    pub(crate) fn decrypt(         key_pair: &KeyPair,         ciphertext: &Ciphertext,         uid_bytes: UidBytes,     ) -> Result<profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure> {...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption()." [label="test_profile_key_encryption", tooltip="    fn test_profile_key_encryption() {         let master_key = TEST_ARRAY_32_1;         let mut sho = Sho::new(b' Test_Profile_Key_Encryption' , &master_key);          //let system = SystemParams::ge...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate()." [label="generate", tooltip="    pub fn generate() -> Self {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_Constant_ProfileKeyEncryption_SystemParams_Generate' ,             b' ' ,         );         let ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_74 {
    label = "profile_key_struct.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [label="new", tooltip="    pub fn new(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) -> Self {         let mut encoded_profile_key = profile_key_bytes;         encoded_profile_key[0] &= 254;         encoded_profil...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3()." [label="calc_M3", tooltip="    pub fn calc_M3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) -> RistrettoPoint {         let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN];         combined_array[..PROFILE_KEY...", fillcolor=white, style="filled"]
  }
  subgraph cluster_75 {
    label = "proofs.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." [label="new", tooltip="    pub fn new(         uid_enc_key_pair: uid_encryption::KeyPair,         profile_key_enc_key_pair: profile_key_encryption::KeyPair,         credentials_public_key: credentials::PublicKey,         cr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." [label="new", tooltip="    pub fn new(         key_pair: credentials::KeyPair<credentials::ReceiptCredential>,         request_public_key: receipt_credential_request::PublicKey,         request: receipt_credential_request::...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         public_key: profile_key_credential_request::PublicKey,         ciphertext: profile_key_credential_request::Ciphertext,         commitment: profile_key_commitm...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_public_key: credentials::PublicKey,         request_public_key: receipt_credential_request::PublicKey,         request: receipt_credential_request...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new()." [label="new", tooltip="    pub fn new(         key_pair: profile_key_credential_request::KeyPair,         ciphertext: profile_key_credential_request::CiphertextWithSecretNonce,         commitment: profile_key_commitment::Co...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_key_pair: credentials::KeyPair<credentials::ExpiringProfileKeyCredential>,         uid_ciphertext: uid_encryption::Ciphertext,         uid_enc_pub...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." [label="new", tooltip="    pub fn new(         key_pair: credentials::KeyPair<credentials::ExpiringProfileKeyCredential>,         request_public_key: profile_key_credential_request::PublicKey,         request: profile_key_c...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_key_pair: credentials::KeyPair<credentials::ReceiptCredential>,         receipt_struct: ReceiptStruct,     ) -> Result<(), ZkGroupVerificationFail...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." [label="new", tooltip="    pub fn new(         credentials_public_key: credentials::PublicKey,         credential: credentials::ReceiptCredential,         sho: &mut Sho,     ) -> Self {         let credentials_system = cred...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_public_key: credentials::PublicKey,         request_public_key: profile_key_credential_request::PublicKey,         aci_bytes: UidBytes,         re...", fillcolor=white, style="filled"]
  }
  subgraph cluster_76 {
    label = "signature.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." [label="sign", tooltip="    pub fn sign(&self, message: &[u8], sho: &mut Sho) -> SignatureBytes {         let vec_bytes = poksho::sign(             self.signing_key,             self.public_key,             message,         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let group_key = TEST_ARRAY_32;         let mut sho = Sho::new(b' Test_Signature' , &group_key);         let key_pair = KeyPair::generate(&mut sho);          // Test s...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." [label="verify", tooltip="    pub fn verify(         &self,         message: &[u8],         signature: SignatureBytes,     ) -> Result<(), ZkGroupVerificationFailure> {         match poksho::verify_signature(&signature, self.p...", fillcolor=white, style="filled"]
  }
  subgraph cluster_77 {
    label = "uid_encryption.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." [label="decrypt", tooltip="    pub(crate) fn decrypt(         key_pair: &KeyPair,         ciphertext: &Ciphertext,     ) -> Result<libsignal_core::ServiceId, ZkGroupVerificationFailure> {         let M2 = key_pair             ....", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption()." [label="test_uid_encryption", tooltip="    fn test_uid_encryption() {         let master_key = TEST_ARRAY_32;         let mut sho = Sho::new(b' Test_Uid_Encryption' , &master_key);          //let system = SystemParams::generate();         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate()." [label="generate", tooltip="    pub fn generate() -> Self {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_Constant_UidEncryption_SystemParams_Generate' ,             b' ' ,         );         let G_a1 = ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption()." [label="test_pni_encryption", tooltip="    fn test_pni_encryption() {         let mut sho = Sho::new(b' Test_Pni_Encryption' , &[]);         let key_pair = KeyPair::derive_from(sho.as_mut());          let pni = libsignal_core::Pni::from_uu...", fillcolor=white, style="filled"]
  }
  subgraph cluster_78 {
    label = "uid_struct.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [label="from_service_id", tooltip="    pub fn from_service_id(service_id: ServiceId) -> Self {         let M1 = Self::calc_M1(service_id);         let raw_uuid_bytes = service_id.raw_uuid().into_bytes();         let M2 = RistrettoPoint...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()." [label="calc_M1", tooltip="    pub fn calc_M1(service_id: ServiceId) -> RistrettoPoint {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_UID_CalcM1' ,             &service_id.service_id_binary(),         ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_79 {
    label = "zkcredential_examples.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." [label="as_point", tooltip="        fn as_point(&self) -> RistrettoPoint {             self.opaque_id         }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key()." [label="test_inverse_key", tooltip="fn test_inverse_key() {     let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16);     let uid = UidStruct::from_service_id(aci.into());      let mut sho = Sho::new(b' test_inverse_key' , b' '...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." [label="test_profile_key_credential_only_verifying_one_encryption_key", tooltip="fn test_profile_key_credential_only_verifying_one_encryption_key() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." [label="test_mac_generic_without_verifying_encryption_key", tooltip="fn test_mac_generic_without_verifying_encryption_key() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." [label="test_profile_key_credential", tooltip="fn test_profile_key_credential() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());     let blinding_keypair ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." [label="test_mac_generic", tooltip="fn test_mac_generic() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());      let label = b' 20221221_AuthCre...", fillcolor=white, style="filled"]
  }
  subgraph cluster_80 {
    label = "backup_auth_flow.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." [label="test_backup_auth_request_response", tooltip="fn test_backup_auth_request_response() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: Randomne...", fillcolor=white, style="filled"]
  }
  subgraph cluster_81 {
    label = "call_link_flow.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." [label="test_auth_credential", tooltip="fn test_auth_credential() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes = [0x...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." [label="test_auth_credential_enforces_timestamp_granularity", tooltip="fn test_auth_credential_enforces_timestamp_granularity() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];      // cli...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." [label="test_create_call_link_request_response", tooltip="fn test_create_call_link_request_response() {     let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN];     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: Ran...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." [label="test_create_call_link_enforces_timestamp_granularity", tooltip="fn test_create_call_link_enforces_timestamp_granularity() {     let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN];     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let ra...", fillcolor=white, style="filled"]
  }
  subgraph cluster_82 {
    label = "group_send_endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." [label="test_client_rejects_bad_expirations", tooltip="fn test_client_rejects_bad_expirations() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: Random...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." [label="test_single_member_group", tooltip="fn test_single_member_group() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes =...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." [label="test_endorsement", tooltip="fn test_endorsement() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes = [0x45u8...", fillcolor=white, style="filled"]
  }
  subgraph cluster_83 {
    label = "integration_tests.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." [label="test_integration_auth_zkc", tooltip="fn test_integration_auth_zkc() {     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params.get_public_params(); ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_lizard()." [label="test_lizard", tooltip="fn test_lizard() {     let p = RistrettoPoint::lizard_encode::<Sha256>(&zkgroup::common::constants::TEST_ARRAY_16);     let data_out = p.lizard_decode::<Sha256>();     assert_hex_eq!(data_out.unwrap()...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." [label="test_server_sigs", tooltip="fn test_server_sigs() {     let server_secret_params =         zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params.ge...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify()." [label="test_profile_key_credential_presentation_v1_does_not_verify", tooltip="fn test_profile_key_credential_presentation_v1_does_not_verify() {     // Originally from test_integration_profile.     // SERVER     let server_secret_params = zkgroup::ServerSecretParams::generate(z...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." [label="test_integration_expiring_profile", tooltip="fn test_integration_expiring_profile() {     // SERVER     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params...", fillcolor=white, style="filled"]
  }
  subgraph cluster_84 {
    label = "receipt_flow.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_api()." [label="test_api", tooltip="fn test_api() {     let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN];     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOM...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." [label="test_request_response", tooltip="fn test_request_response() {     let mut sho = Sho::new(b' Test_Receipt_Credential_Request' , b' ' );      // client receives in response to initial request     let receipt_expiration_time: Timestamp ...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]credential_core()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ServerCertificate_New()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]monitor()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_permutations_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore2<'_>`]restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_secret()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." -> "rust-analyzer cargo poksho 0.7.0 sign/sign()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore2<'_>`]restore()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[KeyPair]calculate_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_monitor()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 input_hash_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_lizard()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 test_lizard()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode()." [color=blue]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_returns_data_not_requested()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 benches()." -> "rust-analyzer cargo libsignal-core 0.1.0 signatures()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo usernames 0.1.0 benches()." -> "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]finalize_public_attrs()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]finalize_public_attrs()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_send_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ProfileKey_GetCommitment()." -> "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 input_hash_pt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/decompress/step_1()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Backup]prepare()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/gift_badge()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Restore]restore()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." -> "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[KeyPair]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=gray, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 attributes/derive_impl()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SealedSender_DecryptMessage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]finalize_public_attrs()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 sign/sign()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_secret()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username_hash()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_tree_head_signature()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier<ed25519::Signature>`]verify()." [color=blue]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_deleted_account()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_1()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_1()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [color=blue]
  "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]finalize_public_attrs()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPrivateKey_Sign()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_EncryptMessage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]finalize_public_attrs()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_1()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_2()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore2<'_>`]restore()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`]decompress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [color=blue]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_empty_if_disabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendFullToken_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=blue]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]monitor()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_monitor()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto>`]decompress()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`]decompress()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_Validate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 input_hash_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/distinguished_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 credentials/tests/test_system()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [color=blue]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=blue]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ExpiringProfileKeyCredential>`]create_blinded_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]credential_core()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_DecryptMessage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_New()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPublicKey_Verify()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit<Scrambler>`]accept()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_tree_head_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]finalize_public_attrs()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." -> "rust-analyzer cargo poksho 0.7.0 sign/sign()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." -> "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]finalize_public_attrs()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt()." [color=gray, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/decompress/step_1()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/try_and_increment_terminates()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 auth_pt()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 input_hash_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_unsuccessful_requests()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]reduce()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_New()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_zero()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Search()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]finalize_public_attrs()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 benches()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_HashFromParts()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]finalize_public_attrs()." -> "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username_proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 auth_secret()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier<ed25519::Signature>`]verify()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<ReceiptCredential>`]create_blinded_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair<S>`]credential_core()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 constants/test/generate_points()." -> "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_monitor()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_monitor()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator()." [color=blue]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]is_negative()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Hash()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 env/impl#[PublicConfig][`From<KeyTransConfig>`]from()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-net 0.1.0 env/impl#[PublicConfig][`From<KeyTransConfig>`]from()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_secret()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key()." [color=blue, style=dashed]
}
