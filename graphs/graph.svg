<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: call_graph Pages: 1 -->
<svg width="1340pt" height="5233pt"
 viewBox="0.00 0.00 1340.00 5233.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 5229)">
<title>call_graph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-5229 1336,-5229 1336,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="8,-4897 8,-5026 331,-5026 331,-4897 8,-4897"/>
<text text-anchor="middle" x="169.5" y="-5010.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/sorting_rs/benches</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="175,-8 175,-4889 1324,-4889 1324,-8 175,-8"/>
<text text-anchor="middle" x="749.5" y="-4873.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/sorting_rs/src</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" points="46.5,-5034 46.5,-5217 622.5,-5217 622.5,-5034 46.5,-5034"/>
<text text-anchor="middle" x="334.5" y="-5201.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/sorting_rs/src/bin</text>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 benches(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 benches().</title>
<g id="a_node1"><a xlink:title="criterion_group!(benches, bench); criterion_main!(benches);">
<polygon fill="lightblue" stroke="black" points="119,-4995 44,-4995 44,-4959 119,-4959 119,-4995"/>
<text text-anchor="middle" x="81.5" y="-4973.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().</title>
<g id="a_node2"><a xlink:title="fn bench(c: &amp;mut Criterion) &#160;{ &#160;&#160;&#160;&#160;let sizes: Vec&lt;usize&gt; = vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2, 5, 8, 10, 16, 100, 128, 500, 512, 1000, 1024, 2000, 2048, 8000, 8192, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10_000, 16_000, 16_384, 32_000, 32_768, 50_000...">
<polygon fill="lightblue" stroke="black" points="323,-4941 264,-4941 264,-4905 323,-4905 323,-4941"/>
<text text-anchor="middle" x="293.5" y="-4919.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 benches().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bench(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 benches().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bench().</title>
<path fill="none" stroke="gray" d="M119.08,-4967.59C156.83,-4957.89 215.5,-4942.8 253.96,-4932.91"/>
<polygon fill="gray" stroke="gray" points="254.94,-4936.27 263.75,-4930.39 253.2,-4929.49 254.94,-4936.27"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<g id="a_node13"><a xlink:title="pub fn gnome_up_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let mut i = 1; &#160;&#160;&#160;&#160;let mut j = 2; &#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;&#160;while i &lt; in_len { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if input[i...">
<polygon fill="lightblue" stroke="black" points="603,-4196 480,-4196 480,-4160 603,-4160 603,-4196"/>
<text text-anchor="middle" x="541.5" y="-4174.3" font-family="Helvetica,sans-Serif" font-size="14.00">gnome_up_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<path fill="none" stroke="gray" d="M323.23,-4923.78C348.72,-4922.76 384.82,-4916.78 404,-4893 496.37,-4778.51 361.1,-4356.16 440,-4232 448.37,-4218.84 461.09,-4208.66 474.71,-4200.88"/>
<polygon fill="gray" stroke="gray" points="476.54,-4203.87 483.75,-4196.11 473.27,-4197.68 476.54,-4203.87"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<g id="a_node14"><a xlink:title="pub fn shell_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let len = input.len(); &#160;&#160;&#160;&#160;let gaps = GapSequence::new(len); &#160;&#160;&#160;&#160;&#160;for gap in gaps { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in gap....">
<polygon fill="lightblue" stroke="black" points="583,-4331 500,-4331 500,-4295 583,-4295 583,-4331"/>
<text text-anchor="middle" x="541.5" y="-4309.3" font-family="Helvetica,sans-Serif" font-size="14.00">shell_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<path fill="none" stroke="gray" d="M323.07,-4923.65C348.45,-4922.54 384.47,-4916.5 404,-4893 465.43,-4819.08 408.1,-4552.66 440,-4462 456.87,-4414.05 492.97,-4366.78 516.99,-4338.75"/>
<polygon fill="gray" stroke="gray" points="519.79,-4340.87 523.72,-4331.03 514.52,-4336.27 519.79,-4340.87"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<g id="a_node20"><a xlink:title="pub fn oddeven_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sorted = false; &#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;while !sorted { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sorted = true; &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="596.5,-3859 486.5,-3859 486.5,-3823 596.5,-3823 596.5,-3859"/>
<text text-anchor="middle" x="541.5" y="-3837.3" font-family="Helvetica,sans-Serif" font-size="14.00">oddeven_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<path fill="none" stroke="gray" d="M323.31,-4923.85C348.86,-4922.87 385,-4916.92 404,-4893 467.43,-4813.16 406.03,-4072.14 440,-3976 455.26,-3932.81 489.52,-3891.88 513.79,-3866.65"/>
<polygon fill="gray" stroke="gray" points="516.46,-3868.93 520.97,-3859.34 511.46,-3864.02 516.46,-3868.93"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<g id="a_node25"><a xlink:title="pub fn nheap_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let children = 3; &#160;&#160;&#160;&#160;for i in (0..=input.len()).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sift(input, children, i, input.len() &#45;...">
<polygon fill="lightblue" stroke="black" points="588.5,-3184 494.5,-3184 494.5,-3148 588.5,-3148 588.5,-3184"/>
<text text-anchor="middle" x="541.5" y="-3162.3" font-family="Helvetica,sans-Serif" font-size="14.00">nheap_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M323.4,-4923.92C349.02,-4923 385.19,-4917.08 404,-4893 457.54,-4824.47 415.2,-3411.36 440,-3328 455.7,-3275.22 493.43,-3222.63 517.94,-3192.27"/>
<polygon fill="gray" stroke="gray" points="520.83,-3194.26 524.47,-3184.31 515.42,-3189.82 520.83,-3194.26"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<g id="a_node26"><a xlink:title="pub fn quick_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &gt; 1 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pivot = lomuto_partition(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut input[..pivot]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut input[pivot ...">
<polygon fill="lightblue" stroke="black" points="585.5,-4669 497.5,-4669 497.5,-4633 585.5,-4633 585.5,-4669"/>
<text text-anchor="middle" x="541.5" y="-4647.3" font-family="Helvetica,sans-Serif" font-size="14.00">quick_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<path fill="none" stroke="gray" d="M323.25,-4922.35C347.7,-4920.29 382.22,-4913.57 404,-4893 440.48,-4858.55 416.73,-4830.45 440,-4786 461.4,-4745.12 494.64,-4703.31 516.97,-4677.27"/>
<polygon fill="gray" stroke="gray" points="519.89,-4679.23 523.81,-4669.39 514.61,-4674.65 519.89,-4679.23"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<g id="a_node29"><a xlink:title="pub fn merge_bottom_up_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;let mut width = 1; &#160;&#160;&#160;&#160;&#160;let mut tmp = input.to_vec(); &#160;&#160;&#160;&#160;let len = input.len(); &#160;&#160;&#160;&#160;&#160;while width &lt; len { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut i = ...">
<polygon fill="lightblue" stroke="black" points="629.5,-4831 453.5,-4831 453.5,-4795 629.5,-4795 629.5,-4831"/>
<text text-anchor="middle" x="541.5" y="-4809.3" font-family="Helvetica,sans-Serif" font-size="14.00">merge_bottom_up_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M323.09,-4917.33C345.59,-4912.36 377.48,-4904.17 404,-4893 440.39,-4877.67 478.95,-4854.33 505.77,-4836.81"/>
<polygon fill="gray" stroke="gray" points="507.98,-4839.55 514.4,-4831.11 504.12,-4833.7 507.98,-4839.55"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<g id="a_node45"><a xlink:title="pub fn bubble_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input_len = input.len(); &#160;&#160;&#160;&#160;&#160;for i in (0..input_len).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut has_swapped = false; &#160;...">
<polygon fill="lightblue" stroke="black" points="590.5,-2995 492.5,-2995 492.5,-2959 590.5,-2959 590.5,-2995"/>
<text text-anchor="middle" x="541.5" y="-2973.3" font-family="Helvetica,sans-Serif" font-size="14.00">bubble_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<path fill="none" stroke="gray" d="M323.41,-4923.93C349.04,-4923.01 385.22,-4917.1 404,-4893 463.91,-4816.12 412.33,-3232.45 440,-3139 455.63,-3086.21 493.39,-3033.62 517.91,-3003.26"/>
<polygon fill="gray" stroke="gray" points="520.8,-3005.25 524.45,-2995.3 515.4,-3000.81 520.8,-3005.25"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<g id="a_node56"><a xlink:title="pub fn gnome_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut i = 0; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while i &lt; input.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if i == 0 || input[i &#45; 1] &lt; input[i] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="590.5,-133 492.5,-133 492.5,-97 590.5,-97 590.5,-133"/>
<text text-anchor="middle" x="541.5" y="-111.3" font-family="Helvetica,sans-Serif" font-size="14.00">gnome_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<path fill="none" stroke="gray" d="M323.49,-4923.98C349.16,-4923.11 385.38,-4917.22 404,-4893 482.63,-4790.76 398.96,-372.27 440,-250 454.58,-206.57 488.99,-165.7 513.48,-140.55"/>
<polygon fill="gray" stroke="gray" points="516.16,-142.82 520.73,-133.26 511.2,-137.88 516.16,-142.82"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<g id="a_node62"><a xlink:title="pub fn heap_bottom_up_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;for start in (0..=(in_len &#45; 2) / 2).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hbu_sift(input...">
<polygon fill="lightblue" stroke="black" points="624.5,-4021 458.5,-4021 458.5,-3985 624.5,-3985 624.5,-4021"/>
<text text-anchor="middle" x="541.5" y="-3999.3" font-family="Helvetica,sans-Serif" font-size="14.00">heap_bottom_up_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M323.26,-4923.81C348.78,-4922.8 384.89,-4916.83 404,-4893 455.64,-4828.61 413.84,-4229.29 440,-4151 455.95,-4103.28 491.96,-4056.68 516.25,-4028.9"/>
<polygon fill="gray" stroke="gray" points="519.04,-4031.04 523.08,-4021.24 513.81,-4026.38 519.04,-4031.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<g id="a_node66"><a xlink:title="pub fn insertion_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 1..input.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut j = i; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while j &gt; 0 &amp;&amp; input[j &#45; 1] &gt; input[j] { &#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="597,-2455 486,-2455 486,-2419 597,-2419 597,-2455"/>
<text text-anchor="middle" x="541.5" y="-2433.3" font-family="Helvetica,sans-Serif" font-size="14.00">insertion_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<path fill="none" stroke="gray" d="M323.44,-4923.95C349.09,-4923.05 385.28,-4917.14 404,-4893 443.05,-4842.64 422.05,-2660.15 440,-2599 455.51,-2546.17 493.3,-2493.59 517.87,-2463.25"/>
<polygon fill="gray" stroke="gray" points="520.76,-2465.24 524.41,-2455.29 515.36,-2460.79 520.76,-2465.24"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<g id="a_node80"><a xlink:title="pub fn cycle_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;for index in 0..in_len { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut key = input[index]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="584.5,-619 498.5,-619 498.5,-583 584.5,-583 584.5,-619"/>
<text text-anchor="middle" x="541.5" y="-597.3" font-family="Helvetica,sans-Serif" font-size="14.00">cycle_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<path fill="none" stroke="gray" d="M323.48,-4923.98C349.15,-4923.1 385.36,-4917.21 404,-4893 474.44,-4801.49 403.2,-845.46 440,-736 454.6,-692.58 489.01,-651.71 513.49,-626.55"/>
<polygon fill="gray" stroke="gray" points="516.17,-628.82 520.74,-619.26 511.2,-623.89 516.17,-628.82"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<g id="a_node81"><a xlink:title="pub fn cocktail_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let mut index_st = 0; &#160;&#160;&#160;&#160;let mut index_end = input.len() &#45; 1; &#160;&#160;&#160;&#160;&#160;while index_st &lt; index_end { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightblue" stroke="black" points="593,-1159 490,-1159 490,-1123 593,-1123 593,-1159"/>
<text text-anchor="middle" x="541.5" y="-1137.3" font-family="Helvetica,sans-Serif" font-size="14.00">cocktail_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<path fill="none" stroke="gray" d="M323.47,-4923.97C349.14,-4923.09 385.35,-4917.2 404,-4893 463.97,-4815.21 418.29,-1452.8 440,-1357 456.42,-1284.55 499.26,-1207.44 523.38,-1167.87"/>
<polygon fill="gray" stroke="gray" points="526.52,-1169.45 528.79,-1159.1 520.56,-1165.77 526.52,-1169.45"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<g id="a_node86"><a xlink:title="pub fn selection_double_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let mut left = 0; &#160;&#160;&#160;&#160;let mut right = input.len() &#45; 1; &#160;&#160;&#160;&#160;let mut min = left; &#160;&#160;&#160;&#160;let mut max = l...">
<polygon fill="lightblue" stroke="black" points="624.5,-4507 458.5,-4507 458.5,-4471 624.5,-4471 624.5,-4507"/>
<text text-anchor="middle" x="541.5" y="-4485.3" font-family="Helvetica,sans-Serif" font-size="14.00">selection_double_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<path fill="none" stroke="gray" d="M323.28,-4923.39C348.46,-4922.07 384.03,-4915.86 404,-4893 483.37,-4802.17 394.53,-4735.72 440,-4624 457.37,-4581.32 491.47,-4540 515.1,-4514.56"/>
<polygon fill="gray" stroke="gray" points="517.74,-4516.86 522.07,-4507.19 512.66,-4512.05 517.74,-4516.86"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<g id="a_node89"><a xlink:title="pub fn bingo_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;&#160;let minmax = get_min_max(input); &#160;&#160;&#160;&#160;let min = minmax[0]; &#160;&#160;&#160;&#160;let max =...">
<polygon fill="lightblue" stroke="black" points="586,-3373 497,-3373 497,-3337 586,-3337 586,-3373"/>
<text text-anchor="middle" x="541.5" y="-3351.3" font-family="Helvetica,sans-Serif" font-size="14.00">bingo_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<path fill="none" stroke="gray" d="M323.39,-4923.91C348.99,-4922.98 385.16,-4917.05 404,-4893 452.08,-4831.62 414.53,-3563.69 440,-3490 454.97,-3446.7 489.29,-3405.8 513.66,-3380.61"/>
<polygon fill="gray" stroke="gray" points="516.33,-3382.88 520.86,-3373.3 511.35,-3377.96 516.33,-3382.88"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<g id="a_node97"><a xlink:title="pub fn pancake_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let in_len = input.len() &#45; 1; &#160;&#160;&#160;&#160;for item in (0..in_len + 1).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let cut = largest_panc...">
<polygon fill="lightblue" stroke="black" points="595.5,-781 487.5,-781 487.5,-745 595.5,-745 595.5,-781"/>
<text text-anchor="middle" x="541.5" y="-759.3" font-family="Helvetica,sans-Serif" font-size="14.00">pancake_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<path fill="none" stroke="gray" d="M323.48,-4923.98C349.15,-4923.1 385.36,-4917.21 404,-4893 471.25,-4805.67 409.31,-1030.87 440,-925 455.33,-872.12 493.18,-819.55 517.8,-789.23"/>
<polygon fill="gray" stroke="gray" points="520.7,-791.22 524.37,-781.28 515.3,-786.76 520.7,-791.22"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<g id="a_node114"><a xlink:title="pub fn selection_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;for i in 0..input.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let swap_val = { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut min = &amp;input[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let m...">
<polygon fill="lightblue" stroke="black" points="597.5,-295 485.5,-295 485.5,-259 597.5,-259 597.5,-295"/>
<text text-anchor="middle" x="541.5" y="-273.3" font-family="Helvetica,sans-Serif" font-size="14.00">selection_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<path fill="none" stroke="gray" d="M323.49,-4923.98C349.16,-4923.11 385.37,-4917.22 404,-4893 480.35,-4793.74 393.7,-501.35 440,-385 453.55,-350.94 483.37,-321.21 507.02,-301.61"/>
<polygon fill="gray" stroke="gray" points="509.5,-304.11 515.09,-295.11 505.11,-298.65 509.5,-304.11"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<g id="a_node115"><a xlink:title="pub fn quick_dual_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;dual_pivot(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="604,-2239 479,-2239 479,-2203 604,-2203 604,-2239"/>
<text text-anchor="middle" x="541.5" y="-2217.3" font-family="Helvetica,sans-Serif" font-size="14.00">quick_dual_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M323.45,-4923.96C349.1,-4923.06 385.29,-4917.16 404,-4893 446.23,-4838.46 422.83,-2476.81 440,-2410 456.12,-2347.29 496.85,-2282.39 521.23,-2247.33"/>
<polygon fill="gray" stroke="gray" points="524.14,-2249.27 527.04,-2239.08 518.42,-2245.24 524.14,-2249.27"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<g id="a_node117"><a xlink:title="pub fn smooth_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) { &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Init addtitional index heap &#160;&#160;&#160;&#160;let input = input; &#160;&#160;&#160;&#160;let in_len = input.len(); &#160;&#160;&#160;&#160;let mut heap = Ve...">
<polygon fill="lightblue" stroke="black" points="592.5,-1672 490.5,-1672 490.5,-1636 592.5,-1636 592.5,-1672"/>
<text text-anchor="middle" x="541.5" y="-1650.3" font-family="Helvetica,sans-Serif" font-size="14.00">smooth_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M323.46,-4923.97C349.13,-4923.08 385.33,-4917.18 404,-4893 456.7,-4824.75 412.4,-1870.69 440,-1789 454.66,-1745.6 489.06,-1704.72 513.52,-1679.56"/>
<polygon fill="gray" stroke="gray" points="516.2,-1681.83 520.76,-1672.27 511.23,-1676.9 516.2,-1681.83"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<g id="a_node119"><a xlink:title="pub fn heap_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;for i in (0..input.len() / 2).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_max(input, i, input.len()); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;for i in (0..input.l...">
<polygon fill="lightblue" stroke="black" points="584,-2833 499,-2833 499,-2797 584,-2797 584,-2833"/>
<text text-anchor="middle" x="541.5" y="-2811.3" font-family="Helvetica,sans-Serif" font-size="14.00">heap_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<path fill="none" stroke="gray" d="M323.43,-4923.94C349.06,-4923.03 385.24,-4917.12 404,-4893 470.28,-4807.77 405.09,-3052.16 440,-2950 454.81,-2906.65 489.17,-2865.76 513.59,-2840.58"/>
<polygon fill="gray" stroke="gray" points="516.26,-2842.85 520.81,-2833.29 511.29,-2837.93 516.26,-2842.85"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<g id="a_node123"><a xlink:title="pub fn weak_heap_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;let n = input.len(); &#160;&#160;&#160;&#160;&#160;if n &lt; 2 {return;} &#160;&#160;&#160;&#160;else { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut r = vec![0; (n + 7) / 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in (1..n).rev() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="605.5,-2644 477.5,-2644 477.5,-2608 605.5,-2608 605.5,-2644"/>
<text text-anchor="middle" x="541.5" y="-2622.3" font-family="Helvetica,sans-Serif" font-size="14.00">weak_heap_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M323.43,-4923.94C349.07,-4923.04 385.26,-4917.13 404,-4893 475.73,-4800.62 406.98,-2900.2 440,-2788 455.54,-2735.18 493.33,-2682.6 517.88,-2652.25"/>
<polygon fill="gray" stroke="gray" points="520.77,-2654.24 524.42,-2644.3 515.37,-2649.79 520.77,-2654.24"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<g id="a_node131"><a xlink:title="pub fn merge_sort&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let len = input.len(); &#160;&#160;&#160;&#160;let mid = len / 2; &#160;&#160;&#160;&#160;merge_sort(&amp;mut input[..mid]); &#160;&#160;&#160;&#160;merge_sort(&amp;m...">
<polygon fill="lightblue" stroke="black" points="589,-3535 494,-3535 494,-3499 589,-3499 589,-3535"/>
<text text-anchor="middle" x="541.5" y="-3513.3" font-family="Helvetica,sans-Serif" font-size="14.00">merge_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<path fill="none" stroke="gray" d="M323.37,-4923.89C348.96,-4922.95 385.12,-4917.02 404,-4893 446.63,-4838.77 417.36,-3717.15 440,-3652 455.04,-3608.73 489.35,-3567.82 513.69,-3542.62"/>
<polygon fill="gray" stroke="gray" points="516.36,-3544.89 520.89,-3535.31 511.38,-3539.98 516.36,-3544.89"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<g id="a_node132"><a xlink:title="pub fn comb_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;let len = input.len(); &#160;&#160;&#160;&#160;let inv_shrink: f32 = 1.0 / 1.3; &#160;&#160;&#160;&#160;&#160;let mut gap = len; &#160;&#160;&#160;&#160;let mut sorted = len &lt;...">
<polygon fill="lightblue" stroke="black" points="586,-3697 497,-3697 497,-3661 586,-3661 586,-3697"/>
<text text-anchor="middle" x="541.5" y="-3675.3" font-family="Helvetica,sans-Serif" font-size="14.00">comb_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<path fill="none" stroke="gray" d="M323.34,-4923.87C348.92,-4922.92 385.07,-4916.98 404,-4893 478.34,-4798.85 400.38,-3927.22 440,-3814 455.13,-3770.76 489.42,-3729.85 513.73,-3704.63"/>
<polygon fill="gray" stroke="gray" points="516.4,-3706.91 520.92,-3697.32 511.41,-3702 516.4,-3706.91"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<g id="a_node139"><a xlink:title="pub fn bitonic_sort&lt;T: PartialOrd + Default + Clone&gt;(input: &amp;mut Vec&lt;T&gt;) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;else if input.len() &gt; 9223372036854775808 {panic!(&#39; Array is too big&#39; )} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let i...">
<polygon fill="lightblue" stroke="black" points="590,-1402 493,-1402 493,-1366 590,-1366 590,-1402"/>
<text text-anchor="middle" x="541.5" y="-1380.3" font-family="Helvetica,sans-Serif" font-size="14.00">bitonic_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M323.47,-4923.97C349.13,-4923.08 385.34,-4917.19 404,-4893 459.43,-4821.17 421.83,-1715.89 440,-1627 456.86,-1544.49 501.6,-1454.72 525.29,-1410.99"/>
<polygon fill="gray" stroke="gray" points="528.41,-1412.58 530.15,-1402.13 522.27,-1409.22 528.41,-1412.58"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<g id="a_node141"><a xlink:title="pub fn ksort&lt;T: PartialOrd + Clone + Copy&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;ksort_lr(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="568.5,-970 514.5,-970 514.5,-934 568.5,-934 568.5,-970"/>
<text text-anchor="middle" x="541.5" y="-948.3" font-family="Helvetica,sans-Serif" font-size="14.00">ksort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bench().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M323.48,-4923.98C349.15,-4923.09 385.35,-4917.2 404,-4893 468.07,-4809.84 410.75,-1214.82 440,-1114 455.34,-1061.12 493.19,-1008.56 517.81,-978.23"/>
<polygon fill="gray" stroke="gray" points="520.7,-980.22 524.37,-970.28 515.3,-975.76 520.7,-980.22"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 get_random_vec(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 get_random_vec().</title>
<g id="a_node3"><a xlink:title="fn get_random_vec(n: usize) &#45;&gt; Vec&lt;usize&gt; &#160;{ &#160;&#160;&#160;&#160;let mut rng: StdRng = StdRng::seed_from_u64(42); &#160;&#160;&#160;&#160;let mut vec: Vec&lt;usize&gt; = (0..n).collect(); &#160;&#160;&#160;&#160;vec.shuffle(&amp;mut rng); &#160;&#160;&#160;&#160;vec }">
<polygon fill="lightblue" stroke="black" points="147,-4941 16,-4941 16,-4905 147,-4905 147,-4941"/>
<text text-anchor="middle" x="81.5" y="-4919.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_random_vec</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;fn test_merge_bu() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![24, 20, 11, 13, 10]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 13, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="353,-4750 234,-4750 234,-4714 353,-4714 353,-4750"/>
<text text-anchor="middle" x="293.5" y="-4728.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_bu</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M353.16,-4744.92C369.72,-4748.98 387.68,-4753.79 404,-4759 432.84,-4768.22 464.32,-4780.51 489.77,-4791.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-4794.36 499.21,-4794.98 491.33,-4787.9 488.63,-4794.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn test_heap() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="335.5,-3238 251.5,-3238 251.5,-3202 335.5,-3202 335.5,-3238"/>
<text text-anchor="middle" x="293.5" y="-3216.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M335.67,-3210.96C376.37,-3202.03 438.92,-3188.3 484.2,-3178.36"/>
<polygon fill="gray" stroke="gray" points="485.14,-3181.74 494.16,-3176.17 483.64,-3174.9 485.14,-3181.74"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_empty(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_empty().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_up_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="380,-4102 207,-4102 207,-4066 380,-4066 380,-4102"/>
<text text-anchor="middle" x="293.5" y="-4080.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_up_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<path fill="none" stroke="gray" d="M376.11,-4102.06C385.6,-4104.77 395.08,-4107.75 404,-4111 437.18,-4123.07 472.94,-4140.82 499.53,-4155.01"/>
<polygon fill="gray" stroke="gray" points="498.08,-4158.2 508.54,-4159.87 501.4,-4152.04 498.08,-4158.2"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift().</title>
<g id="a_node7"><a xlink:title="fn hbu_sift&lt;T: PartialOrd&gt;(input: &amp;mut [T], start: usize, end: usize) &#160;{ &#160;&#160;&#160;&#160;let mut current = hbu_leaf_search(input, start, end); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while input[start] &gt; input[current] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current = (cur...">
<polygon fill="lightblue" stroke="black" points="827,-4021 756,-4021 756,-3985 827,-3985 827,-4021"/>
<text text-anchor="middle" x="791.5" y="-3999.3" font-family="Helvetica,sans-Serif" font-size="14.00">hbu_sift</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_leaf_search(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_leaf_search().</title>
<g id="a_node70"><a xlink:title="&#45;&gt; usize &#160;fn hbu_leaf_search&lt;T: PartialOrd&gt;(input: &amp;mut [T], start: usize, end: usize) { &#160;&#160;&#160;&#160;let mut current = start; &#160;&#160;&#160;&#160;&#160;loop { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let child = current * 2 + 1; // Left leaf &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (child +...">
<polygon fill="lightblue" stroke="black" points="1098,-4021 970,-4021 970,-3985 1098,-3985 1098,-4021"/>
<text text-anchor="middle" x="1034" y="-3999.3" font-family="Helvetica,sans-Serif" font-size="14.00">hbu_leaf_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_leaf_search(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_leaf_search().</title>
<path fill="none" stroke="gray" d="M827.21,-4003C861.73,-4003 915.74,-4003 959.76,-4003"/>
<polygon fill="gray" stroke="gray" points="959.86,-4006.5 969.86,-4003 959.86,-3999.5 959.86,-4006.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn test_slow() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;slow_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="333.5,-1780 253.5,-1780 253.5,-1744 333.5,-1744 333.5,-1780"/>
<text text-anchor="middle" x="293.5" y="-1758.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().</title>
<g id="a_node87"><a xlink:title="pub fn slow_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;slow_sort_sorting(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="582,-1834 501,-1834 501,-1798 582,-1798 582,-1834"/>
<text text-anchor="middle" x="541.5" y="-1812.3" font-family="Helvetica,sans-Serif" font-size="14.00">slow_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().</title>
<path fill="none" stroke="gray" d="M333.75,-1770.62C376.47,-1779.99 444.84,-1795 491.16,-1805.17"/>
<polygon fill="gray" stroke="gray" points="490.46,-1808.6 500.98,-1807.33 491.96,-1801.76 490.46,-1808.6"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_empty(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_empty().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn test_selection_double_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_double_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="401.5,-4426 185.5,-4426 185.5,-4390 401.5,-4390 401.5,-4426"/>
<text text-anchor="middle" x="293.5" y="-4404.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_double_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-4426.05C383.63,-4428.83 394.11,-4431.84 404,-4435 432.84,-4444.22 464.32,-4456.51 489.77,-4467.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-4470.36 499.21,-4470.98 491.33,-4463.9 488.63,-4470.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().</title>
<g id="a_node10"><a xlink:title="pub fn oddeven_batcher_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort_ranges(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="626.5,-430 456.5,-430 456.5,-394 626.5,-394 626.5,-430"/>
<text text-anchor="middle" x="541.5" y="-408.3" font-family="Helvetica,sans-Serif" font-size="14.00">oddeven_batcher_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges().</title>
<g id="a_node122"><a xlink:title="end:usize) &#160;fn oddeven_batcher_sort_ranges&lt;T: PartialOrd&gt;(input: &amp;mut [T], start:usize, { &#160;&#160;&#160;&#160;if end &gt;= start { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mid = start + (end &#45; start) / 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort_ranges(input, ...">
<polygon fill="lightblue" stroke="black" points="904,-430 679,-430 679,-394 904,-394 904,-430"/>
<text text-anchor="middle" x="791.5" y="-408.3" font-family="Helvetica,sans-Serif" font-size="14.00">oddeven_batcher_sort_ranges</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges().</title>
<path fill="none" stroke="gray" d="M626.81,-412C640.25,-412 654.4,-412 668.5,-412"/>
<polygon fill="gray" stroke="gray" points="668.76,-415.5 678.76,-412 668.76,-408.5 668.76,-415.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_correct_gap_sequence(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_correct_gap_sequence().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn test_correct_gap_sequence() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gaps: Vec&lt;_&gt; = GapSequence::new(10).collect(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(gaps, &amp;[5, 2, 1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="643,-4277 440,-4277 440,-4241 643,-4241 643,-4277"/>
<text text-anchor="middle" x="541.5" y="-4255.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_correct_gap_sequence</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;fn new(n: usize) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { gap: n } &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="818.5,-4304 764.5,-4304 764.5,-4268 818.5,-4268 818.5,-4304"/>
<text text-anchor="middle" x="791.5" y="-4282.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_correct_gap_sequence().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_correct_gap_sequence().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new().</title>
<path fill="none" stroke="gray" d="M643.01,-4269.94C682.36,-4274.23 724.97,-4278.87 754.23,-4282.05"/>
<polygon fill="gray" stroke="gray" points="754.05,-4285.55 764.37,-4283.16 754.81,-4278.59 754.05,-4285.55"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_empty(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_empty().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;fn test_heap_bottom_up_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="401.5,-3940 185.5,-3940 185.5,-3904 401.5,-3904 401.5,-3940"/>
<text text-anchor="middle" x="293.5" y="-3918.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_bottom_up_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-3940.05C383.63,-3942.83 394.11,-3945.84 404,-3949 432.84,-3958.22 464.32,-3970.51 489.77,-3981.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3984.36 499.21,-3984.98 491.33,-3977.9 488.63,-3984.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/impl#[GapSequence]new().</title>
<path fill="none" stroke="gray" d="M583.17,-4308.57C630.73,-4303.39 708.71,-4294.9 754.26,-4289.95"/>
<polygon fill="gray" stroke="gray" points="754.73,-4293.42 764.29,-4288.85 753.97,-4286.46 754.73,-4293.42"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_empty(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_empty().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn test_quick_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="362.5,-4588 224.5,-4588 224.5,-4552 362.5,-4552 362.5,-4588"/>
<text text-anchor="middle" x="293.5" y="-4566.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<path fill="none" stroke="gray" d="M362.66,-4585.29C376.44,-4588.81 390.76,-4592.77 404,-4597 432.84,-4606.22 464.32,-4618.51 489.77,-4629.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-4632.36 499.21,-4632.98 491.33,-4625.9 488.63,-4632.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/flip(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/flip().</title>
<g id="a_node16"><a xlink:title="fn flip&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T], index: usize) &#160;{ &#160;&#160;&#160;&#160;input[..=index].reverse(); }">
<polygon fill="lightblue" stroke="black" points="818.5,-808 764.5,-808 764.5,-772 818.5,-772 818.5,-808"/>
<text text-anchor="middle" x="791.5" y="-786.3" font-family="Helvetica,sans-Serif" font-size="14.00">flip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_empty(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_empty().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn test_comb_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comb_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="363,-3616 224,-3616 224,-3580 363,-3580 363,-3616"/>
<text text-anchor="middle" x="293.5" y="-3594.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_comb_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<path fill="none" stroke="gray" d="M363.24,-3613.44C376.84,-3616.92 390.94,-3620.83 404,-3625 432.84,-3634.22 464.32,-3646.51 489.77,-3657.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3660.36 499.21,-3660.98 491.33,-3653.9 488.63,-3660.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_empty(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_empty().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn test_merge_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="366,-3454 221,-3454 221,-3418 366,-3418 366,-3454"/>
<text text-anchor="middle" x="293.5" y="-3432.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<path fill="none" stroke="gray" d="M366.16,-3452.19C378.85,-3455.48 391.88,-3459.13 404,-3463 432.84,-3472.22 464.32,-3484.51 489.77,-3495.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3498.36 499.21,-3498.98 491.33,-3491.9 488.63,-3498.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_len1(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_len1().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn test_quick_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="355.5,-4696 231.5,-4696 231.5,-4660 355.5,-4660 355.5,-4696"/>
<text text-anchor="middle" x="293.5" y="-4674.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<path fill="none" stroke="gray" d="M355.63,-4671.29C396.12,-4666.85 448.71,-4661.07 487.44,-4656.82"/>
<polygon fill="gray" stroke="gray" points="487.92,-4660.29 497.48,-4655.72 487.15,-4653.33 487.92,-4660.29"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/compare_and_swap(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/compare_and_swap().</title>
<g id="a_node21"><a xlink:title="fn compare_and_swap&lt;T: PartialOrd&gt;(input: &amp;mut [T], mode: bool) &#160;{ &#160;&#160;&#160;&#160;let mid_point = input.len() / 2; &#160;&#160;&#160;&#160;for i in 0..mid_point { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (input[i] &gt; input[mid_point + i]) == mode { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i...">
<polygon fill="lightblue" stroke="black" points="1316,-1402 1164,-1402 1164,-1366 1316,-1366 1316,-1402"/>
<text text-anchor="middle" x="1240" y="-1380.3" font-family="Helvetica,sans-Serif" font-size="14.00">compare_and_swap</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/get_flag(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/get_flag().</title>
<g id="a_node22"><a xlink:title="fn get_flag(r: &amp;Vec&lt;usize&gt;, x: usize) &#45;&gt; usize &#160;{ &#160;&#160;&#160;&#160;(r[x &gt;&gt; 3] &gt;&gt; (x &amp; 7)) &amp; 1 }">
<polygon fill="lightblue" stroke="black" points="827.5,-2617 755.5,-2617 755.5,-2581 827.5,-2581 827.5,-2617"/>
<text text-anchor="middle" x="791.5" y="-2595.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_flag</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;fn test_shell() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![11, 20, 21, 40, 11, 60, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;shell_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![5, 11, 11, 20, 21, 40, 60]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="334.5,-4264 252.5,-4264 252.5,-4228 334.5,-4228 334.5,-4264"/>
<text text-anchor="middle" x="293.5" y="-4242.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_shell</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<path fill="none" stroke="gray" d="M334.56,-4254.82C355.41,-4259.67 381.23,-4266.1 404,-4273 420.28,-4277.93 423.77,-4280.9 440,-4286 456.13,-4291.07 473.89,-4296.04 489.95,-4300.31"/>
<polygon fill="gray" stroke="gray" points="489.13,-4303.71 499.69,-4302.87 490.91,-4296.94 489.13,-4303.71"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_merge(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_merge().</title>
<g id="a_node24"><a xlink:title="r: usize) &#160;fn oddeven_batcher_merge&lt;T: PartialOrd&gt;(input: &amp;mut [T], start:usize, end:usize, { &#160;&#160;&#160;&#160;let step = r * 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if step &lt; end &#45; start { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_merge(input, start, end, st...">
<polygon fill="lightblue" stroke="black" points="1128,-430 940,-430 940,-394 1128,-394 1128,-430"/>
<text text-anchor="middle" x="1034" y="-408.3" font-family="Helvetica,sans-Serif" font-size="14.00">oddeven_batcher_merge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sift(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sift().</title>
<g id="a_node43"><a xlink:title="end: usize) &#160;fn nheap_sift&lt;T: PartialOrd&gt;(input: &amp;mut [T], children: usize, start: usize, { &#160;&#160;&#160;&#160;let mut root = start; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let child = root * children + 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if child &gt; end {b...">
<polygon fill="lightblue" stroke="black" points="835.5,-3184 747.5,-3184 747.5,-3148 835.5,-3148 835.5,-3184"/>
<text text-anchor="middle" x="791.5" y="-3162.3" font-family="Helvetica,sans-Serif" font-size="14.00">nheap_sift</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sift(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sift().</title>
<path fill="none" stroke="gray" d="M588.57,-3166C630.58,-3166 692.68,-3166 736.9,-3166"/>
<polygon fill="gray" stroke="gray" points="737.17,-3169.5 747.17,-3166 737.17,-3162.5 737.17,-3169.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/lomuto_partition(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/lomuto_partition().</title>
<g id="a_node65"><a xlink:title="fn lomuto_partition&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#45;&gt; usize &#160;{ &#160;&#160;&#160;&#160;let pivot = input.len() &#45; 1; &#160;&#160;&#160;&#160;let mut swap = 0; &#160;&#160;&#160;&#160;for i in 0..pivot { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if input[i] &lt; input[pivot] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if swap ...">
<polygon fill="lightblue" stroke="black" points="856.5,-4669 726.5,-4669 726.5,-4633 856.5,-4633 856.5,-4669"/>
<text text-anchor="middle" x="791.5" y="-4647.3" font-family="Helvetica,sans-Serif" font-size="14.00">lomuto_partition</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/lomuto_partition(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/lomuto_partition().</title>
<path fill="none" stroke="gray" d="M585.7,-4651C621.67,-4651 673.72,-4651 716.34,-4651"/>
<polygon fill="gray" stroke="gray" points="716.39,-4654.5 726.39,-4651 716.39,-4647.5 716.39,-4654.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_empty(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_empty().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="374,-3778 213,-3778 213,-3742 374,-3742 374,-3778"/>
<text text-anchor="middle" x="293.5" y="-3756.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-3778.05C383.63,-3780.83 394.11,-3783.84 404,-3787 432.84,-3796.22 464.32,-3808.51 489.77,-3819.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3822.36 499.21,-3822.98 491.33,-3815.9 488.63,-3822.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_empty(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_empty().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;fn test_shell_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;shell_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="360,-4372 227,-4372 227,-4336 360,-4336 360,-4372"/>
<text text-anchor="middle" x="293.5" y="-4350.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_shell_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<path fill="none" stroke="gray" d="M360.1,-4343.07C400.69,-4336.3 452.03,-4327.74 489.56,-4321.49"/>
<polygon fill="gray" stroke="gray" points="490.46,-4324.89 499.75,-4319.79 489.31,-4317.98 490.46,-4324.89"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge().</title>
<g id="a_node112"><a xlink:title="fn merge&lt;T: PartialOrd + Copy&gt;(in1: &amp;[T], in2: &amp;[T], tmp: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;let mut left = 0; &#160;&#160;&#160;&#160;let mut right = 0; &#160;&#160;&#160;&#160;let mut index = 0; &#160;&#160;&#160;&#160;&#160;while left &lt; in1.len() &amp;&amp; right &lt; in2.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if...">
<polygon fill="lightblue" stroke="black" points="822,-4831 761,-4831 761,-4795 822,-4795 822,-4831"/>
<text text-anchor="middle" x="791.5" y="-4809.3" font-family="Helvetica,sans-Serif" font-size="14.00">merge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge().</title>
<path fill="none" stroke="gray" d="M629.59,-4813C670.89,-4813 718.22,-4813 750.79,-4813"/>
<polygon fill="gray" stroke="gray" points="750.83,-4816.5 760.83,-4813 750.83,-4809.5 750.83,-4816.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_empty(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_empty().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_batcher_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="404,-376 183,-376 183,-340 404,-340 404,-376"/>
<text text-anchor="middle" x="293.5" y="-354.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_batcher_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().</title>
<path fill="none" stroke="gray" d="M376.76,-376.06C399.73,-381.1 424.85,-386.61 448.36,-391.77"/>
<polygon fill="gray" stroke="gray" points="447.8,-395.24 458.32,-393.96 449.3,-388.4 447.8,-395.24"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_len1(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_len1().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;fn test_selection_double_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_double_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="394.5,-4534 192.5,-4534 192.5,-4498 394.5,-4498 394.5,-4534"/>
<text text-anchor="middle" x="293.5" y="-4512.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_double_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<path fill="none" stroke="gray" d="M394.56,-4505.02C412.24,-4503.08 430.57,-4501.07 448.03,-4499.15"/>
<polygon fill="gray" stroke="gray" points="448.64,-4502.6 458.2,-4498.03 447.88,-4495.64 448.64,-4502.6"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_empty(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_empty().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn test_bingo_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bingo_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="363.5,-3292 223.5,-3292 223.5,-3256 363.5,-3256 363.5,-3292"/>
<text text-anchor="middle" x="293.5" y="-3270.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bingo_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<path fill="none" stroke="gray" d="M363.53,-3289.52C377.04,-3292.98 391.04,-3296.86 404,-3301 432.84,-3310.22 464.32,-3322.51 489.77,-3333.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-3336.36 499.21,-3336.98 491.33,-3329.9 488.63,-3336.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_empty(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_empty().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn test_heap_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="361,-3184 226,-3184 226,-3148 361,-3148 361,-3184"/>
<text text-anchor="middle" x="293.5" y="-3162.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M361.07,-3166C399.57,-3166 447.49,-3166 484.12,-3166"/>
<polygon fill="gray" stroke="gray" points="484.13,-3169.5 494.13,-3166 484.13,-3162.5 484.13,-3169.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_buble_len(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_buble_len().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;fn test_buble_len() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bubble_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="351.5,-2914 235.5,-2914 235.5,-2878 351.5,-2878 351.5,-2914"/>
<text text-anchor="middle" x="293.5" y="-2892.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_buble_len</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_buble_len().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_buble_len().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<path fill="none" stroke="gray" d="M351.74,-2908.57C368.7,-2912.71 387.21,-2917.64 404,-2923 432.84,-2932.22 464.32,-2944.51 489.77,-2955.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-2958.36 499.21,-2958.98 491.33,-2951.9 488.63,-2958.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees().</title>
<g id="a_node35"><a xlink:title="fn get_child_trees(i: usize, k: usize) &#45;&gt; [usize; 4] &#160;{ &#160;&#160;&#160;&#160;let tr = i &#45; 1; &#160;&#160;&#160;&#160;let kr = k &#45; 2; &#160;&#160;&#160;&#160;let tl = tr &#45; crate::LEO_NUMS[kr]; &#160;&#160;&#160;&#160;let kl = k &#45; 1; &#160;&#160;&#160;&#160;[tr, kr, tl, kl] }">
<polygon fill="lightblue" stroke="black" points="1094,-1671 974,-1671 974,-1635 1094,-1635 1094,-1671"/>
<text text-anchor="middle" x="1034" y="-1649.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_child_trees</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().</title>
<g id="a_node36"><a xlink:title="pub fn stooge_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T]) &#160;{ &#160;&#160;&#160;&#160;if input.len() &lt; 2 {return;} &#160;&#160;&#160;&#160;&#160;stooge_sort_sorting(input, 0, input.len() &#45; 1); }">
<polygon fill="lightblue" stroke="black" points="590,-1996 493,-1996 493,-1960 590,-1960 590,-1996"/>
<text text-anchor="middle" x="541.5" y="-1974.3" font-family="Helvetica,sans-Serif" font-size="14.00">stooge_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort_sorting(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort_sorting().</title>
<g id="a_node104"><a xlink:title="end: usize) &#160;fn stooge_sort_sorting&lt;T: PartialOrd&gt;(input: &amp;mut [T], start: usize, { &#160;&#160;&#160;&#160;if input[start] &gt; input[end] {input.swap(start, end);} &#160;&#160;&#160;&#160;if start &lt;= end { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (end &#45; start + 1) &gt; 2 { ...">
<polygon fill="lightblue" stroke="black" points="867.5,-1996 715.5,-1996 715.5,-1960 867.5,-1960 867.5,-1996"/>
<text text-anchor="middle" x="791.5" y="-1974.3" font-family="Helvetica,sans-Serif" font-size="14.00">stooge_sort_sorting</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort_sorting(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort_sorting().</title>
<path fill="none" stroke="gray" d="M590.02,-1978C622.56,-1978 666.62,-1978 705.15,-1978"/>
<polygon fill="gray" stroke="gray" points="705.33,-1981.5 715.33,-1978 705.33,-1974.5 705.33,-1981.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_empty(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_empty().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;fn test_smooth_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smooth_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="369.5,-1726 217.5,-1726 217.5,-1690 369.5,-1690 369.5,-1726"/>
<text text-anchor="middle" x="293.5" y="-1704.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_smooth_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M369.64,-1691.5C405.11,-1683.72 446.88,-1674.55 480.23,-1667.23"/>
<polygon fill="gray" stroke="gray" points="481.28,-1670.58 490.3,-1665.02 479.78,-1663.75 481.28,-1670.58"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_len1(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_len1().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;fn test_quick_dual_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="374,-2158 213,-2158 213,-2122 374,-2122 374,-2158"/>
<text text-anchor="middle" x="293.5" y="-2136.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_dual_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-2158.05C383.63,-2160.83 394.11,-2163.84 404,-2167 432.84,-2176.22 464.32,-2188.51 489.77,-2199.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-2202.36 499.21,-2202.98 491.33,-2195.9 488.63,-2202.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_len1(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_len1().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="366.5,-3886 220.5,-3886 220.5,-3850 366.5,-3850 366.5,-3886"/>
<text text-anchor="middle" x="293.5" y="-3864.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<path fill="none" stroke="gray" d="M366.65,-3860.08C401.34,-3856.27 442.58,-3851.75 476.18,-3848.06"/>
<polygon fill="gray" stroke="gray" points="476.79,-3851.51 486.35,-3846.94 476.03,-3844.56 476.79,-3851.51"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_empty(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_empty().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;fn test_heap_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="361,-2752 226,-2752 226,-2716 361,-2716 361,-2752"/>
<text text-anchor="middle" x="293.5" y="-2730.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<path fill="none" stroke="gray" d="M361.2,-2748.92C375.43,-2752.53 390.29,-2756.62 404,-2761 432.84,-2770.22 464.32,-2782.51 489.77,-2793.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-2796.36 499.21,-2796.98 491.33,-2789.9 488.63,-2796.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_len1(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_len1().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn test_comb_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comb_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="356,-3724 231,-3724 231,-3688 356,-3688 356,-3724"/>
<text text-anchor="middle" x="293.5" y="-3702.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_comb_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<path fill="none" stroke="gray" d="M356.26,-3699.22C396.5,-3694.81 448.48,-3689.1 486.96,-3684.88"/>
<polygon fill="gray" stroke="gray" points="487.38,-3688.35 496.94,-3683.78 486.62,-3681.39 487.38,-3688.35"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;fn test_heap_bottom_up() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut array = [10, 20, 11, 24, 22, 21, 19]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_bottom_up_sort(&amp;mut array); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(array, [10, 11, 19, 20, 21, 22, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="376,-4048 211,-4048 211,-4012 376,-4012 376,-4048"/>
<text text-anchor="middle" x="293.5" y="-4026.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_bottom_up</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M376.07,-4021.05C399.2,-4018.51 424.54,-4015.73 448.26,-4013.12"/>
<polygon fill="gray" stroke="gray" points="448.75,-4016.59 458.31,-4012.02 447.99,-4009.63 448.75,-4016.59"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_char(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_char().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_char() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![&#39;r&#39;, &#39;u&#39;, &#39;s&#39;, &#39;t&#39;, &#39;c&#39;]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![&#39;c&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="360.5,-1402 226.5,-1402 226.5,-1366 360.5,-1366 360.5,-1402"/>
<text text-anchor="middle" x="293.5" y="-1380.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_char</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_char().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_char().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M360.75,-1384C398.86,-1384 446.28,-1384 482.85,-1384"/>
<polygon fill="gray" stroke="gray" points="482.86,-1387.5 492.86,-1384 482.86,-1380.5 482.86,-1387.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="348.5,-3832 238.5,-3832 238.5,-3796 348.5,-3796 348.5,-3832"/>
<text text-anchor="middle" x="293.5" y="-3810.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_sort().</title>
<path fill="none" stroke="gray" d="M348.79,-3819.96C386.41,-3824.09 436.65,-3829.6 476.26,-3833.95"/>
<polygon fill="gray" stroke="gray" points="476.03,-3837.44 486.35,-3835.06 476.79,-3830.49 476.03,-3837.44"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_empty(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_empty().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;fn test_insertion_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;insertion_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="374,-2374 213,-2374 213,-2338 374,-2338 374,-2374"/>
<text text-anchor="middle" x="293.5" y="-2352.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_insertion_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<path fill="none" stroke="gray" d="M373.22,-2374.05C383.63,-2376.83 394.11,-2379.84 404,-2383 432.84,-2392.22 464.32,-2404.51 489.77,-2415.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-2418.36 499.21,-2418.98 491.33,-2411.9 488.63,-2418.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_empty(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_empty().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;fn test_merge_bu_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="378.5,-4858 208.5,-4858 208.5,-4822 378.5,-4822 378.5,-4858"/>
<text text-anchor="middle" x="293.5" y="-4836.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_bu_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M378.82,-4830.75C399.59,-4828.47 422,-4826.01 443.32,-4823.67"/>
<polygon fill="gray" stroke="gray" points="443.81,-4827.13 453.36,-4822.56 443.04,-4820.18 443.81,-4827.13"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;fn test_gnome() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="342.5,-52 244.5,-52 244.5,-16 342.5,-16 342.5,-52"/>
<text text-anchor="middle" x="293.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<path fill="none" stroke="gray" d="M342.59,-44.38C361.85,-48.92 384.14,-54.65 404,-61 432.84,-70.22 464.32,-82.51 489.77,-93.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-96.36 499.21,-96.98 491.33,-89.9 488.63,-96.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap().</title>
<g id="a_node50"><a xlink:title="fn restore_heap&lt;T: PartialOrd&gt;(input: &amp;mut [T], index: usize, heap: &amp;Vec&lt;usize&gt;) { &#160;&#160;&#160;&#160;// Insertion sorting &#160;&#160;&#160;&#160;let mut current = heap.len() &#45; 1; &#160;&#160;&#160;&#160;let mut i = index; &#160;&#160;&#160;&#160;let mut k = heap[current]; ...">
<polygon fill="lightblue" stroke="black" points="844.5,-1690 738.5,-1690 738.5,-1654 844.5,-1654 844.5,-1690"/>
<text text-anchor="middle" x="791.5" y="-1668.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore_heap</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees().</title>
<path fill="none" stroke="gray" d="M844.68,-1667.88C879.41,-1665.13 925.43,-1661.5 963.28,-1658.51"/>
<polygon fill="gray" stroke="gray" points="964.03,-1661.96 973.73,-1657.68 963.48,-1654.98 964.03,-1661.96"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;fn test_merge() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 13, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 13, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="340.5,-3562 246.5,-3562 246.5,-3526 340.5,-3526 340.5,-3562"/>
<text text-anchor="middle" x="293.5" y="-3540.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<path fill="none" stroke="gray" d="M340.77,-3538.92C381.23,-3534.48 440.13,-3528.02 483.49,-3523.26"/>
<polygon fill="gray" stroke="gray" points="484.04,-3526.72 493.6,-3522.15 483.28,-3519.76 484.04,-3526.72"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_len1(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_len1().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn test_merge_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="359,-3508 228,-3508 228,-3472 359,-3472 359,-3508"/>
<text text-anchor="middle" x="293.5" y="-3486.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_sort().</title>
<path fill="none" stroke="gray" d="M359.13,-3497.09C397.78,-3501.34 446.43,-3506.68 483.62,-3510.76"/>
<polygon fill="gray" stroke="gray" points="483.46,-3514.26 493.78,-3511.87 484.22,-3507.3 483.46,-3514.26"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge().</title>
<g id="a_node53"><a xlink:title="i: usize, j: usize) &#160;fn weak_heap_merge&lt;T: PartialOrd&gt;(input: &amp;mut [T], r: &amp;mut Vec&lt;usize&gt;, { &#160;&#160;&#160;&#160;if input[i] &lt; input[j] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tog_flag(r, j); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input.swap(i, j); &#160;&#160;&#160;&#160;} }">
<polygon fill="lightblue" stroke="black" points="864,-2671 719,-2671 719,-2635 864,-2635 864,-2671"/>
<text text-anchor="middle" x="791.5" y="-2649.3" font-family="Helvetica,sans-Serif" font-size="14.00">weak_heap_merge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tog_flag(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tog_flag().</title>
<g id="a_node98"><a xlink:title="fn tog_flag(r: &amp;mut Vec&lt;usize&gt;, x: usize) &#160;{ &#160;&#160;&#160;&#160;r[x &gt;&gt; 3] ^= 1 &lt;&lt; (x &amp; 7) }">
<polygon fill="lightblue" stroke="black" points="1070,-2671 998,-2671 998,-2635 1070,-2635 1070,-2671"/>
<text text-anchor="middle" x="1034" y="-2649.3" font-family="Helvetica,sans-Serif" font-size="14.00">tog_flag</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tog_flag(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tog_flag().</title>
<path fill="none" stroke="gray" d="M864.01,-2653C904.04,-2653 952.74,-2653 987.56,-2653"/>
<polygon fill="gray" stroke="gray" points="987.89,-2656.5 997.89,-2653 987.89,-2649.5 987.89,-2656.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_empty(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_empty().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;fn test_weak_heap_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;weak_heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="382.5,-2698 204.5,-2698 204.5,-2662 382.5,-2662 382.5,-2698"/>
<text text-anchor="middle" x="293.5" y="-2676.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_weak_heap_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M376.76,-2661.94C406.12,-2655.5 438.97,-2648.29 467.5,-2642.02"/>
<polygon fill="gray" stroke="gray" points="468.38,-2645.41 477.4,-2639.85 466.88,-2638.58 468.38,-2645.41"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_len1(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_len1().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;fn test_weak_heap_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;weak_heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="375.5,-2644 211.5,-2644 211.5,-2608 375.5,-2608 375.5,-2644"/>
<text text-anchor="middle" x="293.5" y="-2622.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_weak_heap_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M375.73,-2626C405.15,-2626 438.18,-2626 466.9,-2626"/>
<polygon fill="gray" stroke="gray" points="467.27,-2629.5 477.27,-2626 467.27,-2622.5 467.27,-2629.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_len1(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_len1().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;fn test_slow_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stooge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="352,-1942 235,-1942 235,-1906 352,-1906 352,-1942"/>
<text text-anchor="middle" x="293.5" y="-1920.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().</title>
<path fill="none" stroke="gray" d="M352.18,-1936.66C391.5,-1945.29 443.37,-1956.68 482.72,-1965.32"/>
<polygon fill="gray" stroke="gray" points="482.17,-1968.78 492.69,-1967.5 483.67,-1961.94 482.17,-1968.78"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_len1(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_len1().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;fn test_selection_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="367.5,-214 219.5,-214 219.5,-178 367.5,-178 367.5,-214"/>
<text text-anchor="middle" x="293.5" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<path fill="none" stroke="gray" d="M367.63,-212.57C379.85,-215.76 392.34,-219.28 404,-223 432.84,-232.22 464.32,-244.51 489.77,-255.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-258.36 499.21,-258.98 491.33,-251.9 488.63,-258.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;fn test_pancake() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 15]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pancake_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 15, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="347,-700 240,-700 240,-664 347,-664 347,-700"/>
<text text-anchor="middle" x="293.5" y="-678.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pancake</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<path fill="none" stroke="gray" d="M347.26,-693.49C365.39,-697.84 385.72,-703.16 404,-709 432.84,-718.22 464.32,-730.51 489.77,-741.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-744.36 499.21,-744.98 491.33,-737.9 488.63,-744.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_two_elem(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_two_elem().</title>
<g id="a_node60"><a xlink:title=" &#160;&#160;&#160;fn test_quick_two_elem() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = [20, 10]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, [10, 20]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="373,-2104 214,-2104 214,-2068 373,-2068 373,-2104"/>
<text text-anchor="middle" x="293.5" y="-2082.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_two_elem</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_two_elem().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_two_elem().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M373.12,-2101.03C383.76,-2104.31 394.33,-2108.26 404,-2113 447.28,-2134.21 489.62,-2170.91 515.39,-2195.57"/>
<polygon fill="gray" stroke="gray" points="513.22,-2198.35 522.83,-2202.81 518.1,-2193.33 513.22,-2198.35"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_len1(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_len1().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_up_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="373,-4210 214,-4210 214,-4174 373,-4174 373,-4210"/>
<text text-anchor="middle" x="293.5" y="-4188.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_up_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<path fill="none" stroke="gray" d="M373.01,-4187.53C404.09,-4185.76 439.55,-4183.75 469.81,-4182.02"/>
<polygon fill="gray" stroke="gray" points="470.08,-4185.51 479.86,-4181.45 469.68,-4178.52 470.08,-4185.51"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/hbu_sift().</title>
<path fill="none" stroke="gray" d="M624.74,-4003C664.94,-4003 711.78,-4003 745.39,-4003"/>
<polygon fill="gray" stroke="gray" points="745.81,-4006.5 755.81,-4003 745.81,-3999.5 745.81,-4006.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_empty(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_empty().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;fn test_cocktail_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cocktail_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="370,-1078 217,-1078 217,-1042 370,-1042 370,-1078"/>
<text text-anchor="middle" x="293.5" y="-1056.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cocktail_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<path fill="none" stroke="gray" d="M370.27,-1077.27C381.65,-1080.27 393.18,-1083.54 404,-1087 432.84,-1096.22 464.32,-1108.51 489.77,-1119.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-1122.36 499.21,-1122.98 491.33,-1115.9 488.63,-1122.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;fn test_bingo() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 15]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bingo_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 15, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="338,-3400 249,-3400 249,-3364 338,-3364 338,-3400"/>
<text text-anchor="middle" x="293.5" y="-3378.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bingo</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<path fill="none" stroke="gray" d="M338.2,-3377.2C379.7,-3372.65 442.2,-3365.79 486.73,-3360.9"/>
<polygon fill="gray" stroke="gray" points="487.24,-3364.37 496.8,-3359.8 486.47,-3357.41 487.24,-3364.37"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort().</title>
<g id="a_node67"><a xlink:title="fn sub_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T], mode: bool) &#160;{ &#160;&#160;&#160;&#160;if input.len() &gt; 1 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compare_and_swap(input, mode); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mid_point = input.len() / 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sub_sort(&amp;mut input[..mid_po...">
<polygon fill="lightblue" stroke="black" points="1072,-1402 996,-1402 996,-1366 1072,-1366 1072,-1402"/>
<text text-anchor="middle" x="1034" y="-1380.3" font-family="Helvetica,sans-Serif" font-size="14.00">sub_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/compare_and_swap(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/compare_and_swap().</title>
<path fill="none" stroke="gray" d="M1072.42,-1384C1095.16,-1384 1125.18,-1384 1153.46,-1384"/>
<polygon fill="gray" stroke="gray" points="1153.79,-1387.5 1163.79,-1384 1153.79,-1380.5 1153.79,-1387.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_len1(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_len1().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;fn test_bingo_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bingo_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="356,-3346 231,-3346 231,-3310 356,-3310 356,-3346"/>
<text text-anchor="middle" x="293.5" y="-3324.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bingo_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/tests/test_bingo_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().</title>
<path fill="none" stroke="gray" d="M356.26,-3334.78C396.5,-3339.19 448.48,-3344.9 486.96,-3349.12"/>
<polygon fill="gray" stroke="gray" points="486.62,-3352.61 496.94,-3350.22 487.38,-3345.65 486.62,-3352.61"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_stooge(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_stooge().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;fn test_stooge() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stooge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="341.5,-2050 245.5,-2050 245.5,-2014 341.5,-2014 341.5,-2050"/>
<text text-anchor="middle" x="293.5" y="-2028.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_stooge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_stooge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_stooge().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().</title>
<path fill="none" stroke="gray" d="M341.64,-2021.65C381.81,-2012.83 439.68,-2000.13 482.65,-1990.7"/>
<polygon fill="gray" stroke="gray" points="483.66,-1994.06 492.68,-1988.5 482.16,-1987.22 483.66,-1994.06"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap().</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;fn test_heap() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="335.5,-2860 251.5,-2860 251.5,-2824 335.5,-2824 335.5,-2860"/>
<text text-anchor="middle" x="293.5" y="-2838.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<path fill="none" stroke="gray" d="M335.67,-2837.48C377.77,-2832.86 443.25,-2825.67 488.8,-2820.67"/>
<polygon fill="gray" stroke="gray" points="489.22,-2824.15 498.78,-2819.58 488.46,-2817.19 489.22,-2824.15"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_01(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_01().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;fn test_heap_01() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 13, 12]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 12, 13, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="348,-3130 239,-3130 239,-3094 348,-3094 348,-3130"/>
<text text-anchor="middle" x="293.5" y="-3108.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_01</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M348.18,-3123.78C388.54,-3132.64 443.68,-3144.75 484.57,-3153.72"/>
<polygon fill="gray" stroke="gray" points="483.86,-3157.15 494.38,-3155.88 485.36,-3150.31 483.86,-3157.15"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/get_min_max(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/get_min_max().</title>
<g id="a_node73"><a xlink:title="fn get_min_max&lt;T: PartialOrd + Copy&gt;(input: &amp;[T]) &#45;&gt; [T; 2] &#160;{ &#160;&#160;&#160;&#160;let mut min = input[0]; &#160;&#160;&#160;&#160;let mut max = input[0]; &#160;&#160;&#160;&#160;for i in 1..input.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if input[i] &lt; min {min = input[i];} &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="846,-3373 737,-3373 737,-3337 846,-3337 846,-3373"/>
<text text-anchor="middle" x="791.5" y="-3351.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_min_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn test_quick_dual() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="355.5,-2320 231.5,-2320 231.5,-2284 355.5,-2284 355.5,-2320"/>
<text text-anchor="middle" x="293.5" y="-2298.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_dual</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M355.72,-2288.45C371.57,-2284.52 388.52,-2279.95 404,-2275 432.84,-2265.78 464.32,-2253.49 489.77,-2242.96"/>
<polygon fill="gray" stroke="gray" points="491.33,-2246.1 499.21,-2239.02 488.63,-2239.64 491.33,-2246.1"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_bool(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_bool().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_bool() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![false, true, false, false, true]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![false, false, false, tru...">
<polygon fill="lightblue" stroke="black" points="359.5,-1348 227.5,-1348 227.5,-1312 359.5,-1312 359.5,-1348"/>
<text text-anchor="middle" x="293.5" y="-1326.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_bool</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_bool().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_bool().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M359.78,-1344.33C398.03,-1352.73 445.91,-1363.24 482.78,-1371.33"/>
<polygon fill="gray" stroke="gray" points="482.35,-1374.82 492.87,-1373.54 483.85,-1367.98 482.35,-1374.82"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_empty(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_empty().</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;fn test_slow_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;slow_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="359,-1888 228,-1888 228,-1852 359,-1852 359,-1888"/>
<text text-anchor="middle" x="293.5" y="-1866.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().</title>
<path fill="none" stroke="gray" d="M359.13,-1855.81C400.43,-1846.75 453.15,-1835.18 491.09,-1826.85"/>
<polygon fill="gray" stroke="gray" points="491.87,-1830.26 500.89,-1824.69 490.37,-1823.42 491.87,-1830.26"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/largest_pancake(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/largest_pancake().</title>
<g id="a_node77"><a xlink:title="&#45;&gt; usize &#160;fn largest_pancake&lt;T: PartialOrd + Copy&gt;(input: &amp;[T], index: usize) { &#160;&#160;&#160;&#160;let mut pancake = input[index]; &#160;&#160;&#160;&#160;let mut largest = index; &#160;&#160;&#160;&#160;&#160;for i in 0..index { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if input[i] &gt; pancake ...">
<polygon fill="lightblue" stroke="black" points="855.5,-754 727.5,-754 727.5,-718 855.5,-718 855.5,-754"/>
<text text-anchor="middle" x="791.5" y="-732.3" font-family="Helvetica,sans-Serif" font-size="14.00">largest_pancake</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_01(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_01().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;fn test_smooth_01() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![20, 10, 11, 13, 24, 9, 2, 1, 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smooth_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[1, 2, 8, 9, 10, 11, 13, 20, 24])...">
<polygon fill="lightblue" stroke="black" points="356.5,-1672 230.5,-1672 230.5,-1636 356.5,-1636 356.5,-1672"/>
<text text-anchor="middle" x="293.5" y="-1650.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_smooth_01</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M356.58,-1654C394.44,-1654 442.6,-1654 480.14,-1654"/>
<polygon fill="gray" stroke="gray" points="480.43,-1657.5 490.43,-1654 480.43,-1650.5 480.43,-1657.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort_sorting(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort_sorting().</title>
<g id="a_node79"><a xlink:title="fn slow_sort_sorting&lt;T: PartialOrd&gt;(input: &amp;mut [T], start: usize, end: usize) &#160;{ &#160;&#160;&#160;&#160;if start &gt;= end {return;} &#160;&#160;&#160;&#160;&#160;let mid = (start + end) / 2; &#160;&#160;&#160;&#160;slow_sort_sorting(input, start, mid); &#160;&#160;&#160;&#160;slow_sor...">
<polygon fill="lightblue" stroke="black" points="860,-1834 723,-1834 723,-1798 860,-1798 860,-1834"/>
<text text-anchor="middle" x="791.5" y="-1812.3" font-family="Helvetica,sans-Serif" font-size="14.00">slow_sort_sorting</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/dual_pivot(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/dual_pivot().</title>
<g id="a_node82"><a xlink:title="end: usize) &#160;fn dual_pivot&lt;T: PartialOrd + Copy&gt;(input: &amp;mut [T], start: usize, { &#160;&#160;&#160;&#160;if start &gt;= end {return;} &#160;&#160;&#160;&#160;if input[start] &gt; input[end] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input.swap(start, end); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;let lpivot ...">
<polygon fill="lightblue" stroke="black" points="835.5,-2239 747.5,-2239 747.5,-2203 835.5,-2203 835.5,-2239"/>
<text text-anchor="middle" x="791.5" y="-2217.3" font-family="Helvetica,sans-Serif" font-size="14.00">dual_pivot</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;fn test_ksort() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = [10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ksort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, [10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="336,-1024 251,-1024 251,-988 336,-988 336,-1024"/>
<text text-anchor="middle" x="293.5" y="-1002.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_ksort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M336.23,-996.84C383.54,-986.45 459.88,-969.7 504.62,-959.88"/>
<polygon fill="gray" stroke="gray" points="505.45,-963.28 514.47,-957.71 503.95,-956.44 505.45,-963.28"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort_lr(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort_lr().</title>
<g id="a_node84"><a xlink:title="right: usize) &#160;fn ksort_lr&lt;T: PartialOrd + Clone + Copy&gt;(input: &amp;mut [T], left: usize, { &#160;&#160;&#160;&#160;let key = input[left].clone(); &#160;&#160;&#160;&#160;// just init it, so no unsafe calls needed, otherwise use of uninit &#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="825.5,-970 757.5,-970 757.5,-934 825.5,-934 825.5,-970"/>
<text text-anchor="middle" x="791.5" y="-948.3" font-family="Helvetica,sans-Serif" font-size="14.00">ksort_lr</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_01(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_01().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;fn test_ksort_01() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = [10, 9, 20, 22, 11, 21, 12, 24, 4, 6, 3]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ksort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, [3, 4, 6, 9, 10, 11, 12, 20, 21, 22, ...">
<polygon fill="lightblue" stroke="black" points="348.5,-970 238.5,-970 238.5,-934 348.5,-934 348.5,-970"/>
<text text-anchor="middle" x="293.5" y="-948.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_ksort_01</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_01().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M348.79,-952C396.04,-952 463.2,-952 504.21,-952"/>
<polygon fill="gray" stroke="gray" points="504.29,-955.5 514.29,-952 504.29,-948.5 504.29,-955.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort_sorting(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort_sorting().</title>
<path fill="none" stroke="gray" d="M582.07,-1816C617.01,-1816 668.99,-1816 712.3,-1816"/>
<polygon fill="gray" stroke="gray" points="712.53,-1819.5 722.53,-1816 712.53,-1812.5 712.53,-1819.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_small(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_small().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;fn test_weak_heap_small() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 13]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;weak_heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 13, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="378.5,-2590 208.5,-2590 208.5,-2554 378.5,-2554 378.5,-2590"/>
<text text-anchor="middle" x="293.5" y="-2568.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_weak_heap_small</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_small().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_small().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M376.76,-2590.06C406.12,-2596.5 438.97,-2603.71 467.5,-2609.98"/>
<polygon fill="gray" stroke="gray" points="466.88,-2613.42 477.4,-2612.15 468.38,-2606.59 466.88,-2613.42"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/get_min_max(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/bingo_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bingo_sort/get_min_max().</title>
<path fill="none" stroke="gray" d="M586.27,-3355C625.23,-3355 682.7,-3355 726.77,-3355"/>
<polygon fill="gray" stroke="gray" points="726.8,-3358.5 736.8,-3355 726.8,-3351.5 726.8,-3358.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;fn test_cycle() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![11, 20, 21, 40, 11, 60, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![5, 11, 11, 20, 21, 40, 60]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="336,-538 251,-538 251,-502 336,-502 336,-538"/>
<text text-anchor="middle" x="293.5" y="-516.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cycle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<path fill="none" stroke="gray" d="M336.21,-528.89C356.8,-533.63 381.9,-539.94 404,-547 432.84,-556.22 464.32,-568.51 489.77,-579.04"/>
<polygon fill="gray" stroke="gray" points="488.63,-582.36 499.21,-582.98 491.33,-575.9 488.63,-582.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_usize() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 15]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 15, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="363,-1294 224,-1294 224,-1258 363,-1258 363,-1294"/>
<text text-anchor="middle" x="293.5" y="-1272.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_usize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M363.25,-1289.67C376.98,-1293.31 391.14,-1297.73 404,-1303 440.89,-1318.1 479.67,-1342 506.43,-1359.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-1363.04 515.02,-1365.76 508.71,-1357.25 504.78,-1363.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_len1(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_len1().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;fn test_heap_bottom_up_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="394.5,-3994 192.5,-3994 192.5,-3958 394.5,-3958 394.5,-3994"/>
<text text-anchor="middle" x="293.5" y="-3972.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_bottom_up_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_bottom_up_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M394.56,-3986.98C412.24,-3988.92 430.57,-3990.93 448.03,-3992.85"/>
<polygon fill="gray" stroke="gray" points="447.88,-3996.36 458.2,-3993.97 448.64,-3989.4 447.88,-3996.36"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn test_insertion() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;insertion_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="348.5,-2482 238.5,-2482 238.5,-2446 348.5,-2446 348.5,-2482"/>
<text text-anchor="middle" x="293.5" y="-2460.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_insertion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<path fill="none" stroke="gray" d="M348.79,-2458.04C386.28,-2453.93 436.3,-2448.44 475.85,-2444.1"/>
<polygon fill="gray" stroke="gray" points="476.37,-2447.56 485.92,-2442.99 475.6,-2440.6 476.37,-2447.56"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_up() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354.5,-4156 232.5,-4156 232.5,-4120 354.5,-4120 354.5,-4156"/>
<text text-anchor="middle" x="293.5" y="-4134.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_up</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_up().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_up_sort().</title>
<path fill="none" stroke="gray" d="M354.68,-4147.79C389.39,-4153.43 433.23,-4160.56 469.61,-4166.47"/>
<polygon fill="gray" stroke="gray" points="469.23,-4169.96 479.66,-4168.11 470.35,-4163.05 469.23,-4169.96"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize_pow_2(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize_pow_2().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_usize_pow_2() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24, 15]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 15, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="388.5,-1240 198.5,-1240 198.5,-1204 388.5,-1204 388.5,-1240"/>
<text text-anchor="middle" x="293.5" y="-1218.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_usize_pow_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize_pow_2().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_usize_pow_2().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M384.77,-1240.02C391.45,-1242.63 397.94,-1245.6 404,-1249 453.17,-1276.55 496.94,-1326.61 520.99,-1357.42"/>
<polygon fill="gray" stroke="gray" points="518.37,-1359.76 527.24,-1365.56 523.93,-1355.5 518.37,-1359.76"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble_empty(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble_empty().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;fn test_bubble_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bubble_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="368,-3022 219,-3022 219,-2986 368,-2986 368,-3022"/>
<text text-anchor="middle" x="293.5" y="-3000.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bubble_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<path fill="none" stroke="gray" d="M368.31,-2995.9C404.73,-2991.9 448.05,-2987.15 482.12,-2983.41"/>
<polygon fill="gray" stroke="gray" points="482.83,-2986.85 492.38,-2982.28 482.06,-2979.89 482.83,-2986.85"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/flip(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/flip().</title>
<path fill="none" stroke="gray" d="M595.7,-768.79C643.59,-774.01 712.67,-781.53 754.4,-786.07"/>
<polygon fill="gray" stroke="gray" points="754.07,-789.55 764.39,-787.16 754.83,-782.6 754.07,-789.55"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/largest_pancake(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/largest_pancake().</title>
<path fill="none" stroke="gray" d="M595.7,-757.21C631.11,-753.35 678.1,-748.24 717.05,-744"/>
<polygon fill="gray" stroke="gray" points="717.73,-747.44 727.29,-742.88 716.97,-740.48 717.73,-747.44"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_empty(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_empty().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;fn test_cycle_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="361.5,-646 225.5,-646 225.5,-610 361.5,-610 361.5,-646"/>
<text text-anchor="middle" x="293.5" y="-624.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cycle_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<path fill="none" stroke="gray" d="M361.72,-620.62C401.64,-616.24 451.51,-610.77 488.42,-606.72"/>
<polygon fill="gray" stroke="gray" points="488.91,-610.18 498.47,-605.61 488.15,-603.22 488.91,-610.18"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail().</title>
<g id="a_node100"><a xlink:title=" &#160;&#160;&#160;fn test_cocktail() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![30, 10, 20, 11, 24, 44, 12, 11]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cocktail_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 11, 12, 20, 24, 30, ...">
<polygon fill="lightblue" stroke="black" points="344.5,-1186 242.5,-1186 242.5,-1150 344.5,-1150 344.5,-1186"/>
<text text-anchor="middle" x="293.5" y="-1164.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cocktail</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<path fill="none" stroke="gray" d="M344.58,-1162.5C383.64,-1158.22 438.07,-1152.24 479.64,-1147.68"/>
<polygon fill="gray" stroke="gray" points="480.09,-1151.15 489.65,-1146.58 479.32,-1144.19 480.09,-1151.15"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_longer(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_longer().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;fn test_quick_dual_longer() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = [10, 20, 11, 24, 22, 21, 19]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, [10, 11, 19, 20, 21, 22, 24]);...">
<polygon fill="lightblue" stroke="black" points="381,-2266 206,-2266 206,-2230 381,-2230 381,-2266"/>
<text text-anchor="middle" x="293.5" y="-2244.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_dual_longer</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_longer().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_longer().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M381.23,-2238.48C409.81,-2235.34 441.26,-2231.89 468.61,-2228.89"/>
<polygon fill="gray" stroke="gray" points="469.32,-2232.33 478.87,-2227.76 468.55,-2225.38 469.32,-2232.33"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_len1(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_len1().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;fn test_heap_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nheap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354,-3076 233,-3076 233,-3040 354,-3040 354,-3076"/>
<text text-anchor="middle" x="293.5" y="-3054.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/tests/test_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 nheap_sort/nheap_sort().</title>
<path fill="none" stroke="gray" d="M354.05,-3069.32C370.54,-3073.36 388.24,-3078.54 404,-3085 440.89,-3100.1 479.67,-3124 506.43,-3141.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-3145.04 515.02,-3147.76 508.71,-3139.25 504.78,-3145.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_len1(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_len1().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_batcher_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="396.5,-484 190.5,-484 190.5,-448 396.5,-448 396.5,-484"/>
<text text-anchor="middle" x="293.5" y="-462.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_batcher_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().</title>
<path fill="none" stroke="gray" d="M376.76,-447.94C399.73,-442.9 424.85,-437.39 448.36,-432.23"/>
<polygon fill="gray" stroke="gray" points="449.3,-435.6 458.32,-430.04 447.8,-428.76 449.3,-435.6"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_max(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_max().</title>
<g id="a_node105"><a xlink:title="fn heap_max&lt;T: PartialOrd&gt;(input: &amp;mut [T], i: usize, heap_len: usize) &#160;{ &#160;&#160;&#160;&#160;let left = 2 * i + 1; &#160;&#160;&#160;&#160;let right = left + 1; &#160;&#160;&#160;&#160;&#160;let mut largest = i; &#160;&#160;&#160;&#160;if left &lt; heap_len &amp;&amp; input[left] &gt; input[la...">
<polygon fill="lightblue" stroke="black" points="835.5,-2833 747.5,-2833 747.5,-2797 835.5,-2797 835.5,-2833"/>
<text text-anchor="middle" x="791.5" y="-2811.3" font-family="Helvetica,sans-Serif" font-size="14.00">heap_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_empty(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_empty().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;fn test_pancake_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pancake_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="372.5,-808 214.5,-808 214.5,-772 372.5,-772 372.5,-808"/>
<text text-anchor="middle" x="293.5" y="-786.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pancake_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<path fill="none" stroke="gray" d="M372.67,-781.42C406.44,-777.71 445.43,-773.43 477.33,-769.93"/>
<polygon fill="gray" stroke="gray" points="477.86,-773.4 487.42,-768.83 477.1,-766.44 477.86,-773.4"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_len1(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_len1().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;fn test_smooth_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smooth_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="362.5,-1618 224.5,-1618 224.5,-1582 362.5,-1582 362.5,-1618"/>
<text text-anchor="middle" x="293.5" y="-1596.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_smooth_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M362.7,-1614.97C399.45,-1623.04 444.41,-1632.91 479.93,-1640.7"/>
<polygon fill="gray" stroke="gray" points="479.63,-1644.22 490.15,-1642.95 481.13,-1637.38 479.63,-1644.22"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_empty(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_empty().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;fn test_selection_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="374.5,-322 212.5,-322 212.5,-286 374.5,-286 374.5,-322"/>
<text text-anchor="middle" x="293.5" y="-300.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<path fill="none" stroke="gray" d="M374.71,-295.2C407.21,-291.63 444.26,-287.56 475.09,-284.18"/>
<polygon fill="gray" stroke="gray" points="475.73,-287.63 485.28,-283.06 474.96,-280.67 475.73,-287.63"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;fn test_oddeven_batcher() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;oddeven_batcher_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="378.5,-430 208.5,-430 208.5,-394 378.5,-394 378.5,-430"/>
<text text-anchor="middle" x="293.5" y="-408.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_oddeven_batcher</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/tests/test_oddeven_batcher().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort().</title>
<path fill="none" stroke="gray" d="M378.82,-412C400.53,-412 424.03,-412 446.21,-412"/>
<polygon fill="gray" stroke="gray" points="446.3,-415.5 456.3,-412 446.3,-408.5 446.3,-415.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;fn test_selection() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![11, 20, 21, 40, 11, 60, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![5, 11, 11, 20, 21, 40, 60]); &#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="349,-268 238,-268 238,-232 349,-232 349,-268"/>
<text text-anchor="middle" x="293.5" y="-246.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_sort().</title>
<path fill="none" stroke="gray" d="M349.1,-255.99C386.34,-260.08 435.85,-265.51 475.18,-269.83"/>
<polygon fill="gray" stroke="gray" points="474.88,-273.32 485.21,-270.93 475.65,-266.36 474.88,-273.32"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_len1(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_len1().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;fn test_slow_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;slow_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="352,-1834 235,-1834 235,-1798 352,-1798 352,-1834"/>
<text text-anchor="middle" x="293.5" y="-1812.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/tests/test_slow_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 slow_sort/slow_sort().</title>
<path fill="none" stroke="gray" d="M352.18,-1816C394.24,-1816 450.67,-1816 490.76,-1816"/>
<polygon fill="gray" stroke="gray" points="490.84,-1819.5 500.84,-1816 490.84,-1812.5 490.84,-1819.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_empty(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_empty().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;fn test_slow_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stooge_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="359,-1996 228,-1996 228,-1960 359,-1960 359,-1996"/>
<text text-anchor="middle" x="293.5" y="-1974.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_slow_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/tests/test_slow_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 stooge_sort/stooge_sort().</title>
<path fill="none" stroke="gray" d="M359.13,-1978C397.39,-1978 445.45,-1978 482.49,-1978"/>
<polygon fill="gray" stroke="gray" points="482.62,-1981.5 492.62,-1978 482.62,-1974.5 482.62,-1981.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/dual_pivot(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/dual_pivot().</title>
<path fill="none" stroke="gray" d="M604.12,-2221C644.94,-2221 697.96,-2221 737.01,-2221"/>
<polygon fill="gray" stroke="gray" points="737.13,-2224.5 747.13,-2221 737.13,-2217.5 737.13,-2224.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn test_bubble() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![30, 10, 20, 11, 24, 44, 12, 11]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bubble_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 11, 12, 20, 24, 30, 44])...">
<polygon fill="lightblue" stroke="black" points="342.5,-2968 244.5,-2968 244.5,-2932 342.5,-2932 342.5,-2968"/>
<text text-anchor="middle" x="293.5" y="-2946.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bubble</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/tests/test_bubble().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bubble_sort/bubble_sort().</title>
<path fill="none" stroke="gray" d="M342.52,-2955.27C382.51,-2959.66 439.62,-2965.93 482.23,-2970.6"/>
<polygon fill="gray" stroke="gray" points="481.86,-2974.09 492.19,-2971.7 482.63,-2967.13 481.86,-2974.09"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/get_child_trees().</title>
<path fill="none" stroke="gray" d="M592.7,-1649.9C618.48,-1647.99 650.4,-1645.94 679,-1645 778.95,-1641.71 804.05,-1641.9 904,-1645 923.39,-1645.6 944.4,-1646.71 963.72,-1647.91"/>
<polygon fill="gray" stroke="gray" points="963.75,-1651.42 973.95,-1648.57 964.2,-1644.43 963.75,-1651.42"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/restore_heap().</title>
<path fill="none" stroke="gray" d="M592.69,-1657.64C631.78,-1660.48 686.27,-1664.43 728.16,-1667.48"/>
<polygon fill="gray" stroke="gray" points="728.02,-1670.97 738.25,-1668.21 728.53,-1663.99 728.02,-1670.97"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;fn test_smooth() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![20, 10, 11, 13]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smooth_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[10, 11, 13, 20]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="344,-1564 243,-1564 243,-1528 344,-1528 344,-1564"/>
<text text-anchor="middle" x="293.5" y="-1542.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_smooth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/tests/test_smooth().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 smooth_sort/smooth_sort().</title>
<path fill="none" stroke="gray" d="M344.26,-1555.03C363.34,-1559.32 385.07,-1565.25 404,-1573 440.89,-1588.1 479.67,-1612 506.43,-1629.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-1633.04 515.02,-1635.76 508.71,-1627.25 504.78,-1633.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_max(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_max().</title>
<path fill="none" stroke="gray" d="M584.01,-2815C626.06,-2815 691.27,-2815 737.13,-2815"/>
<polygon fill="gray" stroke="gray" points="737.19,-2818.5 747.19,-2815 737.19,-2811.5 737.19,-2818.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_len1(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_len1().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="360,-1510 227,-1510 227,-1474 360,-1474 360,-1510"/>
<text text-anchor="middle" x="293.5" y="-1488.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M360.06,-1479.16C374.78,-1475.37 390.14,-1470.68 404,-1465 440.89,-1449.9 479.67,-1426 506.43,-1408.07"/>
<polygon fill="gray" stroke="gray" points="508.71,-1410.75 515.02,-1402.24 504.78,-1404.96 508.71,-1410.75"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_merge(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_sort_ranges().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 oddeven_sort/oddeven_batcher_merge().</title>
<path fill="none" stroke="gray" d="M904.3,-412C912.76,-412 921.28,-412 929.68,-412"/>
<polygon fill="gray" stroke="gray" points="929.86,-415.5 939.86,-412 929.86,-408.5 929.86,-415.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/get_flag(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/get_flag().</title>
<path fill="none" stroke="gray" d="M605.72,-2619.12C649.33,-2614.37 706.25,-2608.17 745.33,-2603.92"/>
<polygon fill="gray" stroke="gray" points="745.8,-2607.39 755.36,-2602.83 745.04,-2600.43 745.8,-2607.39"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_merge().</title>
<path fill="none" stroke="gray" d="M605.72,-2632.88C636.94,-2636.28 674.97,-2640.42 708.41,-2644.06"/>
<polygon fill="gray" stroke="gray" points="708.3,-2647.57 718.62,-2645.17 709.06,-2640.61 708.3,-2647.57"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_len1(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_len1().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="360.5,-160 226.5,-160 226.5,-124 360.5,-124 360.5,-160"/>
<text text-anchor="middle" x="293.5" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<path fill="none" stroke="gray" d="M360.75,-134.73C398.73,-130.56 445.96,-125.38 482.48,-121.37"/>
<polygon fill="gray" stroke="gray" points="482.91,-124.84 492.47,-120.27 482.15,-117.88 482.91,-124.84"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_len1(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_len1().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;fn test_ksort_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ksort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354.5,-916 232.5,-916 232.5,-880 354.5,-880 354.5,-916"/>
<text text-anchor="middle" x="293.5" y="-894.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_ksort_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M354.68,-911.21C401.55,-921.5 465.07,-935.44 504.39,-944.07"/>
<polygon fill="gray" stroke="gray" points="503.8,-947.53 514.32,-946.25 505.3,-940.69 503.8,-947.53"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_len1(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_len1().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;fn test_heap_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;heap_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354,-2806 233,-2806 233,-2770 354,-2770 354,-2806"/>
<text text-anchor="middle" x="293.5" y="-2784.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_heap_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_heap_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/heap_sort().</title>
<path fill="none" stroke="gray" d="M354.05,-2794.54C395.17,-2799.05 449.31,-2804.99 488.65,-2809.31"/>
<polygon fill="gray" stroke="gray" points="488.5,-2812.81 498.83,-2810.43 489.27,-2805.86 488.5,-2812.81"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;fn test_selection_double() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![11, 20, 21, 40, 11, 60, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selection_double_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![5, 11, 11, 20, 21...">
<polygon fill="lightblue" stroke="black" points="376,-4480 211,-4480 211,-4444 376,-4444 376,-4480"/>
<text text-anchor="middle" x="293.5" y="-4458.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_selection_double</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/tests/test_selection_double().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 selection_sort/selection_double_sort().</title>
<path fill="none" stroke="gray" d="M376.07,-4470.95C399.2,-4473.49 424.54,-4476.27 448.26,-4478.88"/>
<polygon fill="gray" stroke="gray" points="447.99,-4482.37 458.31,-4479.98 448.75,-4475.41 447.99,-4482.37"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_len1(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_len1().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;fn test_shell_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;shell_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="353,-4318 234,-4318 234,-4282 353,-4282 353,-4318"/>
<text text-anchor="middle" x="293.5" y="-4296.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_shell_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/test/test_shell_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 shell_sort/shell_sort().</title>
<path fill="none" stroke="gray" d="M353.11,-4303.1C394.68,-4305.29 449.92,-4308.21 489.64,-4310.31"/>
<polygon fill="gray" stroke="gray" points="489.47,-4313.81 499.64,-4310.84 489.84,-4306.82 489.47,-4313.81"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;fn test_quick() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![10, 20, 11, 24]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 20, 24]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="337,-4642 250,-4642 250,-4606 337,-4606 337,-4642"/>
<text text-anchor="middle" x="293.5" y="-4620.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_sort().</title>
<path fill="none" stroke="gray" d="M337.07,-4628.67C378.66,-4633.24 442.1,-4640.2 487.06,-4645.13"/>
<polygon fill="gray" stroke="gray" points="486.89,-4648.64 497.21,-4646.25 487.65,-4641.68 486.89,-4648.64"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_empty(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_empty().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;fn test_gnome_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnome_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="368,-106 219,-106 219,-70 368,-70 368,-106"/>
<text text-anchor="middle" x="293.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_gnome_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/tests/test_gnome_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 gnome_sort/gnome_sort().</title>
<path fill="none" stroke="gray" d="M368.31,-96.1C404.73,-100.1 448.05,-104.85 482.12,-108.59"/>
<polygon fill="gray" stroke="gray" points="482.06,-112.11 492.38,-109.72 482.83,-105.15 482.06,-112.11"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_len1(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_len1().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;fn test_insertion_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;insertion_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="367,-2428 220,-2428 220,-2392 367,-2392 367,-2428"/>
<text text-anchor="middle" x="293.5" y="-2406.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_insertion_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/tests/test_insertion_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 insertion_sort/insertion_sort().</title>
<path fill="none" stroke="gray" d="M367.31,-2417.99C401.72,-2421.77 442.46,-2426.24 475.77,-2429.9"/>
<polygon fill="gray" stroke="gray" points="475.54,-2433.39 485.86,-2431 476.3,-2426.43 475.54,-2433.39"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort().</title>
<g id="a_node134"><a xlink:title="fn bit_sort&lt;T: PartialOrd&gt;(input: &amp;mut [T], mode: bool) &#160;{ &#160;&#160;&#160;&#160;if input.len() &gt; 1 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mid_point = input.len() / 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bit_sort(&amp;mut input[..mid_point], true); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bit_sort(&amp;mut inpu...">
<polygon fill="lightblue" stroke="black" points="825.5,-1402 757.5,-1402 757.5,-1366 825.5,-1366 825.5,-1402"/>
<text text-anchor="middle" x="791.5" y="-1380.3" font-family="Helvetica,sans-Serif" font-size="14.00">bit_sort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/sub_sort().</title>
<path fill="none" stroke="gray" d="M825.69,-1384C867.14,-1384 938.33,-1384 985.54,-1384"/>
<polygon fill="gray" stroke="gray" points="985.81,-1387.5 995.81,-1384 985.81,-1380.5 985.81,-1387.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_empty(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_empty().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;fn test_ksort_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ksort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="361.5,-862 225.5,-862 225.5,-826 361.5,-826 361.5,-862"/>
<text text-anchor="middle" x="293.5" y="-840.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_ksort_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/tests/test_ksort_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().</title>
<path fill="none" stroke="gray" d="M361.51,-857.21C375.79,-860.94 390.59,-865.51 404,-871 440.89,-886.1 479.67,-910 506.43,-927.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-931.04 515.02,-933.76 508.71,-925.25 504.78,-931.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_big(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_big().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;fn test_weak_heap_big() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut array = [10, 20, 11, 24, 22, 21, 19, 9, 7, 8, 6, 5]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;weak_heap_sort(&amp;mut array); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(array, [5, 6, 7, 8, 9, 10, 11, 19, 20, ...">
<polygon fill="lightblue" stroke="black" points="371,-2536 216,-2536 216,-2500 371,-2500 371,-2536"/>
<text text-anchor="middle" x="293.5" y="-2514.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_weak_heap_big</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_big().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/tests/test_weak_heap_big().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 heap_sort/weak_heap_sort().</title>
<path fill="none" stroke="gray" d="M371.12,-2533.83C382.32,-2537.02 393.58,-2540.73 404,-2545 440.89,-2560.1 479.67,-2584 506.43,-2601.93"/>
<polygon fill="gray" stroke="gray" points="504.78,-2605.04 515.02,-2607.76 508.71,-2599.25 504.78,-2605.04"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_empty(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_empty().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;fn test_bitonic_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;u8&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bitonic_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="367,-1456 220,-1456 220,-1420 367,-1420 367,-1456"/>
<text text-anchor="middle" x="293.5" y="-1434.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bitonic_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/tests/test_bitonic_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().</title>
<path fill="none" stroke="gray" d="M367.31,-1422.02C404.19,-1413.92 448.34,-1404.23 482.83,-1396.66"/>
<polygon fill="gray" stroke="gray" points="483.72,-1400.05 492.74,-1394.48 482.22,-1393.21 483.72,-1400.05"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_len1(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_len1().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;fn test_cocktail_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cocktail_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="363,-1132 224,-1132 224,-1096 363,-1096 363,-1132"/>
<text text-anchor="middle" x="293.5" y="-1110.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cocktail_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/tests/test_cocktail_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cocktail_sort/cocktail_sort().</title>
<path fill="none" stroke="gray" d="M363.02,-1121.52C399.64,-1125.54 444.33,-1130.45 479.71,-1134.33"/>
<polygon fill="gray" stroke="gray" points="479.57,-1137.83 489.89,-1135.45 480.34,-1130.88 479.57,-1137.83"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bitonic_sort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 bitonic_sort/bit_sort().</title>
<path fill="none" stroke="gray" d="M590.02,-1384C635.47,-1384 703.39,-1384 747.33,-1384"/>
<polygon fill="gray" stroke="gray" points="747.41,-1387.5 757.41,-1384 747.41,-1380.5 747.41,-1387.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_len1(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_len1().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;fn test_pancake_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pancake_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="365.5,-754 221.5,-754 221.5,-718 365.5,-718 365.5,-754"/>
<text text-anchor="middle" x="293.5" y="-732.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pancake_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/tests/test_pancake_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 pancake_sort/pancake_sort().</title>
<path fill="none" stroke="gray" d="M365.65,-743.81C400.89,-747.68 443.07,-752.31 477.18,-756.05"/>
<polygon fill="gray" stroke="gray" points="477.16,-759.57 487.49,-757.18 477.93,-752.61 477.16,-759.57"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort_lr(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 ksort/ksort_lr().</title>
<path fill="none" stroke="gray" d="M568.57,-952C611.04,-952 695.58,-952 747.18,-952"/>
<polygon fill="gray" stroke="gray" points="747.35,-955.5 757.35,-952 747.35,-948.5 747.35,-955.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_len1(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_len1().</title>
<g id="a_node142"><a xlink:title=" &#160;&#160;&#160;fn test_cycle_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cycle_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="354.5,-592 232.5,-592 232.5,-556 354.5,-556 354.5,-592"/>
<text text-anchor="middle" x="293.5" y="-570.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_cycle_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/tests/test_cycle_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 cycle_sort/cycle_sort().</title>
<path fill="none" stroke="gray" d="M354.68,-580.6C395.55,-585.09 449.07,-590.96 488.17,-595.26"/>
<polygon fill="gray" stroke="gray" points="487.96,-598.75 498.28,-596.37 488.73,-591.8 487.96,-598.75"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;fn test_comb() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![30, 10, 20, 11, 24, 44, 12, 11]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comb_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![10, 11, 11, 12, 20, 24, 30, 44]); &#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="337.5,-3670 249.5,-3670 249.5,-3634 337.5,-3634 337.5,-3670"/>
<text text-anchor="middle" x="293.5" y="-3648.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_comb</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/tests/test_comb().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 comb_sort/comb_sort().</title>
<path fill="none" stroke="gray" d="M337.63,-3656.73C379.05,-3661.28 441.76,-3668.16 486.48,-3673.07"/>
<polygon fill="gray" stroke="gray" points="486.27,-3676.57 496.59,-3674.18 487.03,-3669.61 486.27,-3676.57"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_empty(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_empty().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;fn test_quick_dual_empty() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in:Vec&lt;i32&gt; = vec![]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;quick_dual_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, &amp;[]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="381,-2212 206,-2212 206,-2176 381,-2176 381,-2212"/>
<text text-anchor="middle" x="293.5" y="-2190.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_quick_dual_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/tests/test_quick_dual_empty().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 quick_sort/quick_dual_sort().</title>
<path fill="none" stroke="gray" d="M381.23,-2203.52C409.81,-2206.66 441.26,-2210.11 468.61,-2213.11"/>
<polygon fill="gray" stroke="gray" points="468.55,-2216.62 478.87,-2214.24 469.32,-2209.67 468.55,-2216.62"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_len1(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_len1().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;fn test_merge_bu_len1() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut vector_in = vec![1]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;merge_bottom_up_sort(&amp;mut vector_in); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(vector_in, vec![1]); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="371,-4804 216,-4804 216,-4768 371,-4768 371,-4804"/>
<text text-anchor="middle" x="293.5" y="-4782.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_merge_bu_len1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/tests/test_merge_bu_len1().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 merge_sort/merge_bottom_up_sort().</title>
<path fill="none" stroke="gray" d="M371.32,-4794.43C394.02,-4796.92 419.17,-4799.68 442.99,-4802.3"/>
<polygon fill="gray" stroke="gray" points="442.78,-4805.8 453.1,-4803.41 443.55,-4798.84 442.78,-4805.8"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate().</title>
<g id="a_node146"><a xlink:title="impl std::iter::Iterator&lt;Item = usize&gt; &#160;fn leonardo_generate(mut n0: usize, mut n1: usize, add: usize) &#45;&gt; { &#160;&#160;&#160;&#160;std::iter::from_fn(move || { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let n = n0; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n0 = n1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n1 += n + add;...">
<polygon fill="lightblue" stroke="black" points="614.5,-5105 468.5,-5105 468.5,-5069 614.5,-5069 614.5,-5105"/>
<text text-anchor="middle" x="541.5" y="-5083.3" font-family="Helvetica,sans-Serif" font-size="14.00">leonardo_generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 main(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 main().</title>
<g id="a_node147"><a xlink:title="fn main() &#160;{ &#160;&#160;&#160;&#160;let mut input = String::new(); &#160;&#160;&#160;&#160;io::stdin().read_line(&amp;mut input).expect(&#39; Failed to read value&#39; ); &#160;&#160;&#160;&#160;input = input.to_string().trim().to_string(); &#160;&#160;&#160;&#160;println!(&#39; Maximum number:...">
<polygon fill="lightblue" stroke="black" points="108.5,-5132 54.5,-5132 54.5,-5096 108.5,-5096 108.5,-5132"/>
<text text-anchor="middle" x="81.5" y="-5110.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci().</title>
<g id="a_node148"><a xlink:title="fn calculate_fibonacci(num: usize) &#160;{ &#160;&#160;&#160;&#160;println!(&#39; Fibonacci numbers:&#39; ); &#160;&#160;&#160;&#160;for i in leonardo_generate(0, 1, 0).take(num) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print!(&#39; {}, &#39; , i); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;println!(); }">
<polygon fill="lightblue" stroke="black" points="367,-5132 220,-5132 220,-5096 367,-5096 367,-5132"/>
<text text-anchor="middle" x="293.5" y="-5110.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_fibonacci</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci().</title>
<path fill="none" stroke="gray" d="M108.67,-5114C134,-5114 173.74,-5114 209.81,-5114"/>
<polygon fill="gray" stroke="gray" points="209.87,-5117.5 219.87,-5114 209.87,-5110.5 209.87,-5117.5"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_powers_of_two(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_powers_of_two().</title>
<g id="a_node149"><a xlink:title="fn calculate_powers_of_two(input: usize) &#160;{ &#160;&#160;&#160;&#160;let mut powers = Vec::&lt;usize&gt;::with_capacity(input); &#160;&#160;&#160;&#160;for i in 1..input + 1 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;powers.push(2usize.pow(i as u32)); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;println!(&#39; {:?}&#39; ,...">
<polygon fill="lightblue" stroke="black" points="387,-5186 200,-5186 200,-5150 387,-5150 387,-5186"/>
<text text-anchor="middle" x="293.5" y="-5164.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_powers_of_two</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_powers_of_two(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_powers_of_two().</title>
<path fill="none" stroke="gray" d="M108.7,-5122.09C127.16,-5127.68 152.5,-5135.14 175,-5141 183.46,-5143.21 192.29,-5145.41 201.14,-5147.55"/>
<polygon fill="gray" stroke="gray" points="200.59,-5151.02 211.13,-5149.95 202.22,-5144.21 200.59,-5151.02"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo().</title>
<g id="a_node150"><a xlink:title="fn calculate_leonardo(num: usize) &#160;{ &#160;&#160;&#160;&#160;println!(&#39; Leonardo numbers:&#39; ); &#160;&#160;&#160;&#160;for i in leonardo_generate(1, 1, 1).take(num) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print!(&#39; {}, &#39; , i); &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;println!(); }">
<polygon fill="lightblue" stroke="black" points="366,-5078 221,-5078 221,-5042 366,-5042 366,-5078"/>
<text text-anchor="middle" x="293.5" y="-5056.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_leonardo</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 main().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo().</title>
<path fill="none" stroke="gray" d="M108.7,-5105.91C127.16,-5100.32 152.5,-5092.86 175,-5087 186.55,-5083.99 198.79,-5080.98 210.83,-5078.12"/>
<polygon fill="gray" stroke="gray" points="211.95,-5081.45 220.88,-5075.76 210.35,-5074.64 211.95,-5081.45"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_fibonacci().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate().</title>
<path fill="none" stroke="gray" d="M367.31,-5106.01C395.83,-5102.88 428.68,-5099.27 458.07,-5096.05"/>
<polygon fill="gray" stroke="gray" points="458.74,-5099.49 468.3,-5094.92 457.98,-5092.54 458.74,-5099.49"/>
</g>
<!-- rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo sorting_rs 1.2.10 calculate_leonardo().&#45;&gt;rust&#45;analyzer cargo sorting_rs 1.2.10 leonardo_generate().</title>
<path fill="none" stroke="gray" d="M366.31,-5067.88C395.11,-5071.04 428.46,-5074.7 458.23,-5077.97"/>
<polygon fill="gray" stroke="gray" points="457.85,-5081.45 468.17,-5079.06 458.61,-5074.49 457.85,-5081.45"/>
</g>
</g>
</svg>
