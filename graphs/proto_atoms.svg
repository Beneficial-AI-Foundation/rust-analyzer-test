<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: call_graph Pages: 1 -->
<svg width="3436pt" height="5309pt"
 viewBox="0.00 0.00 3436.00 5309.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 5305)">
<title>call_graph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-5305 3432,-5305 3432,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="8,-1445 8,-4832 3026,-4832 3026,-1445 8,-1445"/>
<text text-anchor="middle" x="1517" y="-4816.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/libsignal/rust/protocol/src</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="838.5,-1092 838.5,-1437 1217.5,-1437 1217.5,-1092 838.5,-1092"/>
<text text-anchor="middle" x="1028" y="-1421.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/libsignal/rust/protocol/src/kem</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2826,-1115 2826,-1352 3420,-1352 3420,-1115 2826,-1115"/>
<text text-anchor="middle" x="3123" y="-1336.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/libsignal/rust/protocol/src/ratchet</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1527,-8 1527,-1217 2581,-1217 2581,-8 1527,-8"/>
<text text-anchor="middle" x="2054" y="-1201.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/libsignal/rust/protocol/src/state</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1578.5,-4840 1578.5,-5293 2205.5,-5293 2205.5,-4840 1578.5,-4840"/>
<text text-anchor="middle" x="1892" y="-5277.8" font-family="Helvetica,sans-Serif" font-size="14.00">/home/lacra/git_repos/libsignal/rust/protocol/src/storage</text>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMKeyLength# -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMKeyLength#</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;/// bad KEM ciphertext length &lt; &#160;&#160;&#160;&#160;BadKEMKeyLength(kem::KeyType, usize), {1}&gt; for key with type &lt;{0}&gt; &#160;&#160;&#160;&#160;BadKEMCiphertextLength(kem::KeyType, usize), }">
<polygon fill="lightblue" stroke="black" points="1701,-1727 1555,-1727 1555,-1691 1701,-1691 1701,-1727"/>
<text text-anchor="middle" x="1628" y="-1705.3" font-family="Helvetica,sans-Serif" font-size="14.00">BadKEMKeyLength</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Previous# -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Previous#</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( {}&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;create_decryption_failure_log(remote_address, &amp;errs, record, ciphertext)? &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Err(SignalProtocolError::Inv...">
<polygon fill="lightblue" stroke="black" points="2208,-2351 2133,-2351 2133,-2315 2208,-2315 2208,-2351"/>
<text text-anchor="middle" x="2170.5" y="-2329.3" font-family="Helvetica,sans-Serif" font-size="14.00">Previous</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Current# -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Current#</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;previous_state_count(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( {}&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;create_decryption_failure_log(remote_address, &amp;errs, record, ciphertext)? &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2514,-2370 2446,-2370 2446,-2334 2514,-2334 2514,-2370"/>
<text text-anchor="middle" x="2480" y="-2348.3" font-family="Helvetica,sans-Serif" font-size="14.00">Current</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Previous#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Current# -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Previous#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Current#</title>
<path fill="none" stroke="gray" d="M2208.29,-2335.27C2265.4,-2338.8 2375.14,-2345.58 2435.89,-2349.34"/>
<polygon fill="gray" stroke="gray" points="2435.72,-2352.83 2445.92,-2349.96 2436.15,-2345.85 2435.72,-2352.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError]for_application_callback(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError]for_application_callback().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; impl FnOnce(E) &#45;&gt; Self &#160;&#160;&#160;&#160;&#160;pub fn for_application_callback&lt;E: std::error::Error + Send + Sync + UnwindSafe + &#39;static&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;method: &amp;&#39;static str, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;move |error| Self::ApplicationC...">
<polygon fill="lightblue" stroke="black" points="307.5,-4531 125.5,-4531 125.5,-4495 307.5,-4495 307.5,-4531"/>
<text text-anchor="middle" x="216.5" y="-4509.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_application_callback</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#ApplicationCallbackError# -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#ApplicationCallbackError#</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;/// invalid sealed sender message: &#160;&#160;&#160;&#160;&#160;ApplicationCallbackError( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&#39;static str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#[source] Box&lt;dyn std::error::Error + Send + Sync + UnwindSafe + &#39;static&gt;, &#160;&#160;&#160;&#160;), &#160;{0} &#160;&#160;&#160;&#160;InvalidSe...">
<polygon fill="lightblue" stroke="black" points="709,-4801 523,-4801 523,-4765 709,-4765 709,-4801"/>
<text text-anchor="middle" x="616" y="-4779.3" font-family="Helvetica,sans-Serif" font-size="14.00">ApplicationCallbackError</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError]for_application_callback().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#ApplicationCallbackError# -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError]for_application_callback().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#ApplicationCallbackError#</title>
<path fill="none" stroke="gray" d="M307.66,-4503.11C346.08,-4503.95 388.52,-4512.38 417,-4540 486.86,-4607.76 384.18,-4687.18 453,-4756 468.98,-4771.98 490.6,-4780.66 512.83,-4785.01"/>
<polygon fill="gray" stroke="gray" points="512.28,-4788.47 522.72,-4786.67 513.44,-4781.57 512.28,-4788.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#generate(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#generate().</title>
<g id="a_node4"><a xlink:title="trait DynParameters &#160;&#160;&#160;&#160;&#160;fn generate() &#45;&gt; (KeyMaterial&lt;Public&gt;, KeyMaterial&lt;Secret&gt;); &#160;&#160;&#160;&#160;fn encapsulate(pub_key: &amp;KeyMaterial&lt;Public&gt;) &#45;&gt; (SharedSecret, RawCiphertext); &#160;&#160;&#160;&#160;fn decapsulate(secret_key:...">
<polygon fill="lightblue" stroke="black" points="655.5,-4315 576.5,-4315 576.5,-4279 655.5,-4279 655.5,-4315"/>
<text text-anchor="middle" x="616" y="-4293.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/calculate_chunk_size(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/calculate_chunk_size().</title>
<g id="a_node5"><a xlink:title="pub const fn calculate_chunk_size&lt;D&gt;(data_size: usize) &#45;&gt; usize where &#160;&#160;&#160;&#160;D: FixedOutput, &#160;&#160;&#160;&#160;D::OutputSize: ArrayLength&lt;u8&gt;, { &#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0 == TARGET_TOTAL_DIGEST_SIZE % D::OutputSize::USIZ...">
<polygon fill="lightblue" stroke="black" points="696.5,-1773 535.5,-1773 535.5,-1737 696.5,-1737 696.5,-1773"/>
<text text-anchor="middle" x="616" y="-1751.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_chunk_size</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure# -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure#</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;/// invalid sender key session with distribution ID &#160;&#160;&#160;&#160;&#160;InvalidSessionStructure(&amp;&#39;static str), {distribution_id} &#160;&#160;&#160;&#160;InvalidSenderKeySession { distribution_id: Uuid }, &#160;&#160;&#160;&#160;/// session for {0} has...">
<polygon fill="lightblue" stroke="black" points="2570.5,-2138 2389.5,-2138 2389.5,-2102 2570.5,-2102 2570.5,-2138"/>
<text text-anchor="middle" x="2480" y="-2116.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidSessionStructure</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().</title>
<g id="a_node7"><a xlink:title=") &#45;&gt; Result&lt;PreKeysUsed&gt; &#160;pub async fn process_prekey( &#160;&#160;&#160;&#160;message: &amp;PreKeySignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_record: &amp;mut SessionRecord, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn Ide...">
<polygon fill="lightblue" stroke="black" points="1689.5,-2205 1566.5,-2205 1566.5,-2169 1689.5,-2169 1689.5,-2205"/>
<text text-anchor="middle" x="1628" y="-2183.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().</title>
<g id="a_node132"><a xlink:title=") &#45;&gt; Result&lt;PreKeysUsed&gt; &#160;async fn process_prekey_impl( &#160;&#160;&#160;&#160;message: &amp;PreKeySignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_record: &amp;mut SessionRecord, &#160;&#160;&#160;&#160;signed_prekey_store: &amp;dyn S...">
<polygon fill="lightblue" stroke="black" points="2250.5,-1833 2090.5,-1833 2090.5,-1797 2250.5,-1797 2250.5,-1833"/>
<text text-anchor="middle" x="2170.5" y="-1811.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().</title>
<path fill="none" stroke="gray" d="M1689.56,-2202.99C1767.65,-2219.56 1902.47,-2233.84 1979,-2160 2081.36,-2061.24 1917.5,-1945.56 2015,-1842 2031.82,-1824.14 2055.93,-1815.51 2080.12,-1811.82"/>
<polygon fill="gray" stroke="gray" points="2080.62,-1815.28 2090.11,-1810.56 2079.75,-1808.34 2080.62,-1815.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity# -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#</title>
<g id="a_node178"><a xlink:title=" &#160;&#160;&#160;/// invalid MAC key length &lt; &#160;&#160;&#160;&#160;UntrustedIdentity(crate::ProtocolAddress), &#160;&#160;&#160;&#160;&#160;/// invalid prekey identifier &#160;&#160;&#160;&#160;InvalidPreKeyId, &#160;&#160;&#160;&#160;/// invalid signed prekey identifier &#160;&#160;&#160;&#160;InvalidSignedPreKey...">
<polygon fill="lightblue" stroke="black" points="2240.5,-2129 2100.5,-2129 2100.5,-2093 2240.5,-2093 2240.5,-2129"/>
<text text-anchor="middle" x="2170.5" y="-2107.3" font-family="Helvetica,sans-Serif" font-size="14.00">UntrustedIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity# -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#</title>
<path fill="none" stroke="gray" d="M1689.56,-2188.92C1760.23,-2189.66 1880.03,-2186.23 1979,-2160 1996.1,-2155.47 1998.22,-2148.61 2015,-2143 2038.97,-2134.98 2065.74,-2128.59 2090.17,-2123.69"/>
<polygon fill="gray" stroke="gray" points="2090.98,-2127.1 2100.12,-2121.75 2089.64,-2120.22 2090.98,-2127.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving# -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving#</title>
<g id="a_node276"><a xlink:title="pub trait IdentityKeyStore &#160;&#160;&#160;&#160;&#160;Receiving, } &#160;/// Interface defining the identity store, which may be in&#45;memory, on&#45;disk, etc. /// /// Signal clients usually use the identity store in a [TOFU] manner,...">
<polygon fill="lightblue" stroke="black" points="1669.5,-4884 1586.5,-4884 1586.5,-4848 1669.5,-4848 1669.5,-4884"/>
<text text-anchor="middle" x="1628" y="-4862.3" font-family="Helvetica,sans-Serif" font-size="14.00">Receiving</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving# -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving#</title>
<path fill="none" stroke="gray" d="M1566.5,-2196.53C1480.19,-2213.58 1326.17,-2258.32 1259,-2367 1241.04,-2396.06 1241.04,-4797.94 1259,-4827 1291.48,-4879.55 1482.44,-4875.25 1576.16,-4869.79"/>
<polygon fill="gray" stroke="gray" points="1576.51,-4873.27 1586.28,-4869.17 1576.08,-4866.28 1576.51,-4873.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;/// ciphertext serialized bytes were too short &lt; &#160;&#160;&#160;&#160;InvalidProtobufEncoding, &#160;{0}&gt; &#160;&#160;&#160;&#160;CiphertextMessageTooShort(usize), &#160;&#160;&#160;&#160;/// ciphertext version was too old &lt;{0}&gt; &#160;&#160;&#160;&#160;LegacyCiphertextVersion(u...">
<polygon fill="lightblue" stroke="black" points="2573,-3632 2387,-3632 2387,-3596 2573,-3596 2573,-3632"/>
<text text-anchor="middle" x="2480" y="-3610.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidProtobufEncoding</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn test_agreement_and_authentication() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The sender and recipient each have a long&#45;term identity key pair. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_identity = IdentityKeyPair::generate(&amp;mut ra...">
<polygon fill="lightblue" stroke="black" points="748,-4133 484,-4133 484,-4097 748,-4097 748,-4133"/>
<text text-anchor="middle" x="616" y="-4111.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_agreement_and_authentication</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;pub fn generate&lt;R: CryptoRng + Rng&gt;(csprng: &amp;mut R) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let keypair = KeyPair::generate(csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;identity_key: keypair.public_key.into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pri...">
<polygon fill="lightblue" stroke="black" points="1067.5,-3828 988.5,-3828 988.5,-3792 1067.5,-3792 1067.5,-3828"/>
<text text-anchor="middle" x="1028" y="-3806.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M626.89,-4097C652.17,-4052.63 723.69,-3937.19 815,-3876 865.02,-3842.48 932.91,-3825.3 978.26,-3816.99"/>
<polygon fill="gray" stroke="gray" points="978.9,-3820.43 988.14,-3815.26 977.69,-3813.54 978.9,-3820.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(super) fn calculate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;direction: Direction, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let our_pub_key = our_...">
<polygon fill="lightblue" stroke="black" points="1067,-4504 989,-4504 989,-4468 1067,-4468 1067,-4504"/>
<text text-anchor="middle" x="1028" y="-4482.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<path fill="none" stroke="gray" d="M748.28,-4121.39C759.71,-4126.32 770.24,-4133.01 779,-4142 859.49,-4224.61 744.26,-4307.9 815,-4399 854.64,-4450.04 929.33,-4471.34 978.64,-4480.09"/>
<polygon fill="gray" stroke="gray" points="978.31,-4483.58 988.75,-4481.77 979.46,-4476.68 978.31,-4483.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt().</title>
<g id="a_node100"><a xlink:title=") &#45;&gt; Result&lt;Vec&lt;u8&gt;, EncryptionError&gt; &#160;pub(crate) fn aes256_ctr_hmacsha256_encrypt( &#160;&#160;&#160;&#160;msg: &amp;[u8], &#160;&#160;&#160;&#160;cipher_key: &amp;[u8], &#160;&#160;&#160;&#160;mac_key: &amp;[u8], { &#160;&#160;&#160;&#160;let mut ctext = aes_256_ctr_encrypt(msg, cipher_key...">
<polygon fill="lightblue" stroke="black" points="1153,-3198 903,-3198 903,-3162 1153,-3162 1153,-3198"/>
<text text-anchor="middle" x="1028" y="-3176.3" font-family="Helvetica,sans-Serif" font-size="14.00">aes256_ctr_hmacsha256_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt().</title>
<path fill="none" stroke="gray" d="M632.51,-4096.98C666.47,-4056.26 746.95,-3952.69 779,-3850 800.15,-3782.22 767.19,-3264.5 815,-3212 835.1,-3189.93 863.4,-3178.55 892.8,-3173.32"/>
<polygon fill="gray" stroke="gray" points="893.46,-3176.76 902.81,-3171.78 892.39,-3169.85 893.46,-3176.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().</title>
<g id="a_node145"><a xlink:title=") &#45;&gt; Result&lt;Vec&lt;u8&gt;, DecryptionError&gt; &#160;pub(crate) fn aes256_ctr_hmacsha256_decrypt( &#160;&#160;&#160;&#160;ctext: &amp;[u8], &#160;&#160;&#160;&#160;cipher_key: &amp;[u8], &#160;&#160;&#160;&#160;mac_key: &amp;[u8], { &#160;&#160;&#160;&#160;if ctext.len() &lt; 10 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(Decrypti...">
<polygon fill="lightblue" stroke="black" points="1153,-4390 903,-4390 903,-4354 1153,-4354 1153,-4390"/>
<text text-anchor="middle" x="1028" y="-4368.3" font-family="Helvetica,sans-Serif" font-size="14.00">aes256_ctr_hmacsha256_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().</title>
<path fill="none" stroke="gray" d="M748.35,-4122.44C759.63,-4127.19 770.11,-4133.56 779,-4142 832.81,-4193.07 764.92,-4250.26 815,-4305 835.66,-4327.58 863.86,-4342.6 892.94,-4352.58"/>
<polygon fill="gray" stroke="gray" points="892.24,-4356.03 902.83,-4355.77 894.39,-4349.37 892.24,-4356.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<g id="a_node189"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(super) fn calculate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;IdentityKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_key: &amp;[u8; 32], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ctext: &amp;[u8], { &#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1067,-4188 989,-4188 989,-4152 1067,-4152 1067,-4188"/>
<text text-anchor="middle" x="1028" y="-4166.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<path fill="none" stroke="gray" d="M748.14,-4132.59C826.88,-4143.15 922.4,-4155.97 978.75,-4163.53"/>
<polygon fill="gray" stroke="gray" points="978.42,-4167.01 988.8,-4164.88 979.35,-4160.08 978.42,-4167.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving# -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving#</title>
<path fill="none" stroke="gray" d="M748.28,-4120.33C759.87,-4125.43 770.43,-4132.45 779,-4142 872.23,-4245.86 717.3,-4669.33 815,-4769 881.47,-4836.81 1154.19,-4763.54 1241,-4802 1261.12,-4810.92 1256.92,-4827 1277,-4836 1375.6,-4880.17 1505.34,-4877.57 1575.91,-4871.79"/>
<polygon fill="gray" stroke="gray" points="1576.64,-4875.23 1586.3,-4870.87 1576.03,-4868.26 1576.64,-4875.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<g id="a_node281"><a xlink:title="pub trait IdentityKeyStore &#160;&#160;&#160;&#160;&#160;Sending, &#160;&#160;&#160;&#160;/// We are in the context of receiving a message. &#160;&#160;&#160;&#160;Receiving, } &#160;/// Interface defining the identity store, which may be in&#45;memory, on&#45;disk, etc. /// //...">
<polygon fill="lightblue" stroke="black" points="1665,-4938 1591,-4938 1591,-4902 1665,-4902 1665,-4938"/>
<text text-anchor="middle" x="1628" y="-4916.3" font-family="Helvetica,sans-Serif" font-size="14.00">Sending</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<path fill="none" stroke="gray" d="M748.3,-4120.31C759.89,-4125.41 770.44,-4132.44 779,-4142 876.53,-4250.94 718.47,-4689.18 815,-4799 942.13,-4943.63 1056.43,-4823.11 1241,-4878 1257.61,-4882.94 1260.15,-4888.95 1277,-4893 1383.45,-4918.59 1512.85,-4921.56 1580.57,-4921.06"/>
<polygon fill="gray" stroke="gray" points="1580.93,-4924.55 1590.9,-4920.95 1580.86,-4917.55 1580.93,-4924.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().</title>
<g id="a_node10"><a xlink:title="enum CurrentOrPrevious &#160;&#160;#[derive(Clone, Copy)] { &#160;&#160;&#160;&#160;Current, &#160;&#160;&#160;&#160;Previous, }">
<polygon fill="lightblue" stroke="black" points="2278.5,-2445 2062.5,-2445 2062.5,-2409 2278.5,-2409 2278.5,-2445"/>
<text text-anchor="middle" x="2170.5" y="-2423.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_message_with_state</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure# -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure#</title>
<path fill="none" stroke="gray" d="M2252,-2408.92C2279.35,-2398.88 2307.61,-2383.48 2326,-2360 2385.21,-2284.42 2296.16,-2216.87 2362,-2147 2367.21,-2141.47 2373.31,-2136.97 2379.93,-2133.32"/>
<polygon fill="gray" stroke="gray" points="2381.76,-2136.32 2389.26,-2128.84 2378.73,-2130.01 2381.76,-2136.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage# -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage#</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;/// error while invoking an ffi callback: &#160;&#160;&#160;&#160;&#160;InvalidMessage(crate::CiphertextMessageType, &amp;&#39;static str), &#160;{0} &#160;&#160;&#160;&#160;FfiBindingError(String), &#160;&#160;&#160;&#160;/// error in method call &#39;{0}&#39;: {1} &#160;&#160;&#160;&#160;Application...">
<polygon fill="lightblue" stroke="black" points="2778,-4539 2654,-4539 2654,-4503 2778,-4503 2778,-4539"/>
<text text-anchor="middle" x="2716" y="-4517.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage# -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage#</title>
<path fill="none" stroke="gray" d="M2278.58,-2438.47C2295.28,-2443.22 2311.71,-2449.83 2326,-2459 2348.74,-2473.6 2338.57,-2494.54 2362,-2508 2407.73,-2534.27 2561.59,-2494.85 2598,-2533 2668.86,-2607.25 2708.94,-4254.51 2714.36,-4492.46"/>
<polygon fill="gray" stroke="gray" points="2710.87,-4492.79 2714.6,-4502.71 2717.87,-4492.64 2710.87,-4492.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;Err(signal_crypto::DecryptionError::BadCiphertext(msg)) =&gt; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::warn!(&#39; failed to decrypt 1:1 message: {}&#39; , msg); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtoco...">
<polygon fill="lightblue" stroke="black" points="2572.5,-2445 2387.5,-2445 2387.5,-2409 2572.5,-2409 2572.5,-2445"/>
<text text-anchor="middle" x="2480" y="-2423.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_or_create_chain_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().</title>
<path fill="none" stroke="gray" d="M2278.62,-2427C2310.6,-2427 2345.56,-2427 2377.19,-2427"/>
<polygon fill="gray" stroke="gray" points="2377.34,-2430.5 2387.34,-2427 2377.34,-2423.5 2377.34,-2430.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion# -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion#</title>
<g id="a_node183"><a xlink:title=" &#160;&#160;&#160;/// fingerprint version number mismatch them &#160;&#160;&#160;&#160;&#160;UnrecognizedMessageVersion(u32), &#160;{0} us {1} &#160;&#160;&#160;&#160;FingerprintVersionMismatch(u32, u32), &#160;&#160;&#160;&#160;/// fingerprint parsing error &#160;&#160;&#160;&#160;FingerprintParsingErr...">
<polygon fill="lightblue" stroke="black" points="2592,-4149 2368,-4149 2368,-4113 2592,-4113 2592,-4149"/>
<text text-anchor="middle" x="2480" y="-4127.3" font-family="Helvetica,sans-Serif" font-size="14.00">UnrecognizedMessageVersion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion# -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion#</title>
<path fill="none" stroke="gray" d="M2193.97,-2445.09C2229.8,-2475.52 2298.62,-2540.84 2326,-2614 2380.39,-2759.32 2301.98,-3866.92 2362,-4010 2378.98,-4050.47 2416.3,-4085.1 2444.25,-4106.81"/>
<polygon fill="gray" stroke="gray" points="2442.15,-4109.6 2452.23,-4112.86 2446.37,-4104.03 2442.15,-4109.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_message_key(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_message_key().</title>
<g id="a_node211"><a xlink:title=" &#160;&#160;&#160;let previous_index = if current_index &gt; 0 &#160;&#160;&#160;&#160;&#160;&#160;state.set_root_key(&amp;sender_chain.0); &#160;&#160;&#160;&#160;state.add_receiver_chain(their_ephemeral, &amp;receiver_chain.1); &#160;&#160;&#160;&#160;&#160;let current_index = state.get_sender_cha...">
<polygon fill="lightblue" stroke="black" points="2584.5,-2499 2375.5,-2499 2375.5,-2463 2584.5,-2463 2584.5,-2499"/>
<text text-anchor="middle" x="2480" y="-2477.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_or_create_message_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_message_key(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_message_key().</title>
<path fill="none" stroke="gray" d="M2274.32,-2445.06C2303.81,-2450.24 2336.12,-2455.91 2366.18,-2461.19"/>
<polygon fill="gray" stroke="gray" points="2365.82,-2464.68 2376.28,-2462.96 2367.03,-2457.78 2365.82,-2464.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seal...">
<polygon fill="lightblue" stroke="black" points="243.5,-4747 189.5,-4747 189.5,-4711 243.5,-4711 243.5,-4747"/>
<text text-anchor="middle" x="216.5" y="-4725.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown# -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#</title>
<g id="a_node12"><a xlink:title="impl ContentHint &#160;&#160;&#160;&#160;&#160;Unknown(u32), } &#160;{ &#160;&#160;&#160;&#160;fn to_proto(self) &#45;&gt; Option&lt;i32&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if self == ContentHint::Default { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(u32::from(self) as i32) &#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2211.5,-4297 2129.5,-4297 2129.5,-4261 2211.5,-4261 2211.5,-4297"/>
<text text-anchor="middle" x="2170.5" y="-4275.3" font-family="Helvetica,sans-Serif" font-size="14.00">Unknown</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default# -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default#</title>
<g id="a_node24"><a xlink:title="impl ContentHint &#160;&#160;&#160;&#160;&#160;Default, &#160;&#160;&#160;&#160;Resendable, &#160;&#160;&#160;&#160;Implicit, &#160;&#160;&#160;&#160;Unknown(u32), } &#160;{ &#160;&#160;&#160;&#160;fn to_proto(self) &#45;&gt; Option&lt;i32&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if self == ContentHint::Default { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else { &#160;...">
<polygon fill="lightblue" stroke="black" points="2513.5,-4226 2446.5,-4226 2446.5,-4190 2513.5,-4190 2513.5,-4226"/>
<text text-anchor="middle" x="2480" y="-4204.3" font-family="Helvetica,sans-Serif" font-size="14.00">Default</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default# -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default#</title>
<path fill="none" stroke="gray" d="M2211.82,-4271.99C2243.17,-4266.22 2287.65,-4257.33 2326,-4247 2342.29,-4242.62 2345.76,-4239.57 2362,-4235 2386.45,-4228.12 2414.13,-4221.67 2436.43,-4216.81"/>
<polygon fill="gray" stroke="gray" points="2437.22,-4220.21 2446.26,-4214.68 2435.75,-4213.37 2437.22,-4220.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Implicit# -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Implicit#</title>
<g id="a_node42"><a xlink:title="impl ContentHint &#160;&#160;&#160;&#160;&#160;Implicit, &#160;&#160;&#160;&#160;Unknown(u32), } &#160;{ &#160;&#160;&#160;&#160;fn to_proto(self) &#45;&gt; Option&lt;i32&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if self == ContentHint::Default { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(u32::from(sel...">
<polygon fill="lightblue" stroke="black" points="2514,-4334 2446,-4334 2446,-4298 2514,-4298 2514,-4334"/>
<text text-anchor="middle" x="2480" y="-4312.3" font-family="Helvetica,sans-Serif" font-size="14.00">Implicit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Implicit# -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Implicit#</title>
<path fill="none" stroke="gray" d="M2211.7,-4283.84C2269.6,-4290.8 2376.03,-4303.61 2435.64,-4310.78"/>
<polygon fill="gray" stroke="gray" points="2435.5,-4314.29 2445.85,-4312.01 2436.34,-4307.34 2435.5,-4314.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[u32][`From&lt;ContentHint&gt;`]from(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[u32][`From&lt;ContentHint&gt;`]from().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;fn from(hint: ContentHint) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hint.to_u32() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2507,-4280 2453,-4280 2453,-4244 2507,-4244 2507,-4280"/>
<text text-anchor="middle" x="2480" y="-4258.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[u32][`From&lt;ContentHint&gt;`]from(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[u32][`From&lt;ContentHint&gt;`]from().</title>
<path fill="none" stroke="gray" d="M2211.7,-4276.78C2271.93,-4273.45 2384.69,-4267.21 2442.61,-4264.01"/>
<polygon fill="gray" stroke="gray" points="2442.97,-4267.5 2452.76,-4263.45 2442.58,-4260.51 2442.97,-4267.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Resendable# -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Resendable#</title>
<g id="a_node159"><a xlink:title="impl ContentHint &#160;&#160;&#160;&#160;&#160;Resendable, &#160;&#160;&#160;&#160;Implicit, &#160;&#160;&#160;&#160;Unknown(u32), } &#160;{ &#160;&#160;&#160;&#160;fn to_proto(self) &#45;&gt; Option&lt;i32&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if self == ContentHint::Default { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;So...">
<polygon fill="lightblue" stroke="black" points="2528.5,-4388 2431.5,-4388 2431.5,-4352 2528.5,-4352 2528.5,-4388"/>
<text text-anchor="middle" x="2480" y="-4366.3" font-family="Helvetica,sans-Serif" font-size="14.00">Resendable</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Resendable# -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Resendable#</title>
<path fill="none" stroke="gray" d="M2211.86,-4292.59C2267.22,-4311.22 2360.12,-4342.47 2362,-4343 2381.3,-4348.46 2402.63,-4353.63 2421.72,-4357.95"/>
<polygon fill="gray" stroke="gray" points="2420.96,-4361.37 2431.48,-4360.14 2422.49,-4354.54 2420.96,-4361.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage]new(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage]new().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_key: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: Publi...">
<polygon fill="lightblue" stroke="black" points="2507,-4801 2453,-4801 2453,-4765 2507,-4765 2507,-4801"/>
<text text-anchor="middle" x="2480" y="-4779.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node14"><a xlink:title=") &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; &#160;pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_byte...">
<polygon fill="lightblue" stroke="black" points="1686.5,-4641 1569.5,-4641 1569.5,-4605 1686.5,-4605 1686.5,-4641"/>
<text text-anchor="middle" x="1628" y="-4619.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage# -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage#</title>
<path fill="none" stroke="gray" d="M1686.52,-4618.28C1761.92,-4612.19 1898.31,-4601.49 2015,-4594 2273.95,-4577.39 2343.64,-4614.27 2598,-4563 2620.37,-4558.49 2644.23,-4550.54 2664.52,-4542.76"/>
<polygon fill="gray" stroke="gray" points="2665.84,-4546 2673.88,-4539.09 2663.29,-4539.48 2665.84,-4546"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value.len() &lt; 1 + Self::SIGNATURE_LEN { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError::CiphertextMessageTooShort(value.len())); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2208,-4001 2133,-4001 2133,-3965 2208,-3965 2208,-4001"/>
<text text-anchor="middle" x="2170.5" y="-3979.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1686.77,-4627.23C1775.57,-4632.36 1939.52,-4635.92 1979,-4596 2064.5,-4509.54 1944.97,-4149.41 2015,-4050 2039.67,-4014.98 2086.72,-3998.1 2122.45,-3990.06"/>
<polygon fill="gray" stroke="gray" points="2123.59,-3993.4 2132.66,-3987.93 2122.16,-3986.55 2123.59,-3993.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().</title>
<g id="a_node115"><a xlink:title=") &#45;&gt; Result&lt;SenderMessageKey&gt; &#160;fn get_sender_key( &#160;&#160;&#160;&#160;state: &amp;mut SenderKeyState, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;distribution_id: Uuid, { &#160;&#160;&#160;&#160;let sender_chain_key = state &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.sender_chain_key() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2233,-4539 2108,-4539 2108,-4503 2233,-4503 2233,-4539"/>
<text text-anchor="middle" x="2170.5" y="-4517.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_sender_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().</title>
<path fill="none" stroke="gray" d="M1686.76,-4626.99C1757.56,-4629.99 1880.31,-4629.01 1979,-4596 1997.01,-4589.98 1997.88,-4581.2 2015,-4573 2041.37,-4560.37 2071.62,-4549.47 2098.32,-4540.95"/>
<polygon fill="gray" stroke="gray" points="2099.49,-4544.25 2107.98,-4537.92 2097.4,-4537.57 2099.49,-4544.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SignatureValidationFailed# -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SignatureValidationFailed#</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;/// untrusted identity for address &#160;&#160;&#160;&#160;&#160;SignatureValidationFailed, &#160;{0} &#160;&#160;&#160;&#160;UntrustedIdentity(crate::ProtocolAddress), &#160;&#160;&#160;&#160;&#160;/// invalid prekey identifier &#160;&#160;&#160;&#160;InvalidPreKeyId, &#160;&#160;&#160;&#160;/// invalid signe...">
<polygon fill="lightblue" stroke="black" points="2266,-3551 2075,-3551 2075,-3515 2266,-3515 2266,-3551"/>
<text text-anchor="middle" x="2170.5" y="-3529.3" font-family="Helvetica,sans-Serif" font-size="14.00">SignatureValidationFailed</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SignatureValidationFailed# -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SignatureValidationFailed#</title>
<path fill="none" stroke="gray" d="M1686.55,-4627.36C1775.47,-4632.69 1940.09,-4636.59 1979,-4596 2058.71,-4512.85 1939.38,-3646.88 2015,-3560 2027.86,-3545.22 2045.7,-3536.62 2064.7,-3531.88"/>
<polygon fill="gray" stroke="gray" points="2065.67,-3535.26 2074.73,-3529.75 2064.22,-3528.41 2065.67,-3535.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession# -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;InvalidSenderKeySession &#160;{ distribution_id: Uuid }, &#160;&#160;&#160;&#160;/// session for {0} has invalid registration ID {1:X} &#160;&#160;&#160;&#160;InvalidRegistrationId(crate::ProtocolAddress, u32), &#160;&#160;&#160;&#160;&#160;/// message with old coun...">
<polygon fill="lightblue" stroke="black" points="2575.5,-4653 2384.5,-4653 2384.5,-4617 2575.5,-4617 2575.5,-4653"/>
<text text-anchor="middle" x="2480" y="-4631.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidSenderKeySession</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession# -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#</title>
<path fill="none" stroke="gray" d="M1686.51,-4617.54C1805.93,-4607.14 2089.37,-4587.28 2326,-4608 2344.22,-4609.6 2363.52,-4612.24 2382.06,-4615.27"/>
<polygon fill="gray" stroke="gray" points="2381.52,-4618.73 2391.97,-4616.93 2382.68,-4611.82 2381.52,-4618.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoSenderKeyState# -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoSenderKeyState#</title>
<g id="a_node164"><a xlink:title=" &#160;&#160;&#160;NoSenderKeyState &#160;{ distribution_id: Uuid }, &#160;&#160;&#160;&#160;&#160;/// session with {0} not found &#160;&#160;&#160;&#160;SessionNotFound(crate::ProtocolAddress), &#160;&#160;&#160;&#160;/// invalid session: {0} &#160;&#160;&#160;&#160;InvalidSessionStructure(&amp;&#39;static str)...">
<polygon fill="lightblue" stroke="black" points="2243.5,-4653 2097.5,-4653 2097.5,-4617 2243.5,-4617 2243.5,-4653"/>
<text text-anchor="middle" x="2170.5" y="-4631.3" font-family="Helvetica,sans-Serif" font-size="14.00">NoSenderKeyState</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoSenderKeyState# -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoSenderKeyState#</title>
<path fill="none" stroke="gray" d="M1686.59,-4624.28C1782.87,-4626.42 1976.82,-4630.72 2087.38,-4633.18"/>
<polygon fill="gray" stroke="gray" points="2087.41,-4636.68 2097.49,-4633.4 2087.57,-4629.68 2087.41,-4636.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion# -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion#</title>
<path fill="none" stroke="gray" d="M1686.53,-4636.09C1761.89,-4649.69 1894.37,-4660.9 1979,-4596 2017.15,-4566.74 1977.61,-4524.22 2015,-4494 2123.39,-4406.4 2227.3,-4552.39 2326,-4454 2412.68,-4367.6 2288.03,-4278.5 2362,-4181 2370.84,-4169.35 2382.94,-4160.38 2396.01,-4153.48"/>
<polygon fill="gray" stroke="gray" points="2397.72,-4156.54 2405.19,-4149.03 2394.67,-4150.24 2397.72,-4156.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey# -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#</title>
<g id="a_node213"><a xlink:title="impl CiphertextMessage &#160;&#160;&#160;&#160;&#160;SenderKey = 7, &#160;&#160;&#160;&#160;Plaintext = 8, } &#160;{ &#160;&#160;&#160;&#160;pub fn message_type(&amp;self) &#45;&gt; CiphertextMessageType { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CiphertextMessage::SignalMessage(_) =&gt; Cip...">
<polygon fill="lightblue" stroke="black" points="2525.5,-3716 2434.5,-3716 2434.5,-3680 2525.5,-3680 2525.5,-3716"/>
<text text-anchor="middle" x="2480" y="-3694.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey# -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#</title>
<path fill="none" stroke="gray" d="M1686.84,-4627.31C1775.74,-4632.53 1939.83,-4636.23 1979,-4596 2034.42,-4539.09 1959.68,-3939 2015,-3882 2063.29,-3832.25 2267.6,-3894.37 2326,-3857 2353.49,-3839.41 2340.96,-3817.95 2362,-3793 2385.39,-3765.27 2417.76,-3739.71 2442.53,-3722.1"/>
<polygon fill="gray" stroke="gray" points="2444.76,-3724.82 2450.94,-3716.22 2440.74,-3719.08 2444.76,-3724.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber768_keypair(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber768_keypair().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn test_kyber768_keypair() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let kp = KeyPair::generate(KeyType::Kyber768); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber768::Parameters::SECRET_KEY_LENGTH + 1, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kp.secret_key.serializ...">
<polygon fill="lightblue" stroke="black" points="2257,-1941 2084,-1941 2084,-1905 2257,-1905 2257,-1941"/>
<text text-anchor="middle" x="2170.5" y="-1919.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_kyber768_keypair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]generate(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]generate().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;pub fn generate(key_type: KeyType) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (pk, sk) = key_type.parameters().generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;secret_key: SecretKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_type, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2519.5,-1941 2440.5,-1941 2440.5,-1905 2519.5,-1905 2519.5,-1941"/>
<text text-anchor="middle" x="2480" y="-1919.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber768_keypair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]generate(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber768_keypair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2257.16,-1923C2313,-1923 2383.86,-1923 2430.27,-1923"/>
<polygon fill="gray" stroke="gray" points="2430.36,-1926.5 2440.36,-1923 2430.36,-1919.5 2430.36,-1926.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber768# -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber768#</title>
<g id="a_node111"><a xlink:title="impl KeyType &#160;&#160;&#160;&#160;&#160;Kyber768, &#160;&#160;&#160;&#160;/// Kyber1024 key &#160;&#160;&#160;&#160;Kyber1024, &#160;&#160;&#160;&#160;/// ML&#45;KEM 1024 key &#160;&#160;&#160;&#160;#[cfg(feature = &#39; mlkem1024&#39; )] &#160;&#160;&#160;&#160;MLKEM1024, } &#160;{ &#160;&#160;&#160;&#160;fn value(&amp;self) &#45;&gt; u8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self { &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2757.5,-1978 2674.5,-1978 2674.5,-1942 2757.5,-1942 2757.5,-1978"/>
<text text-anchor="middle" x="2716" y="-1956.3" font-family="Helvetica,sans-Serif" font-size="14.00">Kyber768</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber768_keypair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber768# -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber768_keypair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber768#</title>
<path fill="none" stroke="gray" d="M2257.09,-1937.22C2289.82,-1942.11 2327.55,-1947.08 2362,-1950 2469.35,-1959.1 2595.66,-1960.42 2664.31,-1960.35"/>
<polygon fill="gray" stroke="gray" points="2664.42,-1963.85 2674.42,-1960.33 2664.41,-1956.85 2664.42,-1963.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FfiBindingError# -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FfiBindingError#</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;/// error in method call &#39; &#160;&#160;&#160;&#160;FfiBindingError(String), {0}&#39;: {1} &#160;&#160;&#160;&#160;ApplicationCallbackError( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&#39;static str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#[source] Box&lt;dyn std::error::Error + Send + Sync + UnwindSafe + &#39;stat...">
<polygon fill="lightblue" stroke="black" points="277,-4693 156,-4693 156,-4657 277,-4657 277,-4693"/>
<text text-anchor="middle" x="216.5" y="-4671.3" font-family="Helvetica,sans-Serif" font-size="14.00">FfiBindingError</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_matching_identifiers() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// testMatchingFingerprints &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use crate::IdentityKeyPair; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key_pair = IdentityKe...">
<polygon fill="lightblue" stroke="black" points="735.5,-3297 496.5,-3297 496.5,-3261 735.5,-3261 735.5,-3297"/>
<text text-anchor="middle" x="616" y="-3275.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_matching_identifiers</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M630.46,-3297.01C661.96,-3340.11 740.65,-3453.59 779,-3561 811.87,-3653.07 745.37,-3709.38 815,-3778 857.48,-3819.87 929.85,-3821.86 978.04,-3817.49"/>
<polygon fill="gray" stroke="gray" points="978.64,-3820.95 988.23,-3816.44 977.93,-3813.98 978.64,-3820.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().</title>
<g id="a_node171"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Fingerprint&gt; &#160;&#160;&#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iterations: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local_key: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;remote_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;remote_key: &amp;Id...">
<polygon fill="lightblue" stroke="black" points="1055,-3101 1001,-3101 1001,-3065 1055,-3065 1055,-3101"/>
<text text-anchor="middle" x="1028" y="-3079.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().</title>
<path fill="none" stroke="gray" d="M637.08,-3260.82C671.18,-3230.89 743.67,-3171.26 815,-3138 873.42,-3110.76 947.43,-3095.48 990.77,-3088.26"/>
<polygon fill="gray" stroke="gray" points="991.52,-3091.69 1000.84,-3086.64 990.41,-3084.78 991.52,-3091.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn try_from(x: u8) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match x { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#[cfg(any(feature = &#39; kyber768&#39; , test))] &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0x07 =&gt; Ok(KeyType::Kyber768), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0x08 =&gt; Ok(KeyType::Kyber1024),...">
<polygon fill="lightblue" stroke="black" points="2208,-1887 2133,-1887 2133,-1851 2208,-1851 2208,-1887"/>
<text text-anchor="middle" x="2170.5" y="-1865.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024# -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024#</title>
<g id="a_node41"><a xlink:title="impl KeyType &#160;&#160;&#160;&#160;&#160;Kyber1024, &#160;&#160;&#160;&#160;/// ML&#45;KEM 1024 key &#160;&#160;&#160;&#160;#[cfg(feature = &#39; mlkem1024&#39; )] &#160;&#160;&#160;&#160;MLKEM1024, } &#160;{ &#160;&#160;&#160;&#160;fn value(&amp;self) &#45;&gt; u8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#[cfg(any(feature = &#39; kyber768...">
<polygon fill="lightblue" stroke="black" points="2526,-2015 2434,-2015 2434,-1979 2526,-1979 2526,-2015"/>
<text text-anchor="middle" x="2480" y="-1993.3" font-family="Helvetica,sans-Serif" font-size="14.00">Kyber1024</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024# -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024#</title>
<path fill="none" stroke="gray" d="M2208.16,-1867.53C2241.47,-1867.91 2290.65,-1872.94 2326,-1896 2350.16,-1911.76 2339.61,-1931.81 2362,-1950 2380.04,-1964.66 2403.24,-1975.24 2424.22,-1982.61"/>
<polygon fill="gray" stroke="gray" points="2423.4,-1986.03 2433.99,-1985.87 2425.62,-1979.39 2423.4,-1986.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber768# -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber768#</title>
<path fill="none" stroke="gray" d="M2208.17,-1862.56C2298.23,-1847.4 2528.06,-1812.86 2598,-1842 2642.16,-1860.4 2678.21,-1904.48 2698.12,-1933.25"/>
<polygon fill="gray" stroke="gray" points="2695.28,-1935.3 2703.77,-1941.64 2701.09,-1931.39 2695.28,-1935.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMKeyType# -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMKeyType#</title>
<g id="a_node214"><a xlink:title=" &#160;&#160;&#160;/// unexpected KEM key type &lt; &#160;&#160;&#160;&#160;BadKEMKeyType(u8), {0:#04x}&gt; (expected &lt;{1:#04x}&gt;) &#160;&#160;&#160;&#160;WrongKEMKeyType(u8, u8), &#160;&#160;&#160;&#160;/// bad KEM key length &lt;{1}&gt; for key with type &lt;{0}&gt; &#160;&#160;&#160;&#160;BadKEMKeyLength(kem::...">
<polygon fill="lightblue" stroke="black" points="2545,-1887 2415,-1887 2415,-1851 2545,-1851 2545,-1887"/>
<text text-anchor="middle" x="2480" y="-1865.3" font-family="Helvetica,sans-Serif" font-size="14.00">BadKEMKeyType</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMKeyType# -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMKeyType#</title>
<path fill="none" stroke="gray" d="M2208.29,-1869C2256.61,-1869 2342.6,-1869 2404.72,-1869"/>
<polygon fill="gray" stroke="gray" points="2404.87,-1872.5 2414.87,-1869 2404.87,-1865.5 2404.87,-1872.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/produce_and_validate(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/produce_and_validate().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn produce_and_validate() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key = TEST_HMAC_KEY; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(input in &#39; .{0,100}&#39; )| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bytes = input.as_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut incremental = new_increme...">
<polygon fill="lightblue" stroke="black" points="300,-2137 133,-2137 133,-2101 300,-2101 300,-2137"/>
<text text-anchor="middle" x="216.5" y="-2115.3" font-family="Helvetica,sans-Serif" font-size="14.00">produce_and_validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn new_incremental(key: &amp;[u8], chunk_size: usize) &#45;&gt; Incremental&lt;Hmac&lt;Sha256&gt;&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hmac = Hmac::&lt;Sha256&gt;::new_from_slice(key) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; Should be able to create a new HMAC i...">
<polygon fill="lightblue" stroke="black" points="683,-1699 549,-1699 549,-1663 683,-1663 683,-1699"/>
<text text-anchor="middle" x="616" y="-1677.3" font-family="Helvetica,sans-Serif" font-size="14.00">new_incremental</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/produce_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/produce_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().</title>
<path fill="none" stroke="gray" d="M300.22,-2129.83C340.95,-2130.29 387.52,-2122.68 417,-2092 475.62,-2031 396.25,-1775.75 453,-1713 474.34,-1689.41 507.61,-1680.25 538.47,-1677.46"/>
<polygon fill="gray" stroke="gray" points="539.08,-1680.92 548.82,-1676.74 538.6,-1673.94 539.08,-1680.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_sizes_sha512(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_sizes_sha512().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;fn chunk_sizes_sha512() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (data_size, expected) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(0, MINIMUM_CHUNK_SIZE), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(KIBIBYTES, MINIMUM_CHUNK_SIZE), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(10 * KIBIBYTES, MINIMUM_CHUNK_SIZE)...">
<polygon fill="lightblue" stroke="black" points="296,-2353 137,-2353 137,-2317 296,-2317 296,-2353"/>
<text text-anchor="middle" x="216.5" y="-2331.3" font-family="Helvetica,sans-Serif" font-size="14.00">chunk_sizes_sha512</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_sizes_sha512().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/calculate_chunk_size(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_sizes_sha512().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/calculate_chunk_size().</title>
<path fill="none" stroke="gray" d="M296.31,-2346.06C338.11,-2347.2 386.91,-2340.15 417,-2308 497.06,-2222.46 374.26,-1868.76 453,-1782 471.18,-1761.97 498.14,-1753.08 524.87,-1749.82"/>
<polygon fill="gray" stroke="gray" points="525.46,-1753.28 535.08,-1748.83 524.79,-1746.31 525.46,-1753.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V2# -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V2#</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;V2 &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ephemeral_public: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encrypted_message_key: &amp;&#39;a [u8; sealed_sender_v2::MESSAGE_KEY_LEN], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authentication_tag: &amp;&#39;a [u8; sealed_sender_v2::AUTH_TAG_LEN], &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1655,-4351 1601,-4351 1601,-4315 1655,-4315 1655,-4351"/>
<text text-anchor="middle" x="1628" y="-4329.3" font-family="Helvetica,sans-Serif" font-size="14.00">V2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys_with_label(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys_with_label().</title>
<g id="a_node22"><a xlink:title="fn derive_keys_with_label(label: &amp;[u8], secret_input: &amp;[u8]) &#45;&gt; (RootKey, ChainKey) &#160;{ &#160;&#160;&#160;&#160;let mut secrets = [0; 64]; &#160;&#160;&#160;&#160;hkdf::Hkdf::&lt;sha2::Sha256&gt;::new(None, secret_input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expand(label, &amp;mu...">
<polygon fill="lightblue" stroke="black" points="3018,-1489 2844,-1489 2844,-1453 3018,-1453 3018,-1489"/>
<text text-anchor="middle" x="2931" y="-1467.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_keys_with_label</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().</title>
<g id="a_node230"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn new(key: [u8; 32], index: u32) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { key, index } &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="3118,-1267 3064,-1267 3064,-1231 3118,-1231 3118,-1267"/>
<text text-anchor="middle" x="3091" y="-1245.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys_with_label().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys_with_label().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().</title>
<path fill="none" stroke="gray" d="M2949,-1452.66C2969.04,-1430.6 3002.81,-1392.02 3028,-1356 3046.2,-1329.98 3064.06,-1298.32 3075.9,-1276.22"/>
<polygon fill="gray" stroke="gray" points="3079,-1277.85 3080.59,-1267.37 3072.81,-1274.57 3079,-1277.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]new(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]new().</title>
<g id="a_node235"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn new(key: [u8; 32]) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { key } &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2958,-1159 2904,-1159 2904,-1123 2958,-1123 2958,-1159"/>
<text text-anchor="middle" x="2931" y="-1137.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys_with_label().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]new(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys_with_label().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]new().</title>
<path fill="none" stroke="gray" d="M2904.07,-1452.84C2875.03,-1431.45 2830.48,-1392.95 2812,-1347 2797.9,-1311.95 2793.9,-1210.16 2812,-1177 2827.34,-1148.91 2864.84,-1141.28 2893.67,-1139.84"/>
<polygon fill="gray" stroke="gray" points="2893.95,-1143.33 2903.85,-1139.56 2893.76,-1136.33 2893.95,-1143.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/final_result_should_be_equal_to_non_incremental_hmac(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/final_result_should_be_equal_to_non_incremental_hmac().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;fn final_result_should_be_equal_to_non_incremental_hmac() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key = TEST_HMAC_KEY; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(input in &#39; .{0,100}&#39; )| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bytes = input.as_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="lightblue" stroke="black" points="417,-1705 16,-1705 16,-1669 417,-1669 417,-1705"/>
<text text-anchor="middle" x="216.5" y="-1683.3" font-family="Helvetica,sans-Serif" font-size="14.00">final_result_should_be_equal_to_non_incremental_hmac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/final_result_should_be_equal_to_non_incremental_hmac().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/final_result_should_be_equal_to_non_incremental_hmac().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().</title>
<path fill="none" stroke="gray" d="M417.12,-1683.99C460.45,-1683.33 503.73,-1682.68 538.71,-1682.15"/>
<polygon fill="gray" stroke="gray" points="538.87,-1685.65 548.82,-1682 538.76,-1678.65 538.87,-1685.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256().</title>
<g id="a_node166"><a xlink:title="pub(crate) fn hmac_sha256(key: &amp;[u8], input: &amp;[u8]) &#45;&gt; [u8; 32] &#160;{ &#160;&#160;&#160;&#160;let mut hmac = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Hmac::&lt;Sha256&gt;::new_from_slice(key).expect(&#39; HMAC&#45;SHA256 should accept any size key&#39; ); &#160;&#160;&#160;&#160;hmac.update(in...">
<polygon fill="lightblue" stroke="black" points="1684.5,-1599 1571.5,-1599 1571.5,-1563 1684.5,-1563 1684.5,-1599"/>
<text text-anchor="middle" x="1628" y="-1577.3" font-family="Helvetica,sans-Serif" font-size="14.00">hmac_sha256</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/final_result_should_be_equal_to_non_incremental_hmac().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/final_result_should_be_equal_to_non_incremental_hmac().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256().</title>
<path fill="none" stroke="gray" d="M354.68,-1669C375.57,-1666.09 396.87,-1663.04 417,-1660 433.04,-1657.58 436.88,-1655.84 453,-1654 873.46,-1606.02 1382.48,-1587.88 1561.18,-1582.71"/>
<polygon fill="gray" stroke="gray" points="1561.32,-1586.21 1571.21,-1582.43 1561.12,-1579.22 1561.32,-1586.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/incremental_macs_are_valid(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/incremental_macs_are_valid().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn incremental_macs_are_valid() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key = TEST_HMAC_KEY; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(input in &#39; .{50,100}&#39; )| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bytes = input.as_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut incremental = new_...">
<polygon fill="lightblue" stroke="black" points="321.5,-1489 111.5,-1489 111.5,-1453 321.5,-1453 321.5,-1489"/>
<text text-anchor="middle" x="216.5" y="-1467.3" font-family="Helvetica,sans-Serif" font-size="14.00">incremental_macs_are_valid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/incremental_macs_are_valid().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/incremental_macs_are_valid().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().</title>
<path fill="none" stroke="gray" d="M321.64,-1469.04C354.1,-1472.5 388.77,-1480.69 417,-1498 440.97,-1512.69 433.88,-1529.4 453,-1550 492.13,-1592.16 545.16,-1632.49 579.72,-1657"/>
<polygon fill="gray" stroke="gray" points="577.89,-1659.99 588.09,-1662.88 581.92,-1654.26 577.89,-1659.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/incremental_macs_are_valid().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/incremental_macs_are_valid().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256().</title>
<path fill="none" stroke="gray" d="M321.72,-1479.13C596.76,-1500.6 1336.47,-1558.33 1561.29,-1575.87"/>
<polygon fill="gray" stroke="gray" points="1561.05,-1579.36 1571.29,-1576.65 1561.59,-1572.38 1561.05,-1579.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;fn try_from(private_key: PrivateKey) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key = IdentityKey::new(private_key.public_key()?); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::new(identity_key, private_key)) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="254,-4423 179,-4423 179,-4387 254,-4387 254,-4423"/>
<text text-anchor="middle" x="216.5" y="-4401.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]new(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]new().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;pub fn new(public_key: PublicKey) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { public_key } &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="643,-4585 589,-4585 589,-4549 643,-4549 643,-4585"/>
<text text-anchor="middle" x="616" y="-4563.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]new(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]new().</title>
<path fill="none" stroke="gray" d="M254.04,-4399.3C297.85,-4394.63 371.11,-4393.99 417,-4432 455.96,-4464.28 414.53,-4507.13 453,-4540 487.82,-4569.76 542.73,-4572.8 578.81,-4570.94"/>
<polygon fill="gray" stroke="gray" points="579.16,-4574.42 588.9,-4570.26 578.69,-4567.44 579.16,-4574.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]new(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]new().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;pub fn new(identity_key: IdentityKey, private_key: PrivateKey) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;identity_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="643,-4639 589,-4639 589,-4603 643,-4603 643,-4639"/>
<text text-anchor="middle" x="616" y="-4617.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]new(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]new().</title>
<path fill="none" stroke="gray" d="M254.32,-4398.58C298.77,-4393.09 373,-4391.55 417,-4432 471.3,-4481.91 399.47,-4543.26 453,-4594 486.34,-4625.6 541.87,-4628.12 578.46,-4625.65"/>
<polygon fill="gray" stroke="gray" points="579.03,-4629.11 588.7,-4624.79 578.45,-4622.14 579.03,-4629.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;fn test_identity_key_from() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut OsRng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair_public_serialized = key_pair.public_key.serialize(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key = IdentityKe...">
<polygon fill="lightblue" stroke="black" points="302.5,-4369 130.5,-4369 130.5,-4333 302.5,-4333 302.5,-4369"/>
<text text-anchor="middle" x="216.5" y="-4347.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_identity_key_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`From&lt;PublicKey&gt;`]from(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`From&lt;PublicKey&gt;`]from().</title>
<polygon fill="lightblue" stroke="black" points="643,-4531 589,-4531 589,-4495 643,-4495 643,-4531"/>
<text text-anchor="middle" x="616" y="-4509.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`From&lt;PublicKey&gt;`]from(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`From&lt;PublicKey&gt;`]from().</title>
<path fill="none" stroke="gray" d="M302.72,-4343.18C341.51,-4344.1 385.64,-4352.03 417,-4378 455.96,-4410.28 414.53,-4453.13 453,-4486 487.82,-4515.76 542.73,-4518.8 578.81,-4516.94"/>
<polygon fill="gray" stroke="gray" points="579.16,-4520.42 588.9,-4516.26 578.69,-4513.44 579.16,-4520.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value.is_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError::CiphertextMessageTooShort(0)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value[0] != Self::PLAINTE...">
<polygon fill="lightblue" stroke="black" points="2208,-4149 2133,-4149 2133,-4113 2208,-4113 2208,-4149"/>
<text text-anchor="middle" x="2170.5" y="-4127.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort# -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#</title>
<g id="a_node177"><a xlink:title=" &#160;&#160;&#160;/// ciphertext version was too old &lt; &#160;&#160;&#160;&#160;CiphertextMessageTooShort(usize), {0}&gt; &#160;&#160;&#160;&#160;LegacyCiphertextVersion(u8), &#160;&#160;&#160;&#160;/// ciphertext version was unrecognized &lt;{0}&gt; &#160;&#160;&#160;&#160;UnrecognizedCiphertextVersion...">
<polygon fill="lightblue" stroke="black" points="2585,-4001 2375,-4001 2375,-3965 2585,-3965 2585,-4001"/>
<text text-anchor="middle" x="2480" y="-3979.3" font-family="Helvetica,sans-Serif" font-size="14.00">CiphertextMessageTooShort</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort# -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#</title>
<path fill="none" stroke="gray" d="M2208.26,-4129.65C2240.53,-4127.31 2288.1,-4120.97 2326,-4104 2377.42,-4080.97 2426.62,-4036.78 2454.77,-4008.65"/>
<polygon fill="gray" stroke="gray" points="2457.61,-4010.75 2462.14,-4001.17 2452.63,-4005.84 2457.61,-4010.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion# -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion#</title>
<path fill="none" stroke="gray" d="M2208.29,-4131C2245.2,-4131 2304.11,-4131 2357.55,-4131"/>
<polygon fill="gray" stroke="gray" points="2357.81,-4134.5 2367.81,-4131 2357.81,-4127.5 2357.81,-4134.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut OsRng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::generate(&amp;mut OsRng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signa...">
<polygon fill="lightblue" stroke="black" points="730,-3787 502,-3787 502,-3751 730,-3751 730,-3787"/>
<text text-anchor="middle" x="616" y="-3765.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M730.12,-3780.31C811.45,-3788.45 917.12,-3799.01 977.97,-3805.1"/>
<polygon fill="gray" stroke="gray" points="977.77,-3808.59 988.07,-3806.11 978.46,-3801.63 977.77,-3808.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#encapsulate(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#encapsulate().</title>
<g id="a_node31"><a xlink:title="trait DynParameters &#160;&#160;&#160;&#160;&#160;fn encapsulate(pub_key: &amp;KeyMaterial&lt;Public&gt;) &#45;&gt; (SharedSecret, RawCiphertext); &#160;&#160;&#160;&#160;fn decapsulate(secret_key: &amp;KeyMaterial&lt;Secret&gt;, ciphertext: &amp;[u8]) &#45;&gt; Result&lt;SharedSecret&gt;...">
<polygon fill="lightblue" stroke="black" points="666.5,-4369 565.5,-4369 565.5,-4333 666.5,-4333 666.5,-4369"/>
<text text-anchor="middle" x="616" y="-4347.3" font-family="Helvetica,sans-Serif" font-size="14.00">encapsulate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/process_sender_key_distribution_message(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/process_sender_key_distribution_message().</title>
<g id="a_node32"><a xlink:title=") &#45;&gt; Result&lt;()&gt; &#160;pub async fn process_sender_key_distribution_message( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;skdm: &amp;SenderKeyDistributionMessage, &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, { &#160;&#160;&#160;&#160;let d...">
<polygon fill="lightblue" stroke="black" points="2326,-4801 2015,-4801 2015,-4765 2326,-4765 2326,-4801"/>
<text text-anchor="middle" x="2170.5" y="-4779.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_sender_key_distribution_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty().</title>
<g id="a_node186"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn new_empty() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;states: VecDeque::with_capacity(consts::MAX_SENDER_KEY_STATES), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2528,-4747 2432,-4747 2432,-4711 2528,-4711 2528,-4747"/>
<text text-anchor="middle" x="2480" y="-4725.3" font-family="Helvetica,sans-Serif" font-size="14.00">new_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/process_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/process_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty().</title>
<path fill="none" stroke="gray" d="M2274.97,-4764.94C2292.02,-4761.96 2309.51,-4758.9 2326,-4756 2357.73,-4750.43 2393.15,-4744.18 2421.91,-4739.1"/>
<polygon fill="gray" stroke="gray" points="2422.55,-4742.54 2431.79,-4737.35 2421.33,-4735.65 2422.55,-4742.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn test_agreement_and_authentication() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The sender and recipient each have a long&#45;term identity key pair. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_identity = IdentityKeyPair::generate(&amp;mut ra...">
<polygon fill="lightblue" stroke="black" points="748,-4747 484,-4747 484,-4711 748,-4711 748,-4747"/>
<text text-anchor="middle" x="616" y="-4725.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_agreement_and_authentication</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M748.02,-4723.96C759.74,-4718.83 770.4,-4711.71 779,-4702 839.89,-4633.21 758.95,-3948.78 815,-3876 853.21,-3826.39 928.29,-3813.16 978.06,-3810.12"/>
<polygon fill="gray" stroke="gray" points="978.46,-3813.61 988.28,-3809.62 978.12,-3806.62 978.46,-3813.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(super) fn new(m: &amp;[u8]) &#45;&gt; DerivedKeys &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kdf: hkdf::Hkdf::&lt;sha2::Sha256&gt;::new(None, m), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1055,-4598 1001,-4598 1001,-4562 1055,-4562 1055,-4598"/>
<text text-anchor="middle" x="1028" y="-4576.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new().</title>
<path fill="none" stroke="gray" d="M748.34,-4719.7C759.41,-4715.28 769.85,-4709.5 779,-4702 813.91,-4673.37 779.54,-4634.95 815,-4607 865.55,-4567.15 944.95,-4568.91 990.88,-4574.19"/>
<polygon fill="gray" stroke="gray" points="990.61,-4577.68 1000.97,-4575.47 991.49,-4570.74 990.61,-4577.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;[u8; AUTH_TAG_LEN]&gt; &#160;&#160;&#160;&#160;&#160;pub(super) fn compute_authentication_tag( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;IdentityKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_key: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;direction: Direction, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ephemeral_...">
<polygon fill="lightblue" stroke="black" points="1134.5,-4652 921.5,-4652 921.5,-4616 1134.5,-4616 1134.5,-4652"/>
<text text-anchor="middle" x="1028" y="-4630.3" font-family="Helvetica,sans-Serif" font-size="14.00">compute_authentication_tag</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<path fill="none" stroke="gray" d="M748.34,-4715.21C759.04,-4711.68 769.41,-4707.34 779,-4702 800.19,-4690.21 793.59,-4672.38 815,-4661 844.17,-4645.5 878.7,-4637.51 911.32,-4633.69"/>
<polygon fill="gray" stroke="gray" points="911.8,-4637.16 921.38,-4632.64 911.07,-4630.2 911.8,-4637.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<g id="a_node209"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;[u8; MESSAGE_KEY_LEN]&gt; &#160;&#160;&#160;&#160;&#160;pub(super) fn apply_agreement_xor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;direction: Direction, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input: &amp;[u8; MESSAGE_KEY...">
<polygon fill="lightblue" stroke="black" points="1110.5,-4760 945.5,-4760 945.5,-4724 1110.5,-4724 1110.5,-4760"/>
<text text-anchor="middle" x="1028" y="-4738.3" font-family="Helvetica,sans-Serif" font-size="14.00">apply_agreement_xor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<path fill="none" stroke="gray" d="M748.14,-4733.16C809.12,-4735.09 880.17,-4737.34 935.3,-4739.09"/>
<polygon fill="gray" stroke="gray" points="935.29,-4742.59 945.4,-4739.41 935.51,-4735.6 935.29,-4742.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving# -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving#</title>
<path fill="none" stroke="gray" d="M748,-4738.71C759.15,-4743.05 769.69,-4748.69 779,-4756 810.95,-4781.08 781.45,-4817.1 815,-4840 938.91,-4924.58 1417.62,-4886.54 1575.88,-4871.27"/>
<polygon fill="gray" stroke="gray" points="1576.66,-4874.71 1586.28,-4870.26 1575.98,-4867.74 1576.66,-4874.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<path fill="none" stroke="gray" d="M748.19,-4737.21C759.43,-4741.83 769.94,-4747.95 779,-4756 821.89,-4794.13 769.97,-4844.42 815,-4880 934.08,-4974.1 1426.13,-4938.33 1580.47,-4924.48"/>
<polygon fill="gray" stroke="gray" points="1580.93,-4927.95 1590.57,-4923.56 1580.29,-4920.98 1580.93,-4927.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<g id="a_node34"><a xlink:title=") &#45;&gt; Result&lt;SenderKeyDistributionMessage&gt; &#160;pub async fn create_sender_key_distribution_message&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;sender_key_store: &amp;mut ...">
<polygon fill="lightblue" stroke="black" points="2320.5,-4747 2020.5,-4747 2020.5,-4711 2320.5,-4711 2320.5,-4747"/>
<text text-anchor="middle" x="2170.5" y="-4725.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_sender_key_distribution_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage]new(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage]new().</title>
<path fill="none" stroke="gray" d="M2274.97,-4747.06C2292.02,-4750.04 2309.51,-4753.1 2326,-4756 2365.98,-4763.02 2411.83,-4771.12 2442.83,-4776.6"/>
<polygon fill="gray" stroke="gray" points="2442.28,-4780.06 2452.74,-4778.35 2443.5,-4773.16 2442.28,-4780.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession# -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#</title>
<path fill="none" stroke="gray" d="M2230.43,-4710.99C2281.73,-4695.3 2356.14,-4672.56 2410.17,-4656.04"/>
<polygon fill="gray" stroke="gray" points="2411.47,-4659.3 2420.01,-4653.03 2409.43,-4652.61 2411.47,-4659.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty().</title>
<path fill="none" stroke="gray" d="M2320.75,-4729C2356.59,-4729 2392.76,-4729 2421.45,-4729"/>
<polygon fill="gray" stroke="gray" points="2421.67,-4732.5 2431.67,-4729 2421.67,-4725.5 2421.67,-4732.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/get_encoded_string(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/get_encoded_string().</title>
<g id="a_node35"><a xlink:title="fn get_encoded_string(fprint: &amp;[u8]) &#45;&gt; Result&lt;String&gt; &#160;{ &#160;&#160;&#160;&#160;if fprint.len() &lt; 30 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError::InvalidArgument( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; DisplayableFingerprint created with short en...">
<polygon fill="lightblue" stroke="black" points="2246.5,-3067 2094.5,-3067 2094.5,-3031 2246.5,-3031 2246.5,-3067"/>
<text text-anchor="middle" x="2170.5" y="-3045.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_encoded_string</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument# -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument#</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;/// invalid state for call to &#160;&#160;&#160;&#160;&#160;InvalidArgument(String), {0} to succeed: {1} &#160;&#160;&#160;&#160;InvalidState(&amp;&#39;static str, String), &#160;&#160;&#160;&#160;&#160;/// protobuf encoding was invalid &#160;&#160;&#160;&#160;InvalidProtobufEncoding, &#160;&#160;&#160;&#160;&#160;///...">
<polygon fill="lightblue" stroke="black" points="2546,-2994 2414,-2994 2414,-2958 2546,-2958 2546,-2994"/>
<text text-anchor="middle" x="2480" y="-2972.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidArgument</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/get_encoded_string().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument# -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/get_encoded_string().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument#</title>
<path fill="none" stroke="gray" d="M2246.52,-3037.74C2271.89,-3033.44 2300.3,-3028.09 2326,-3022 2355.45,-3015.03 2387.58,-3005.64 2414.77,-2997.17"/>
<polygon fill="gray" stroke="gray" points="2416.06,-3000.43 2424.55,-2994.09 2413.96,-2993.75 2416.06,-3000.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(data: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pb = proto::sealed_sender::unidentified_sender_message::Message::decode(data) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::InvalidPr...">
<polygon fill="lightblue" stroke="black" points="1073.5,-4007 982.5,-4007 982.5,-3971 1073.5,-3971 1073.5,-4007"/>
<text text-anchor="middle" x="1028" y="-3985.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M1073.68,-3989.9C1252.05,-3993.1 1907,-4000.93 1979,-3945 2022.3,-3911.36 1972.28,-3861.37 2015,-3827 2069.02,-3783.54 2272.59,-3846.21 2326,-3802 2372.51,-3763.5 2323.43,-3717.46 2362,-3671 2374.41,-3656.05 2391.69,-3644.71 2409.16,-3636.24"/>
<polygon fill="gray" stroke="gray" points="2410.65,-3639.41 2418.29,-3632.07 2407.74,-3633.04 2410.65,-3639.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default# -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default#</title>
<path fill="none" stroke="gray" d="M1073.81,-3990.41C1299.35,-3997.6 2300.59,-4030.55 2326,-4050 2366.18,-4080.75 2327.72,-4120.78 2362,-4158 2381.6,-4179.28 2411.76,-4191.87 2436.55,-4199.1"/>
<polygon fill="gray" stroke="gray" points="2435.89,-4202.54 2446.45,-4201.78 2437.72,-4195.79 2435.89,-4202.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;fn from(raw_value: u32) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::sealed_sender::unidentified_sender_message::message::ContentHint as ProtoContentHint; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!ProtoContentHint::is_valid(0)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1655,-4169 1601,-4169 1601,-4133 1655,-4133 1655,-4169"/>
<text text-anchor="middle" x="1628" y="-4147.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().</title>
<path fill="none" stroke="gray" d="M1069.49,-4007.06C1117.98,-4028.09 1202.06,-4062.66 1277,-4084 1389.44,-4116.03 1526.6,-4137.28 1590.72,-4146.21"/>
<polygon fill="gray" stroke="gray" points="1590.34,-4149.7 1600.73,-4147.59 1591.3,-4142.76 1590.34,-4149.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().</title>
<g id="a_node168"><a xlink:title=" &#160;&#160;&#160;fn from(message_type: ProtoMessageType) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = match message_type { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtoMessageType::Message =&gt; Self::Whisper, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtoMessageType::PrekeyMessage =&gt; ...">
<polygon fill="lightblue" stroke="black" points="1655,-2765 1601,-2765 1601,-2729 1655,-2729 1655,-2765"/>
<text text-anchor="middle" x="1628" y="-2743.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().</title>
<path fill="none" stroke="gray" d="M1073.74,-3990.74C1123.33,-3989.95 1201.51,-3980.11 1241,-3930 1310.92,-3841.28 1215.05,-3008.46 1277,-2914 1349.5,-2803.46 1516.67,-2764.25 1590.65,-2751.97"/>
<polygon fill="gray" stroke="gray" points="1591.54,-2755.37 1600.87,-2750.35 1590.44,-2748.46 1591.54,-2755.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().</title>
<g id="a_node175"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(data: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pb = proto::sealed_sender::SenderCertificate::decode(data) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::InvalidProtobufEncoding)?; &#160;...">
<polygon fill="lightblue" stroke="black" points="1673.5,-3753 1582.5,-3753 1582.5,-3717 1673.5,-3717 1673.5,-3753"/>
<text text-anchor="middle" x="1628" y="-3731.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().</title>
<path fill="none" stroke="gray" d="M1073.83,-3988.78C1121.65,-3986.08 1196.5,-3974.38 1241,-3930 1282.84,-3888.27 1233.47,-3841.97 1277,-3802 1358.16,-3727.46 1495.82,-3724.21 1572.07,-3729.13"/>
<polygon fill="gray" stroke="gray" points="1572.18,-3732.65 1582.41,-3729.88 1572.68,-3725.67 1572.18,-3732.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[DisplayableFingerprint]new(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[DisplayableFingerprint]new().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;pub fn new(local: &amp;[u8], remote: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local: get_encoded_string(local)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;remote: get_encoded_string(remote)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1655,-3087 1601,-3087 1601,-3051 1655,-3051 1655,-3087"/>
<text text-anchor="middle" x="1628" y="-3065.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[DisplayableFingerprint]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/get_encoded_string(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[DisplayableFingerprint]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/get_encoded_string().</title>
<path fill="none" stroke="gray" d="M1655.07,-3068.04C1731.68,-3065.2 1958.56,-3056.81 2083.9,-3052.17"/>
<polygon fill="gray" stroke="gray" points="2084.36,-3055.65 2094.23,-3051.79 2084.1,-3048.66 2084.36,-3055.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]deserialize(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]deserialize().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(protobuf: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let fingerprint = proto::fingerprint::CombinedFingerprints::decode(protobuf) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::Fingerprin...">
<polygon fill="lightblue" stroke="black" points="262,-4315 171,-4315 171,-4279 262,-4279 262,-4315"/>
<text text-anchor="middle" x="216.5" y="-4293.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FingerprintParsingError# -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FingerprintParsingError#</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;/// bad key type &lt; &#160;&#160;&#160;&#160;FingerprintParsingError, &#160;&#160;&#160;&#160;&#160;/// no key type identifier &#160;&#160;&#160;&#160;NoKeyTypeIdentifier, {0:#04x}&gt; &#160;&#160;&#160;&#160;BadKeyType(u8), &#160;&#160;&#160;&#160;/// bad key length &lt;{1}&gt; for key with type &lt;{0}&gt; &#160;&#160;&#160;&#160;BadK...">
<polygon fill="lightblue" stroke="black" points="704.5,-4423 527.5,-4423 527.5,-4387 704.5,-4387 704.5,-4423"/>
<text text-anchor="middle" x="616" y="-4401.3" font-family="Helvetica,sans-Serif" font-size="14.00">FingerprintParsingError</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FingerprintParsingError# -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FingerprintParsingError#</title>
<path fill="none" stroke="gray" d="M262.24,-4292.97C305.15,-4291.3 370.17,-4294.73 417,-4324 441.46,-4339.29 428.78,-4362.34 453,-4378 472.08,-4390.34 494.99,-4397.61 517.48,-4401.78"/>
<polygon fill="gray" stroke="gray" points="516.99,-4405.24 527.43,-4403.43 518.14,-4398.34 516.99,-4405.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FingerprintVersionMismatch# -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FingerprintVersionMismatch#</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;/// bad key type &lt; &#160;&#160;&#160;&#160;FingerprintVersionMismatch(u32, u32), &#160;&#160;&#160;&#160;/// fingerprint parsing error &#160;&#160;&#160;&#160;FingerprintParsingError, &#160;&#160;&#160;&#160;&#160;/// no key type identifier &#160;&#160;&#160;&#160;NoKeyTypeIdentifier, {0:#04x}&gt; &#160;&#160;&#160;&#160;B...">
<polygon fill="lightblue" stroke="black" points="721,-4477 511,-4477 511,-4441 721,-4441 721,-4477"/>
<text text-anchor="middle" x="616" y="-4455.3" font-family="Helvetica,sans-Serif" font-size="14.00">FingerprintVersionMismatch</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FingerprintVersionMismatch# -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#FingerprintVersionMismatch#</title>
<path fill="none" stroke="gray" d="M262.04,-4290.53C306.35,-4286.69 373.8,-4288.22 417,-4324 455.96,-4356.28 414.53,-4399.13 453,-4432 466.72,-4443.72 483.55,-4451.3 501.12,-4456.06"/>
<polygon fill="gray" stroke="gray" points="500.41,-4459.49 510.95,-4458.43 502.05,-4452.68 500.41,-4459.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]get_fingerprint(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]get_fingerprint().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; &#160;&#160;&#160;&#160;&#160;fn get_fingerprint( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iterations: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local_key: &amp;IdentityKey, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if iterations &lt;= 1 || iterations &gt; 1000000 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2230.5,-3013 2110.5,-3013 2110.5,-2977 2230.5,-2977 2230.5,-3013"/>
<text text-anchor="middle" x="2170.5" y="-2991.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_fingerprint</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]get_fingerprint().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument# -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]get_fingerprint().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument#</title>
<path fill="none" stroke="gray" d="M2230.79,-2991.34C2280.06,-2988.29 2350.46,-2983.94 2403.7,-2980.65"/>
<polygon fill="gray" stroke="gray" points="2404.01,-2984.14 2413.78,-2980.03 2403.58,-2977.15 2404.01,-2984.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/test/aes_ctr_test(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/test/aes_ctr_test().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;fn aes_ctr_test() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key = hex!(&#39; 603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ptext = [0u8; 35]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ctext = aes_256_ctr_encrypt(&amp;ptext, &amp;...">
<polygon fill="lightblue" stroke="black" points="1677.5,-4587 1578.5,-4587 1578.5,-4551 1677.5,-4551 1677.5,-4587"/>
<text text-anchor="middle" x="1628" y="-4565.3" font-family="Helvetica,sans-Serif" font-size="14.00">aes_ctr_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt().</title>
<g id="a_node142"><a xlink:title="fn aes_256_ctr_encrypt(ptext: &amp;[u8], key: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, EncryptionError&gt; &#160;{ &#160;&#160;&#160;&#160;let key: [u8; 32] = key.try_into().map_err(|_| EncryptionError::BadKeyOrIv)?; &#160;&#160;&#160;&#160;&#160;let zero_nonce = [0u8; 16...">
<polygon fill="lightblue" stroke="black" points="2250.5,-4445 2090.5,-4445 2090.5,-4409 2250.5,-4409 2250.5,-4445"/>
<text text-anchor="middle" x="2170.5" y="-4423.3" font-family="Helvetica,sans-Serif" font-size="14.00">aes_256_ctr_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/test/aes_ctr_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/test/aes_ctr_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt().</title>
<path fill="none" stroke="gray" d="M1677.52,-4578.6C1749.42,-4590.07 1885.79,-4601 1979,-4542 2006.25,-4524.75 1990.09,-4499.48 2015,-4479 2033.93,-4463.44 2057.72,-4452.46 2080.92,-4444.73"/>
<polygon fill="gray" stroke="gray" points="2081.98,-4448.07 2090.47,-4441.72 2079.88,-4441.39 2081.98,-4448.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber768# -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber768#</title>
<path fill="none" stroke="gray" d="M2526.12,-1989.87C2565.66,-1983.61 2623.1,-1974.53 2664.24,-1968.03"/>
<polygon fill="gray" stroke="gray" points="2664.99,-1971.45 2674.32,-1966.43 2663.9,-1964.54 2664.99,-1971.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext# -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#</title>
<g id="a_node43"><a xlink:title="impl CiphertextMessage &#160;&#160;&#160;&#160;&#160;Plaintext = 8, } &#160;{ &#160;&#160;&#160;&#160;pub fn message_type(&amp;self) &#45;&gt; CiphertextMessageType { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CiphertextMessage::SignalMessage(_) =&gt; CiphertextMessageType:...">
<polygon fill="lightblue" stroke="black" points="2209,-2659 2132,-2659 2132,-2623 2209,-2623 2209,-2659"/>
<text text-anchor="middle" x="2170.5" y="-2637.3" font-family="Helvetica,sans-Serif" font-size="14.00">Plaintext</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<g id="a_node63"><a xlink:title="impl CiphertextMessage &#160;&#160;&#160;&#160;&#160;PreKey = 3, &#160;&#160;&#160;&#160;SenderKey = 7, &#160;&#160;&#160;&#160;Plaintext = 8, } &#160;{ &#160;&#160;&#160;&#160;pub fn message_type(&amp;self) &#45;&gt; CiphertextMessageType { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CiphertextMessage::SignalM...">
<polygon fill="lightblue" stroke="black" points="2511.5,-2756 2448.5,-2756 2448.5,-2720 2511.5,-2720 2511.5,-2756"/>
<text text-anchor="middle" x="2480" y="-2734.3" font-family="Helvetica,sans-Serif" font-size="14.00">PreKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<path fill="none" stroke="gray" d="M2209.27,-2642.52C2241.98,-2645.25 2289.63,-2652.74 2326,-2673 2346.32,-2684.32 2341.81,-2699.45 2362,-2711 2385.33,-2724.34 2414.83,-2731.1 2438.38,-2734.51"/>
<polygon fill="gray" stroke="gray" points="2438.03,-2738 2448.4,-2735.82 2438.94,-2731.05 2438.03,-2738"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage# -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#</title>
<g id="a_node81"><a xlink:title="pub enum CiphertextMessageType &#160;&#160;&#160;&#160;&#160;PreKeySignalMessage(PreKeySignalMessage), &#160;&#160;&#160;&#160;SenderKeyMessage(SenderKeyMessage), &#160;&#160;&#160;&#160;PlaintextContent(PlaintextContent), } &#160;#[derive(Copy, Clone, Eq, PartialEq, De...">
<polygon fill="lightblue" stroke="black" points="2563.5,-2192 2396.5,-2192 2396.5,-2156 2563.5,-2156 2563.5,-2192"/>
<text text-anchor="middle" x="2480" y="-2170.3" font-family="Helvetica,sans-Serif" font-size="14.00">PreKeySignalMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage# -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#</title>
<path fill="none" stroke="gray" d="M2192.71,-2622.76C2227.07,-2591.87 2294.23,-2525.6 2326,-2454 2371,-2352.6 2288.82,-2290.38 2362,-2207 2368.91,-2199.13 2377.54,-2193.07 2386.96,-2188.41"/>
<polygon fill="gray" stroke="gray" points="2388.45,-2191.58 2396.21,-2184.36 2385.64,-2185.17 2388.45,-2191.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper# -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper#</title>
<g id="a_node82"><a xlink:title="impl CiphertextMessage &#160;&#160;&#160;&#160;&#160;Whisper = 2, &#160;&#160;&#160;&#160;PreKey = 3, &#160;&#160;&#160;&#160;SenderKey = 7, &#160;&#160;&#160;&#160;Plaintext = 8, } &#160;{ &#160;&#160;&#160;&#160;pub fn message_type(&amp;self) &#45;&gt; CiphertextMessageType { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ciphertex...">
<polygon fill="lightblue" stroke="black" points="2517,-2594 2443,-2594 2443,-2558 2517,-2558 2517,-2594"/>
<text text-anchor="middle" x="2480" y="-2572.3" font-family="Helvetica,sans-Serif" font-size="14.00">Whisper</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper# -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper#</title>
<path fill="none" stroke="gray" d="M2209.3,-2633.26C2240.59,-2626.83 2286.2,-2617.41 2326,-2609 2361.95,-2601.4 2402.61,-2592.62 2432.97,-2586.03"/>
<polygon fill="gray" stroke="gray" points="2433.82,-2589.43 2442.85,-2583.88 2432.33,-2582.59 2433.82,-2589.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SignalMessage# -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SignalMessage#</title>
<g id="a_node138"><a xlink:title="pub enum CiphertextMessageType &#160;&#160;&#160;&#160;&#160;SignalMessage(SignalMessage), &#160;&#160;&#160;&#160;PreKeySignalMessage(PreKeySignalMessage), &#160;&#160;&#160;&#160;SenderKeyMessage(SenderKeyMessage), &#160;&#160;&#160;&#160;PlaintextContent(PlaintextContent), } &#160;#[der...">
<polygon fill="lightblue" stroke="black" points="2540,-2252 2420,-2252 2420,-2216 2540,-2216 2540,-2252"/>
<text text-anchor="middle" x="2480" y="-2230.3" font-family="Helvetica,sans-Serif" font-size="14.00">SignalMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SignalMessage# -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SignalMessage#</title>
<path fill="none" stroke="gray" d="M2192.12,-2622.87C2225.94,-2591.88 2292.73,-2525.14 2326,-2454 2362.97,-2374.96 2301.62,-2323.99 2362,-2261 2374.6,-2247.86 2392.21,-2240.54 2409.96,-2236.6"/>
<polygon fill="gray" stroke="gray" points="2410.62,-2240.04 2419.8,-2234.75 2409.33,-2233.16 2410.62,-2240.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SenderKeyMessage# -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SenderKeyMessage#</title>
<g id="a_node140"><a xlink:title="pub enum CiphertextMessageType &#160;&#160;&#160;&#160;&#160;SenderKeyMessage(SenderKeyMessage), &#160;&#160;&#160;&#160;PlaintextContent(PlaintextContent), } &#160;#[derive(Copy, Clone, Eq, PartialEq, Debug, num_enum::TryFromPrimitive)] #[repr(u8)] ...">
<polygon fill="lightblue" stroke="black" points="2556,-2648 2404,-2648 2404,-2612 2556,-2612 2556,-2648"/>
<text text-anchor="middle" x="2480" y="-2626.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SenderKeyMessage# -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SenderKeyMessage#</title>
<path fill="none" stroke="gray" d="M2209.21,-2639.65C2254.84,-2638.02 2333.08,-2635.22 2393.59,-2633.06"/>
<polygon fill="gray" stroke="gray" points="2394.03,-2636.54 2403.9,-2632.69 2393.78,-2629.55 2394.03,-2636.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PlaintextContent# -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PlaintextContent#</title>
<g id="a_node196"><a xlink:title="pub enum CiphertextMessageType &#160;&#160;&#160;&#160;&#160;PlaintextContent(PlaintextContent), } &#160;#[derive(Copy, Clone, Eq, PartialEq, Debug, num_enum::TryFromPrimitive)] #[repr(u8)] { &#160;&#160;&#160;&#160;Whisper = 2, &#160;&#160;&#160;&#160;PreKey = 3, &#160;&#160;&#160;&#160;S...">
<polygon fill="lightblue" stroke="black" points="2545.5,-2702 2414.5,-2702 2414.5,-2666 2545.5,-2666 2545.5,-2702"/>
<text text-anchor="middle" x="2480" y="-2680.3" font-family="Helvetica,sans-Serif" font-size="14.00">PlaintextContent</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PlaintextContent# -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PlaintextContent#</title>
<path fill="none" stroke="gray" d="M2209.21,-2646.27C2257.59,-2653.04 2342.63,-2664.93 2404.33,-2673.56"/>
<polygon fill="gray" stroke="gray" points="2404.02,-2677.05 2414.41,-2674.97 2404.99,-2670.12 2404.02,-2677.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey# -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#</title>
<path fill="none" stroke="gray" d="M2206.2,-2659.14C2243.37,-2680.71 2300.47,-2720.49 2326,-2773 2368.21,-2859.81 2309.14,-3560.23 2362,-3641 2376.3,-3662.85 2401.53,-3676.59 2424.92,-3685.09"/>
<polygon fill="gray" stroke="gray" points="2423.85,-3688.42 2434.44,-3688.31 2426.09,-3681.79 2423.85,-3688.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/append_session_summary(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/append_session_summary().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;) &#160;&#160;&#160;&#160;&#160;fn append_session_summary( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lines: &amp;mut Vec&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;idx: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: std::result::Result&lt;&amp;SessionState, InvalidSessionError&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;err: Option&lt;&amp;SignalProtocolEr...">
<polygon fill="lightblue" stroke="black" points="316.5,-4261 116.5,-4261 116.5,-4225 316.5,-4225 316.5,-4261"/>
<text text-anchor="middle" x="216.5" y="-4239.3" font-family="Helvetica,sans-Serif" font-size="14.00">append_session_summary</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value.is_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError::NoKeyTypeIdentifier); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_type = KeyType::try_fr...">
<polygon fill="lightblue" stroke="black" points="1073.5,-1794 982.5,-1794 982.5,-1758 1073.5,-1758 1073.5,-1794"/>
<text text-anchor="middle" x="1028" y="-1772.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMKeyLength# -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMKeyLength#</title>
<path fill="none" stroke="gray" d="M1073.64,-1767.65C1123.18,-1758.66 1205.54,-1744.5 1277,-1736 1368.28,-1725.14 1473.5,-1717.7 1544.54,-1713.43"/>
<polygon fill="gray" stroke="gray" points="1545,-1716.91 1554.77,-1712.82 1544.58,-1709.92 1545,-1716.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1073.78,-1778.91C1123.43,-1782.04 1205.91,-1786.98 1277,-1790 1354.96,-1793.31 1906.46,-1781.23 1979,-1810 1998.9,-1817.89 1995.72,-1832.69 2015,-1842 2048.71,-1858.27 2090.76,-1864.86 2122.48,-1867.46"/>
<polygon fill="gray" stroke="gray" points="2122.59,-1870.98 2132.81,-1868.2 2123.09,-1864 2122.59,-1870.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyKind#key_length(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyKind#key_length().</title>
<g id="a_node74"><a xlink:title="pub enum Public &#160;&#160;&#160;&#160;&#160;fn key_length(key_type: KeyType) &#45;&gt; usize; } &#160;{} &#160;impl KeyKind for Public { &#160;&#160;&#160;&#160;fn key_length(key_type: KeyType) &#45;&gt; usize { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_type.parameters().public_key_length() &#160;&#160;&#160;&#160;}...">
<polygon fill="lightblue" stroke="black" points="1674,-1909 1582,-1909 1582,-1873 1674,-1873 1674,-1909"/>
<text text-anchor="middle" x="1628" y="-1887.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_length</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyKind#key_length(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyKind#key_length().</title>
<path fill="none" stroke="gray" d="M1069.29,-1794.03C1117.58,-1814.76 1201.47,-1847.98 1277,-1864 1379.5,-1885.74 1502.18,-1890.46 1571.71,-1891.21"/>
<polygon fill="gray" stroke="gray" points="1571.96,-1894.71 1581.99,-1891.3 1572.02,-1887.71 1571.96,-1894.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`KeyMaterial&lt;T&gt;`]new(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`KeyMaterial&lt;T&gt;`]new().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;fn new(data: Box&lt;[u8]&gt;) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyMaterial { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kind: PhantomData, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1655,-1489 1601,-1489 1601,-1453 1655,-1453 1655,-1489"/>
<text text-anchor="middle" x="1628" y="-1467.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`KeyMaterial&lt;T&gt;`]new(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`KeyMaterial&lt;T&gt;`]new().</title>
<path fill="none" stroke="gray" d="M1073.91,-1770.25C1122.16,-1761.68 1197.71,-1740.92 1241,-1692 1283,-1644.53 1231.68,-1598.32 1277,-1554 1363.64,-1469.28 1520.02,-1465.3 1590.64,-1468.34"/>
<polygon fill="gray" stroke="gray" points="1590.65,-1471.85 1600.82,-1468.86 1591.01,-1464.86 1590.65,-1471.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier# -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier#</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;/// bad key type &lt; &#160;&#160;&#160;&#160;NoKeyTypeIdentifier, {0:#04x}&gt; &#160;&#160;&#160;&#160;BadKeyType(u8), &#160;&#160;&#160;&#160;/// bad key length &lt;{1}&gt; for key with type &lt;{0}&gt; &#160;&#160;&#160;&#160;BadKeyLength(KeyType, usize), &#160;&#160;&#160;&#160;&#160;/// invalid signature detected...">
<polygon fill="lightblue" stroke="black" points="2248,-1597 2093,-1597 2093,-1561 2248,-1561 2248,-1597"/>
<text text-anchor="middle" x="2170.5" y="-1575.3" font-family="Helvetica,sans-Serif" font-size="14.00">NoKeyTypeIdentifier</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier# -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier#</title>
<path fill="none" stroke="gray" d="M1073.88,-1776.38C1121.03,-1774.4 1194.64,-1764.22 1241,-1723 1274.74,-1693 1240.21,-1654.18 1277,-1628 1308.79,-1605.38 1940.14,-1611.5 1979,-1608 2013.12,-1604.93 2050.43,-1599.67 2082.91,-1594.47"/>
<polygon fill="gray" stroke="gray" points="2083.52,-1597.92 2092.83,-1592.86 2082.4,-1591.01 2083.52,-1597.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize().</title>
<g id="a_node179"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(value: &amp;&#39;a [u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value.is_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError::NoKeyTypeIdentifier); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_type = KeyType::try...">
<polygon fill="lightblue" stroke="black" points="1673.5,-1673 1582.5,-1673 1582.5,-1637 1673.5,-1637 1673.5,-1673"/>
<text text-anchor="middle" x="1628" y="-1651.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize().</title>
<path fill="none" stroke="gray" d="M1073.79,-1772.61C1118.88,-1767.49 1189.01,-1754.7 1241,-1723 1261.7,-1710.37 1255.31,-1692.84 1277,-1682 1372.21,-1634.4 1500.42,-1639.18 1572.29,-1647.03"/>
<polygon fill="gray" stroke="gray" points="1572.14,-1650.53 1582.47,-1648.2 1572.94,-1643.58 1572.14,-1650.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#WrongKEMKeyType# -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#WrongKEMKeyType#</title>
<g id="a_node207"><a xlink:title=" &#160;&#160;&#160;/// bad KEM key length &lt; &#160;&#160;&#160;&#160;WrongKEMKeyType(u8, u8), {1}&gt; for key with type &lt;{0}&gt; &#160;&#160;&#160;&#160;BadKEMKeyLength(kem::KeyType, usize), &#160;&#160;&#160;&#160;/// bad KEM ciphertext length &lt;{1}&gt; for key with type &lt;{0}&gt; &#160;&#160;&#160;&#160;Bad...">
<polygon fill="lightblue" stroke="black" points="1702,-1983 1554,-1983 1554,-1947 1702,-1947 1702,-1983"/>
<text text-anchor="middle" x="1628" y="-1961.3" font-family="Helvetica,sans-Serif" font-size="14.00">WrongKEMKeyType</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#WrongKEMKeyType# -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#WrongKEMKeyType#</title>
<path fill="none" stroke="gray" d="M1053.16,-1794.15C1095.83,-1825.18 1188.43,-1887.98 1277,-1918 1364.86,-1947.77 1471.13,-1958.77 1543.35,-1962.79"/>
<polygon fill="gray" stroke="gray" points="1543.59,-1966.3 1553.76,-1963.33 1543.95,-1959.31 1543.59,-1966.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(buf: &amp;[u8]) &#45;&gt; Result&lt;SenderKeyRecord, SignalProtocolError&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let skr = storage_proto::SenderKeyRecordStructure::decode(buf) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolErro...">
<polygon fill="lightblue" stroke="black" points="262,-2515 171,-2515 171,-2479 262,-2479 262,-2515"/>
<text text-anchor="middle" x="216.5" y="-2493.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M217.72,-2515.11C219.83,-2600.48 241.34,-2964.58 453,-3110 488.76,-3134.57 1971.61,-3096.39 2015,-3096 2084.11,-3095.38 2270.64,-3054.63 2326,-3096 2407.45,-3156.87 2460.7,-3486.36 2475.08,-3585.66"/>
<polygon fill="gray" stroke="gray" points="2471.65,-3586.43 2476.53,-3595.83 2478.58,-3585.44 2471.65,-3586.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn from_protobuf(state: storage_proto::SenderKeyStateStructure) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { state } &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="673.5,-2171 558.5,-2171 558.5,-2135 673.5,-2135 673.5,-2171"/>
<text text-anchor="middle" x="616" y="-2149.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_protobuf</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf().</title>
<path fill="none" stroke="gray" d="M262.34,-2505.04C307.87,-2510.38 377.18,-2510.26 417,-2470 508.33,-2377.66 363.09,-2273.73 453,-2180 477.15,-2154.83 515.21,-2147.55 548.38,-2146.81"/>
<polygon fill="gray" stroke="gray" points="548.51,-2150.31 558.5,-2146.78 548.49,-2143.31 548.51,-2150.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]new(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]new().</title>
<g id="a_node180"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; SenderKeyState &#160;&#160;&#160;&#160;&#160;pub(crate) fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_key: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature_key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signatur...">
<polygon fill="lightblue" stroke="black" points="643,-2063 589,-2063 589,-2027 643,-2027 643,-2063"/>
<text text-anchor="middle" x="616" y="-2041.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]new(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]new().</title>
<path fill="none" stroke="gray" d="M262.19,-2505.25C307.94,-2510.86 377.74,-2511.04 417,-2470 478.39,-2405.83 392.6,-2137.1 453,-2072 484.64,-2037.89 541.75,-2036.3 579.02,-2039.62"/>
<polygon fill="gray" stroke="gray" points="578.65,-2043.1 588.97,-2040.67 579.39,-2036.14 578.65,-2043.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKeyLength# -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKeyLength#</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;/// untrusted identity for address &#160;&#160;&#160;&#160;&#160;BadKeyLength(KeyType, usize), &#160;&#160;&#160;&#160;&#160;/// invalid signature detected &#160;&#160;&#160;&#160;SignatureValidationFailed, &#160;{0} &#160;&#160;&#160;&#160;UntrustedIdentity(crate::ProtocolAddress), &#160;&#160;&#160;&#160;&#160;//...">
<polygon fill="lightblue" stroke="black" points="2228.5,-1759 2112.5,-1759 2112.5,-1723 2228.5,-1723 2228.5,-1759"/>
<text text-anchor="middle" x="2170.5" y="-1737.3" font-family="Helvetica,sans-Serif" font-size="14.00">BadKeyLength</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_encodings(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_encodings().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_encodings() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let l = vec![0x12; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let r = vec![0xBA; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let fprint2 = ScannableFingerprint::new(2, &amp;l, &amp;r); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proto2 = fprint...">
<polygon fill="lightblue" stroke="black" points="1112.5,-3921 943.5,-3921 943.5,-3885 1112.5,-3885 1112.5,-3921"/>
<text text-anchor="middle" x="1028" y="-3899.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_encodings</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]new(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]new().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;fn new(version: u32, local_fprint: &amp;[u8], remote_fprint: &amp;[u8]) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local_fingerprint: local_fprint[..32].to_vec(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;remote_finger...">
<polygon fill="lightblue" stroke="black" points="1655,-3921 1601,-3921 1601,-3885 1655,-3885 1655,-3921"/>
<text text-anchor="middle" x="1628" y="-3899.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_encodings().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]new(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_encodings().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]new().</title>
<path fill="none" stroke="gray" d="M1112.78,-3903C1245.1,-3903 1497.03,-3903 1590.72,-3903"/>
<polygon fill="gray" stroke="gray" points="1590.83,-3906.5 1600.83,-3903 1590.83,-3899.5 1590.83,-3906.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Secret&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Secret&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::deserialize(value) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="653.5,-1881 578.5,-1881 578.5,-1845 653.5,-1845 653.5,-1881"/>
<text text-anchor="middle" x="616" y="-1859.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Secret&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Secret&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().</title>
<path fill="none" stroke="gray" d="M653.81,-1857.64C686.74,-1852.66 736.26,-1844.72 779,-1836 846,-1822.33 922.37,-1803.33 972.45,-1790.4"/>
<polygon fill="gray" stroke="gray" points="973.61,-1793.71 982.42,-1787.82 971.86,-1786.94 973.61,-1793.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().</title>
<g id="a_node51"><a xlink:title=") &#45;&gt; Result&lt;SessionRecord&gt; &#160;pub fn initialize_alice_session_record&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;parameters: &amp;AliceSignalProtocolParameters, &#160;&#160;&#160;&#160;csprng: &amp;mut R, { &#160;&#160;&#160;&#160;Ok(SessionRecord::new(initialize_alice...">
<polygon fill="lightblue" stroke="black" points="2281,-1489 2060,-1489 2060,-1453 2281,-1453 2281,-1489"/>
<text text-anchor="middle" x="2170.5" y="-1467.3" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_alice_session_record</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().</title>
<g id="a_node201"><a xlink:title=") &#45;&gt; Result&lt;SessionState&gt; &#160;pub(crate) fn initialize_alice_session&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;parameters: &amp;AliceSignalProtocolParameters, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, { &#160;&#160;&#160;&#160;let local_identity = parameters.our...">
<polygon fill="lightblue" stroke="black" points="2565,-1489 2395,-1489 2395,-1453 2565,-1453 2565,-1489"/>
<text text-anchor="middle" x="2480" y="-1467.3" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_alice_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().</title>
<path fill="none" stroke="gray" d="M2281.21,-1471C2315.13,-1471 2352.17,-1471 2384.94,-1471"/>
<polygon fill="gray" stroke="gray" points="2384.96,-1474.5 2394.96,-1471 2384.96,-1467.5 2384.96,-1474.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new().</title>
<g id="a_node261"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn new(state: SessionState) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_session: Some(state), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;previous_sessions: Vec::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1655,-1132 1601,-1132 1601,-1096 1655,-1096 1655,-1132"/>
<text text-anchor="middle" x="1628" y="-1110.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new().</title>
<path fill="none" stroke="gray" d="M2059.95,-1466.03C2042.94,-1460.62 2027.05,-1452.11 2015,-1439 1924.71,-1340.79 2075.35,-1233.27 1979,-1141 1934.93,-1098.79 1745.63,-1106.1 1665.29,-1111.28"/>
<polygon fill="gray" stroke="gray" points="1664.89,-1107.8 1655.15,-1111.96 1665.36,-1114.78 1664.89,-1107.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn test_pre_key_signal_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = ...">
<polygon fill="lightblue" stroke="black" points="1210.5,-2993 845.5,-2993 845.5,-2957 1210.5,-2957 1210.5,-2993"/>
<text text-anchor="middle" x="1028" y="-2971.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pre_key_signal_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/assert_signal_message_equals(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/assert_signal_message_equals().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;fn assert_signal_message_equals(m1: &amp;SignalMessage, m2: &amp;SignalMessage) &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(m1.message_version, m2.message_version); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(m1.sender_ratchet_key, m2.sender_ratchet_k...">
<polygon fill="lightblue" stroke="black" points="1742.5,-3013 1513.5,-3013 1513.5,-2977 1742.5,-2977 1742.5,-3013"/>
<text text-anchor="middle" x="1628" y="-2991.3" font-family="Helvetica,sans-Serif" font-size="14.00">assert_signal_message_equals</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/assert_signal_message_equals(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/assert_signal_message_equals().</title>
<path fill="none" stroke="gray" d="M1210.86,-2981.08C1305.46,-2984.25 1418.64,-2988.03 1503.08,-2990.86"/>
<polygon fill="gray" stroke="gray" points="1503.12,-2994.36 1513.23,-2991.19 1503.35,-2987.36 1503.12,-2994.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;registration_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pre_key_id: Option&lt;PreKeyId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signed_pre_key_id: SignedPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_payload...">
<polygon fill="lightblue" stroke="black" points="1655,-2959 1601,-2959 1601,-2923 1655,-2923 1655,-2959"/>
<text text-anchor="middle" x="1628" y="-2937.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new().</title>
<path fill="none" stroke="gray" d="M1210.86,-2964.66C1345.14,-2957.03 1516.86,-2947.26 1590.65,-2943.07"/>
<polygon fill="gray" stroke="gray" points="1591.02,-2946.55 1600.81,-2942.49 1590.62,-2939.56 1591.02,-2946.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value.is_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError::CiphertextMessageTooShort(value.len())); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message_versi...">
<polygon fill="lightblue" stroke="black" points="1665.5,-3847 1590.5,-3847 1590.5,-3811 1665.5,-3811 1665.5,-3847"/>
<text text-anchor="middle" x="1628" y="-3825.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1210.52,-2979.28C1221.84,-2985.01 1232.2,-2992.45 1241,-3002 1300.93,-3067.02 1215.93,-3733.06 1277,-3797 1355.45,-3879.14 1504.86,-3858.74 1580.56,-3841.5"/>
<polygon fill="gray" stroke="gray" points="1581.37,-3844.91 1590.3,-3839.21 1579.76,-3838.09 1581.37,-3844.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn create_signal_message&lt;T&gt;(csprng: &amp;mut T) &#45;&gt; Result&lt;SignalMessage&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T: Rng + CryptoRng, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut mac_key = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut mac_key); &#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1716,-2537 1540,-2537 1540,-2501 1716,-2501 1716,-2537"/>
<text text-anchor="middle" x="1628" y="-2515.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_signal_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<path fill="none" stroke="gray" d="M1202.22,-2956.96C1216.81,-2949.72 1230.11,-2940.27 1241,-2928 1294.66,-2867.54 1220.83,-2624.14 1277,-2566 1340.94,-2499.83 1450.2,-2495.09 1529.67,-2502.5"/>
<polygon fill="gray" stroke="gray" points="1529.4,-2505.99 1539.7,-2503.51 1530.1,-2499.02 1529.4,-2505.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadKeyOrIv# -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadKeyOrIv#</title>
<g id="a_node54"><a xlink:title="fn aes_256_ctr_encrypt(ptext: &amp;[u8], key: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, EncryptionError&gt; &#160;&#160;&#160;&#160;&#160;BadKeyOrIv, &#160;&#160;&#160;&#160;/// Either the input is malformed, or the MAC doesn&#39;t match on decryption. &#160;&#160;&#160;&#160;/// &#160;&#160;&#160;&#160;/// The...">
<polygon fill="lightblue" stroke="black" points="2219.5,-4391 2121.5,-4391 2121.5,-4355 2219.5,-4355 2219.5,-4391"/>
<text text-anchor="middle" x="2170.5" y="-4369.3" font-family="Helvetica,sans-Serif" font-size="14.00">BadKeyOrIv</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/decode_varint(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/decode_varint().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn decode_varint(buf: &amp;mut &amp;[u8]) &#45;&gt; Result&lt;u32&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result: usize = prost::decode_length_delimiter(*buf) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::InvalidProtobufEncodi...">
<polygon fill="lightblue" stroke="black" points="1085,-3747 971,-3747 971,-3711 1085,-3711 1085,-3747"/>
<text text-anchor="middle" x="1028" y="-3725.3" font-family="Helvetica,sans-Serif" font-size="14.00">decode_varint</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/decode_varint().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/decode_varint().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M1085.07,-3727.32C1128.5,-3724.72 1189.7,-3718.21 1241,-3702 1258.25,-3696.55 1259.51,-3687.62 1277,-3683 1314.72,-3673.03 1948.83,-3685.75 1979,-3661 2033.68,-3616.15 1959.62,-3549.99 2015,-3506 2069.12,-3463.01 2260.13,-3485.09 2326,-3506 2376.99,-3522.18 2425.63,-3562.18 2453.89,-3588.69"/>
<polygon fill="gray" stroke="gray" points="2451.66,-3591.4 2461.3,-3595.78 2456.49,-3586.34 2451.66,-3591.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/advance(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/advance().</title>
<g id="a_node181"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn advance&lt;&#39;a, const N: usize&gt;(buf: &amp;mut &amp;&#39;a [u8]) &#45;&gt; Result&lt;&amp;&#39;a [u8; N]&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if N &gt; buf.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError::InvalidProtobufEncoding); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2208,-3605 2133,-3605 2133,-3569 2208,-3569 2208,-3605"/>
<text text-anchor="middle" x="2170.5" y="-3583.3" font-family="Helvetica,sans-Serif" font-size="14.00">advance</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/decode_varint().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/advance(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/decode_varint().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/advance().</title>
<path fill="none" stroke="gray" d="M1085.09,-3723.46C1135.31,-3718.69 1211.01,-3711.97 1277,-3708 1315.95,-3705.66 1945.99,-3703.82 1979,-3683 2008.26,-3664.55 1987.08,-3634.42 2015,-3614 2045.94,-3591.37 2089.57,-3585.47 2122.57,-3584.73"/>
<polygon fill="gray" stroke="gray" points="2122.91,-3588.23 2132.89,-3584.66 2122.86,-3581.23 2122.91,-3588.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage# -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#</title>
<g id="a_node212"><a xlink:title=" &#160;&#160;&#160;/// unknown sealed sender message version &#160;&#160;&#160;&#160;&#160;InvalidSealedSenderMessage(String), {0} &#160;&#160;&#160;&#160;UnknownSealedSenderVersion(u8), &#160;&#160;&#160;&#160;/// self send of a sealed sender message &#160;&#160;&#160;&#160;SealedSenderSelfSend, &#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1738,-4243 1518,-4243 1518,-4207 1738,-4207 1738,-4243"/>
<text text-anchor="middle" x="1628" y="-4221.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidSealedSenderMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/decode_varint().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage# -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/decode_varint().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#</title>
<path fill="none" stroke="gray" d="M1085.11,-3726.66C1134.1,-3727.94 1203.12,-3738.43 1241,-3783 1300.23,-3852.69 1212.44,-4128.21 1277,-4193 1308.62,-4224.73 1419.12,-4230.59 1507.61,-4229.82"/>
<polygon fill="gray" stroke="gray" points="1507.78,-4233.32 1517.73,-4229.7 1507.69,-4226.32 1507.78,-4233.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_serialize(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_serialize().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;fn test_serialize() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk_bytes = include_bytes!(&#39; kem/test&#45;data/pk.dat&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sk_bytes = include_bytes!(&#39; kem/test&#45;data/sk.dat&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut serialized_pk = Vec::with_...">
<polygon fill="lightblue" stroke="black" points="669.5,-1935 562.5,-1935 562.5,-1899 669.5,-1899 669.5,-1935"/>
<text text-anchor="middle" x="616" y="-1913.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_serialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024# -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024#</title>
<path fill="none" stroke="gray" d="M669.59,-1917.09C916.56,-1917.6 1950.49,-1920.78 1979,-1938 2007.6,-1955.28 1986.27,-1986.94 2015,-2004 2049.3,-2024.36 2308.17,-2009.03 2423.66,-2001.05"/>
<polygon fill="gray" stroke="gray" points="2423.99,-2004.53 2433.72,-2000.35 2423.5,-1997.55 2423.99,-2004.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().</title>
<path fill="none" stroke="gray" d="M669.61,-1911.82C701.71,-1907.78 743.29,-1900.97 779,-1890 854.96,-1866.67 937.82,-1824.99 985.95,-1799.01"/>
<polygon fill="gray" stroke="gray" points="987.69,-1802.04 994.81,-1794.19 984.35,-1795.89 987.69,-1802.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(data: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pb = proto::sealed_sender::ServerCertificate::decode(data) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::InvalidProtobufEncoding)?; &#160;...">
<polygon fill="lightblue" stroke="black" points="2216,-3659 2125,-3659 2125,-3623 2216,-3623 2216,-3659"/>
<text text-anchor="middle" x="2170.5" y="-3637.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M2216.21,-3637.07C2258.16,-3633.39 2322.42,-3627.75 2376.89,-3622.97"/>
<polygon fill="gray" stroke="gray" points="2377.28,-3626.44 2386.94,-3622.08 2376.67,-3619.47 2377.28,-3626.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[KyberPayload]new(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[KyberPayload]new().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;pub fn new(id: KyberPreKeyId, ciphertext: kem::SerializedCiphertext) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pre_key_id: id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2197.5,-3141 2143.5,-3141 2143.5,-3105 2197.5,-3105 2197.5,-3141"/>
<text text-anchor="middle" x="2170.5" y="-3119.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`From&lt;KeyPair&gt;`]from(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`From&lt;KeyPair&gt;`]from().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;fn from(value: KeyPair) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;identity_key: value.public_key.into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: value.private_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="243.5,-4142 189.5,-4142 189.5,-4106 243.5,-4106 243.5,-4142"/>
<text text-anchor="middle" x="216.5" y="-4120.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().</title>
<g id="a_node60"><a xlink:title=" &#160;&#160;&#160;fn chain_key(i: u128) &#45;&gt; Vec&lt;u8&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i.to_be_bytes().to_vec() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2213,-3363 2128,-3363 2128,-3327 2213,-3327 2213,-3363"/>
<text text-anchor="middle" x="2170.5" y="-3341.3" font-family="Helvetica,sans-Serif" font-size="14.00">chain_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion# -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;/// unrecognized message version &lt; &#160;&#160;&#160;&#160;UnrecognizedCiphertextVersion(u8), {0}&gt; &#160;&#160;&#160;&#160;UnrecognizedMessageVersion(u32), &#160;&#160;&#160;&#160;&#160;/// fingerprint version number mismatch them {0} us {1} &#160;&#160;&#160;&#160;FingerprintVers...">
<polygon fill="lightblue" stroke="black" points="2598,-3838 2362,-3838 2362,-3802 2598,-3802 2598,-3838"/>
<text text-anchor="middle" x="2480" y="-3816.3" font-family="Helvetica,sans-Serif" font-size="14.00">UnrecognizedCiphertextVersion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/impl#[`Incremental&lt;M&gt;`]new(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/impl#[`Incremental&lt;M&gt;`]new().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;pub fn new(mac: M, chunk_size: usize) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(chunk_size &gt; 0, &#39; chunk size must be positive&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mac, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk_size, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unused_length...">
<polygon fill="lightblue" stroke="black" points="1055,-1683 1001,-1683 1001,-1647 1055,-1647 1055,-1683"/>
<text text-anchor="middle" x="1028" y="-1661.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/impl#[`Incremental&lt;M&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/impl#[`Incremental&lt;M&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256().</title>
<path fill="none" stroke="gray" d="M1055.25,-1658.45C1100.31,-1647.44 1195.43,-1625.24 1277,-1613 1375.49,-1598.22 1490.67,-1589.28 1561.22,-1584.74"/>
<polygon fill="gray" stroke="gray" points="1561.54,-1588.23 1571.3,-1584.1 1561.1,-1581.24 1561.54,-1588.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_dyn_parameters_consts(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_dyn_parameters_consts().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;fn test_dyn_parameters_consts() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber1024::Parameters::SECRET_KEY_LENGTH, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber1024::Parameters.secret_key_length() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="324,-4066 109,-4066 109,-4030 324,-4030 324,-4066"/>
<text text-anchor="middle" x="216.5" y="-4044.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_dyn_parameters_consts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node65"><a xlink:title=") &#45;&gt; Result&lt;SenderKeyMessage&gt; &#160;pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[...">
<polygon fill="lightblue" stroke="black" points="1686.5,-4695 1569.5,-4695 1569.5,-4659 1686.5,-4659 1686.5,-4695"/>
<text text-anchor="middle" x="1628" y="-4673.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession# -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#</title>
<path fill="none" stroke="gray" d="M1686.55,-4678.73C1806.04,-4681.67 2089.61,-4685.26 2326,-4662 2343.67,-4660.26 2362.36,-4657.63 2380.39,-4654.69"/>
<polygon fill="gray" stroke="gray" points="2381.04,-4658.13 2390.32,-4653.02 2379.88,-4651.22 2381.04,-4658.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoSenderKeyState# -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoSenderKeyState#</title>
<path fill="none" stroke="gray" d="M1686.6,-4672.58C1755.97,-4667.26 1876.01,-4658.03 1979,-4650 2014.37,-4647.24 2053.43,-4644.17 2086.93,-4641.53"/>
<polygon fill="gray" stroke="gray" points="2087.44,-4645 2097.13,-4640.73 2086.89,-4638.02 2087.44,-4645"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node199"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2197.5,-4095 2143.5,-4095 2143.5,-4059 2197.5,-4059 2197.5,-4095"/>
<text text-anchor="middle" x="2170.5" y="-4073.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="gray" d="M1686.75,-4692.79C1764.87,-4710.25 1903.15,-4726.7 1979,-4650 2064.5,-4563.54 1933.75,-4194.46 2015,-4104 2044.23,-4071.46 2097.61,-4069.12 2133.33,-4071.9"/>
<polygon fill="gray" stroke="gray" points="2133.06,-4075.39 2143.35,-4072.85 2133.72,-4068.42 2133.06,-4075.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<g id="a_node66"><a xlink:title=") &#45;&gt; Result&lt;UnidentifiedSenderMessageContent&gt; &#160;pub async fn sealed_sender_decrypt_to_usmc( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;identity_store: &amp;dyn IdentityKeyStore, { &#160;&#160;&#160;&#160;let our_identity = identity_store.get...">
<polygon fill="lightblue" stroke="black" points="736.5,-4187 495.5,-4187 495.5,-4151 736.5,-4151 736.5,-4187"/>
<text text-anchor="middle" x="616" y="-4165.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt_to_usmc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V2# -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V2#</title>
<path fill="none" stroke="gray" d="M736.55,-4177.64C752.07,-4182.87 766.78,-4190.36 779,-4201 815.89,-4233.12 775.65,-4275.95 815,-4305 846.55,-4328.29 1436.18,-4332.25 1590.36,-4332.88"/>
<polygon fill="gray" stroke="gray" points="1590.68,-4336.38 1600.7,-4332.92 1590.71,-4329.38 1590.68,-4336.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().</title>
<path fill="none" stroke="gray" d="M736.51,-4154.52C751.05,-4151.17 765.52,-4147.06 779,-4142 863.99,-4110.11 951.68,-4047.76 996.53,-4013.31"/>
<polygon fill="gray" stroke="gray" points="998.89,-4015.91 1004.65,-4007.02 994.6,-4010.38 998.89,-4015.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadKeyOrIv# -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadKeyOrIv#</title>
<path fill="none" stroke="gray" d="M736.88,-4175.56C752.64,-4181.03 767.33,-4189.15 779,-4201 841.76,-4264.72 747.27,-4340.58 815,-4399 834.45,-4415.77 1251.32,-4413.58 1277,-4414 1432.98,-4416.53 1825.67,-4442.76 1979,-4414 1995.87,-4410.83 1998.46,-4404.61 2015,-4400 2046.32,-4391.27 2082.04,-4384.8 2111.24,-4380.4"/>
<polygon fill="gray" stroke="gray" points="2111.89,-4383.84 2121.28,-4378.92 2110.88,-4376.91 2111.89,-4383.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<path fill="none" stroke="gray" d="M736.77,-4186.71C752.74,-4193.62 767.53,-4203.08 779,-4216 844.2,-4289.44 748.28,-4361.94 815,-4434 856.5,-4478.82 929.78,-4487.81 978.37,-4488.33"/>
<polygon fill="gray" stroke="gray" points="978.65,-4491.83 988.64,-4488.32 978.64,-4484.83 978.65,-4491.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V1# -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V1#</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;V1 &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ephemeral_public: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encrypted_static: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encrypted_message: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;},">
<polygon fill="lightblue" stroke="black" points="1655,-4405 1601,-4405 1601,-4369 1655,-4369 1655,-4405"/>
<text text-anchor="middle" x="1628" y="-4383.3" font-family="Helvetica,sans-Serif" font-size="14.00">V1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V1# -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V1#</title>
<path fill="none" stroke="gray" d="M736.57,-4177.01C752.18,-4182.31 766.91,-4190 779,-4201 820.5,-4238.76 770.94,-4287.26 815,-4322 852.22,-4351.35 1194.79,-4334.45 1241,-4345 1257.9,-4348.86 1260.15,-4355.95 1277,-4360 1388.98,-4386.92 1526.36,-4388.81 1590.62,-4387.95"/>
<polygon fill="gray" stroke="gray" points="1590.71,-4391.45 1600.65,-4387.79 1590.6,-4384.45 1590.71,-4391.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new().</title>
<path fill="none" stroke="gray" d="M736.87,-4186.1C752.92,-4193.08 767.71,-4202.72 779,-4216 865.12,-4317.31 730.09,-4410.68 815,-4513 858.43,-4565.33 942.49,-4577.37 990.68,-4579.78"/>
<polygon fill="gray" stroke="gray" points="990.84,-4583.29 1000.97,-4580.18 991.11,-4576.3 990.84,-4583.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<path fill="none" stroke="gray" d="M736.8,-4185.64C752.97,-4192.67 767.81,-4202.45 779,-4216 834.55,-4283.29 754.39,-4544.23 815,-4607 839.69,-4632.57 875.59,-4642.78 910.85,-4645.55"/>
<polygon fill="gray" stroke="gray" points="911.07,-4649.07 921.26,-4646.16 911.48,-4642.08 911.07,-4649.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().</title>
<path fill="none" stroke="gray" d="M736.52,-4176.48C752.23,-4181.84 767.01,-4189.69 779,-4201 825.42,-4244.79 767.6,-4297.27 815,-4340 836.45,-4359.34 864.38,-4369.89 892.89,-4375.21"/>
<polygon fill="gray" stroke="gray" points="892.55,-4378.71 902.98,-4376.88 893.69,-4371.8 892.55,-4378.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadCiphertext# -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadCiphertext#</title>
<g id="a_node150"><a xlink:title="fn aes_256_ctr_encrypt(ptext: &amp;[u8], key: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, EncryptionError&gt; &#160;&#160;&#160;&#160;&#160;BadCiphertext(&amp;&#39;static str), } &#160;{ &#160;&#160;&#160;&#160;let key: [u8; 32] = key.try_into().map_err(|_| EncryptionError::BadKeyOr...">
<polygon fill="lightblue" stroke="black" points="1686,-4533 1570,-4533 1570,-4497 1686,-4497 1686,-4533"/>
<text text-anchor="middle" x="1628" y="-4511.3" font-family="Helvetica,sans-Serif" font-size="14.00">BadCiphertext</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadCiphertext# -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadCiphertext#</title>
<path fill="none" stroke="gray" d="M736.61,-4175.29C752.5,-4180.78 767.31,-4188.98 779,-4201 845.95,-4269.82 743.9,-4349.49 815,-4414 885.28,-4477.77 1156.72,-4400.37 1241,-4444 1263.44,-4455.62 1254.6,-4476.31 1277,-4488 1366.27,-4534.59 1486.11,-4532.29 1559.87,-4524.8"/>
<polygon fill="gray" stroke="gray" points="1560.39,-4528.26 1569.96,-4523.71 1559.64,-4521.3 1560.39,-4528.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;fn deserialize(data: &amp;&#39;a [u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (version_byte, remaining) = data.split_first().ok_or_else(|| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SignalProtocolError::InvalidSealedSenderMessage(&#39; Message w...">
<polygon fill="lightblue" stroke="black" points="1073.5,-4296 982.5,-4296 982.5,-4260 1073.5,-4260 1073.5,-4296"/>
<text text-anchor="middle" x="1028" y="-4274.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().</title>
<path fill="none" stroke="gray" d="M736.51,-4181.83C751.51,-4186.49 766.09,-4192.71 779,-4201 802.04,-4215.8 791.47,-4237 815,-4251 862.63,-4279.34 926.85,-4283.8 972.08,-4282.6"/>
<polygon fill="gray" stroke="gray" points="972.43,-4286.09 982.29,-4282.22 972.17,-4279.09 972.43,-4286.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<path fill="none" stroke="gray" d="M736.69,-4169.29C817.41,-4169.49 919.6,-4169.74 978.71,-4169.88"/>
<polygon fill="gray" stroke="gray" points="978.87,-4173.38 988.88,-4169.91 978.89,-4166.38 978.87,-4173.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<path fill="none" stroke="gray" d="M736.64,-4185.27C752.93,-4192.34 767.86,-4202.23 779,-4216 848.93,-4302.43 738.56,-4634.27 815,-4715 845.23,-4746.93 892.9,-4755.08 935.38,-4754.63"/>
<polygon fill="gray" stroke="gray" points="935.58,-4758.13 945.49,-4754.37 935.4,-4751.13 935.58,-4758.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage# -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#</title>
<path fill="none" stroke="gray" d="M734.54,-4151C760.94,-4147.67 788.88,-4144.71 815,-4143 1003.93,-4130.65 1072.49,-4056.68 1241,-4143 1265.37,-4155.48 1253.22,-4179.42 1277,-4193 1346.31,-4232.59 1436.18,-4240.08 1507.5,-4237.93"/>
<polygon fill="gray" stroke="gray" points="1508.01,-4241.41 1517.88,-4237.54 1507.76,-4234.42 1508.01,-4241.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving# -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving#</title>
<path fill="none" stroke="gray" d="M736.77,-4185.16C753.04,-4192.25 767.93,-4202.17 779,-4216 860.52,-4317.87 723.55,-4708.95 815,-4802 868.37,-4856.3 1406.63,-4864.53 1576.15,-4865.78"/>
<polygon fill="gray" stroke="gray" points="1576.29,-4869.28 1586.31,-4865.85 1576.33,-4862.28 1576.29,-4869.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[KeyPair][`From&lt;IdentityKeyPair&gt;`]from(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[KeyPair][`From&lt;IdentityKeyPair&gt;`]from().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;fn from(value: IdentityKeyPair) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::new(value.identity_key.into(), value.private_key) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="243.5,-3967 189.5,-3967 189.5,-3931 243.5,-3931 243.5,-3967"/>
<text text-anchor="middle" x="216.5" y="-3945.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMCiphertextLength# -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMCiphertextLength#</title>
<g id="a_node68"><a xlink:title="impl SignalProtocolError &#160;&#160;&#160;&#160;&#160;BadKEMCiphertextLength(kem::KeyType, usize), } &#160;{ &#160;&#160;&#160;&#160;/// Convenience factory for [`SignalProtocolError::ApplicationCallbackError`]. &#160;&#160;&#160;&#160;#[inline] &#160;&#160;&#160;&#160;pub fn for_applicat...">
<polygon fill="lightblue" stroke="black" points="2267.5,-1651 2073.5,-1651 2073.5,-1615 2267.5,-1615 2267.5,-1651"/>
<text text-anchor="middle" x="2170.5" y="-1629.3" font-family="Helvetica,sans-Serif" font-size="14.00">BadKEMCiphertextLength</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState# -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState#</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;/// ciphertext serialized bytes were too short &lt; &#160;&#160;&#160;&#160;InvalidState(&amp;&#39;static str, String), &#160;&#160;&#160;&#160;&#160;/// protobuf encoding was invalid &#160;&#160;&#160;&#160;InvalidProtobufEncoding, &#160;{0}&gt; &#160;&#160;&#160;&#160;CiphertextMessageTooShort(usi...">
<polygon fill="lightblue" stroke="black" points="1677.5,-2151 1578.5,-2151 1578.5,-2115 1677.5,-2115 1677.5,-2151"/>
<text text-anchor="middle" x="1628" y="-2129.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidState</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnknownSealedSenderVersion# -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnknownSealedSenderVersion#</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;/// bad KEM key type &lt; &#160;&#160;&#160;&#160;UnknownSealedSenderVersion(u8), &#160;&#160;&#160;&#160;/// self send of a sealed sender message &#160;&#160;&#160;&#160;SealedSenderSelfSend, &#160;{0:#04x}&gt; &#160;&#160;&#160;&#160;BadKEMKeyType(u8), &#160;&#160;&#160;&#160;/// unexpected KEM key type ...">
<polygon fill="lightblue" stroke="black" points="1742.5,-4297 1513.5,-4297 1513.5,-4261 1742.5,-4261 1742.5,-4297"/>
<text text-anchor="middle" x="1628" y="-4275.3" font-family="Helvetica,sans-Serif" font-size="14.00">UnknownSealedSenderVersion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMacKeyLength# -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMacKeyLength#</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;/// missing sender key state for distribution ID &#160;&#160;&#160;&#160;&#160;InvalidMacKeyLength(usize), &#160;{distribution_id} &#160;&#160;&#160;&#160;NoSenderKeyState { distribution_id: Uuid }, &#160;&#160;&#160;&#160;&#160;/// session with {0} not found &#160;&#160;&#160;&#160;Session...">
<polygon fill="lightblue" stroke="black" points="2798,-2306 2634,-2306 2634,-2270 2798,-2270 2798,-2306"/>
<text text-anchor="middle" x="2716" y="-2284.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidMacKeyLength</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/iteration(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/iteration().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;fn iteration() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sender_chain_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SenderChainKey::new(INITIAL_ITERATION, INITIAL_SEED_KEY.to_vec()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut seen_seeds = HashSet::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;seen_seeds...">
<polygon fill="lightblue" stroke="black" points="653,-2117 579,-2117 579,-2081 653,-2081 653,-2117"/>
<text text-anchor="middle" x="616" y="-2095.3" font-family="Helvetica,sans-Serif" font-size="14.00">iteration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn new(iteration: u32, chain_key: Vec&lt;u8&gt;) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1055,-2057 1001,-2057 1001,-2021 1055,-2021 1055,-2057"/>
<text text-anchor="middle" x="1028" y="-2035.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/iteration().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/iteration().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().</title>
<path fill="none" stroke="gray" d="M653.26,-2092.96C710.34,-2083.44 814.75,-2066.04 815,-2066 876.59,-2056.95 948.51,-2048.16 990.77,-2043.18"/>
<polygon fill="gray" stroke="gray" points="991.32,-2046.64 1000.85,-2042 990.51,-2039.69 991.32,-2046.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]new(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]new().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mac_key: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_ratchet_key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;counter: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;previous_counter: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cipherte...">
<polygon fill="lightblue" stroke="black" points="2197.5,-2297 2143.5,-2297 2143.5,-2261 2197.5,-2261 2197.5,-2297"/>
<text text-anchor="middle" x="2170.5" y="-2275.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]compute_mac(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]compute_mac().</title>
<g id="a_node204"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;[u8; Self::MAC_LENGTH]&gt; &#160;&#160;&#160;&#160;&#160;fn compute_mac( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_identity_key: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiver_identity_key: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mac_key: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], { &#160;...">
<polygon fill="lightblue" stroke="black" points="2536.5,-2306 2423.5,-2306 2423.5,-2270 2536.5,-2270 2536.5,-2306"/>
<text text-anchor="middle" x="2480" y="-2284.3" font-family="Helvetica,sans-Serif" font-size="14.00">compute_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]compute_mac(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]compute_mac().</title>
<path fill="none" stroke="gray" d="M2197.72,-2279.77C2245.03,-2281.15 2346.01,-2284.11 2413.21,-2286.07"/>
<polygon fill="gray" stroke="gray" points="2413.19,-2289.58 2423.28,-2286.37 2413.39,-2282.58 2413.19,-2289.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving# -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving#</title>
<path fill="none" stroke="gray" d="M1067.07,-4486.35C1115.49,-4489.02 1197.96,-4501.44 1241,-4553 1322.25,-4650.33 1185.52,-4748.2 1277,-4836 1318.59,-4875.92 1489.65,-4873.24 1576.26,-4869.11"/>
<polygon fill="gray" stroke="gray" points="1576.58,-4872.6 1586.39,-4868.6 1576.23,-4865.6 1576.58,-4872.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<path fill="none" stroke="gray" d="M1067.24,-4486.21C1115.84,-4488.73 1198.5,-4500.99 1241,-4553 1289.07,-4611.83 1222.52,-4840.05 1277,-4893 1319.06,-4933.88 1495.72,-4928.55 1580.81,-4923.39"/>
<polygon fill="gray" stroke="gray" points="1581.2,-4926.87 1590.96,-4922.75 1580.76,-4919.89 1581.2,-4926.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node77"><a xlink:title=") &#45;&gt; Result&lt;()&gt; &#160;pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, ...">
<polygon fill="lightblue" stroke="black" points="1717,-1855 1539,-1855 1539,-1819 1717,-1819 1717,-1855"/>
<text text-anchor="middle" x="1628" y="-1833.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SignatureValidationFailed# -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SignatureValidationFailed#</title>
<path fill="none" stroke="gray" d="M1695.43,-1818.93C1775.25,-1801.7 1907.34,-1788.33 1979,-1864 2040.21,-1928.64 1965.32,-3392.13 2015,-3466 2028.98,-3486.79 2050.91,-3501.17 2073.91,-3511.1"/>
<polygon fill="gray" stroke="gray" points="2072.87,-3514.45 2083.46,-3514.96 2075.49,-3507.96 2072.87,-3514.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity# -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#</title>
<path fill="none" stroke="gray" d="M1708.96,-1818.98C1786.99,-1806.42 1904.53,-1801.52 1979,-1864 2028.22,-1905.29 1978.28,-1951.28 2015,-2004 2041.19,-2041.6 2085.15,-2070.15 2119.49,-2088.26"/>
<polygon fill="gray" stroke="gray" points="2117.96,-2091.41 2128.45,-2092.87 2121.16,-2085.18 2117.96,-2091.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().</title>
<path fill="none" stroke="gray" d="M1717.36,-1824.2C1795.49,-1813.26 1912.62,-1797.78 2015,-1788 2049.47,-1784.71 2300.69,-1791.63 2326,-1768 2414.48,-1685.37 2280.52,-1587.54 2362,-1498 2368.56,-1490.79 2376.63,-1485.31 2385.43,-1481.18"/>
<polygon fill="gray" stroke="gray" points="2386.91,-1484.36 2394.84,-1477.34 2384.26,-1477.88 2386.91,-1484.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new().</title>
<g id="a_node237"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Self &#160;&#160;&#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_identity_key_pair: IdentityKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_base_key_pair: KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_identity_key: IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_signed_pre_key: PublicKey, &#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2958,-1321 2904,-1321 2904,-1285 2958,-1285 2958,-1321"/>
<text text-anchor="middle" x="2931" y="-1299.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new().</title>
<path fill="none" stroke="gray" d="M1717,-1852.5C1796.99,-1861.07 1912.39,-1858.63 1979,-1790 2032.84,-1734.53 1961.7,-1499.99 2015,-1444 2258.02,-1188.72 2756.08,-1267.32 2893.94,-1295.12"/>
<polygon fill="gray" stroke="gray" points="2893.47,-1298.59 2903.97,-1297.18 2894.88,-1291.74 2893.47,-1298.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new_fresh(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new_fresh().</title>
<g id="a_node267"><a xlink:title=" &#160;&#160;&#160;pub fn new_fresh() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_session: None, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;previous_sessions: Vec::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1671.5,-1024 1584.5,-1024 1584.5,-988 1671.5,-988 1671.5,-1024"/>
<text text-anchor="middle" x="1628" y="-1002.3" font-family="Helvetica,sans-Serif" font-size="14.00">new_fresh</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new_fresh(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new_fresh().</title>
<path fill="none" stroke="gray" d="M1538.59,-1842.08C1438.83,-1845.35 1287.59,-1842.26 1259,-1796 1236.98,-1760.37 1236.98,-1077.63 1259,-1042 1291.21,-989.88 1479.56,-995.37 1574.02,-1001.61"/>
<polygon fill="gray" stroke="gray" points="1574.02,-1005.12 1584.23,-1002.31 1574.5,-998.13 1574.02,-1005.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<path fill="none" stroke="gray" d="M1538.58,-1830.6C1438.8,-1825.87 1287.55,-1826.8 1259,-1873 1237.01,-1908.57 1237.01,-4848.43 1259,-4884 1291.99,-4937.38 1488.79,-4930.33 1580.73,-4923.94"/>
<polygon fill="gray" stroke="gray" points="1581.16,-4927.42 1590.88,-4923.2 1580.65,-4920.43 1581.16,-4927.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M2208.12,-3982.54C2243.84,-3979.98 2296.92,-3970.16 2326,-3936 2403.05,-3845.49 2292.34,-3767.3 2362,-3671 2372.84,-3656.02 2388.71,-3644.79 2405.28,-3636.44"/>
<polygon fill="gray" stroke="gray" points="2406.97,-3639.52 2414.53,-3632.1 2403.99,-3633.18 2406.97,-3639.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion# -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#</title>
<path fill="none" stroke="gray" d="M2208.13,-3978.06C2241.19,-3972.23 2290.01,-3960.11 2326,-3936 2346.99,-3921.94 2342.98,-3908.63 2362,-3892 2383.8,-3872.95 2411.23,-3855.77 2434.05,-3842.98"/>
<polygon fill="gray" stroke="gray" points="2435.8,-3846.01 2442.87,-3838.13 2432.42,-3839.88 2435.8,-3846.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion# -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#</title>
<g id="a_node169"><a xlink:title=" &#160;&#160;&#160;/// ciphertext version was unrecognized &lt; &#160;&#160;&#160;&#160;LegacyCiphertextVersion(u8), {0}&gt; &#160;&#160;&#160;&#160;UnrecognizedCiphertextVersion(u8), &#160;&#160;&#160;&#160;/// unrecognized message version &lt;{0}&gt; &#160;&#160;&#160;&#160;UnrecognizedMessageVersion(u32...">
<polygon fill="lightblue" stroke="black" points="2574.5,-3937 2385.5,-3937 2385.5,-3901 2574.5,-3901 2574.5,-3937"/>
<text text-anchor="middle" x="2480" y="-3915.3" font-family="Helvetica,sans-Serif" font-size="14.00">LegacyCiphertextVersion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion# -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#</title>
<path fill="none" stroke="gray" d="M2208.03,-3975.46C2239.34,-3968.98 2285.64,-3959.4 2326,-3951 2344.44,-3947.16 2364.12,-3943.05 2383.03,-3939.1"/>
<polygon fill="gray" stroke="gray" points="2383.76,-3942.53 2392.83,-3937.05 2382.32,-3935.67 2383.76,-3942.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort# -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#</title>
<path fill="none" stroke="gray" d="M2208.29,-3983C2246.86,-3983 2309.42,-3983 2364.7,-3983"/>
<polygon fill="gray" stroke="gray" points="2364.92,-3986.5 2374.92,-3983 2364.92,-3979.5 2364.92,-3986.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().</title>
<g id="a_node80"><a xlink:title=" &#160;&#160;&#160;fn test_serialize_identity_key_pair() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = IdentityKeyPair::generate(&amp;mut OsRng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = identity_key_pair.serialize(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let de...">
<polygon fill="lightblue" stroke="black" points="731,-3606 501,-3606 501,-3570 731,-3570 731,-3606"/>
<text text-anchor="middle" x="616" y="-3584.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_serialize_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M636.35,-3606.1C666.89,-3634.72 728.02,-3692.29 779,-3742 795.2,-3757.8 794.8,-3767.8 815,-3778 866.63,-3804.07 933.7,-3810.28 978.43,-3811.14"/>
<polygon fill="gray" stroke="gray" points="978.43,-3814.64 988.46,-3811.25 978.5,-3807.64 978.43,-3814.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let structure = proto::storage::IdentityKeyPairStructure::decode(value) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::InvalidProtobufEncoding)?...">
<polygon fill="lightblue" stroke="black" points="1665.5,-3161 1590.5,-3161 1590.5,-3125 1665.5,-3125 1665.5,-3161"/>
<text text-anchor="middle" x="1628" y="-3139.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M629.99,-3569.81C660.46,-3526.33 737.09,-3412.07 779,-3306 804.67,-3241.03 760.51,-3196.71 815,-3153 874.63,-3105.18 1415.94,-3131.2 1580.05,-3140.28"/>
<polygon fill="gray" stroke="gray" points="1580.13,-3143.79 1590.31,-3140.85 1580.52,-3136.8 1580.13,-3143.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidRegistrationId# -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidRegistrationId#</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;/// message with old counter &#160;&#160;&#160;&#160;&#160;InvalidRegistrationId(crate::ProtocolAddress, u32), &#160;{0} / {1} &#160;&#160;&#160;&#160;DuplicatedMessage(u32, u32), &#160;&#160;&#160;&#160;/// invalid {0:?} message: {1} &#160;&#160;&#160;&#160;InvalidMessage(crate::Ciphe...">
<polygon fill="lightblue" stroke="black" points="1108,-4706 948,-4706 948,-4670 1108,-4670 1108,-4706"/>
<text text-anchor="middle" x="1028" y="-4684.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidRegistrationId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The message contains at least a X25519 key and a chain key &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value.len() &lt; 1 + 32 + 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError...">
<polygon fill="lightblue" stroke="black" points="2208,-3927 2133,-3927 2133,-3891 2208,-3891 2208,-3927"/>
<text text-anchor="middle" x="2170.5" y="-3905.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M2208.25,-3901.74C2243.81,-3892.75 2296.54,-3873.88 2326,-3837 2373.12,-3778.02 2315.39,-3730.38 2362,-3671 2373.71,-3656.08 2390.33,-3644.81 2407.37,-3636.41"/>
<polygon fill="gray" stroke="gray" points="2409.24,-3639.4 2416.85,-3632.03 2406.3,-3633.05 2409.24,-3639.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion# -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#</title>
<path fill="none" stroke="gray" d="M2208.09,-3903.04C2239.64,-3897.52 2286.25,-3888.45 2326,-3877 2360.02,-3867.2 2397.25,-3853.4 2426.48,-3841.83"/>
<polygon fill="gray" stroke="gray" points="2428.07,-3844.96 2436.06,-3838 2425.48,-3838.46 2428.07,-3844.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion# -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#</title>
<path fill="none" stroke="gray" d="M2208.29,-3910.2C2249.27,-3911.53 2317.34,-3913.74 2374.97,-3915.62"/>
<polygon fill="gray" stroke="gray" points="2375.12,-3919.12 2385.23,-3915.95 2375.35,-3912.13 2375.12,-3919.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort# -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#</title>
<path fill="none" stroke="gray" d="M2208.29,-3917.85C2253.89,-3928.83 2333.05,-3947.88 2394.02,-3962.55"/>
<polygon fill="gray" stroke="gray" points="2393.49,-3966.02 2404.03,-3964.96 2395.13,-3959.22 2393.49,-3966.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;fn add_second_state() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_1 = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_2 = 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record_key_1 = (random_public_key(), chain_id_1); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1698,-3309 1558,-3309 1558,-3273 1698,-3273 1698,-3309"/>
<text text-anchor="middle" x="1628" y="-3287.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_second_state</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().</title>
<path fill="none" stroke="gray" d="M1698.19,-3295.03C1768.88,-3299.46 1881.76,-3307.37 1979,-3318 2026.05,-3323.14 2079.37,-3330.86 2117.61,-3336.73"/>
<polygon fill="gray" stroke="gray" points="2117.56,-3340.27 2127.97,-3338.34 2118.63,-3333.35 2117.56,-3340.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;fn random_public_key() &#45;&gt; PublicKey &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair::generate(&amp;mut OsRng).public_key &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2245.5,-3309 2095.5,-3309 2095.5,-3273 2245.5,-3273 2245.5,-3309"/>
<text text-anchor="middle" x="2170.5" y="-3287.3" font-family="Helvetica,sans-Serif" font-size="14.00">random_public_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="gray" d="M1698,-3291C1796.84,-3291 1978.53,-3291 2085.2,-3291"/>
<polygon fill="gray" stroke="gray" points="2085.28,-3294.5 2095.28,-3291 2085.28,-3287.5 2085.28,-3294.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_key_record: SenderKeyRecord::new_empty(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2197.5,-4203 2143.5,-4203 2143.5,-4167 2197.5,-4167 2197.5,-4203"/>
<text text-anchor="middle" x="2170.5" y="-4181.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().</title>
<path fill="none" stroke="gray" d="M1698.1,-3286.03C1788.98,-3281.15 1941.57,-3279.27 1979,-3318 2043.92,-3385.18 1953.38,-4087.79 2015,-4158 2043.85,-4190.88 2097.33,-4193.12 2133.17,-4190.24"/>
<polygon fill="gray" stroke="gray" points="2133.61,-4193.71 2143.23,-4189.26 2132.93,-4186.74 2133.61,-4193.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;fn add_single_state() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = random_public_key(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_key = chain_key(1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let re...">
<polygon fill="lightblue" stroke="black" points="1694,-3363 1562,-3363 1562,-3327 1694,-3327 1694,-3363"/>
<text text-anchor="middle" x="1628" y="-3341.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_single_state</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().</title>
<path fill="none" stroke="gray" d="M1694.2,-3345C1802.8,-3345 2018.59,-3345 2117.63,-3345"/>
<polygon fill="gray" stroke="gray" points="2117.69,-3348.5 2127.69,-3345 2117.69,-3341.5 2117.69,-3348.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="gray" d="M1694.27,-3341.21C1764.65,-3336.84 1879.95,-3328.83 1979,-3318 2013.91,-3314.18 2052.27,-3308.95 2085.36,-3304.1"/>
<polygon fill="gray" stroke="gray" points="2086.07,-3307.54 2095.45,-3302.61 2085.05,-3300.61 2086.07,-3307.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().</title>
<path fill="none" stroke="gray" d="M1694.26,-3340.25C1784.61,-3335.25 1940.98,-3332.78 1979,-3372 2039.85,-3434.78 1957.24,-4092.38 2015,-4158 2043.9,-4190.83 2097.37,-4193.09 2133.19,-4190.22"/>
<polygon fill="gray" stroke="gray" points="2133.63,-4193.69 2143.24,-4189.24 2132.95,-4186.73 2133.63,-4193.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys().</title>
<g id="a_node88"><a xlink:title="fn derive_keys(has_kyber: bool, secret_input: &amp;[u8]) &#45;&gt; (RootKey, ChainKey) &#160;{ &#160;&#160;&#160;&#160;let label = if has_kyber { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; WhisperText_X25519_SHA&#45;256_CRYSTALS&#45;KYBER&#45;1024&#39; .as_slice() &#160;&#160;&#160;&#160;} else { &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="2765,-1489 2667,-1489 2667,-1453 2765,-1453 2765,-1489"/>
<text text-anchor="middle" x="2716" y="-1467.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_keys</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys_with_label(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys_with_label().</title>
<path fill="none" stroke="gray" d="M2765.07,-1471C2785.36,-1471 2809.75,-1471 2833.47,-1471"/>
<polygon fill="gray" stroke="gray" points="2833.59,-1474.5 2843.59,-1471 2833.59,-1467.5 2833.59,-1474.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage&lt;&#39;a&gt;`]parse(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage&lt;&#39;a&gt;`]parse().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;pub fn parse(data: &amp;&#39;a [u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if data.is_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError::InvalidSealedSenderMessage( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; Message was empty&#39; .to_owned(...">
<polygon fill="lightblue" stroke="black" points="1056,-4242 1000,-4242 1000,-4206 1056,-4206 1056,-4242"/>
<text text-anchor="middle" x="1028" y="-4220.3" font-family="Helvetica,sans-Serif" font-size="14.00">parse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage&lt;&#39;a&gt;`]parse().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnknownSealedSenderVersion# -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage&lt;&#39;a&gt;`]parse().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnknownSealedSenderVersion#</title>
<path fill="none" stroke="gray" d="M1056.12,-4227.38C1101.7,-4232.99 1196.55,-4244.36 1277,-4252 1352.02,-4259.13 1436.23,-4265.67 1503.24,-4270.53"/>
<polygon fill="gray" stroke="gray" points="1503.2,-4274.03 1513.42,-4271.26 1503.7,-4267.05 1503.2,-4274.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage&lt;&#39;a&gt;`]parse().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage# -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage&lt;&#39;a&gt;`]parse().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#</title>
<path fill="none" stroke="gray" d="M1056.25,-4224.05C1134.74,-4224.18 1364.81,-4224.56 1507.75,-4224.8"/>
<polygon fill="gray" stroke="gray" points="1507.88,-4228.3 1517.88,-4224.82 1507.89,-4221.3 1507.88,-4228.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#decapsulate(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#decapsulate().</title>
<g id="a_node91"><a xlink:title="trait DynParameters &#160;&#160;&#160;&#160;&#160;fn decapsulate(secret_key: &amp;KeyMaterial&lt;Secret&gt;, ciphertext: &amp;[u8]) &#45;&gt; Result&lt;SharedSecret&gt;; } &#160;/// Acts as a bridge between the static [Parameters] trait and the dynamic [Key...">
<polygon fill="lightblue" stroke="black" points="267,-4207 166,-4207 166,-4171 267,-4171 267,-4207"/>
<text text-anchor="middle" x="216.5" y="-4185.3" font-family="Helvetica,sans-Serif" font-size="14.00">decapsulate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#decapsulate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#generate(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#decapsulate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#generate().</title>
<path fill="none" stroke="gray" d="M267.22,-4184.81C310.07,-4183.6 371.95,-4187.84 417,-4216 441.46,-4231.29 428.78,-4254.34 453,-4270 486.53,-4291.68 531.84,-4297.72 566.02,-4298.74"/>
<polygon fill="gray" stroke="gray" points="566.18,-4302.25 576.24,-4298.91 566.3,-4295.25 566.18,-4302.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#decapsulate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#encapsulate(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#decapsulate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/Parameters#encapsulate().</title>
<path fill="none" stroke="gray" d="M267.1,-4182.12C311.36,-4178.85 375.41,-4181.55 417,-4216 455.96,-4248.28 414.53,-4291.13 453,-4324 480.8,-4347.75 521.39,-4354.48 554.99,-4355.29"/>
<polygon fill="gray" stroke="gray" points="555.15,-4358.79 565.17,-4355.36 555.2,-4351.79 555.15,-4358.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().</title>
<g id="a_node92"><a xlink:title=") &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; &#160;fn decrypt_message_with_record&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;record: &amp;mut SessionRecord, &#160;&#160;&#160;&#160;ciphertext: &amp;SignalMessage, &#160;&#160;&#160;&#160;original_message_typ...">
<polygon fill="lightblue" stroke="black" points="1740.5,-2403 1515.5,-2403 1515.5,-2367 1740.5,-2367 1740.5,-2403"/>
<text text-anchor="middle" x="1628" y="-2381.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_message_with_record</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Previous# -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Previous#</title>
<path fill="none" stroke="gray" d="M1740.66,-2374.26C1858.47,-2362.92 2038.5,-2345.6 2122.85,-2337.49"/>
<polygon fill="gray" stroke="gray" points="2123.27,-2340.96 2132.89,-2336.52 2122.6,-2334 2123.27,-2340.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().</title>
<path fill="none" stroke="gray" d="M1740.66,-2393.68C1831.54,-2400.74 1959.44,-2410.68 2051.88,-2417.86"/>
<polygon fill="gray" stroke="gray" points="2051.88,-2421.37 2062.12,-2418.66 2052.43,-2414.39 2051.88,-2421.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage# -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage#</title>
<path fill="none" stroke="gray" d="M1740.55,-2369.84C1812.61,-2365.28 1906.18,-2369.52 1979,-2408 2001.95,-2420.13 1991.94,-2442.07 2015,-2454 2076.45,-2485.8 2266.09,-2434.39 2326,-2469 2351.62,-2483.8 2336.78,-2509.52 2362,-2525 2406.93,-2552.57 2561.52,-2510.95 2598,-2549 2668.46,-2622.49 2708.88,-4256.64 2714.36,-4492.69"/>
<polygon fill="gray" stroke="gray" points="2710.86,-4492.94 2714.59,-4502.86 2717.86,-4492.78 2710.86,-4492.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<path fill="none" stroke="gray" d="M1708.67,-2403.08C1780.12,-2419.97 1887.5,-2447.03 1979,-2477 2018.39,-2489.9 2296.99,-2584.39 2326,-2614 2358.18,-2646.85 2327.46,-2680.64 2362,-2711 2382.76,-2729.24 2413.39,-2735.83 2438.1,-2737.95"/>
<polygon fill="gray" stroke="gray" points="2438.08,-2741.45 2448.29,-2738.6 2438.53,-2734.47 2438.08,-2741.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper# -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper#</title>
<path fill="none" stroke="gray" d="M1740.77,-2371.92C1813.37,-2368.78 1907.46,-2375.25 1979,-2417 2003.28,-2431.17 1990.76,-2454.77 2015,-2469 2134.76,-2539.29 2203.52,-2433.57 2326,-2499 2348.29,-2510.91 2340.86,-2529.15 2362,-2543 2383.13,-2556.84 2410.07,-2564.95 2432.77,-2569.67"/>
<polygon fill="gray" stroke="gray" points="2432.39,-2573.16 2442.87,-2571.6 2433.71,-2566.28 2432.39,-2573.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Current# -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/CurrentOrPrevious#Current#</title>
<path fill="none" stroke="gray" d="M1740.69,-2381.56C1878.35,-2377.19 2119.45,-2369.1 2326,-2360 2362.96,-2358.37 2404.93,-2356.15 2435.55,-2354.46"/>
<polygon fill="gray" stroke="gray" points="2436.09,-2357.94 2445.88,-2353.89 2435.7,-2350.95 2436.09,-2357.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/create_decryption_failure_log(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/create_decryption_failure_log().</title>
<g id="a_node153"><a xlink:title=") &#45;&gt; Result&lt;String&gt; &#160;fn create_decryption_failure_log( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;mut errs: &amp;[SignalProtocolError], &#160;&#160;&#160;&#160;record: &amp;SessionRecord, &#160;&#160;&#160;&#160;ciphertext: &amp;SignalMessage, { &#160;&#160;&#160;&#160;fn ...">
<polygon fill="lightblue" stroke="black" points="2279.5,-2223 2061.5,-2223 2061.5,-2187 2279.5,-2187 2279.5,-2223"/>
<text text-anchor="middle" x="2170.5" y="-2201.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_decryption_failure_log</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/create_decryption_failure_log(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/create_decryption_failure_log().</title>
<path fill="none" stroke="gray" d="M1740.72,-2392.86C1815.13,-2392.36 1911.32,-2380.03 1979,-2329 2009.16,-2306.26 1986.46,-2276.75 2015,-2252 2027.28,-2241.35 2041.92,-2233.12 2057.22,-2226.75"/>
<polygon fill="gray" stroke="gray" points="2058.77,-2229.9 2066.82,-2223.02 2056.23,-2223.38 2058.77,-2229.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage# -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#</title>
<g id="a_node165"><a xlink:title=" &#160;&#160;&#160;/// invalid &#160;&#160;&#160;&#160;&#160;DuplicatedMessage(u32, u32), {0:?} message: {1} &#160;&#160;&#160;&#160;InvalidMessage(crate::CiphertextMessageType, &amp;&#39;static str), &#160;&#160;&#160;&#160;&#160;/// error while invoking an ffi callback: {0} &#160;&#160;&#160;&#160;FfiBindingEr...">
<polygon fill="lightblue" stroke="black" points="2792,-2499 2640,-2499 2640,-2463 2792,-2463 2792,-2499"/>
<text text-anchor="middle" x="2716" y="-2477.3" font-family="Helvetica,sans-Serif" font-size="14.00">DuplicatedMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage# -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#</title>
<path fill="none" stroke="gray" d="M1740.77,-2383.08C1978.34,-2379.53 2518.4,-2374.46 2598,-2400 2632.78,-2411.16 2666.41,-2436.45 2688.62,-2455.82"/>
<polygon fill="gray" stroke="gray" points="2686.48,-2458.6 2696.26,-2462.65 2691.14,-2453.38 2686.48,-2458.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/impl#[`Incremental&lt;M&gt;`]new(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/impl#[`Incremental&lt;M&gt;`]new().</title>
<path fill="none" stroke="gray" d="M683.33,-1678.41C770.67,-1675 921.24,-1669.13 990.37,-1666.43"/>
<polygon fill="gray" stroke="gray" points="990.88,-1669.91 1000.74,-1666.02 990.61,-1662.92 990.88,-1669.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IdentityKey::decode(value) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2208,-3195 2133,-3195 2133,-3159 2208,-3159 2208,-3195"/>
<text text-anchor="middle" x="2170.5" y="-3173.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;pub fn decode(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(value)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self { public_key: pk }) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2513.5,-2876 2446.5,-2876 2446.5,-2840 2513.5,-2840 2513.5,-2876"/>
<text text-anchor="middle" x="2480" y="-2854.3" font-family="Helvetica,sans-Serif" font-size="14.00">decode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode().</title>
<path fill="none" stroke="gray" d="M2208.02,-3181.47C2243.15,-3183.57 2295.32,-3180.55 2326,-3150 2390.31,-3085.96 2315.07,-3026.68 2362,-2949 2379.97,-2919.25 2411.55,-2895.56 2437.38,-2879.82"/>
<polygon fill="gray" stroke="gray" points="2439.41,-2882.68 2446.24,-2874.58 2435.85,-2876.65 2439.41,-2882.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_mismatching_identifiers() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use crate::IdentityKeyPair; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key_pair = IdentityKeyPair::generate(&amp;mut OsRng); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="748,-3101 484,-3101 484,-3065 748,-3065 748,-3101"/>
<text text-anchor="middle" x="616" y="-3079.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_mismatching_identifiers</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M643.53,-3101.15C681.34,-3128.72 749.42,-3185.09 779,-3252 826.38,-3359.16 735.6,-3691.85 815,-3778 855.74,-3822.21 929.46,-3823.37 978.33,-3818.21"/>
<polygon fill="gray" stroke="gray" points="978.84,-3821.67 988.36,-3817.02 978.02,-3814.72 978.84,-3821.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().</title>
<path fill="none" stroke="gray" d="M748.14,-3083C832.7,-3083 936.62,-3083 990.58,-3083"/>
<polygon fill="gray" stroke="gray" points="990.69,-3086.5 1000.69,-3083 990.69,-3079.5 990.69,-3086.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_versions(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_versions().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_mismatching_versions() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key = IdentityKey::decode(ALICE_IDENTITY)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let b_key = IdentityKey::decode(BOB_IDENTITY)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iterations = 5...">
<polygon fill="lightblue" stroke="black" points="742.5,-2773 489.5,-2773 489.5,-2737 742.5,-2737 742.5,-2773"/>
<text text-anchor="middle" x="616" y="-2751.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_mismatching_versions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_versions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_versions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode().</title>
<path fill="none" stroke="gray" d="M742.81,-2761.45C983.07,-2773.76 1523.82,-2801.5 1979,-2825 2133.22,-2832.96 2172,-2831.46 2326,-2843 2363.14,-2845.78 2405.25,-2849.99 2435.88,-2853.24"/>
<polygon fill="gray" stroke="gray" points="2435.89,-2856.76 2446.21,-2854.35 2436.64,-2849.8 2435.89,-2856.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_versions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_versions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().</title>
<path fill="none" stroke="gray" d="M742.84,-2759.09C756.39,-2764.18 768.9,-2771.54 779,-2782 864.34,-2870.34 727.98,-2969.32 815,-3056 861.07,-3101.89 943.41,-3097.6 990.78,-3090.33"/>
<polygon fill="gray" stroke="gray" points="991.6,-3093.74 1000.89,-3088.65 990.45,-3086.84 991.6,-3093.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidKyberPreKeyId# -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidKyberPreKeyId#</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;/// invalid MAC key length &lt; &#160;&#160;&#160;&#160;InvalidKyberPreKeyId, &#160;{0}&gt; &#160;&#160;&#160;&#160;InvalidMacKeyLength(usize), &#160;&#160;&#160;&#160;&#160;/// missing sender key state for distribution ID {distribution_id} &#160;&#160;&#160;&#160;NoSenderKeyState { distribu...">
<polygon fill="lightblue" stroke="black" points="298,-4801 135,-4801 135,-4765 298,-4765 298,-4801"/>
<text text-anchor="middle" x="216.5" y="-4779.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidKyberPreKeyId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message_for_plaintext() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(matches!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DecryptionErrorMessage::for_original( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CiphertextMessageType::Plaintex...">
<polygon fill="lightblue" stroke="black" points="779,-2827 453,-2827 453,-2791 779,-2791 779,-2827"/>
<text text-anchor="middle" x="616" y="-2805.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message_for_plaintext</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext# -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#</title>
<path fill="none" stroke="gray" d="M762.77,-2790.86C768.4,-2788.25 773.84,-2785.31 779,-2782 802.98,-2766.64 793.67,-2747.86 815,-2729 987.88,-2576.13 1052.68,-2546.18 1277,-2492 1352.82,-2473.69 1913.19,-2450.12 1979,-2492 2010.87,-2512.28 1988.27,-2542.3 2015,-2569 2044.63,-2598.6 2088.72,-2617.47 2122.23,-2628.44"/>
<polygon fill="gray" stroke="gray" points="2121.23,-2631.79 2131.82,-2631.46 2123.33,-2625.12 2121.23,-2631.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument# -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument#</title>
<path fill="none" stroke="gray" d="M779.19,-2826.58C912.66,-2840.36 1106.88,-2858.85 1277,-2869 1354.89,-2873.65 1906.91,-2859.14 1979,-2889 1999.33,-2897.42 1994.82,-2914.22 2015,-2923 2078.5,-2950.64 2257.41,-2933.45 2326,-2943 2351.55,-2946.56 2379.18,-2952.01 2403.85,-2957.47"/>
<polygon fill="gray" stroke="gray" points="2403.34,-2960.94 2413.86,-2959.72 2404.87,-2954.11 2403.34,-2960.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().</title>
<g id="a_node161"><a xlink:title=" &#160;&#160;&#160;pub const fn from_epoch_millis(milliseconds: u64) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self(milliseconds) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2240.5,-3457 2100.5,-3457 2100.5,-3421 2240.5,-3421 2240.5,-3457"/>
<text text-anchor="middle" x="2170.5" y="-3435.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_epoch_millis</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().</title>
<path fill="none" stroke="gray" d="M769.84,-2827.24C773.09,-2829.89 776.16,-2832.81 779,-2836 833.36,-2897.08 758.09,-3512.3 815,-3571 886.69,-3644.95 1174.09,-3603.89 1277,-3608 1315.97,-3609.56 1947.98,-3631.64 1979,-3608 2027.02,-3571.4 1971.73,-3519.11 2015,-3477 2035.1,-3457.44 2063.56,-3447.42 2090.58,-3442.44"/>
<polygon fill="gray" stroke="gray" points="2091.15,-3445.9 2100.46,-3440.83 2090.02,-3438.99 2091.15,-3445.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().</title>
<g id="a_node194"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;pub fn for_original( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;original_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;original_type: CiphertextMessageType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;original_timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;original_sender_device_id: u...">
<polygon fill="lightblue" stroke="black" points="1075.5,-2919 980.5,-2919 980.5,-2883 1075.5,-2883 1075.5,-2919"/>
<text text-anchor="middle" x="1028" y="-2897.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_original</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().</title>
<path fill="none" stroke="gray" d="M733.17,-2827.04C748.62,-2829.83 764.22,-2832.84 779,-2836 845.31,-2850.18 920.52,-2870.51 970.56,-2884.64"/>
<polygon fill="gray" stroke="gray" points="969.65,-2888.02 980.22,-2887.38 971.56,-2881.28 969.65,-2888.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt().</title>
<path fill="none" stroke="gray" d="M1045.16,-3198.02C1086.87,-3245.78 1197.84,-3381.31 1241,-3517 1263.3,-3587.09 1224.32,-4126.67 1277,-4178 1332.89,-4232.46 1919.9,-4147.05 1979,-4198 2048.07,-4257.54 1950.41,-4335.63 2015,-4400 2032.29,-4417.23 2056.42,-4425.71 2080.47,-4429.44"/>
<polygon fill="gray" stroke="gray" points="2080.03,-4432.91 2090.39,-4430.73 2080.93,-4425.97 2080.03,-4432.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256().</title>
<path fill="none" stroke="gray" d="M1153.22,-3165.64C1186.95,-3155.46 1219.93,-3138.41 1241,-3110 1290.06,-3043.85 1222.03,-1689.33 1277,-1628 1347.34,-1549.52 1481.03,-1555.25 1561.27,-1567.48"/>
<polygon fill="gray" stroke="gray" points="1560.84,-1570.95 1571.27,-1569.07 1561.94,-1564.04 1560.84,-1570.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[`std::time::SystemTime`][`From&lt;Timestamp&gt;`]from(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[`std::time::SystemTime`][`From&lt;Timestamp&gt;`]from().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;fn from(value: Timestamp) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::UNIX_EPOCH + std::time::Duration::from_millis(value.epoch_millis()) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="243.5,-3179 189.5,-3179 189.5,-3143 243.5,-3143 243.5,-3179"/>
<text text-anchor="middle" x="216.5" y="-3157.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/message_version(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/message_version().</title>
<g id="a_node104"><a xlink:title="fn message_version(has_kyber: bool) &#45;&gt; u8 &#160;{ &#160;&#160;&#160;&#160;if has_kyber { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CIPHERTEXT_MESSAGE_CURRENT_VERSION &#160;&#160;&#160;&#160;} else { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CIPHERTEXT_MESSAGE_PRE_KYBER_VERSION &#160;&#160;&#160;&#160;} }">
<polygon fill="lightblue" stroke="black" points="2784.5,-1543 2647.5,-1543 2647.5,-1507 2784.5,-1507 2784.5,-1543"/>
<text text-anchor="middle" x="2716" y="-1521.3" font-family="Helvetica,sans-Serif" font-size="14.00">message_version</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().</title>
<g id="a_node105"><a xlink:title=") &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; &#160;pub async fn message_decrypt_prekey&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;ciphertext: &amp;PreKeySignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1124,-2305 932,-2305 932,-2269 1124,-2269 1124,-2305"/>
<text text-anchor="middle" x="1028" y="-2283.3" font-family="Helvetica,sans-Serif" font-size="14.00">message_decrypt_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().</title>
<path fill="none" stroke="gray" d="M1084.01,-2268.91C1133.84,-2253.24 1209.57,-2231.23 1277,-2219 1372.85,-2201.62 1485.27,-2193.47 1556.31,-2189.8"/>
<polygon fill="gray" stroke="gray" points="1556.68,-2193.29 1566.49,-2189.29 1556.33,-2186.3 1556.68,-2193.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<path fill="none" stroke="gray" d="M1124.16,-2276.47C1165.49,-2277.32 1211.18,-2286.5 1241,-2317 1335.82,-2413.96 1177.23,-2528.15 1277,-2620 1334.42,-2672.86 1910.18,-2608.19 1979,-2645 2003.15,-2657.92 1991.23,-2681.4 2015,-2695 2051.32,-2715.77 2331.91,-2731.05 2438.29,-2736.15"/>
<polygon fill="gray" stroke="gray" points="2438.17,-2739.65 2448.32,-2736.63 2438.5,-2732.66 2438.17,-2739.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().</title>
<path fill="none" stroke="gray" d="M1124.08,-2299.76C1160.67,-2304.85 1202.82,-2310.94 1241,-2317 1335.38,-2331.99 1442.38,-2351 1519.75,-2365.1"/>
<polygon fill="gray" stroke="gray" points="1519.52,-2368.62 1529.99,-2366.97 1520.78,-2361.73 1519.52,-2368.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/create_decryption_failure_log(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/create_decryption_failure_log().</title>
<path fill="none" stroke="gray" d="M1124.28,-2280.15C1331.75,-2265.23 1823.98,-2229.84 2051.02,-2213.52"/>
<polygon fill="gray" stroke="gray" points="2051.58,-2216.99 2061.3,-2212.78 2051.08,-2210.01 2051.58,-2216.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new_fresh(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new_fresh().</title>
<path fill="none" stroke="gray" d="M1068.99,-2268.97C1119.49,-2243.75 1204.2,-2192.75 1241,-2120 1295.55,-2012.17 1193.45,-1120.3 1277,-1033 1316.62,-991.6 1486.9,-996.45 1574.49,-1001.95"/>
<polygon fill="gray" stroke="gray" points="1574.29,-1005.44 1584.5,-1002.6 1574.75,-998.46 1574.29,-1005.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<g id="a_node106"><a xlink:title="pub async fn sealed_sender_multi_recipient_encrypt&lt; &#160;&#160;&#160;&#160;R: Rng + CryptoRng, &#160;&#160;&#160;&#160;X: IntoIterator&lt;Item = ServiceId&gt;, &gt;( &#160;&#160;&#160;&#160;destinations: &amp;[&amp;ProtocolAddress], &#160;&#160;&#160;&#160;destination_sessions: &amp;[&amp;SessionRecord]...">
<polygon fill="lightblue" stroke="black" points="359,-4477 74,-4477 74,-4441 359,-4441 359,-4477"/>
<text text-anchor="middle" x="216.5" y="-4455.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_multi_recipient_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().</title>
<g id="a_node185"><a xlink:title="async fn sealed_sender_multi_recipient_encrypt_impl&lt; &#160;&#160;&#160;&#160;R: Rng + CryptoRng, &#160;&#160;&#160;&#160;X: IntoIterator&lt;Item = ServiceId&gt;, &gt;( &#160;&#160;&#160;&#160;destinations: &amp;[&amp;ProtocolAddress], &#160;&#160;&#160;&#160;destination_sessions: &amp;[&amp;SessionRecord...">
<polygon fill="lightblue" stroke="black" points="777,-4693 455,-4693 455,-4657 777,-4657 777,-4693"/>
<text text-anchor="middle" x="616" y="-4671.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_multi_recipient_encrypt_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().</title>
<path fill="none" stroke="gray" d="M359.06,-4456.49C380.47,-4461.9 400.79,-4471.1 417,-4486 471.3,-4535.91 399.47,-4597.26 453,-4648 453.96,-4648.91 454.94,-4649.8 455.94,-4650.66"/>
<polygon fill="gray" stroke="gray" points="453.85,-4653.47 463.9,-4656.82 458.13,-4647.93 453.85,-4653.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M1665.69,-3148.89C1807.51,-3171.71 2312.71,-3253.58 2326,-3264 2431.76,-3346.98 2465.96,-3518.01 2475.62,-3585.61"/>
<polygon fill="gray" stroke="gray" points="2472.2,-3586.46 2477.01,-3595.9 2479.14,-3585.52 2472.2,-3586.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1665.73,-3145.31C1761.15,-3151.31 2016.85,-3167.4 2122.66,-3174.05"/>
<polygon fill="gray" stroke="gray" points="2122.52,-3177.55 2132.72,-3174.69 2122.96,-3170.57 2122.52,-3177.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content().</title>
<g id="a_node112"><a xlink:title=") &#45;&gt; Result&lt;DecryptionErrorMessage&gt; &#160;pub fn extract_decryption_error_message_from_serialized_content( &#160;&#160;&#160;&#160;bytes: &amp;[u8], { &#160;&#160;&#160;&#160;if bytes.last() != Some(&amp;PlaintextContent::PADDING_BOUNDARY_BYTE) { &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1241,-3562 815,-3562 815,-3526 1241,-3526 1241,-3562"/>
<text text-anchor="middle" x="1028" y="-3540.3" font-family="Helvetica,sans-Serif" font-size="14.00">extract_decryption_error_message_from_serialized_content</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M1241.26,-3548.24C1512.44,-3552.72 1950.45,-3556.38 1979,-3534 2029.56,-3494.37 1964.23,-3433.37 2015,-3394 2042.31,-3372.83 2295.37,-3378 2326,-3394 2404.69,-3435.12 2451.09,-3537.21 2469.61,-3586.5"/>
<polygon fill="gray" stroke="gray" points="2466.32,-3587.7 2473.04,-3595.9 2472.9,-3585.3 2466.32,-3587.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument# -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument#</title>
<path fill="none" stroke="gray" d="M1035.69,-3525.59C1058.39,-3466.19 1138.93,-3279.45 1277,-3210 1346.68,-3174.95 1905.44,-3184.06 1979,-3210 1998.38,-3216.83 1995.62,-3232.17 2015,-3239 2080.18,-3261.99 2266.09,-3273.46 2326,-3239 2415.69,-3187.41 2457.7,-3060.8 2472.49,-3004.17"/>
<polygon fill="gray" stroke="gray" points="2475.97,-3004.68 2475.01,-2994.13 2469.18,-3002.98 2475.97,-3004.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node195"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proto_structure = proto::service::DecryptionErrorMessage::decode(value) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::InvalidProtobufEncodi...">
<polygon fill="lightblue" stroke="black" points="1665.5,-3599 1590.5,-3599 1590.5,-3563 1665.5,-3563 1665.5,-3599"/>
<text text-anchor="middle" x="1628" y="-3577.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1241.1,-3557.12C1363.7,-3564.71 1507.64,-3573.62 1580.18,-3578.1"/>
<polygon fill="gray" stroke="gray" points="1580.15,-3581.61 1590.35,-3578.73 1580.58,-3574.62 1580.15,-3581.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage# -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage#</title>
<path fill="none" stroke="gray" d="M2233.05,-4521C2334.42,-4521 2535.94,-4521 2643.48,-4521"/>
<polygon fill="gray" stroke="gray" points="2643.59,-4524.5 2653.59,-4521 2643.59,-4517.5 2643.59,-4524.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession# -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#</title>
<path fill="none" stroke="gray" d="M2220.22,-4539.06C2274.69,-4559.25 2362.83,-4591.93 2420.85,-4613.44"/>
<polygon fill="gray" stroke="gray" points="2419.66,-4616.73 2430.25,-4616.93 2422.09,-4610.17 2419.66,-4616.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage# -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#</title>
<path fill="none" stroke="gray" d="M2233.13,-4516.9C2345.31,-4508.83 2573.59,-4489.35 2598,-4463 2667.55,-4387.94 2708.75,-2746.53 2714.34,-2509.44"/>
<polygon fill="gray" stroke="gray" points="2717.85,-2509.3 2714.58,-2499.22 2710.85,-2509.14 2717.85,-2509.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey# -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/get_sender_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#</title>
<path fill="none" stroke="gray" d="M2233.11,-4510.43C2266.3,-4501.33 2304.71,-4484.6 2326,-4454 2410.03,-4333.26 2295.17,-3924.05 2362,-3793 2377.81,-3762.01 2408.76,-3737.58 2434.86,-3721.26"/>
<polygon fill="gray" stroke="gray" points="2436.75,-3724.21 2443.49,-3716.04 2433.12,-3718.22 2436.75,-3724.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v1(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v1().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_test_v1() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// testVectorsVersion1 in Java &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key = IdentityKey::decode(ALICE_IDENTITY)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let b_key = IdentityKey::decode(BOB_IDENTITY)?; ...">
<polygon fill="lightblue" stroke="black" points="690,-2881 542,-2881 542,-2845 690,-2845 690,-2881"/>
<text text-anchor="middle" x="616" y="-2859.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_test_v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode().</title>
<path fill="none" stroke="gray" d="M690.23,-2859.47C811.98,-2853.79 1063.77,-2842.88 1277,-2839 1588.95,-2833.33 1667.48,-2821.75 1979,-2839 1995.07,-2839.89 1998.94,-2841.85 2015,-2843 2169.8,-2854.09 2354.25,-2856.98 2436.16,-2857.74"/>
<polygon fill="gray" stroke="gray" points="2436.3,-2861.24 2446.33,-2857.82 2436.36,-2854.24 2436.3,-2861.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().</title>
<path fill="none" stroke="gray" d="M690.34,-2858.06C721.37,-2859.91 755.67,-2867.78 779,-2890 833.66,-2942.07 759.35,-3004.99 815,-3056 862.8,-3099.82 944.15,-3096.39 990.96,-3089.8"/>
<polygon fill="gray" stroke="gray" points="991.6,-3093.25 1000.96,-3088.27 990.54,-3086.33 991.6,-3093.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSignedPreKeyId# -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSignedPreKeyId#</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;/// invalid MAC key length &lt; &#160;&#160;&#160;&#160;InvalidSignedPreKeyId, &#160;&#160;&#160;&#160;/// invalid Kyber prekey identifier &#160;&#160;&#160;&#160;InvalidKyberPreKeyId, &#160;{0}&gt; &#160;&#160;&#160;&#160;InvalidMacKeyLength(usize), &#160;&#160;&#160;&#160;&#160;/// missing sender key state fo...">
<polygon fill="lightblue" stroke="black" points="302,-4585 131,-4585 131,-4549 302,-4549 302,-4585"/>
<text text-anchor="middle" x="216.5" y="-4563.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidSignedPreKeyId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt().</title>
<g id="a_node118"><a xlink:title="fn aes_256_ctr_decrypt(ctext: &amp;[u8], key: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, DecryptionError&gt; &#160;{ &#160;&#160;&#160;&#160;aes_256_ctr_encrypt(ctext, key).map_err(|e| match e { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EncryptionError::BadKeyOrIv =&gt; DecryptionError...">
<polygon fill="lightblue" stroke="black" points="1708,-4479 1548,-4479 1548,-4443 1708,-4443 1708,-4479"/>
<text text-anchor="middle" x="1628" y="-4457.3" font-family="Helvetica,sans-Serif" font-size="14.00">aes_256_ctr_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadKeyOrIv# -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadKeyOrIv#</title>
<path fill="none" stroke="gray" d="M1708.16,-4466.55C1781.16,-4468.75 1891.19,-4464.55 1979,-4429 1998.04,-4421.29 1996.29,-4408.48 2015,-4400 2045.06,-4386.37 2081.29,-4379.6 2111.11,-4376.24"/>
<polygon fill="gray" stroke="gray" points="2111.78,-4379.69 2121.37,-4375.19 2111.06,-4372.73 2111.78,-4379.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/EncryptionError#BadKeyOrIv# -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/EncryptionError#BadKeyOrIv#</title>
<g id="a_node129"><a xlink:title="pub(crate) enum DecryptionError &#160;&#160;&#160;&#160;&#160;BadKeyOrIv, } &#160;#[derive(Debug)] { &#160;&#160;&#160;&#160;/// The key or IV is the wrong length. &#160;&#160;&#160;&#160;BadKeyOrIv, &#160;&#160;&#160;&#160;/// Either the input is malformed, or the MAC doesn&#39;t match on dec...">
<polygon fill="lightblue" stroke="black" points="2529,-4454 2431,-4454 2431,-4418 2529,-4418 2529,-4454"/>
<text text-anchor="middle" x="2480" y="-4432.3" font-family="Helvetica,sans-Serif" font-size="14.00">BadKeyOrIv</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/EncryptionError#BadKeyOrIv# -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/EncryptionError#BadKeyOrIv#</title>
<path fill="none" stroke="gray" d="M1708.02,-4462.96C1837.36,-4465.54 2102.28,-4468.24 2326,-4454 2357.38,-4452 2392.2,-4448.04 2420.69,-4444.35"/>
<polygon fill="gray" stroke="gray" points="2421.43,-4447.78 2430.88,-4443 2420.51,-4440.84 2421.43,-4447.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt().</title>
<path fill="none" stroke="gray" d="M1708.17,-4456.02C1807.21,-4449.79 1976.34,-4439.15 2079.98,-4432.63"/>
<polygon fill="gray" stroke="gray" points="2080.36,-4436.11 2090.12,-4431.99 2079.92,-4429.13 2080.36,-4436.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node119"><a xlink:title=") &#45;&gt; Result&lt;SealedSenderDecryptionResult&gt; &#160;pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uu...">
<polygon fill="lightblue" stroke="black" points="304.5,-3845 128.5,-3845 128.5,-3809 304.5,-3809 304.5,-3845"/>
<text text-anchor="middle" x="216.5" y="-3823.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage# -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage#</title>
<path fill="none" stroke="gray" d="M304.59,-3818.71C344.28,-3819.9 388.63,-3829.1 417,-3859 468.84,-3913.64 398.56,-4143.96 453,-4196 505.47,-4246.15 725.12,-4167.37 779,-4216 851.9,-4281.79 742.01,-4368.3 815,-4434 885.48,-4497.44 1171.08,-4394.93 1241,-4459 1322.14,-4533.35 1193.71,-4632.06 1277,-4704 1306.51,-4729.49 1940.02,-4705.32 1979,-4704 1987.61,-4703.71 2590.33,-4665.93 2598,-4662 2646.71,-4637.08 2682.79,-4581.98 2701.21,-4548.52"/>
<polygon fill="gray" stroke="gray" points="2704.52,-4549.76 2706.15,-4539.29 2698.35,-4546.46 2704.52,-4549.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<path fill="none" stroke="gray" d="M224.9,-3808.84C255.06,-3733.9 369.38,-3440.69 417,-3188 427.6,-3131.74 411.29,-2713.22 453,-2674 719.8,-2423.11 910.77,-2668.56 1277,-2667 1355,-2666.67 1909.58,-2631.44 1979,-2667 2003.37,-2679.48 1990.92,-2703.97 2015,-2717 2051.68,-2736.85 2332.05,-2738.33 2438.33,-2738.17"/>
<polygon fill="gray" stroke="gray" points="2438.36,-2741.67 2448.35,-2738.15 2438.35,-2734.67 2438.36,-2741.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="gray" d="M304.58,-3818.97C344.14,-3820.25 388.39,-3829.45 417,-3859 505.19,-3950.1 365.09,-4050.63 453,-4142 462.22,-4151.58 473.45,-4158.56 485.65,-4163.58"/>
<polygon fill="gray" stroke="gray" points="484.57,-4166.91 495.16,-4167.05 486.96,-4160.34 484.57,-4166.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper# -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper#</title>
<path fill="none" stroke="gray" d="M224.99,-3808.86C255.5,-3733.98 371.02,-3440.99 417,-3188 429.56,-3118.91 405.26,-2608.5 453,-2557 578.59,-2421.52 1092.67,-2459.25 1277,-2447 1315.91,-2444.41 1945.82,-2426.5 1979,-2447 2009.43,-2465.81 1985.51,-2498.75 2015,-2519 2072.24,-2558.3 2257.2,-2539.63 2326,-2549 2362.14,-2553.92 2402.78,-2561.18 2433.09,-2566.93"/>
<polygon fill="gray" stroke="gray" points="2432.48,-2570.37 2442.96,-2568.82 2433.79,-2563.5 2432.48,-2570.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().</title>
<path fill="none" stroke="gray" d="M225.1,-3808.88C256.07,-3734.08 373.12,-3441.36 417,-3188 425.45,-3139.19 417.57,-2331.63 453,-2297 517.1,-2234.35 774.49,-2254.8 921.91,-2272.5"/>
<polygon fill="gray" stroke="gray" points="921.54,-2275.99 931.89,-2273.72 922.39,-2269.04 921.54,-2275.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M304.59,-3837.55C348.94,-3842.4 403.76,-3847.6 453,-3850 890.88,-3871.33 1421.58,-3842 1580.12,-3832.08"/>
<polygon fill="gray" stroke="gray" points="1580.7,-3835.55 1590.46,-3831.42 1580.25,-3828.56 1580.7,-3835.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().</title>
<g id="a_node160"><a xlink:title=") &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; &#160;pub async fn message_decrypt_signal&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;ciphertext: &amp;SignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;ident...">
<polygon fill="lightblue" stroke="black" points="1121.5,-2423 934.5,-2423 934.5,-2387 1121.5,-2387 1121.5,-2423"/>
<text text-anchor="middle" x="1028" y="-2401.3" font-family="Helvetica,sans-Serif" font-size="14.00">message_decrypt_signal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().</title>
<path fill="none" stroke="gray" d="M225.05,-3808.87C255.81,-3734.03 372.17,-3441.19 417,-3188 431.57,-3105.74 394.16,-2496.3 453,-2437 516.55,-2372.96 776.6,-2383.41 923.93,-2395.08"/>
<polygon fill="gray" stroke="gray" points="924.09,-2398.6 934.33,-2395.92 924.65,-2391.63 924.09,-2398.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SealedSenderSelfSend# -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SealedSenderSelfSend#</title>
<g id="a_node172"><a xlink:title=" &#160;&#160;&#160;/// bad KEM key type &lt; &#160;&#160;&#160;&#160;SealedSenderSelfSend, &#160;{0:#04x}&gt; &#160;&#160;&#160;&#160;BadKEMKeyType(u8), &#160;&#160;&#160;&#160;/// unexpected KEM key type &lt;{0:#04x}&gt; (expected &lt;{1:#04x}&gt;) &#160;&#160;&#160;&#160;WrongKEMKeyType(u8, u8), &#160;&#160;&#160;&#160;/// bad KEM key...">
<polygon fill="lightblue" stroke="black" points="703,-3841 529,-3841 529,-3805 703,-3805 703,-3841"/>
<text text-anchor="middle" x="616" y="-3819.3" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSenderSelfSend</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SealedSenderSelfSend# -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SealedSenderSelfSend#</title>
<path fill="none" stroke="gray" d="M304.73,-3826.12C367.97,-3825.49 453.47,-3824.63 518.71,-3823.97"/>
<polygon fill="gray" stroke="gray" points="519.03,-3827.47 529,-3823.87 518.96,-3820.47 519.03,-3827.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node198"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value.len() &lt; SignalMessage::MAC_LENGTH + 1 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(SignalProtocolError::CiphertextMessageTooShort(value.len())); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}...">
<polygon fill="lightblue" stroke="black" points="2208,-3793 2133,-3793 2133,-3757 2208,-3757 2208,-3793"/>
<text text-anchor="middle" x="2170.5" y="-3771.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M304.95,-3840.69C339.83,-3846.24 380.34,-3852.79 417,-3859 594.16,-3889.01 636.02,-3914.16 815,-3930 847.21,-3932.85 1953.3,-3949.63 1979,-3930 2027.33,-3893.09 1969.53,-3838.38 2015,-3798 2044.03,-3772.22 2088.92,-3768.08 2122.85,-3769.44"/>
<polygon fill="gray" stroke="gray" points="2122.81,-3772.95 2133,-3770.02 2123.21,-3765.96 2122.81,-3772.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage# -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#</title>
<path fill="none" stroke="gray" d="M304.54,-3822.79C342.58,-3825.22 385.57,-3834.27 417,-3859 449.56,-3884.62 422.43,-3917.03 453,-3945 577.55,-4058.95 649.57,-4026.36 815,-4060 908.18,-4078.95 1165.16,-4042.64 1241,-4100 1276.35,-4126.74 1241.62,-4166.31 1277,-4193 1341.9,-4241.96 1434.05,-4248.63 1507.5,-4243.76"/>
<polygon fill="gray" stroke="gray" points="1508.02,-4247.23 1517.74,-4243 1507.51,-4240.25 1508.02,-4247.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<g id="a_node120"><a xlink:title=") &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; &#160;pub async fn sealed_sender_encrypt_from_usmc&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;destination: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;usmc: &amp;UnidentifiedSenderMessageContent, &#160;&#160;&#160;&#160;identity_store: &amp;dyn Identit...">
<polygon fill="lightblue" stroke="black" points="746,-4261 486,-4261 486,-4225 746,-4225 746,-4261"/>
<text text-anchor="middle" x="616" y="-4239.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_encrypt_from_usmc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<path fill="none" stroke="gray" d="M746.2,-4249.24C758.34,-4254.13 769.6,-4260.86 779,-4270 838.74,-4328.09 754.81,-4396.37 815,-4454 858.21,-4495.37 930.71,-4497.41 978.71,-4493.2"/>
<polygon fill="gray" stroke="gray" points="979.25,-4496.66 988.85,-4492.18 978.55,-4489.69 979.25,-4496.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt().</title>
<path fill="none" stroke="gray" d="M741.85,-4224.87C756.2,-4217.94 769.18,-4208.58 779,-4196 846.29,-4109.74 742.14,-3293.62 815,-3212 834.93,-3189.67 863.26,-3178.21 892.74,-3173"/>
<polygon fill="gray" stroke="gray" points="893.42,-3176.44 902.77,-3171.46 892.36,-3169.52 893.42,-3176.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound# -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound#</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;/// invalid session: &#160;&#160;&#160;&#160;&#160;SessionNotFound(crate::ProtocolAddress), {0} &#160;&#160;&#160;&#160;InvalidSessionStructure(&amp;&#39;static str), &#160;&#160;&#160;&#160;/// invalid sender key session with distribution ID {distribution_id} &#160;&#160;&#160;&#160;Inva...">
<polygon fill="lightblue" stroke="black" points="1696.5,-4769 1559.5,-4769 1559.5,-4733 1696.5,-4733 1696.5,-4769"/>
<text text-anchor="middle" x="1628" y="-4747.3" font-family="Helvetica,sans-Serif" font-size="14.00">SessionNotFound</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound# -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound#</title>
<path fill="none" stroke="gray" d="M746.24,-4248.65C758.45,-4253.63 769.71,-4260.54 779,-4270 855.5,-4347.9 733.6,-4440.24 815,-4513 850.31,-4544.57 1205.08,-4497.13 1241,-4528 1306.52,-4584.3 1213.08,-4660.89 1277,-4719 1350.06,-4785.42 1470.61,-4780.66 1549.42,-4768.16"/>
<polygon fill="gray" stroke="gray" points="1550,-4771.61 1559.3,-4766.52 1548.86,-4764.71 1550,-4771.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<path fill="none" stroke="gray" d="M686.74,-4224.97C724.51,-4215.67 772.1,-4204.69 815,-4197 870.84,-4186.98 935.6,-4179.3 978.71,-4174.74"/>
<polygon fill="gray" stroke="gray" points="979.33,-4178.19 988.91,-4173.67 978.6,-4171.23 979.33,-4178.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<path fill="none" stroke="gray" d="M746.32,-4247.52C758.67,-4252.67 769.94,-4259.93 779,-4270 869.5,-4370.64 718.94,-4782.65 815,-4878 842.32,-4905.12 1412.88,-4916.52 1580.86,-4919.3"/>
<polygon fill="gray" stroke="gray" points="1580.82,-4922.8 1590.88,-4919.46 1580.93,-4915.8 1580.82,-4922.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().</title>
<path fill="none" stroke="gray" d="M673.83,-2154.98C707.06,-2153.5 748.36,-2146.86 779,-2126 804.71,-2108.5 788.96,-2083 815,-2066 868.35,-2031.16 945.52,-2030.91 990.55,-2034.53"/>
<polygon fill="gray" stroke="gray" points="990.46,-2038.03 1000.73,-2035.45 991.09,-2031.06 990.46,-2038.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]from_protobuf(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]from_protobuf().</title>
<g id="a_node208"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Self &#160;&#160;&#160;&#160;&#160;pub(crate) fn from_protobuf( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smk: storage_proto::sender_key_state_structure::SenderMessageKey, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::new(smk.iteration, smk.seed) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1085.5,-2111 970.5,-2111 970.5,-2075 1085.5,-2075 1085.5,-2111"/>
<text text-anchor="middle" x="1028" y="-2089.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_protobuf</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]from_protobuf(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]from_protobuf().</title>
<path fill="none" stroke="gray" d="M673.58,-2144.72C748.58,-2133.75 880.69,-2114.41 960.41,-2102.74"/>
<polygon fill="gray" stroke="gray" points="960.96,-2106.2 970.34,-2101.29 959.94,-2099.28 960.96,-2106.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;fn when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record_key_1 ...">
<polygon fill="lightblue" stroke="black" points="1966.5,-3471 1289.5,-3471 1289.5,-3435 1966.5,-3435 1966.5,-3471"/>
<text text-anchor="middle" x="1628" y="-3449.3" font-family="Helvetica,sans-Serif" font-size="14.00">when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().</title>
<path fill="none" stroke="gray" d="M1961.43,-3434.9C1967.41,-3432.14 1973.27,-3429.18 1979,-3426 2002.62,-3412.88 1992.26,-3391.6 2015,-3377 2045.58,-3357.37 2085.95,-3349.49 2117.75,-3346.46"/>
<polygon fill="gray" stroke="gray" points="2118.07,-3349.94 2127.75,-3345.63 2117.5,-3342.97 2118.07,-3349.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="gray" d="M1715.81,-3471.02C1793.04,-3481.8 1904.91,-3483.86 1979,-3426 2018.88,-3394.86 1976.66,-3351.02 2015,-3318 2034.4,-3301.29 2060.39,-3293.22 2085.51,-3289.68"/>
<polygon fill="gray" stroke="gray" points="2085.93,-3293.16 2095.45,-3288.51 2085.11,-3286.21 2085.93,-3293.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().</title>
<path fill="none" stroke="gray" d="M1966.57,-3470.77C1971.52,-3473.55 1975.7,-3476.62 1979,-3480 2031.7,-3533.98 1964.95,-4101.55 2015,-4158 2044.02,-4190.73 2097.46,-4193.01 2133.24,-4190.18"/>
<polygon fill="gray" stroke="gray" points="2133.66,-4193.65 2143.28,-4189.21 2132.99,-4186.68 2133.66,-4193.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving# -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving#</title>
<path fill="none" stroke="gray" d="M1134.53,-4623.52C1172.4,-4625.4 1212.7,-4634.77 1241,-4661 1299.25,-4714.97 1217.65,-4783.24 1277,-4836 1359.71,-4909.53 1501.03,-4893.89 1576.3,-4878.55"/>
<polygon fill="gray" stroke="gray" points="1577.41,-4881.89 1586.47,-4876.4 1575.96,-4875.04 1577.41,-4881.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<path fill="none" stroke="gray" d="M1134.67,-4622.77C1172.79,-4624.5 1213.21,-4633.96 1241,-4661 1315.78,-4733.77 1200.43,-4822.11 1277,-4893 1319.98,-4932.8 1495.77,-4928.05 1580.67,-4923.22"/>
<polygon fill="gray" stroke="gray" points="1581.03,-4926.7 1590.8,-4922.61 1580.61,-4919.71 1581.03,-4926.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;pub fn from_public_and_private(public_key: &amp;[u8], secret_key: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = PublicKey::try_from(public_key)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secret_key = SecretKey::try_from(secr...">
<polygon fill="lightblue" stroke="black" points="309.5,-2461 123.5,-2461 123.5,-2425 309.5,-2425 309.5,-2461"/>
<text text-anchor="middle" x="216.5" y="-2439.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_public_and_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Secret&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Secret&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M309.7,-2454.13C348.17,-2453.44 390.07,-2444.77 417,-2416 497.06,-2330.46 374.26,-1976.76 453,-1890 481.46,-1858.64 531.43,-1854.58 568.37,-1856.7"/>
<polygon fill="gray" stroke="gray" points="568.19,-1860.2 578.42,-1857.44 568.7,-1853.21 568.19,-1860.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Public&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Public&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node200"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::deserialize(value) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="653.5,-1827 578.5,-1827 578.5,-1791 653.5,-1791 653.5,-1827"/>
<text text-anchor="middle" x="616" y="-1805.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Public&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Public&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M309.53,-2454.21C348.08,-2453.57 390.1,-2444.92 417,-2416 504.94,-2321.44 366.52,-1931.9 453,-1836 481.36,-1804.55 531.35,-1800.5 568.32,-1802.65"/>
<polygon fill="gray" stroke="gray" points="568.14,-1806.15 578.37,-1803.4 568.66,-1799.17 568.14,-1806.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#WrongKEMKeyType# -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#WrongKEMKeyType#</title>
<path fill="none" stroke="gray" d="M309.66,-2453.84C348,-2453.07 389.82,-2444.41 417,-2416 478.39,-2351.83 388.81,-2079.36 453,-2018 462.87,-2008.57 1277.54,-1977.84 1543.82,-1968.03"/>
<polygon fill="gray" stroke="gray" points="1543.95,-1971.53 1553.82,-1967.67 1543.69,-1964.54 1543.95,-1971.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown# -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Unknown#</title>
<path fill="none" stroke="gray" d="M1655.34,-4145.73C1717.44,-4134.81 1875.55,-4115.99 1979,-4183 2006.39,-4200.74 1988.65,-4227.74 2015,-4247 2045.03,-4268.96 2086.68,-4276.62 2119.16,-4278.98"/>
<polygon fill="gray" stroke="gray" points="2119.18,-4282.49 2129.36,-4279.57 2119.58,-4275.5 2119.18,-4282.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default# -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default#</title>
<path fill="none" stroke="gray" d="M1655.07,-4146.89C1715.92,-4138.62 1870.41,-4125.34 1979,-4183 2001.32,-4194.85 1992.17,-4216.18 2015,-4227 2077.45,-4256.6 2257.02,-4231.27 2326,-4227 2363.44,-4224.68 2405.75,-4219.21 2436.37,-4214.73"/>
<polygon fill="gray" stroke="gray" points="2436.9,-4218.19 2446.28,-4213.25 2435.87,-4211.26 2436.9,-4218.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Implicit# -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Implicit#</title>
<path fill="none" stroke="gray" d="M1655.03,-4144.53C1718.51,-4130.42 1883.13,-4104.09 1979,-4183 2022.98,-4219.2 1969.79,-4271.36 2015,-4306 2047.84,-4331.17 2326.71,-4322.38 2435.65,-4317.93"/>
<polygon fill="gray" stroke="gray" points="2436.1,-4321.42 2445.95,-4317.5 2435.81,-4314.42 2436.1,-4321.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Resendable# -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ContentHint][`From&lt;u32&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Resendable#</title>
<path fill="none" stroke="gray" d="M1655.16,-4144.37C1718.93,-4129.91 1884.16,-4102.86 1979,-4183 2026.76,-4223.36 1967.15,-4278.75 2015,-4319 2041.54,-4341.33 2291.57,-4341.81 2326,-4346 2357.5,-4349.83 2392.47,-4355.23 2421.02,-4359.94"/>
<polygon fill="gray" stroke="gray" points="2420.79,-4363.45 2431.22,-4361.64 2421.93,-4356.54 2420.79,-4363.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]new(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]new().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn new(iteration: u32, seed: Vec&lt;u8&gt;) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut derived = [0; 48]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hkdf::Hkdf::&lt;sha2::Sha256&gt;::new(None, &amp;seed) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expand(b&#39; WhisperGroup&#39; , &amp;mut deri...">
<polygon fill="lightblue" stroke="black" points="1655,-2057 1601,-2057 1601,-2021 1655,-2021 1655,-2057"/>
<text text-anchor="middle" x="1628" y="-2035.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/impl#[PreKeysUsed][Default]default(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/impl#[PreKeysUsed][Default]default().</title>
<polygon fill="lightblue" stroke="black" points="2512.5,-1813 2447.5,-1813 2447.5,-1777 2512.5,-1777 2512.5,-1813"/>
<text text-anchor="middle" x="2480" y="-1791.3" font-family="Helvetica,sans-Serif" font-size="14.00">default</text>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/impl#[PreKeysUsed][Default]default(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/impl#[PreKeysUsed][Default]default().</title>
<path fill="none" stroke="gray" d="M2250.69,-1809.85C2310.21,-1805.98 2389.39,-1800.83 2437.15,-1797.72"/>
<polygon fill="gray" stroke="gray" points="2437.38,-1801.21 2447.14,-1797.07 2436.93,-1794.23 2437.38,-1801.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().</title>
<g id="a_node197"><a xlink:title=") &#45;&gt; Result&lt;SessionState&gt; &#160;pub(crate) fn initialize_bob_session( &#160;&#160;&#160;&#160;parameters: &amp;BobSignalProtocolParameters, { &#160;&#160;&#160;&#160;let local_identity = parameters.our_identity_key_pair().identity_key(); &#160;&#160;&#160;&#160;&#160;let mu...">
<polygon fill="lightblue" stroke="black" points="2562.5,-1543 2397.5,-1543 2397.5,-1507 2562.5,-1507 2562.5,-1543"/>
<text text-anchor="middle" x="2480" y="-1521.3" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_bob_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().</title>
<path fill="none" stroke="gray" d="M2250.84,-1811.23C2276.67,-1806.85 2304.26,-1798.52 2326,-1783 2408.06,-1724.43 2453.5,-1606.9 2470.79,-1553.08"/>
<polygon fill="gray" stroke="gray" points="2474.23,-1553.79 2473.87,-1543.2 2467.55,-1551.7 2474.23,-1553.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters&lt;&#39;a&gt;`]new(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters&lt;&#39;a&gt;`]new().</title>
<g id="a_node229"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Self &#160;&#160;&#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_identity_key_pair: IdentityKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_signed_pre_key_pair: KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_one_time_pre_key_pair: Option&lt;KeyPair&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_ratchet_key_pai...">
<polygon fill="lightblue" stroke="black" points="2958,-1213 2904,-1213 2904,-1177 2958,-1177 2958,-1213"/>
<text text-anchor="middle" x="2931" y="-1191.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters&lt;&#39;a&gt;`]new(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="gray" d="M2250.52,-1808.69C2278.38,-1802.39 2307.37,-1790.43 2326,-1768 2418.57,-1656.54 2278.1,-1562.12 2362,-1444 2492.67,-1260.03 2790.08,-1210.39 2893.64,-1198.44"/>
<polygon fill="gray" stroke="gray" points="2894.33,-1201.89 2903.89,-1197.31 2893.57,-1194.93 2894.33,-1201.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M1665.59,-3828.47C1731.67,-3826.14 1873.82,-3814.84 1979,-3762 1998.4,-3752.26 1995.37,-3738.27 2015,-3729 2141.23,-3669.38 2192.13,-3724.59 2326,-3685 2347.29,-3678.7 2397.05,-3654.95 2434.07,-3636.64"/>
<polygon fill="gray" stroke="gray" points="2435.79,-3639.69 2443.19,-3632.11 2432.67,-3633.42 2435.79,-3639.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage# -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage#</title>
<path fill="none" stroke="gray" d="M1665.61,-3820.72C1737.69,-3806.82 1898.01,-3788.26 1979,-3876 2029.72,-3930.94 1960.73,-4496.56 2015,-4548 2059.84,-4590.51 2474.62,-4548.51 2643.73,-4529.39"/>
<polygon fill="gray" stroke="gray" points="2644.24,-4532.85 2653.78,-4528.25 2643.45,-4525.9 2644.24,-4532.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[KyberPayload]new(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[KyberPayload]new().</title>
<path fill="none" stroke="gray" d="M1665.59,-3834.85C1738.01,-3844.09 1899.43,-3852.68 1979,-3762 2068.85,-3659.6 1924.32,-3251.68 2015,-3150 2044.11,-3117.35 2097.53,-3115.05 2133.28,-3117.86"/>
<polygon fill="gray" stroke="gray" points="2133.02,-3121.35 2143.31,-3118.82 2133.69,-3114.38 2133.02,-3121.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion# -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#</title>
<path fill="none" stroke="gray" d="M1665.74,-3829.75C1731.45,-3829.77 1872.23,-3823.76 1979,-3777 1997.82,-3768.76 1995.62,-3754.83 2015,-3748 2080.18,-3725.01 2258.55,-3732.92 2326,-3748 2367.8,-3757.34 2411.65,-3779.43 2441.64,-3796.69"/>
<polygon fill="gray" stroke="gray" points="2440.09,-3799.84 2450.48,-3801.87 2443.63,-3793.8 2440.09,-3799.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<path fill="none" stroke="gray" d="M1665.53,-3834.35C1737.11,-3842.56 1896.04,-3849.16 1979,-3762 2058.21,-3678.77 1933.28,-3586.76 2015,-3506 2114.12,-3408.04 2231.03,-3567.99 2326,-3466 2374.16,-3414.28 2329.5,-2893.75 2362,-2831 2378.83,-2798.5 2412.64,-2773.58 2439.6,-2757.75"/>
<polygon fill="gray" stroke="gray" points="2441.47,-2760.72 2448.45,-2752.74 2438.02,-2754.63 2441.47,-2760.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1665.77,-3834.79C1738.13,-3843.86 1898.93,-3852.03 1979,-3762 2052.74,-3679.09 1955.59,-3357.71 2015,-3264 2039.33,-3225.62 2086.98,-3202.58 2122.96,-3189.94"/>
<polygon fill="gray" stroke="gray" points="2124.4,-3193.15 2132.77,-3186.65 2122.17,-3186.51 2124.4,-3193.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion# -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#</title>
<path fill="none" stroke="gray" d="M1665.51,-3824.19C1733.34,-3817.2 1880.79,-3811.38 1979,-3876 2004.98,-3893.09 1987.94,-3920.68 2015,-3936 2075.14,-3970.05 2256.99,-3939.82 2326,-3936 2341.91,-3935.12 2358.71,-3933.73 2375.12,-3932.11"/>
<polygon fill="gray" stroke="gray" points="2375.68,-3935.57 2385.28,-3931.07 2374.97,-3928.6 2375.68,-3935.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort# -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#</title>
<path fill="none" stroke="gray" d="M1665.73,-3821.99C1735.92,-3810.88 1890,-3797.79 1979,-3876 2025.32,-3916.7 1966.06,-3972.48 2015,-4010 2070.51,-4052.56 2263.65,-4025.09 2382.54,-4002.92"/>
<polygon fill="gray" stroke="gray" points="2383.21,-4006.36 2392.39,-4001.07 2381.92,-3999.48 2383.21,-4006.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1665.56,-3825.95C1729.27,-3820.56 1864.74,-3808.82 1979,-3797 2027.89,-3791.94 2083.74,-3785.4 2122.27,-3780.77"/>
<polygon fill="gray" stroke="gray" points="2123.14,-3784.19 2132.65,-3779.52 2122.31,-3777.24 2123.14,-3784.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_sizes_sha256(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_sizes_sha256().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;fn chunk_sizes_sha256() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (data_size, expected) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(0, MINIMUM_CHUNK_SIZE), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(KIBIBYTES, MINIMUM_CHUNK_SIZE), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(10 * KIBIBYTES, MINIMUM_CHUNK_SIZE)...">
<polygon fill="lightblue" stroke="black" points="296,-2299 137,-2299 137,-2263 296,-2263 296,-2299"/>
<text text-anchor="middle" x="216.5" y="-2277.3" font-family="Helvetica,sans-Serif" font-size="14.00">chunk_sizes_sha256</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_sizes_sha256().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/calculate_chunk_size(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_sizes_sha256().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/calculate_chunk_size().</title>
<path fill="none" stroke="gray" d="M296.21,-2291.97C337.98,-2293.08 386.78,-2286.04 417,-2254 489.18,-2177.48 382,-1859.62 453,-1782 471.26,-1762.04 498.24,-1753.16 524.96,-1749.9"/>
<polygon fill="gray" stroke="gray" points="525.56,-1753.36 535.17,-1748.91 524.88,-1746.39 525.56,-1753.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState# -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState#</title>
<path fill="none" stroke="gray" d="M1055.16,-2041.95C1095.24,-2046.55 1174.22,-2055.96 1241,-2066 1357.27,-2083.49 1492.53,-2107.91 1568.11,-2121.92"/>
<polygon fill="gray" stroke="gray" points="1567.9,-2125.45 1578.37,-2123.83 1569.18,-2118.56 1567.9,-2125.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]new(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]new().</title>
<path fill="none" stroke="gray" d="M1055.08,-2039C1150.37,-2039 1479.88,-2039 1590.48,-2039"/>
<polygon fill="gray" stroke="gray" points="1590.78,-2042.5 1600.78,-2039 1590.78,-2035.5 1590.78,-2042.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256().</title>
<path fill="none" stroke="gray" d="M1051.81,-2020.96C1095.93,-1984.73 1192.86,-1898.39 1241,-1803 1276.78,-1732.11 1218.94,-1682.17 1277,-1628 1353.26,-1556.86 1482.72,-1559.51 1561,-1569.3"/>
<polygon fill="gray" stroke="gray" points="1560.85,-1572.81 1571.22,-1570.65 1561.77,-1565.87 1560.85,-1572.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_size_zero(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_size_zero().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;fn chunk_size_zero() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;new_incremental(&amp;[], 0); &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="281,-1759 152,-1759 152,-1723 281,-1723 281,-1759"/>
<text text-anchor="middle" x="216.5" y="-1737.3" font-family="Helvetica,sans-Serif" font-size="14.00">chunk_size_zero</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_size_zero().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/chunk_size_zero().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().</title>
<path fill="none" stroke="gray" d="M281.36,-1732.86C320.55,-1727.74 371.73,-1720.83 417,-1714 457.16,-1707.94 501.79,-1700.56 538.5,-1694.31"/>
<polygon fill="gray" stroke="gray" points="539.36,-1697.72 548.63,-1692.58 538.18,-1690.81 539.36,-1697.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/EncryptionError#BadKeyOrIv# -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/EncryptionError#BadKeyOrIv#</title>
<path fill="none" stroke="gray" d="M2250.69,-4429.32C2303.74,-4430.87 2372.42,-4432.88 2420.54,-4434.29"/>
<polygon fill="gray" stroke="gray" points="2420.69,-4437.79 2430.78,-4434.59 2420.89,-4430.8 2420.69,-4437.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;msg_type: CiphertextMessageType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender: SenderCertificate, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;contents: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;content_hint: ContentHint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_id: Optio...">
<polygon fill="lightblue" stroke="black" points="643,-2719 589,-2719 589,-2683 643,-2683 643,-2719"/>
<text text-anchor="middle" x="616" y="-2697.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().</title>
<g id="a_node206"><a xlink:title=" &#160;&#160;&#160;fn from(message_type: CiphertextMessageType) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = match message_type { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CiphertextMessageType::PreKey =&gt; Self::PrekeyMessage, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CiphertextMessageTyp...">
<polygon fill="lightblue" stroke="black" points="1655,-2611 1601,-2611 1601,-2575 1655,-2575 1655,-2611"/>
<text text-anchor="middle" x="1628" y="-2589.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().</title>
<path fill="none" stroke="gray" d="M643.26,-2698.04C681.17,-2693.77 753.45,-2685.68 815,-2679 1114.64,-2646.49 1476.65,-2608.66 1590.75,-2596.77"/>
<polygon fill="gray" stroke="gray" points="1591.12,-2600.25 1600.71,-2595.74 1590.4,-2593.29 1591.12,-2600.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_raw_kem(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_raw_kem().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;fn test_raw_kem() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use pqcrypto_kyber::kyber1024::{decapsulate, encapsulate, keypair}; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (pk, sk) = keypair(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (ss1, ct) = encapsulate(&amp;pk); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ss2 = decap...">
<polygon fill="lightblue" stroke="black" points="272,-2191 161,-2191 161,-2155 272,-2155 272,-2191"/>
<text text-anchor="middle" x="216.5" y="-2169.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_raw_kem</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes_256_ctr_decrypt().</title>
<path fill="none" stroke="gray" d="M1130.53,-4390C1175.37,-4397.74 1228.75,-4406.68 1277,-4414 1365.39,-4427.42 1466.65,-4440.8 1537.44,-4449.83"/>
<polygon fill="gray" stroke="gray" points="1537.29,-4453.34 1547.66,-4451.13 1538.18,-4446.4 1537.29,-4453.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadCiphertext# -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/DecryptionError#BadCiphertext#</title>
<path fill="none" stroke="gray" d="M1153.17,-4384.81C1184.11,-4392.53 1215.65,-4404.75 1241,-4424 1266.99,-4443.74 1249.48,-4470.45 1277,-4488 1362.39,-4542.46 1484.41,-4537.59 1559.52,-4527.47"/>
<polygon fill="gray" stroke="gray" points="1560.39,-4530.88 1569.8,-4526.01 1559.4,-4523.95 1560.39,-4530.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256().</title>
<path fill="none" stroke="gray" d="M1153.02,-4359.68C1186.84,-4349.99 1219.93,-4333.35 1241,-4305 1329.71,-4185.62 1178.33,-1739.29 1277,-1628 1347.01,-1549.03 1481.12,-1555.01 1561.47,-1567.4"/>
<polygon fill="gray" stroke="gray" points="1561.04,-1570.88 1571.48,-1569.02 1562.16,-1563.97 1561.04,-1570.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;fn when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_1 = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_2 ...">
<polygon fill="lightblue" stroke="black" points="1979,-3417 1277,-3417 1277,-3381 1979,-3381 1979,-3417"/>
<text text-anchor="middle" x="1628" y="-3395.3" font-family="Helvetica,sans-Serif" font-size="14.00">when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().</title>
<path fill="none" stroke="gray" d="M1886.74,-3381C1917.85,-3378.27 1949.16,-3375.26 1979,-3372 2026.05,-3366.86 2079.37,-3359.14 2117.61,-3353.27"/>
<polygon fill="gray" stroke="gray" points="2118.63,-3356.65 2127.97,-3351.66 2117.56,-3349.73 2118.63,-3356.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="gray" d="M1962.46,-3380.86C1968.09,-3378.11 1973.61,-3375.16 1979,-3372 2003.89,-3357.42 1990.84,-3333.76 2015,-3318 2035.75,-3304.47 2061.26,-3297.15 2085.53,-3293.33"/>
<polygon fill="gray" stroke="gray" points="2086.05,-3296.79 2095.47,-3291.94 2085.08,-3289.85 2086.05,-3296.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().</title>
<path fill="none" stroke="gray" d="M1967.06,-3417.02C1971.8,-3419.74 1975.81,-3422.72 1979,-3426 2035.77,-3484.38 1961.09,-4096.97 2015,-4158 2043.96,-4190.79 2097.41,-4193.06 2133.21,-4190.2"/>
<polygon fill="gray" stroke="gray" points="2133.64,-4193.67 2143.26,-4189.23 2132.97,-4186.71 2133.64,-4193.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node148"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add ...">
<polygon fill="lightblue" stroke="black" points="1119,-3693 937,-3693 937,-3657 1119,-3657 1119,-3693"/>
<text text-anchor="middle" x="1028" y="-3671.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().</title>
<path fill="none" stroke="gray" d="M1119.14,-3673.43C1353.09,-3669.15 1962.68,-3656.72 1979,-3643 2038.78,-3592.74 1959.72,-3526.17 2015,-3471 2034.77,-3451.27 2063.31,-3442.18 2090.49,-3438.38"/>
<polygon fill="gray" stroke="gray" points="2090.9,-3441.86 2100.42,-3437.22 2090.08,-3434.91 2090.9,-3441.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().</title>
<path fill="none" stroke="gray" d="M1119.17,-3684.05C1244.88,-3696.66 1468.95,-3719.14 1572.17,-3729.5"/>
<polygon fill="gray" stroke="gray" points="1572.07,-3733.01 1582.37,-3730.52 1572.77,-3726.04 1572.07,-3733.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/total_digest_size(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/total_digest_size().</title>
<g id="a_node149"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn total_digest_size(data_size: usize) &#45;&gt; usize &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chunk_size = calculate_chunk_size::&lt;Sha256&gt;(data_size); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let num_chunks = std::cmp::max(1, data_size.div_ceil(chun...">
<polygon fill="lightblue" stroke="black" points="282,-2407 151,-2407 151,-2371 282,-2371 282,-2407"/>
<text text-anchor="middle" x="216.5" y="-2385.3" font-family="Helvetica,sans-Serif" font-size="14.00">total_digest_size</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/total_digest_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/calculate_chunk_size(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/total_digest_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/calculate_chunk_size().</title>
<path fill="none" stroke="gray" d="M282.26,-2399.43C326.73,-2402.58 383.56,-2397.96 417,-2362 504.94,-2267.44 366.52,-1877.9 453,-1782 471.2,-1761.82 498.31,-1752.92 525.17,-1749.7"/>
<polygon fill="gray" stroke="gray" points="525.8,-1753.16 535.43,-1748.74 525.15,-1746.19 525.8,-1753.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().</title>
<g id="a_node151"><a xlink:title=" &#160;&#160;&#160;fn test_signal_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message = create_signal_message(&amp;mut csprng)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let deser_message = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="lightblue" stroke="black" points="1180.5,-3047 875.5,-3047 875.5,-3011 1180.5,-3011 1180.5,-3047"/>
<text text-anchor="middle" x="1028" y="-3025.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signal_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/assert_signal_message_equals(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/assert_signal_message_equals().</title>
<path fill="none" stroke="gray" d="M1180.67,-3020.38C1280.5,-3014.7 1409.53,-3007.36 1503.16,-3002.04"/>
<polygon fill="gray" stroke="gray" points="1503.47,-3005.53 1513.25,-3001.47 1503.07,-2998.54 1503.47,-3005.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<path fill="none" stroke="gray" d="M1180.71,-3035.04C1203.46,-3029.26 1224.71,-3019.02 1241,-3002 1308.2,-2931.75 1210.03,-2636.48 1277,-2566 1340.48,-2499.19 1450.09,-2494.63 1529.76,-2502.26"/>
<polygon fill="gray" stroke="gray" points="1529.51,-2505.75 1539.82,-2503.3 1530.23,-2498.79 1529.51,-2505.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1180.72,-3022.31C1203.61,-3028.12 1224.91,-3038.54 1241,-3056 1301.3,-3121.43 1212.68,-3794.51 1277,-3856 1305.19,-3882.95 1944.2,-3873.61 1979,-3856 2003.11,-3843.8 1992.26,-3821.6 2015,-3807 2047.14,-3786.37 2090.09,-3778.72 2122.55,-3776.03"/>
<polygon fill="gray" stroke="gray" points="2122.96,-3779.51 2132.69,-3775.32 2122.47,-3772.53 2122.96,-3779.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/total_digest_size_is_never_too_big(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/total_digest_size_is_never_too_big().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;fn total_digest_size_is_never_too_big() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn total_digest_size(data_size: usize) &#45;&gt; usize { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chunk_size = calculate_chunk_size::&lt;Sha256&gt;(data_size); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let num_chu...">
<polygon fill="lightblue" stroke="black" points="342.5,-2083 90.5,-2083 90.5,-2047 342.5,-2047 342.5,-2083"/>
<text text-anchor="middle" x="216.5" y="-2061.3" font-family="Helvetica,sans-Serif" font-size="14.00">total_digest_size_is_never_too_big</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[Public][KeyKind]key_length(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[Public][KeyKind]key_length().</title>
<g id="a_node154"><a xlink:title=" &#160;&#160;&#160;fn key_length(key_type: KeyType) &#45;&gt; usize &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_type.parameters().public_key_length() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="262.5,-2029 170.5,-2029 170.5,-1993 262.5,-1993 262.5,-2029"/>
<text text-anchor="middle" x="216.5" y="-2007.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_length</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidPreKeyId# -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidPreKeyId#</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;/// invalid MAC key length &lt; &#160;&#160;&#160;&#160;InvalidPreKeyId, &#160;&#160;&#160;&#160;/// invalid signed prekey identifier &#160;&#160;&#160;&#160;InvalidSignedPreKeyId, &#160;&#160;&#160;&#160;/// invalid Kyber prekey identifier &#160;&#160;&#160;&#160;InvalidKyberPreKeyId, &#160;{0}&gt; &#160;&#160;&#160;&#160;In...">
<polygon fill="lightblue" stroke="black" points="278,-4639 155,-4639 155,-4603 278,-4603 278,-4639"/>
<text text-anchor="middle" x="216.5" y="-4617.3" font-family="Helvetica,sans-Serif" font-size="14.00">InvalidPreKeyId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M1073.63,-4286.31C1121.62,-4292.45 1196.96,-4293.53 1241,-4251 1312.58,-4181.87 1203.86,-4097.48 1277,-4030 1392.03,-3923.87 1857.32,-4071.44 1979,-3973 2022.29,-3937.98 1972.2,-3888.62 2015,-3853 2121.87,-3764.05 2221.51,-3910.74 2326,-3819 2376.87,-3774.33 2319.54,-3723.72 2362,-3671 2373.96,-3656.15 2390.74,-3644.9 2407.88,-3636.49"/>
<polygon fill="gray" stroke="gray" points="2409.78,-3639.46 2417.4,-3632.1 2406.85,-3633.1 2409.78,-3639.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V2# -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V2#</title>
<path fill="none" stroke="gray" d="M1073.75,-4283.54C1123.38,-4289.56 1205.83,-4299.24 1277,-4306 1391.13,-4316.84 1526.52,-4326.33 1590.3,-4330.6"/>
<polygon fill="gray" stroke="gray" points="1590.42,-4334.11 1600.63,-4331.29 1590.88,-4327.13 1590.42,-4334.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnknownSealedSenderVersion# -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnknownSealedSenderVersion#</title>
<path fill="none" stroke="gray" d="M1073.95,-4278.08C1164.02,-4278.23 1369.42,-4278.57 1502.96,-4278.79"/>
<polygon fill="gray" stroke="gray" points="1503.25,-4282.29 1513.25,-4278.81 1503.26,-4275.29 1503.25,-4282.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V1# -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V1#</title>
<path fill="none" stroke="gray" d="M1073.66,-4282.98C1118.03,-4289.27 1187.04,-4302.75 1241,-4330 1259.59,-4339.39 1257.7,-4352.16 1277,-4360 1384.24,-4403.56 1525,-4397.35 1590.52,-4391.24"/>
<polygon fill="gray" stroke="gray" points="1591.14,-4394.69 1600.74,-4390.23 1590.45,-4387.73 1591.14,-4394.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage# -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#</title>
<path fill="none" stroke="gray" d="M1073.77,-4272.93C1123.4,-4267.4 1205.86,-4258.47 1277,-4252 1353.64,-4245.03 1439.82,-4238.37 1507.49,-4233.4"/>
<polygon fill="gray" stroke="gray" points="1508.05,-4236.87 1517.76,-4232.65 1507.53,-4229.89 1508.05,-4236.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]new(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]new().</title>
<path fill="none" stroke="gray" d="M1716.06,-2514.24C1794.54,-2505.41 1908.18,-2480.67 1979,-2412 2014.72,-2377.36 1977.21,-2338.36 2015,-2306 2047.71,-2277.99 2098.96,-2274.28 2133.37,-2275.54"/>
<polygon fill="gray" stroke="gray" points="2133.3,-2279.04 2143.47,-2276.07 2133.66,-2272.05 2133.3,-2279.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper# -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper#</title>
<path fill="none" stroke="gray" d="M1121.63,-2407.58C1358.73,-2414.25 1969.66,-2431.91 1979,-2437 2003.68,-2450.46 1991.22,-2474.01 2015,-2489 2133.44,-2563.64 2188.75,-2511.41 2326,-2539 2362.11,-2546.26 2402.6,-2556.13 2432.85,-2563.85"/>
<polygon fill="gray" stroke="gray" points="2432.14,-2567.28 2442.7,-2566.38 2433.88,-2560.5 2432.14,-2567.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().</title>
<path fill="none" stroke="gray" d="M1121.78,-2401.9C1224.88,-2398.45 1391.76,-2392.87 1505.27,-2389.07"/>
<polygon fill="gray" stroke="gray" points="1505.53,-2392.56 1515.4,-2388.73 1505.29,-2385.57 1505.53,-2392.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound# -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound#</title>
<path fill="none" stroke="gray" d="M1040.58,-2423.24C1078.47,-2484.12 1198.78,-2687.04 1241,-2874 1263.4,-2973.19 1209.3,-4628.12 1277,-4704 1343.74,-4778.8 1468,-4777.22 1549.08,-4766.32"/>
<polygon fill="gray" stroke="gray" points="1549.84,-4769.75 1559.24,-4764.88 1548.85,-4762.82 1549.84,-4769.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity# -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#</title>
<path fill="none" stroke="gray" d="M1121.61,-2393.99C1159.01,-2388.55 1202.38,-2380.98 1241,-2371 1257.47,-2366.75 1260.57,-2362.42 1277,-2358 1583.18,-2275.64 1713.19,-2403.84 1979,-2231 2002.87,-2215.48 1993.07,-2196.16 2015,-2178 2038.87,-2158.23 2069.46,-2143.35 2097.12,-2132.69"/>
<polygon fill="gray" stroke="gray" points="2098.61,-2135.87 2106.76,-2129.1 2096.17,-2129.31 2098.61,-2135.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving# -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving#</title>
<path fill="none" stroke="gray" d="M1040.59,-2423.24C1078.51,-2484.11 1198.9,-2687.01 1241,-2874 1252.97,-2927.18 1239.77,-4796.18 1277,-4836 1316.42,-4878.17 1488.93,-4874.38 1576.14,-4869.54"/>
<polygon fill="gray" stroke="gray" points="1576.55,-4873.02 1586.34,-4868.95 1576.15,-4866.03 1576.55,-4873.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().</title>
<g id="a_node162"><a xlink:title=") &#45;&gt; Result&lt;CiphertextMessage&gt; &#160;pub async fn message_encrypt( &#160;&#160;&#160;&#160;ptext: &amp;[u8], &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKey...">
<polygon fill="lightblue" stroke="black" points="1097.5,-2362 958.5,-2362 958.5,-2326 1097.5,-2326 1097.5,-2362"/>
<text text-anchor="middle" x="1028" y="-2340.3" font-family="Helvetica,sans-Serif" font-size="14.00">message_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure# -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure#</title>
<path fill="none" stroke="gray" d="M1097.62,-2349.3C1142.13,-2349.34 1199.36,-2342.66 1241,-2314 1268.2,-2295.28 1248.77,-2266.13 1277,-2249 1343.71,-2208.53 1913.04,-2272.68 1979,-2231 2008.91,-2212.1 1985.52,-2179.57 2015,-2160 2043.86,-2140.84 2291.51,-2141.25 2326,-2138 2343.14,-2136.39 2361.33,-2134.45 2378.97,-2132.45"/>
<polygon fill="gray" stroke="gray" points="2379.74,-2135.88 2389.27,-2131.26 2378.94,-2128.93 2379.74,-2135.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[KyberPayload]new(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[KyberPayload]new().</title>
<path fill="none" stroke="gray" d="M1097.69,-2335.14C1144.89,-2333.22 1205.25,-2339.72 1241,-2378 1301.31,-2442.58 1217.92,-2708.29 1277,-2774 1489.71,-3010.58 1751.6,-2691.51 1979,-2914 2031.72,-2965.58 1964.88,-3021.89 2015,-3076 2045.39,-3108.81 2097.88,-3118.98 2133.14,-3121.99"/>
<polygon fill="gray" stroke="gray" points="2133.27,-3125.5 2143.49,-3122.71 2133.76,-3118.52 2133.27,-3125.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState# -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState#</title>
<path fill="none" stroke="gray" d="M1097.98,-2352.8C1144.08,-2354.68 1203.01,-2348.75 1241,-2314 1292.87,-2266.56 1223.65,-2205.77 1277,-2160 1357.9,-2090.6 1491.62,-2103.42 1568.23,-2118.52"/>
<polygon fill="gray" stroke="gray" points="1567.7,-2121.98 1578.19,-2120.55 1569.1,-2115.12 1567.7,-2121.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]new(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]new().</title>
<path fill="none" stroke="gray" d="M1097.74,-2344.27C1254.44,-2344.29 1650.04,-2340.85 1979,-2309 2033.07,-2303.77 2095.12,-2293.12 2133.32,-2286.02"/>
<polygon fill="gray" stroke="gray" points="2134.25,-2289.4 2143.43,-2284.12 2132.96,-2282.52 2134.25,-2289.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage# -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#</title>
<path fill="none" stroke="gray" d="M1097.58,-2346.88C1141.26,-2345.79 1197.57,-2338.77 1241,-2314 1263.25,-2301.31 1254.08,-2280.42 1277,-2269 1346.84,-2234.2 1913.1,-2290.78 1979,-2249 2008.88,-2230.06 1984.93,-2196.65 2015,-2178 2045.6,-2159.02 2259.76,-2164.6 2386.17,-2169.69"/>
<polygon fill="gray" stroke="gray" points="2386.11,-2173.19 2396.25,-2170.11 2386.4,-2166.2 2386.11,-2173.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new().</title>
<path fill="none" stroke="gray" d="M1097.73,-2335.11C1144.94,-2333.17 1205.32,-2339.66 1241,-2378 1303.47,-2445.11 1223.41,-2714.61 1277,-2789 1352.84,-2894.29 1517.51,-2927.44 1590.69,-2937.21"/>
<polygon fill="gray" stroke="gray" points="1590.44,-2940.7 1600.8,-2938.48 1591.32,-2933.76 1590.44,-2940.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound# -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound#</title>
<path fill="none" stroke="gray" d="M1097.57,-2334.39C1145.35,-2331.94 1206.47,-2338.12 1241,-2378 1325.6,-2475.7 1191.16,-4607.39 1277,-4704 1343.58,-4778.94 1467.89,-4777.33 1549.02,-4766.38"/>
<polygon fill="gray" stroke="gray" points="1549.78,-4769.8 1559.19,-4764.92 1548.79,-4762.87 1549.78,-4769.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SignalMessage# -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SignalMessage#</title>
<path fill="none" stroke="gray" d="M1097.59,-2334.29C1170.21,-2324.02 1274.75,-2309.25 1277,-2309 1604.04,-2273.33 1686.57,-2271.05 2015,-2252 2154.88,-2243.89 2318.69,-2238.49 2409.47,-2235.87"/>
<polygon fill="gray" stroke="gray" points="2409.74,-2239.36 2419.64,-2235.58 2409.54,-2232.36 2409.74,-2239.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity# -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#</title>
<path fill="none" stroke="gray" d="M1097.69,-2350.08C1142.5,-2350.51 1200.06,-2343.97 1241,-2314 1270.83,-2292.16 1246.06,-2259.25 1277,-2239 1342.31,-2196.26 1913.23,-2256.02 1979,-2214 2008.81,-2194.95 1986.9,-2164.49 2015,-2143 2036.42,-2126.62 2064.2,-2118.11 2090.3,-2113.83"/>
<polygon fill="gray" stroke="gray" points="2090.8,-2117.29 2100.2,-2112.39 2089.8,-2110.37 2090.8,-2117.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<path fill="none" stroke="gray" d="M1097.59,-2334.38C1145.37,-2331.92 1206.5,-2338.1 1241,-2378 1332.41,-2483.69 1181.34,-4791.14 1277,-4893 1317.2,-4935.8 1495.22,-4929.46 1580.77,-4923.71"/>
<polygon fill="gray" stroke="gray" points="1581.25,-4927.19 1590.98,-4923 1580.76,-4920.21 1581.25,-4927.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]new(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]new().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;pub fn new(public_key: PublicKey, secret_key: SecretKey) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(public_key.key_type, secret_key.key_type); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;secret_key, &#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="243.5,-1921 189.5,-1921 189.5,-1885 243.5,-1885 243.5,-1921"/>
<text text-anchor="middle" x="216.5" y="-1899.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext# -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#</title>
<path fill="none" stroke="gray" d="M1655.07,-2741.89C1740.24,-2725.18 2011.16,-2672.05 2121.77,-2650.36"/>
<polygon fill="gray" stroke="gray" points="2122.51,-2653.78 2131.65,-2648.42 2121.16,-2646.91 2122.51,-2653.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<path fill="none" stroke="gray" d="M1655.4,-2745.09C1715.04,-2741.68 1863.93,-2738.35 1979,-2779 1997.13,-2785.41 1996.6,-2797.43 2015,-2803 2147.29,-2843.05 2190.56,-2830.58 2326,-2803 2366.37,-2794.78 2409.28,-2775.52 2439.36,-2760.09"/>
<polygon fill="gray" stroke="gray" points="2441.02,-2763.17 2448.26,-2755.44 2437.78,-2756.96 2441.02,-2763.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper# -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper#</title>
<path fill="none" stroke="gray" d="M1655.24,-2751.93C1753.42,-2768.85 2104.73,-2815.81 2326,-2668 2353.46,-2649.66 2335.63,-2622.88 2362,-2603 2382.23,-2587.75 2409.62,-2580.9 2432.81,-2577.9"/>
<polygon fill="gray" stroke="gray" points="2433.23,-2581.38 2442.79,-2576.81 2432.47,-2574.42 2433.23,-2581.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey# -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From&lt;ProtoMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#</title>
<path fill="none" stroke="gray" d="M1655.24,-2741.59C1716.47,-2730.42 1871.68,-2710.51 1979,-2770 2002.95,-2783.28 1993.98,-2802.45 2015,-2820 2132.52,-2918.08 2240.83,-2840.81 2326,-2968 2409.33,-3092.45 2279.24,-3516.17 2362,-3641 2376.38,-3662.68 2401.49,-3676.39 2424.77,-3684.91"/>
<polygon fill="gray" stroke="gray" points="2423.66,-3688.23 2434.25,-3688.15 2425.92,-3681.61 2423.66,-3688.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().</title>
<g id="a_node170"><a xlink:title=") &#45;&gt; Result&lt;SessionRecord&gt; &#160;pub fn initialize_bob_session_record( &#160;&#160;&#160;&#160;parameters: &amp;BobSignalProtocolParameters, { &#160;&#160;&#160;&#160;Ok(SessionRecord::new(initialize_bob_session(parameters)?)) }">
<polygon fill="lightblue" stroke="black" points="2278,-1543 2063,-1543 2063,-1507 2278,-1507 2278,-1543"/>
<text text-anchor="middle" x="2170.5" y="-1521.3" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_bob_session_record</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().</title>
<path fill="none" stroke="gray" d="M2278.19,-1525C2313.71,-1525 2352.94,-1525 2387.23,-1525"/>
<polygon fill="gray" stroke="gray" points="2387.23,-1528.5 2397.23,-1525 2387.23,-1521.5 2387.23,-1528.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]new().</title>
<path fill="none" stroke="gray" d="M2062.71,-1524.75C2044.67,-1519.94 2027.7,-1511.66 2015,-1498 1960.7,-1439.61 2036.04,-1196.71 1979,-1141 1935.35,-1098.36 1745.81,-1105.91 1665.35,-1111.22"/>
<polygon fill="gray" stroke="gray" points="1664.93,-1107.74 1655.19,-1111.91 1665.41,-1114.72 1664.93,-1107.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[DisplayableFingerprint]new(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[DisplayableFingerprint]new().</title>
<path fill="none" stroke="gray" d="M1055.08,-3082.39C1150.37,-3080.16 1479.88,-3072.44 1590.48,-3069.85"/>
<polygon fill="gray" stroke="gray" points="1590.87,-3073.35 1600.78,-3069.61 1590.7,-3066.35 1590.87,-3073.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]get_fingerprint(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]get_fingerprint().</title>
<path fill="none" stroke="gray" d="M1055.16,-3081.72C1095.57,-3079.3 1175.37,-3072.67 1241,-3056 1257.64,-3051.77 1260.17,-3045.41 1277,-3042 1429.96,-3011.04 1823.5,-3035.19 1979,-3022 2019.46,-3018.57 2064.46,-3012.31 2100.55,-3006.68"/>
<polygon fill="gray" stroke="gray" points="2101.15,-3010.12 2110.49,-3005.11 2100.06,-3003.21 2101.15,-3010.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]new(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]new().</title>
<path fill="none" stroke="gray" d="M1055.11,-3082.88C1101.21,-3084.23 1196.37,-3094.42 1241,-3153 1289.4,-3216.54 1221.69,-3813.37 1277,-3871 1359.35,-3956.81 1519.2,-3930.5 1590.79,-3913.06"/>
<polygon fill="gray" stroke="gray" points="1591.85,-3916.4 1600.7,-3910.57 1590.14,-3909.61 1591.85,-3916.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_key_message ...">
<polygon fill="lightblue" stroke="black" points="1799,-4075 1457,-4075 1457,-4039 1799,-4039 1799,-4075"/>
<text text-anchor="middle" x="1628" y="-4053.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1799.09,-4045.78C1856.43,-4040.84 1920.67,-4034.06 1979,-4025 2028.61,-4017.29 2084.65,-4004.43 2123.03,-3994.96"/>
<polygon fill="gray" stroke="gray" points="2124.02,-3998.32 2132.88,-3992.51 2122.33,-3991.53 2124.02,-3998.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="gray" d="M1799.28,-4063.3C1917.65,-4067.68 2065.8,-4073.16 2133.16,-4075.66"/>
<polygon fill="gray" stroke="gray" points="2133.14,-4079.16 2143.26,-4076.03 2133.4,-4072.16 2133.14,-4079.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node174"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair::generate(&amp;m...">
<polygon fill="lightblue" stroke="black" points="732.5,-2989 499.5,-2989 499.5,-2953 732.5,-2953 732.5,-2989"/>
<text text-anchor="middle" x="616" y="-2967.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<path fill="none" stroke="gray" d="M732.59,-2965.38C749.21,-2960.81 765.3,-2954 779,-2944 807.26,-2923.38 787.07,-2895.07 815,-2874 969.12,-2757.72 1092.31,-2912.14 1241,-2789 1273.86,-2761.78 1241.62,-2723.85 1277,-2700 1341.67,-2656.4 1908.33,-2667 1979,-2700 2001.58,-2710.55 1992.42,-2732.45 2015,-2743 2089.39,-2777.74 2339.46,-2753.99 2438.3,-2742.87"/>
<polygon fill="gray" stroke="gray" points="2438.95,-2746.32 2448.49,-2741.71 2438.16,-2739.36 2438.95,-2746.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper# -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper#</title>
<path fill="none" stroke="gray" d="M732.76,-2969.78C750.06,-2964.81 766.31,-2956.72 779,-2944 848.67,-2874.17 756.62,-2804.51 815,-2725 951.1,-2539.63 1053.28,-2545.22 1277,-2492 1428.76,-2455.9 1842.38,-2416.7 1979,-2492 2005.24,-2506.46 1989.19,-2533.78 2015,-2549 2023.91,-2554.25 2316.37,-2568.42 2432.32,-2573.85"/>
<polygon fill="gray" stroke="gray" points="2432.49,-2577.36 2442.65,-2574.33 2432.82,-2570.36 2432.49,-2577.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new().</title>
<path fill="none" stroke="gray" d="M732.51,-2955.48C759.52,-2952.43 788.23,-2949.67 815,-2948 1113.86,-2929.41 1475.76,-2936.85 1590.37,-2939.92"/>
<polygon fill="gray" stroke="gray" points="1590.58,-2943.43 1600.68,-2940.2 1590.78,-2936.43 1590.58,-2943.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<path fill="none" stroke="gray" d="M732.69,-2967.44C749.58,-2962.66 765.73,-2955.24 779,-2944 816.64,-2912.11 778.79,-2872.5 815,-2839 958.53,-2706.2 1106.45,-2870.89 1241,-2729 1296.54,-2670.43 1216.92,-2604.9 1277,-2551 1345.24,-2489.78 1453.95,-2489.4 1532.11,-2499.53"/>
<polygon fill="gray" stroke="gray" points="1532.06,-2503.06 1542.45,-2500.95 1533.02,-2496.12 1532.06,-2503.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().</title>
<path fill="none" stroke="gray" d="M732.89,-2973.77C750.5,-2979.25 766.82,-2988.11 779,-3002 870.13,-3105.94 714.47,-3528.13 815,-3623 838.52,-3645.19 1953.55,-3642.94 1979,-3623 2031.61,-3581.79 1967.73,-3524.24 2015,-3477 2034.84,-3457.17 2063.24,-3447.1 2090.3,-3442.16"/>
<polygon fill="gray" stroke="gray" points="2090.87,-3445.61 2100.19,-3440.56 2089.76,-3438.7 2090.87,-3445.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().</title>
<path fill="none" stroke="gray" d="M732.86,-2953.6C748.43,-2950.7 764.15,-2947.49 779,-2944 795.29,-2940.17 798.68,-2936.7 815,-2933 867.09,-2921.18 927.39,-2912.56 970.33,-2907.26"/>
<polygon fill="gray" stroke="gray" points="970.81,-2910.73 980.31,-2906.05 969.97,-2903.78 970.81,-2910.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M732.83,-2973.83C750.44,-2979.3 766.79,-2988.14 779,-3002 862.78,-3097.05 723.16,-3483.72 815,-3571 924.89,-3675.44 1423.19,-3611.46 1579.77,-3588.33"/>
<polygon fill="gray" stroke="gray" points="1580.64,-3591.74 1590.01,-3586.8 1579.61,-3584.81 1580.64,-3591.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="gray" d="M732.74,-2973.42C750.48,-2978.91 766.89,-2987.87 779,-3002 852.37,-3087.6 738.97,-3932.75 815,-4016 879.35,-4086.46 1148.51,-4046.53 1241,-4070 1257.64,-4074.22 1260.13,-4080.83 1277,-4084 1430.33,-4112.76 1823.03,-4086.86 1979,-4084 2032.69,-4083.01 2094.84,-4080.47 2133.17,-4078.73"/>
<polygon fill="gray" stroke="gray" points="2133.49,-4082.22 2143.32,-4078.27 2133.17,-4075.23 2133.49,-4082.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey# -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#</title>
<path fill="none" stroke="gray" d="M732.6,-2973.54C750.35,-2979.02 766.8,-2987.94 779,-3002 833.97,-3065.35 756.16,-3696.23 815,-3756 881.55,-3823.59 1168.26,-3722.11 1241,-3783 1292.58,-3826.18 1224.08,-3888.48 1277,-3930 1338.36,-3978.15 1912.76,-3971.19 1979,-3930 2009.72,-3910.9 1986.07,-3878.71 2015,-3857 2127.27,-3772.74 2195.96,-3854.85 2326,-3802 2373.6,-3782.66 2421.45,-3746.88 2450.65,-3722.76"/>
<polygon fill="gray" stroke="gray" points="2452.96,-3725.39 2458.38,-3716.29 2448.47,-3720.03 2452.96,-3725.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M1673.55,-3733.49C1740.38,-3730.65 1870.36,-3722.89 1979,-3703 1995.33,-3700.01 1998.65,-3695.9 2015,-3693 2151.54,-3668.78 2190.37,-3696.87 2326,-3668 2360.78,-3660.6 2398.46,-3647.36 2427.72,-3635.85"/>
<polygon fill="gray" stroke="gray" points="2429.32,-3638.98 2437.31,-3632.03 2426.72,-3632.48 2429.32,-3638.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize().</title>
<path fill="none" stroke="gray" d="M1673.55,-3739.15C1742.06,-3743.75 1876.13,-3745.64 1979,-3703 1998.24,-3695.02 1996.24,-3682.05 2015,-3673 2046.14,-3657.98 2084.14,-3649.99 2114.66,-3645.75"/>
<polygon fill="gray" stroke="gray" points="2115.23,-3649.21 2124.7,-3644.45 2114.33,-3642.26 2115.23,-3649.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().</title>
<path fill="none" stroke="gray" d="M1673.66,-3739.97C1747.95,-3745.56 1896.83,-3744.89 1979,-3663 2034.32,-3607.87 1963.14,-3549.39 2015,-3491 2034.25,-3469.33 2062.83,-3456.67 2090.19,-3449.29"/>
<polygon fill="gray" stroke="gray" points="2091.33,-3452.61 2100.19,-3446.8 2089.64,-3445.82 2091.33,-3452.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_keypair(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_keypair().</title>
<g id="a_node176"><a xlink:title=" &#160;&#160;&#160;fn test_kyber1024_keypair() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let kp = KeyPair::generate(KeyType::Kyber1024); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber1024::Parameters::SECRET_KEY_LENGTH + 1, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kp.secret_key.seria...">
<polygon fill="lightblue" stroke="black" points="2261.5,-1995 2079.5,-1995 2079.5,-1959 2261.5,-1959 2261.5,-1995"/>
<text text-anchor="middle" x="2170.5" y="-1973.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_kyber1024_keypair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_keypair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024# -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_keypair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024#</title>
<path fill="none" stroke="gray" d="M2261.68,-1982.87C2314.13,-1986.28 2378.55,-1990.47 2423.58,-1993.4"/>
<polygon fill="gray" stroke="gray" points="2423.53,-1996.9 2433.74,-1994.06 2423.99,-1989.91 2423.53,-1996.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_keypair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]generate(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_keypair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M2261.78,-1961.25C2282.86,-1957.56 2305.22,-1953.65 2326,-1950 2360.81,-1943.89 2400.08,-1936.96 2430.11,-1931.65"/>
<polygon fill="gray" stroke="gray" points="2431.09,-1935.03 2440.33,-1929.84 2429.87,-1928.14 2431.09,-1935.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyType][`TryFrom&lt;u8&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1673.67,-1643.38C1746.96,-1627.24 1893.16,-1607.73 1979,-1682 2034.12,-1729.69 1962.23,-1791.72 2015,-1842 2043.32,-1868.98 2088.5,-1874.18 2122.7,-1873.55"/>
<polygon fill="gray" stroke="gray" points="2123.07,-1877.04 2132.94,-1873.19 2122.82,-1870.05 2123.07,-1877.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMCiphertextLength# -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKEMCiphertextLength#</title>
<path fill="none" stroke="gray" d="M1673.69,-1653.18C1758.42,-1649.73 1944.52,-1642.16 2063.07,-1637.33"/>
<polygon fill="gray" stroke="gray" points="2063.41,-1640.82 2073.26,-1636.92 2063.13,-1633.83 2063.41,-1640.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier# -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Ciphertext&lt;&#39;a&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier#</title>
<path fill="none" stroke="gray" d="M1673.53,-1655.85C1740.88,-1656.04 1872.15,-1652.13 1979,-1623 1996.07,-1618.35 1998.13,-1611.35 2015,-1606 2036.5,-1599.18 2060.25,-1593.95 2082.56,-1589.99"/>
<polygon fill="gray" stroke="gray" points="2083.42,-1593.4 2092.69,-1588.26 2082.24,-1586.5 2083.42,-1593.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().</title>
<path fill="none" stroke="gray" d="M643.27,-2044.62C714.14,-2043.58 909.38,-2040.72 990.7,-2039.53"/>
<polygon fill="gray" stroke="gray" points="991,-2043.03 1000.95,-2039.38 990.9,-2036.03 991,-2043.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/advance().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/advance().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M2208.29,-3590.23C2249.64,-3593.86 2318.59,-3599.92 2376.55,-3605"/>
<polygon fill="gray" stroke="gray" points="2376.6,-3608.52 2386.86,-3605.91 2377.21,-3601.55 2376.6,-3608.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/validating_simple_test(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/validating_simple_test().</title>
<g id="a_node182"><a xlink:title=" &#160;&#160;&#160;fn validating_simple_test() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key = TEST_HMAC_KEY; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = &#39; this is a simple test input string&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bytes = input.as_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut incremental = new...">
<polygon fill="lightblue" stroke="black" points="301.5,-1975 131.5,-1975 131.5,-1939 301.5,-1939 301.5,-1975"/>
<text text-anchor="middle" x="216.5" y="-1953.3" font-family="Helvetica,sans-Serif" font-size="14.00">validating_simple_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/validating_simple_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/validating_simple_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().</title>
<path fill="none" stroke="gray" d="M301.61,-1966.97C341.57,-1966.9 387.03,-1959.09 417,-1930 487.15,-1861.91 384.94,-1783.18 453,-1713 474.97,-1690.35 507.99,-1681.26 538.5,-1678.26"/>
<polygon fill="gray" stroke="gray" points="539.03,-1681.73 548.73,-1677.46 538.49,-1674.75 539.03,-1681.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_kem(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_kem().</title>
<g id="a_node184"><a xlink:title=" &#160;&#160;&#160;fn test_kyber1024_kem() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// test data for kyber1024 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk_bytes = include_bytes!(&#39; kem/test&#45;data/pk.dat&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sk_bytes = include_bytes!(&#39; kem/test&#45;data/sk.dat&#39; ); &#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="696.5,-1989 535.5,-1989 535.5,-1953 696.5,-1953 696.5,-1989"/>
<text text-anchor="middle" x="616" y="-1967.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_kyber1024_kem</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_kem().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024# -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_kem().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/KeyType#Kyber1024#</title>
<path fill="none" stroke="gray" d="M696.75,-1973.62C820.82,-1977.68 1067.59,-1985.69 1277,-1992 1588.98,-2001.41 1668.77,-1977.65 1979,-2012 1995.2,-2013.79 1998.78,-2017.44 2015,-2019 2152.59,-2032.25 2188.13,-2028.86 2326,-2019 2358.68,-2016.66 2395,-2011.55 2424.04,-2006.84"/>
<polygon fill="gray" stroke="gray" points="2424.7,-2010.28 2433.99,-2005.2 2423.56,-2003.37 2424.7,-2010.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_kem().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/tests/test_kyber1024_kem().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().</title>
<path fill="none" stroke="gray" d="M696.72,-1964.63C723.54,-1960.69 753.19,-1954.32 779,-1944 867.19,-1908.75 955.77,-1838.29 999.3,-1800.8"/>
<polygon fill="gray" stroke="gray" points="1001.64,-1803.4 1006.89,-1794.2 997.05,-1798.12 1001.64,-1803.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState# -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState#</title>
<path fill="none" stroke="gray" d="M769.96,-4656.87C773.18,-4654.18 776.2,-4651.24 779,-4648 843.48,-4573.43 777.19,-2965.04 815,-2874 919.64,-2622.03 1122.5,-2677.76 1241,-2432 1267.48,-2377.08 1232.73,-2201.92 1277,-2160 1354.72,-2086.41 1490.51,-2101.08 1568.13,-2117.55"/>
<polygon fill="gray" stroke="gray" points="1567.71,-2121.04 1578.22,-2119.77 1569.21,-2114.2 1567.71,-2121.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidRegistrationId# -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidRegistrationId#</title>
<path fill="none" stroke="gray" d="M777.28,-4680.08C831.79,-4681.81 890.73,-4683.68 937.65,-4685.17"/>
<polygon fill="gray" stroke="gray" points="937.68,-4688.67 947.78,-4685.49 937.9,-4681.67 937.68,-4688.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new().</title>
<path fill="none" stroke="gray" d="M760.26,-4656.86C766.74,-4654.27 773.02,-4651.33 779,-4648 800.19,-4636.21 793.59,-4618.38 815,-4607 870.96,-4577.26 946.62,-4575.19 990.78,-4577.1"/>
<polygon fill="gray" stroke="gray" points="990.6,-4580.59 1000.77,-4577.62 990.97,-4573.6 990.6,-4580.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<path fill="none" stroke="gray" d="M777.28,-4658.97C821.99,-4654.5 869.69,-4649.73 911.29,-4645.57"/>
<polygon fill="gray" stroke="gray" points="911.85,-4649.03 921.45,-4644.55 911.15,-4642.07 911.85,-4649.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound# -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound#</title>
<path fill="none" stroke="gray" d="M766.42,-4656.82C770.82,-4654.18 775.03,-4651.25 779,-4648 813.91,-4619.37 777.84,-4578.65 815,-4553 853.95,-4526.11 1204.15,-4523.29 1241,-4553 1299.77,-4600.39 1220.45,-4668.98 1277,-4719 1350.7,-4784.19 1470.43,-4779.95 1548.96,-4767.88"/>
<polygon fill="gray" stroke="gray" points="1549.96,-4771.26 1559.28,-4766.21 1548.84,-4764.35 1549.96,-4771.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument# -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument#</title>
<path fill="none" stroke="gray" d="M769.91,-4656.83C773.14,-4654.15 776.18,-4651.22 779,-4648 861.78,-4553.37 755.86,-3627.95 815,-3517 822.43,-3503.05 1261.96,-3189.84 1277,-3185 1314.12,-3173.04 1941.14,-3175.62 1979,-3185 1996.56,-3189.35 1997.44,-3199.65 2015,-3204 2082.08,-3220.62 2265.02,-3236.52 2326,-3204 2406.67,-3160.98 2452.34,-3054.45 2470.18,-3003.72"/>
<polygon fill="gray" stroke="gray" points="2473.55,-3004.66 2473.47,-2994.07 2466.93,-3002.4 2473.55,-3004.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<path fill="none" stroke="gray" d="M740.01,-4693.09C753.24,-4695.75 766.45,-4698.72 779,-4702 795.46,-4706.3 798.46,-4711.01 815,-4715 853.82,-4724.36 897.47,-4730.62 935.03,-4734.74"/>
<polygon fill="gray" stroke="gray" points="935.14,-4738.27 945.45,-4735.84 935.88,-4731.31 935.14,-4738.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<path fill="none" stroke="gray" d="M768.67,-4693.2C772.31,-4695.85 775.77,-4698.78 779,-4702 847.25,-4770.15 741.52,-4853.53 815,-4916 873.33,-4965.59 1417.35,-4933.9 1580.78,-4923.16"/>
<polygon fill="gray" stroke="gray" points="1581.24,-4926.64 1590.99,-4922.49 1580.78,-4919.66 1581.24,-4926.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PlaintextContent][`From&lt;DecryptionErrorMessage&gt;`]from(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PlaintextContent][`From&lt;DecryptionErrorMessage&gt;`]from().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;fn from(message: DecryptionErrorMessage) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proto_structure = proto::service::Content { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;decryption_error_message: Some(message.serialized().to_vec()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="lightblue" stroke="black" points="243.5,-1813 189.5,-1813 189.5,-1777 243.5,-1777 243.5,-1813"/>
<text text-anchor="middle" x="216.5" y="-1791.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty().</title>
<path fill="none" stroke="gray" d="M2197.61,-4188.16C2233.11,-4193.97 2295.65,-4209.9 2326,-4252 2379.48,-4326.19 2312.71,-4584.96 2362,-4662 2376.03,-4683.92 2399.94,-4699.44 2422.5,-4709.98"/>
<polygon fill="gray" stroke="gray" points="2421.16,-4713.22 2431.72,-4714.06 2423.99,-4706.81 2421.16,-4713.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/simple_test(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/simple_test().</title>
<g id="a_node190"><a xlink:title=" &#160;&#160;&#160;fn simple_test() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key = TEST_HMAC_KEY; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = &#39; this is a simple test input string which is longer than the chunk&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bytes = input.as_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let e...">
<polygon fill="lightblue" stroke="black" points="264,-2245 169,-2245 169,-2209 264,-2209 264,-2245"/>
<text text-anchor="middle" x="216.5" y="-2223.3" font-family="Helvetica,sans-Serif" font-size="14.00">simple_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/simple_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/simple_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().</title>
<path fill="none" stroke="gray" d="M264.03,-2235.59C309.9,-2241.09 378.56,-2240.85 417,-2200 491.37,-2120.97 381.06,-1794.24 453,-1713 474.09,-1689.19 507.33,-1680 538.23,-1677.24"/>
<polygon fill="gray" stroke="gray" points="538.85,-1680.71 548.59,-1676.54 538.38,-1673.72 538.85,-1680.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/simple_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/simple_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256().</title>
<path fill="none" stroke="gray" d="M264.01,-2235.57C309.86,-2241.06 378.51,-2240.81 417,-2200 489.18,-2123.48 377.49,-1801.24 453,-1728 484.46,-1697.49 1205.18,-1717.25 1241,-1692 1275.54,-1667.65 1242.71,-1628.69 1277,-1604 1360.24,-1544.07 1485.46,-1553.04 1561.38,-1566.2"/>
<polygon fill="gray" stroke="gray" points="1560.84,-1569.65 1571.3,-1567.99 1562.09,-1562.77 1560.84,-1569.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/validating_returns_right_size(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/validating_returns_right_size().</title>
<g id="a_node191"><a xlink:title=" &#160;&#160;&#160;fn validating_returns_right_size() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key = TEST_HMAC_KEY; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = &#39; this is a simple test input string&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bytes = input.as_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut incrementa...">
<polygon fill="lightblue" stroke="black" points="324,-1867 109,-1867 109,-1831 324,-1831 324,-1867"/>
<text text-anchor="middle" x="216.5" y="-1845.3" font-family="Helvetica,sans-Serif" font-size="14.00">validating_returns_right_size</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/validating_returns_right_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/validating_returns_right_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 incremental_mac/test/new_incremental().</title>
<path fill="none" stroke="gray" d="M324.15,-1855.62C357.04,-1852.5 391.32,-1843.33 417,-1822 456.24,-1789.4 414.76,-1746.77 453,-1713 476.26,-1692.46 508.82,-1683.56 538.66,-1680.14"/>
<polygon fill="gray" stroke="gray" points="539.03,-1683.62 548.65,-1679.19 538.36,-1676.66 539.03,-1683.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v2(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v2().</title>
<g id="a_node192"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_test_v2() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// testVectorsVersion2 in Java &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key = IdentityKey::decode(ALICE_IDENTITY)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let b_key = IdentityKey::decode(BOB_IDENTITY)?; ...">
<polygon fill="lightblue" stroke="black" points="690,-2935 542,-2935 542,-2899 690,-2899 690,-2935"/>
<text text-anchor="middle" x="616" y="-2913.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_test_v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode().</title>
<path fill="none" stroke="gray" d="M690.07,-2908.83C718.23,-2904.64 750.46,-2898.57 779,-2890 795.77,-2884.96 797.89,-2877.72 815,-2874 896.45,-2856.31 2183.67,-2857.51 2436.2,-2857.92"/>
<polygon fill="gray" stroke="gray" points="2436.43,-2861.42 2446.44,-2857.94 2436.44,-2854.42 2436.43,-2861.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_test_v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().</title>
<path fill="none" stroke="gray" d="M690.17,-2913.2C720.81,-2915.35 754.83,-2923.12 779,-2944 818.57,-2978.18 774.78,-3022.59 815,-3056 864.51,-3097.13 944.28,-3094.92 990.56,-3089.21"/>
<polygon fill="gray" stroke="gray" points="991.29,-3092.65 1000.73,-3087.84 990.35,-3085.71 991.29,-3092.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/read5_mod_100k(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/read5_mod_100k().</title>
<g id="a_node193"><a xlink:title=" &#160;&#160;&#160;fn read5_mod_100k(fprint: &amp;[u8]) &#45;&gt; u64 &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(fprint.len(), 5); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = fprint.iter().fold(0u64, |acc, &amp;x| (acc &lt;&lt; 8) | (x as u64)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x % 100_000 &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="284.5,-1651 148.5,-1651 148.5,-1615 284.5,-1615 284.5,-1651"/>
<text text-anchor="middle" x="216.5" y="-1629.3" font-family="Helvetica,sans-Serif" font-size="14.00">read5_mod_100k</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext# -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#</title>
<path fill="none" stroke="gray" d="M1075.71,-2886.69C1122.98,-2870.06 1195.43,-2838.43 1241,-2789 1268.53,-2759.14 1243.91,-2728.56 1277,-2705 1413.83,-2607.58 1956.36,-2629.08 2121.53,-2638.1"/>
<polygon fill="gray" stroke="gray" points="2121.68,-2641.62 2131.86,-2638.68 2122.07,-2634.63 2121.68,-2641.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<path fill="none" stroke="gray" d="M1075.92,-2902.39C1123.72,-2901.2 1196.91,-2891.72 1241,-2849 1283.75,-2807.58 1229.59,-2755.99 1277,-2720 1308.06,-2696.42 1943.66,-2703.5 1979,-2720 2001.58,-2730.55 1992.42,-2752.45 2015,-2763 2158.64,-2830.08 2355.17,-2779.44 2438.75,-2752.29"/>
<polygon fill="gray" stroke="gray" points="2439.98,-2755.57 2448.37,-2749.1 2437.78,-2748.92 2439.98,-2755.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper# -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper#</title>
<path fill="none" stroke="gray" d="M1048.79,-2882.97C1089.58,-2844.9 1183.95,-2752.06 1241,-2658 1263.77,-2620.46 1240.73,-2590.75 1277,-2566 1309.21,-2544.01 1940.03,-2564.38 1979,-2566 1995.04,-2566.67 1998.96,-2568.21 2015,-2569 2167.79,-2576.51 2349.19,-2576.73 2432.71,-2576.34"/>
<polygon fill="gray" stroke="gray" points="2432.89,-2579.84 2442.87,-2576.29 2432.86,-2572.84 2432.89,-2579.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument# -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument#</title>
<path fill="none" stroke="gray" d="M1075.62,-2899.86C1254.85,-2895.72 1893.75,-2883.28 1979,-2914 1998.33,-2920.97 1995.88,-2935.48 2015,-2943 2032.75,-2949.98 2276.9,-2964.62 2403.71,-2971.82"/>
<polygon fill="gray" stroke="gray" points="2403.56,-2975.32 2413.74,-2972.39 2403.96,-2968.33 2403.56,-2975.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1075.62,-2896.5C1124.99,-2894.62 1201.17,-2900.47 1241,-2948 1301.65,-3020.37 1211.88,-3728.63 1277,-3797 1355.33,-3879.25 1504.8,-3858.81 1580.53,-3841.53"/>
<polygon fill="gray" stroke="gray" points="1581.35,-3844.93 1590.28,-3839.23 1579.74,-3838.12 1581.35,-3844.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="gray" d="M1075.61,-2896.51C1124.97,-2894.63 1201.14,-2900.49 1241,-2948 1300.26,-3018.63 1210.41,-3713.24 1277,-3777 1307.74,-3806.44 1943.33,-3783.86 2122.72,-3776.88"/>
<polygon fill="gray" stroke="gray" points="2123.04,-3780.37 2132.89,-3776.48 2122.76,-3773.38 2123.04,-3780.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey# -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#</title>
<path fill="none" stroke="gray" d="M1075.61,-2896.52C1124.96,-2894.64 1201.12,-2900.5 1241,-2948 1299.21,-3017.34 1211.58,-3699.41 1277,-3762 1291.09,-3775.48 1960.83,-3769.07 1979,-3762 1999.23,-3754.13 1995.05,-3737.54 2015,-3729 2087.19,-3698.11 2317.58,-3696.26 2424.07,-3697.16"/>
<polygon fill="gray" stroke="gray" points="2424.25,-3700.66 2434.28,-3697.26 2424.31,-3693.66 2424.25,-3700.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M1665.56,-3589.91C1735.43,-3604.59 1889,-3625.19 1979,-3549 2027.05,-3508.32 1965.15,-3450.45 2015,-3412 2042.36,-3390.9 2295.06,-3396.62 2326,-3412 2399.96,-3448.76 2447.72,-3540.23 2467.94,-3586.4"/>
<polygon fill="gray" stroke="gray" points="2464.8,-3587.97 2471.94,-3595.8 2471.24,-3585.23 2464.8,-3587.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().</title>
<path fill="none" stroke="gray" d="M1665.74,-3588.67C1734.27,-3600.79 1883.3,-3616.57 1979,-3549 2010.19,-3526.98 1985.1,-3494.75 2015,-3471 2036.21,-3454.15 2064.08,-3445.55 2090.3,-3441.33"/>
<polygon fill="gray" stroke="gray" points="2090.84,-3444.79 2100.25,-3439.92 2089.86,-3437.86 2090.84,-3444.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys().</title>
<path fill="none" stroke="gray" d="M2559.24,-1506.94C2591.1,-1499.59 2627.27,-1491.25 2656.73,-1484.45"/>
<polygon fill="gray" stroke="gray" points="2657.9,-1487.77 2666.85,-1482.11 2656.32,-1480.95 2657.9,-1487.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/message_version(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/message_version().</title>
<path fill="none" stroke="gray" d="M2562.51,-1525C2586.75,-1525 2613.23,-1525 2637.22,-1525"/>
<polygon fill="gray" stroke="gray" points="2637.34,-1528.5 2647.34,-1525 2637.34,-1521.5 2637.34,-1528.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().</title>
<g id="a_node254"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Self &#160;&#160;&#160;&#160;&#160;pub(crate) fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_identity: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_identity: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_key: &amp;RootKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alice_base_key: &amp;PublicKey, { &#160;...">
<polygon fill="lightblue" stroke="black" points="1655,-322 1601,-322 1601,-286 1655,-286 1655,-322"/>
<text text-anchor="middle" x="1628" y="-300.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().</title>
<path fill="none" stroke="gray" d="M2397.36,-1519.71C2383.94,-1515.33 2371.37,-1508.5 2362,-1498 2268.15,-1392.89 2423.98,-1284.27 2326,-1183 2228.85,-1082.58 2108.63,-1240.72 2015,-1137 1954.93,-1070.46 2041.35,-395.41 1979,-331 1936.5,-287.11 1745.88,-295.41 1665.23,-301.07"/>
<polygon fill="gray" stroke="gray" points="1664.77,-297.59 1655.05,-301.81 1665.28,-304.57 1664.77,-297.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M2208.3,-3769.42C2241.7,-3762.87 2290.94,-3749.37 2326,-3723 2348.46,-3706.1 2340.67,-3689.31 2362,-3671 2378.58,-3656.77 2399.32,-3645.16 2418.72,-3636.22"/>
<polygon fill="gray" stroke="gray" points="2420.39,-3639.31 2428.11,-3632.05 2417.55,-3632.91 2420.39,-3639.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion# -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#</title>
<path fill="none" stroke="gray" d="M2208.29,-3780.38C2243.93,-3785.6 2300.07,-3793.81 2352.01,-3801.42"/>
<polygon fill="gray" stroke="gray" points="2351.59,-3804.89 2361.99,-3802.88 2352.6,-3797.97 2351.59,-3804.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion# -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#</title>
<path fill="none" stroke="gray" d="M2208.29,-3792.23C2263.93,-3818.29 2369.54,-3867.74 2431.12,-3896.58"/>
<polygon fill="gray" stroke="gray" points="2429.7,-3899.78 2440.24,-3900.85 2432.67,-3893.44 2429.7,-3899.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort# -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#</title>
<path fill="none" stroke="gray" d="M2206.51,-3793.1C2240.25,-3811.86 2291.18,-3843.77 2326,-3882 2347.98,-3906.13 2336.67,-3925.42 2362,-3946 2369.1,-3951.77 2377.12,-3956.65 2385.54,-3960.77"/>
<polygon fill="gray" stroke="gray" points="2384.25,-3964.03 2394.81,-3964.95 2387.13,-3957.65 2384.25,-3964.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Public&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;Public&gt;`][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().</title>
<path fill="none" stroke="gray" d="M653.75,-1806.04C726.08,-1800.22 887.29,-1787.24 972.22,-1780.41"/>
<polygon fill="gray" stroke="gray" points="972.51,-1783.9 982.19,-1779.61 971.94,-1776.92 972.51,-1783.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/derive_keys().</title>
<path fill="none" stroke="gray" d="M2565.15,-1471C2595.47,-1471 2629,-1471 2656.64,-1471"/>
<polygon fill="gray" stroke="gray" points="2656.93,-1474.5 2666.93,-1471 2656.93,-1467.5 2656.93,-1474.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/message_version(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/message_version().</title>
<path fill="none" stroke="gray" d="M2559.24,-1489.06C2584.46,-1494.88 2612.39,-1501.32 2637.55,-1507.13"/>
<polygon fill="gray" stroke="gray" points="2636.88,-1510.56 2647.41,-1509.4 2638.45,-1503.74 2636.88,-1510.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().</title>
<path fill="none" stroke="gray" d="M2470.39,-1452.58C2438.22,-1383.76 2326.86,-1145.63 2326,-1145 2213.64,-1062.26 2109.09,-1205.04 2015,-1102 1957.17,-1038.67 2038.71,-392.55 1979,-331 1936.46,-287.15 1745.87,-295.42 1665.22,-301.07"/>
<polygon fill="gray" stroke="gray" points="1664.77,-297.6 1655.05,-301.81 1665.28,-304.58 1664.77,-297.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().</title>
<g id="a_node202"><a xlink:title=" &#160;&#160;&#160;fn when_exceed_maximum_states_then_oldest_is_ejected() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consts::MAX_SENDER_KEY_STATES, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; Test written to expect this limit&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;);...">
<polygon fill="lightblue" stroke="black" points="1827,-3255 1429,-3255 1429,-3219 1827,-3219 1827,-3255"/>
<text text-anchor="middle" x="1628" y="-3233.3" font-family="Helvetica,sans-Serif" font-size="14.00">when_exceed_maximum_states_then_oldest_is_ejected</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().</title>
<path fill="none" stroke="gray" d="M1827.21,-3221.86C1879.44,-3225.77 1933.78,-3237.51 1979,-3264 2003.89,-3278.58 1990.84,-3302.24 2015,-3318 2045.36,-3337.8 2085.91,-3344.31 2117.85,-3346"/>
<polygon fill="gray" stroke="gray" points="2117.77,-3349.49 2127.9,-3346.38 2118.04,-3342.5 2117.77,-3349.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="gray" d="M1827.26,-3250.08C1876.87,-3253.96 1929.93,-3258.64 1979,-3264 2013.91,-3267.82 2052.27,-3273.05 2085.36,-3277.9"/>
<polygon fill="gray" stroke="gray" points="2085.05,-3281.39 2095.45,-3279.39 2086.07,-3274.46 2085.05,-3281.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().</title>
<path fill="none" stroke="gray" d="M1695.91,-3218.99C1775.58,-3202.05 1906.89,-3189.19 1979,-3264 2047.99,-3335.58 1949.52,-4083.2 2015,-4158 2043.81,-4190.91 2097.3,-4193.15 2133.15,-4190.25"/>
<polygon fill="gray" stroke="gray" points="2133.6,-4193.73 2143.21,-4189.27 2132.92,-4186.76 2133.6,-4193.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[Secret][KeyKind]key_length(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[Secret][KeyKind]key_length().</title>
<g id="a_node203"><a xlink:title=" &#160;&#160;&#160;fn key_length(key_type: KeyType) &#45;&gt; usize &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_type.parameters().secret_key_length() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="262.5,-1597 170.5,-1597 170.5,-1561 262.5,-1561 262.5,-1597"/>
<text text-anchor="middle" x="216.5" y="-1575.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_length</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]compute_mac().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMacKeyLength# -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SignalMessage]compute_mac().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMacKeyLength#</title>
<path fill="none" stroke="gray" d="M2536.75,-2288C2562.75,-2288 2594.37,-2288 2623.71,-2288"/>
<polygon fill="gray" stroke="gray" points="2623.99,-2291.5 2633.99,-2288 2623.99,-2284.5 2623.99,-2291.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node205"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expirat...">
<polygon fill="lightblue" stroke="black" points="243.5,-1543 189.5,-1543 189.5,-1507 243.5,-1507 243.5,-1543"/>
<text text-anchor="middle" x="216.5" y="-1521.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext# -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#</title>
<path fill="none" stroke="gray" d="M1655.07,-2595.32C1740.15,-2602.87 2010.61,-2626.89 2121.44,-2636.73"/>
<polygon fill="gray" stroke="gray" points="2121.38,-2640.24 2131.65,-2637.64 2122,-2633.27 2121.38,-2640.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey# -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#PreKey#</title>
<path fill="none" stroke="gray" d="M1655.03,-2588.98C1715.79,-2580.89 1870.08,-2567.95 1979,-2625 2001.08,-2636.56 1993.23,-2655.86 2015,-2668 2136.98,-2736.03 2187.97,-2691.74 2326,-2713 2364.12,-2718.87 2407.5,-2726 2438.31,-2731.14"/>
<polygon fill="gray" stroke="gray" points="2437.82,-2734.61 2448.26,-2732.81 2438.97,-2727.71 2437.82,-2734.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper# -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#Whisper#</title>
<path fill="none" stroke="gray" d="M1655.29,-2593.6C1747.47,-2595.53 2064.59,-2600.84 2326,-2589 2361.85,-2587.38 2402.31,-2583.87 2432.61,-2580.9"/>
<polygon fill="gray" stroke="gray" points="2433.28,-2584.35 2442.88,-2579.88 2432.59,-2577.39 2433.28,-2584.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey# -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From&lt;CiphertextMessageType&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#</title>
<path fill="none" stroke="gray" d="M1655.28,-2599.52C1777.08,-2629.98 2282.62,-2759.21 2326,-2816 2381.7,-2888.91 2311.68,-3564.28 2362,-3641 2376.32,-3662.84 2401.56,-3676.57 2424.94,-3685.07"/>
<polygon fill="gray" stroke="gray" points="2423.87,-3688.41 2434.46,-3688.3 2426.11,-3681.78 2423.87,-3688.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]from_protobuf().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]new(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]from_protobuf().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderMessageKey]new().</title>
<path fill="none" stroke="gray" d="M1085.53,-2087.9C1207.02,-2076.92 1490.16,-2051.36 1590.75,-2042.27"/>
<polygon fill="gray" stroke="gray" points="1591.35,-2045.73 1601,-2041.35 1590.72,-2038.76 1591.35,-2045.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving# -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Receiving#</title>
<path fill="none" stroke="gray" d="M1110.55,-4738.09C1152.72,-4739.86 1203.14,-4748.25 1241,-4774 1267.35,-4791.92 1250.09,-4818.94 1277,-4836 1369.17,-4894.44 1503.5,-4885.84 1576.02,-4875.37"/>
<polygon fill="gray" stroke="gray" points="1576.89,-4878.77 1586.25,-4873.81 1575.84,-4871.85 1576.89,-4878.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending# -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/traits/Direction#Sending#</title>
<path fill="none" stroke="gray" d="M1077.26,-4760.01C1122.46,-4778.34 1190.43,-4809.73 1241,-4850 1260.5,-4865.53 1254.84,-4881.59 1277,-4893 1375.44,-4943.67 1510.43,-4936.02 1580.52,-4927.31"/>
<polygon fill="gray" stroke="gray" points="1581.32,-4930.73 1590.78,-4925.97 1580.41,-4923.79 1581.32,-4930.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().</title>
<g id="a_node210"><a xlink:title=") &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; &#160;pub async fn message_decrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;ciphertext: &amp;CiphertextMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity...">
<polygon fill="lightblue" stroke="black" points="685.5,-2342 546.5,-2342 546.5,-2306 685.5,-2306 685.5,-2342"/>
<text text-anchor="middle" x="616" y="-2320.3" font-family="Helvetica,sans-Serif" font-size="14.00">message_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage# -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#</title>
<path fill="none" stroke="gray" d="M669.78,-2305.95C705.04,-2291.46 750.08,-2267.9 779,-2234 809.38,-2198.38 777.13,-2162.53 815,-2135 853.31,-2107.15 1197.95,-2139.76 1241,-2120 1262.44,-2110.16 1255.49,-2090.69 1277,-2081 1312.56,-2064.97 1940.11,-2069.11 1979,-2066 1995.1,-2064.71 1998.88,-2062.11 2015,-2061 2083.95,-2056.23 2268.46,-2022.71 2326,-2061 2360.5,-2083.96 2330.32,-2120.29 2362,-2147 2369.33,-2153.18 2377.81,-2158.02 2386.78,-2161.79"/>
<polygon fill="gray" stroke="gray" points="2385.69,-2165.11 2396.29,-2165.34 2388.15,-2158.56 2385.69,-2165.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().</title>
<path fill="none" stroke="gray" d="M685.62,-2317.81C749.96,-2312 847.1,-2303.24 921.32,-2296.54"/>
<polygon fill="gray" stroke="gray" points="921.99,-2299.99 931.64,-2295.61 921.36,-2293.02 921.99,-2299.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument# -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument#</title>
<path fill="none" stroke="gray" d="M636.09,-2342.18C710.75,-2412.07 992.8,-2664.93 1277,-2774 1570.94,-2886.81 1667.43,-2823.68 1979,-2869 2133.45,-2891.47 2174.54,-2885.3 2326,-2923 2359.21,-2931.27 2395.43,-2943.65 2424.29,-2954.38"/>
<polygon fill="gray" stroke="gray" points="2423.19,-2957.7 2433.78,-2957.94 2425.65,-2951.15 2423.19,-2957.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SignalMessage# -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/CiphertextMessage#SignalMessage#</title>
<path fill="none" stroke="gray" d="M671.5,-2305.94C711.2,-2292.9 766.32,-2275.01 815,-2260 1003.56,-2201.87 1066.14,-2226.43 1241,-2135 1259.21,-2125.48 1257.73,-2113.12 1277,-2106 1353.95,-2077.56 1932.97,-2085.22 2015,-2084 2084.1,-2082.97 2270.41,-2042.94 2326,-2084 2369.76,-2116.32 2323.08,-2162.99 2362,-2201 2375.06,-2213.75 2392.65,-2221.66 2410.21,-2226.53"/>
<polygon fill="gray" stroke="gray" points="2409.39,-2229.93 2419.94,-2228.94 2411.08,-2223.14 2409.39,-2229.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().</title>
<path fill="none" stroke="gray" d="M685.91,-2341.68C723.85,-2351.08 771.86,-2362.43 815,-2371 850.44,-2378.04 889.44,-2384.62 924.21,-2390.08"/>
<polygon fill="gray" stroke="gray" points="923.96,-2393.59 934.38,-2391.67 925.04,-2386.67 923.96,-2393.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_message_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage# -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_message_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidMessage#</title>
<path fill="none" stroke="gray" d="M2582.45,-2499.08C2588.28,-2502.92 2593.56,-2507.52 2598,-2513 2663.3,-2593.58 2708.17,-4254.36 2714.29,-4492.63"/>
<polygon fill="gray" stroke="gray" points="2710.79,-4492.98 2714.55,-4502.89 2717.79,-4492.8 2710.79,-4492.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_message_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage# -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_message_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#</title>
<path fill="none" stroke="gray" d="M2584.66,-2481C2599.76,-2481 2615.15,-2481 2629.83,-2481"/>
<polygon fill="gray" stroke="gray" points="2629.86,-2484.5 2639.86,-2481 2629.86,-2477.5 2629.86,-2484.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().</title>
<g id="a_node215"><a xlink:title=" &#160;&#160;&#160;fn when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record_key = (random...">
<polygon fill="lightblue" stroke="black" points="1944,-3525 1312,-3525 1312,-3489 1944,-3489 1944,-3525"/>
<text text-anchor="middle" x="1628" y="-3503.3" font-family="Helvetica,sans-Serif" font-size="14.00">when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().</title>
<path fill="none" stroke="gray" d="M1717.49,-3525.02C1794.51,-3535.4 1905.1,-3536.86 1979,-3480 2017.43,-3450.43 1978.52,-3408.95 2015,-3377 2042.89,-3352.57 2084.48,-3345.03 2117.48,-3343.34"/>
<polygon fill="gray" stroke="gray" points="2117.99,-3346.83 2127.87,-3342.99 2117.75,-3339.83 2117.99,-3346.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="gray" d="M1706.47,-3525.04C1784.82,-3538.36 1904.65,-3544.5 1979,-3480 2034.71,-3431.67 1961.67,-3368.95 2015,-3318 2033.68,-3300.15 2059.75,-3291.82 2085.15,-3288.41"/>
<polygon fill="gray" stroke="gray" points="2085.66,-3291.88 2095.22,-3287.3 2084.89,-3284.92 2085.66,-3291.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().</title>
<path fill="none" stroke="gray" d="M1736.86,-3488.97C1815.69,-3482.52 1918.92,-3489.31 1979,-3554 2070.5,-3652.53 1925.47,-4057.68 2015,-4158 2044.13,-4190.63 2097.54,-4192.94 2133.28,-4190.14"/>
<polygon fill="gray" stroke="gray" points="2133.69,-4193.61 2143.31,-4189.18 2133.03,-4186.64 2133.69,-4193.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError][`From&lt;CurveError&gt;`]from(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError][`From&lt;CurveError&gt;`]from().</title>
<g id="a_node216"><a xlink:title=" &#160;&#160;&#160;fn from(e: CurveError) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match e { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CurveError::NoKeyTypeIdentifier =&gt; Self::NoKeyTypeIdentifier, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CurveError::BadKeyType(raw) =&gt; Self::BadKeyType(raw), &#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1655,-1781 1601,-1781 1601,-1745 1655,-1745 1655,-1781"/>
<text text-anchor="middle" x="1628" y="-1759.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError][`From&lt;CurveError&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKeyLength# -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError][`From&lt;CurveError&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKeyLength#</title>
<path fill="none" stroke="gray" d="M1655.07,-1761.94C1735.6,-1758.66 1982.17,-1748.62 2102.3,-1743.74"/>
<polygon fill="gray" stroke="gray" points="2102.63,-1747.22 2112.48,-1743.32 2102.35,-1740.23 2102.63,-1747.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError][`From&lt;CurveError&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier# -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError][`From&lt;CurveError&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier#</title>
<path fill="none" stroke="gray" d="M1655.04,-1770.01C1718.56,-1785.39 1883.26,-1814.83 1979,-1736 2025.28,-1697.89 1970.6,-1646.28 2015,-1606 2033.43,-1589.28 2058.4,-1581.05 2082.88,-1577.39"/>
<polygon fill="gray" stroke="gray" points="2083.47,-1580.85 2092.96,-1576.13 2082.6,-1573.9 2083.47,-1580.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKeyType# -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKeyType#</title>
<g id="a_node221"><a xlink:title=" &#160;&#160;&#160;/// bad key length &lt; &#160;&#160;&#160;&#160;BadKeyType(u8), {1}&gt; for key with type &lt;{0}&gt; &#160;&#160;&#160;&#160;BadKeyLength(KeyType, usize), &#160;&#160;&#160;&#160;&#160;/// invalid signature detected &#160;&#160;&#160;&#160;SignatureValidationFailed, &#160;&#160;&#160;&#160;&#160;/// untrusted identi...">
<polygon fill="lightblue" stroke="black" points="2220.5,-1705 2120.5,-1705 2120.5,-1669 2220.5,-1669 2220.5,-1705"/>
<text text-anchor="middle" x="2170.5" y="-1683.3" font-family="Helvetica,sans-Serif" font-size="14.00">BadKeyType</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError][`From&lt;CurveError&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKeyType# -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/impl#[SignalProtocolError][`From&lt;CurveError&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#BadKeyType#</title>
<path fill="none" stroke="gray" d="M1655.27,-1765.07C1714.64,-1768.89 1863.02,-1773.5 1979,-1736 1996.84,-1730.23 1997.46,-1720.62 2015,-1714 2045.31,-1702.56 2080.82,-1695.93 2110.14,-1692.1"/>
<polygon fill="gray" stroke="gray" points="2110.74,-1695.55 2120.24,-1690.86 2109.89,-1688.6 2110.74,-1695.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().</title>
<g id="a_node217"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_mismatching_fingerprints() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use crate::IdentityKeyPair; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key_pair = IdentityKeyPair::generate(&amp;mut OsRng); &#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="754,-3047 478,-3047 478,-3011 754,-3011 754,-3047"/>
<text text-anchor="middle" x="616" y="-3025.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_mismatching_fingerprints</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="gray" d="M754.05,-3036.98C763.38,-3041.79 771.89,-3048.02 779,-3056 832.43,-3115.98 761.11,-3718.44 815,-3778 855.33,-3822.58 929.16,-3823.65 978.16,-3818.36"/>
<polygon fill="gray" stroke="gray" points="978.71,-3821.82 988.22,-3817.15 977.87,-3814.87 978.71,-3821.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/impl#[Fingerprint]new().</title>
<path fill="none" stroke="gray" d="M747.98,-3047.03C770.34,-3050.06 793.33,-3053.14 815,-3056 876.72,-3064.14 948.6,-3073.21 990.81,-3078.49"/>
<polygon fill="gray" stroke="gray" points="990.52,-3081.98 1000.88,-3079.75 991.39,-3075.04 990.52,-3081.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/when_sender_chain_key_iteration_overflows(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/when_sender_chain_key_iteration_overflows().</title>
<g id="a_node218"><a xlink:title=" &#160;&#160;&#160;fn when_sender_chain_key_iteration_overflows() &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_chain_key: SenderChainKey = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SenderChainKey::new(u32::MAX, INITIAL_SEED_KEY.to_vec()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!( &#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="777,-2225 455,-2225 455,-2189 777,-2189 777,-2225"/>
<text text-anchor="middle" x="616" y="-2203.3" font-family="Helvetica,sans-Serif" font-size="14.00">when_sender_chain_key_iteration_overflows</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/when_sender_chain_key_iteration_overflows().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState# -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/when_sender_chain_key_iteration_overflows().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState#</title>
<path fill="none" stroke="gray" d="M777.04,-2195.27C1006.09,-2178.49 1416.5,-2148.42 1568.39,-2137.29"/>
<polygon fill="gray" stroke="gray" points="1568.72,-2140.78 1578.44,-2136.56 1568.21,-2133.8 1568.72,-2140.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/when_sender_chain_key_iteration_overflows().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/when_sender_chain_key_iteration_overflows().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().</title>
<path fill="none" stroke="gray" d="M767.02,-2188.88C771.22,-2186.22 775.23,-2183.27 779,-2180 819.12,-2145.16 774.22,-2100.06 815,-2066 864.41,-2024.74 944.21,-2027 990.52,-2032.75"/>
<polygon fill="gray" stroke="gray" points="990.32,-2036.25 1000.7,-2034.13 991.27,-2029.32 990.32,-2036.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().</title>
<g id="a_node220"><a xlink:title=") &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; &#160;pub async fn sealed_sender_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;destination: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;sender_cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;ptext: &amp;[u8], &#160;&#160;&#160;&#160;session_store: &amp;mut dyn Sess...">
<polygon fill="lightblue" stroke="black" points="304.5,-3904 128.5,-3904 128.5,-3868 304.5,-3868 304.5,-3904"/>
<text text-anchor="middle" x="216.5" y="-3882.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default# -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/ContentHint#Default#</title>
<path fill="none" stroke="gray" d="M304.92,-3899.28C339.98,-3905.25 380.61,-3913 417,-3922 597.11,-3966.57 633.31,-4010.41 815,-4048 1017.11,-4089.81 1071.13,-4080.29 1277,-4095 1315.93,-4097.78 1947.05,-4101.58 1979,-4124 2013.59,-4148.27 1979.92,-4188.45 2015,-4212 2049.39,-4235.09 2327.96,-4218.5 2436.21,-4211.08"/>
<polygon fill="gray" stroke="gray" points="2436.7,-4214.56 2446.44,-4210.37 2436.22,-4207.57 2436.7,-4214.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="gray" d="M304.53,-3879.84C344.21,-3881.92 388.57,-3891.97 417,-3922 505.99,-4015.99 364.78,-4116.28 453,-4211 459.89,-4218.4 467.95,-4224.36 476.73,-4229.15"/>
<polygon fill="gray" stroke="gray" points="475.22,-4232.31 485.74,-4233.56 478.29,-4226.02 475.22,-4232.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().</title>
<path fill="none" stroke="gray" d="M304.56,-3895.22C344.75,-3894.37 389.53,-3885.2 417,-3854 499.71,-3760.05 370.57,-2822.21 453,-2728 483.72,-2692.89 541.35,-2691.63 578.94,-2695.29"/>
<polygon fill="gray" stroke="gray" points="578.64,-2698.78 588.97,-2696.43 579.43,-2691.83 578.64,-2698.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_encrypt().</title>
<path fill="none" stroke="gray" d="M304.58,-3895.24C344.77,-3894.39 389.56,-3885.22 417,-3854 503.6,-3755.48 395.01,-2791.66 453,-2674 544.88,-2487.59 625.42,-2463.17 815,-2378 856.62,-2359.3 906.91,-2350.71 948.06,-2346.84"/>
<polygon fill="gray" stroke="gray" points="948.38,-2350.32 958.04,-2345.97 947.78,-2343.35 948.38,-2350.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]encapsulate(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]encapsulate().</title>
<g id="a_node222"><a xlink:title=" &#160;&#160;&#160;fn encapsulate(pub_key: &amp;KeyMaterial&lt;Public&gt;) &#45;&gt; (super::SharedSecret, super::RawCiphertext) &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let kyber_pk = pqcrypto_kyber::kyber1024::PublicKey::from_bytes(pub_key) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect...">
<polygon fill="lightblue" stroke="black" points="1078.5,-1406 977.5,-1406 977.5,-1370 1078.5,-1370 1078.5,-1406"/>
<text text-anchor="middle" x="1028" y="-1384.3" font-family="Helvetica,sans-Serif" font-size="14.00">encapsulate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]decapsulate(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]decapsulate().</title>
<g id="a_node223"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;super::SharedSecret&gt; &#160;&#160;&#160;&#160;&#160;fn decapsulate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;secret_key: &amp;KeyMaterial&lt;Secret&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;[u8], { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let kyber_sk = pqcrypto_kyber::kyber768::SecretKey::from_bytes(...">
<polygon fill="lightblue" stroke="black" points="1078.5,-1352 977.5,-1352 977.5,-1316 1078.5,-1316 1078.5,-1352"/>
<text text-anchor="middle" x="1028" y="-1330.3" font-family="Helvetica,sans-Serif" font-size="14.00">decapsulate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]decapsulate(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]decapsulate().</title>
<g id="a_node224"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;super::SharedSecret&gt; &#160;&#160;&#160;&#160;&#160;fn decapsulate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;secret_key: &amp;KeyMaterial&lt;Secret&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;[u8], { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let kyber_sk = pqcrypto_kyber::kyber1024::SecretKey::from_bytes...">
<polygon fill="lightblue" stroke="black" points="1078.5,-1298 977.5,-1298 977.5,-1262 1078.5,-1262 1078.5,-1298"/>
<text text-anchor="middle" x="1028" y="-1276.3" font-family="Helvetica,sans-Serif" font-size="14.00">decapsulate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]encapsulate(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]encapsulate().</title>
<g id="a_node225"><a xlink:title=" &#160;&#160;&#160;fn encapsulate(pub_key: &amp;KeyMaterial&lt;Public&gt;) &#45;&gt; (super::SharedSecret, super::RawCiphertext) &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let kyber_pk = pqcrypto_kyber::kyber768::PublicKey::from_bytes(pub_key) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(...">
<polygon fill="lightblue" stroke="black" points="1078.5,-1244 977.5,-1244 977.5,-1208 1078.5,-1208 1078.5,-1244"/>
<text text-anchor="middle" x="1028" y="-1222.3" font-family="Helvetica,sans-Serif" font-size="14.00">encapsulate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]generate(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]generate().</title>
<g id="a_node226"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; (KeyMaterial&lt;Public&gt;, KeyMaterial&lt;Secret&gt;) &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (pk, sk) = pqcrypto_kyber::kyber768::keypair(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyMaterial::new(pk.as_bytes().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1067.5,-1136 988.5,-1136 988.5,-1100 1067.5,-1100 1067.5,-1136"/>
<text text-anchor="middle" x="1028" y="-1114.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`KeyMaterial&lt;T&gt;`]new(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`KeyMaterial&lt;T&gt;`]new().</title>
<path fill="none" stroke="gray" d="M1067.82,-1112.52C1113.66,-1108.21 1190.09,-1108.07 1241,-1145 1271.25,-1166.95 1253.02,-1192.33 1277,-1221 1369.88,-1332.06 1522.82,-1418.29 1591.58,-1453.6"/>
<polygon fill="gray" stroke="gray" points="1590.21,-1456.83 1600.71,-1458.24 1593.38,-1450.59 1590.21,-1456.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]generate(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]generate().</title>
<g id="a_node227"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; (KeyMaterial&lt;Public&gt;, KeyMaterial&lt;Secret&gt;) &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (pk, sk) = pqcrypto_kyber::kyber1024::keypair(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyMaterial::new(pk.as_bytes().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1067.5,-1190 988.5,-1190 988.5,-1154 1067.5,-1154 1067.5,-1190"/>
<text text-anchor="middle" x="1028" y="-1168.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`KeyMaterial&lt;T&gt;`]new(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`KeyMaterial&lt;T&gt;`]new().</title>
<path fill="none" stroke="gray" d="M1067.5,-1171.4C1111.05,-1171.95 1183.41,-1176.65 1241,-1199 1260.9,-1206.72 1503.93,-1381.93 1593.84,-1446.98"/>
<polygon fill="gray" stroke="gray" points="1591.9,-1449.89 1602.05,-1452.92 1596,-1444.22 1591.9,-1449.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Keys# -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Keys#</title>
<g id="a_node228"><a xlink:title="impl MessageKeyGenerator &#160;&#160;&#160;&#160;&#160;Keys(MessageKeys), &#160;&#160;&#160;&#160;Seed((Vec&lt;u8&gt;, u32)), } &#160;{ &#160;&#160;&#160;&#160;pub(crate) fn new_from_seed(seed: &amp;[u8], counter: u32) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::Seed((seed.to_vec(), counter)) &#160;&#160;&#160;&#160;} ...">
<polygon fill="lightblue" stroke="black" points="3390,-1226 3336,-1226 3336,-1190 3390,-1190 3390,-1226"/>
<text text-anchor="middle" x="3363" y="-1204.3" font-family="Helvetica,sans-Serif" font-size="14.00">Keys</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 crypto/hmac_sha256().</title>
<path fill="none" stroke="gray" d="M3081.53,-1267.32C3071.61,-1286.48 3053.28,-1315.7 3028,-1330 2633.65,-1553.06 2401.86,-1208.18 2015,-1444 1990.37,-1459.01 2002.68,-1481.53 1979,-1498 1893.2,-1557.69 1769.97,-1574.81 1694.94,-1579.51"/>
<polygon fill="gray" stroke="gray" points="1694.47,-1576.03 1684.69,-1580.09 1694.87,-1583.02 1694.47,-1576.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed().</title>
<g id="a_node234"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn new_from_seed(seed: &amp;[u8], counter: u32) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::Seed((seed.to_vec(), counter)) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="3278,-1253 3154,-1253 3154,-1217 3278,-1217 3278,-1253"/>
<text text-anchor="middle" x="3216" y="-1231.3" font-family="Helvetica,sans-Serif" font-size="14.00">new_from_seed</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed().</title>
<path fill="none" stroke="gray" d="M3118.09,-1246.03C3125.8,-1245.15 3134.65,-1244.15 3143.78,-1243.11"/>
<polygon fill="gray" stroke="gray" points="3144.24,-1246.58 3153.78,-1241.97 3143.44,-1239.62 3144.24,-1246.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Seed# -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Seed#</title>
<g id="a_node231"><a xlink:title="impl MessageKeyGenerator &#160;&#160;&#160;&#160;&#160;Seed((Vec&lt;u8&gt;, u32)), } &#160;{ &#160;&#160;&#160;&#160;pub(crate) fn new_from_seed(seed: &amp;[u8], counter: u32) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::Seed((seed.to_vec(), counter)) &#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;pub(crate) fn gener...">
<polygon fill="lightblue" stroke="black" points="3390,-1172 3336,-1172 3336,-1136 3390,-1136 3390,-1172"/>
<text text-anchor="middle" x="3363" y="-1150.3" font-family="Helvetica,sans-Serif" font-size="14.00">Seed</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/tests/test_chain_key_derivation(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/tests/test_chain_key_derivation().</title>
<g id="a_node232"><a xlink:title=" &#160;&#160;&#160;fn test_chain_key_derivation() &#45;&gt; Result&lt;()&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let seed = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0x8au8, 0xb7, 0x2d, 0x6f, 0x4c, 0xc5, 0xac, 0x0d, 0x38, 0x7e, 0xaf, 0x46, 0x33, 0x78, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xdd, 0xb2, 0x8e,...">
<polygon fill="lightblue" stroke="black" points="3028,-1267 2834,-1267 2834,-1231 3028,-1231 3028,-1267"/>
<text text-anchor="middle" x="2931" y="-1245.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/tests/test_chain_key_derivation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/tests/test_chain_key_derivation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().</title>
<path fill="none" stroke="gray" d="M3028.01,-1249C3036.98,-1249 3045.65,-1249 3053.51,-1249"/>
<polygon fill="gray" stroke="gray" points="3053.7,-1252.5 3063.7,-1249 3053.7,-1245.5 3053.7,-1252.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeys]derive_keys(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeys]derive_keys().</title>
<g id="a_node233"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn derive_keys(input_key_material: &amp;[u8], counter: u32) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut okm = [0; 80]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hkdf::Hkdf::&lt;sha2::Sha256&gt;::new(None, input_key_material) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expand(b...">
<polygon fill="lightblue" stroke="black" points="3412,-1280 3314,-1280 3314,-1244 3412,-1244 3412,-1280"/>
<text text-anchor="middle" x="3363" y="-1258.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_keys</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Keys# -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Keys#</title>
<path fill="none" stroke="gray" d="M3278.07,-1223.63C3294.27,-1220.61 3311.24,-1217.45 3325.65,-1214.77"/>
<polygon fill="gray" stroke="gray" points="3326.45,-1218.18 3335.64,-1212.91 3325.17,-1211.3 3326.45,-1218.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Seed# -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Seed#</title>
<path fill="none" stroke="gray" d="M3249.54,-1216.82C3272.54,-1203.97 3303.34,-1186.77 3326.89,-1173.61"/>
<polygon fill="gray" stroke="gray" points="3328.83,-1176.54 3335.85,-1168.61 3325.41,-1170.43 3328.83,-1176.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeys]derive_keys(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeys]derive_keys().</title>
<path fill="none" stroke="gray" d="M3278.07,-1246.37C3286.64,-1247.97 3295.43,-1249.6 3303.93,-1251.19"/>
<polygon fill="gray" stroke="gray" points="3303.29,-1254.63 3313.77,-1253.02 3304.58,-1247.75 3303.29,-1254.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb().</title>
<g id="a_node236"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; std::result::Result&lt;Self, &amp;&#39;static str&gt; &#160;&#160;&#160;&#160;&#160;pub(crate) fn from_pb( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pb: session_structure::chain::MessageKey, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(if pb.seed.is_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::Keys(MessageKeys {...">
<polygon fill="lightblue" stroke="black" points="3253,-1172 3179,-1172 3179,-1136 3253,-1136 3253,-1172"/>
<text text-anchor="middle" x="3216" y="-1150.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_pb</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Keys# -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Keys#</title>
<path fill="none" stroke="gray" d="M3253.22,-1167.49C3275.57,-1175.81 3304.14,-1186.45 3326.38,-1194.74"/>
<polygon fill="gray" stroke="gray" points="3325.21,-1198.03 3335.81,-1198.24 3327.66,-1191.47 3325.21,-1198.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Seed# -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Seed#</title>
<path fill="none" stroke="gray" d="M3253.22,-1154C3275.37,-1154 3303.63,-1154 3325.78,-1154"/>
<polygon fill="gray" stroke="gray" points="3325.81,-1157.5 3335.81,-1154 3325.81,-1150.5 3325.81,-1157.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]new(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]new().</title>
<g id="a_node238"><a xlink:title=" &#160;&#160;&#160;pub fn new(id: PreKeyId, key: &amp;KeyPair) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = key.public_key.serialize().to_vec(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let private_key = key.private_key.serialize().to_vec(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;...">
<polygon fill="lightblue" stroke="black" points="1655,-1186 1601,-1186 1601,-1150 1655,-1150 1655,-1186"/>
<text text-anchor="middle" x="1628" y="-1164.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState][`From&lt;SessionStructure&gt;`]from(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState][`From&lt;SessionStructure&gt;`]from().</title>
<g id="a_node239"><a xlink:title=" &#160;&#160;&#160;fn from(value: SessionStructure) &#45;&gt; SessionState &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SessionState::from_session_structure(value) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1655,-376 1601,-376 1601,-340 1655,-340 1655,-376"/>
<text text-anchor="middle" x="1628" y="-354.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]from_session_structure(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]from_session_structure().</title>
<g id="a_node243"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn from_session_structure(session: SessionStructure) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { session } &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2259,-460 2082,-460 2082,-424 2259,-424 2259,-460"/>
<text text-anchor="middle" x="2170.5" y="-438.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_session_structure</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState][`From&lt;SessionStructure&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]from_session_structure(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState][`From&lt;SessionStructure&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]from_session_structure().</title>
<path fill="none" stroke="gray" d="M1655.26,-354.77C1715.22,-348.5 1865.79,-339.01 1979,-385 1998.3,-392.84 1996.1,-406.24 2015,-415 2032.57,-423.14 2052.3,-428.84 2071.63,-432.83"/>
<polygon fill="gray" stroke="gray" points="2071.21,-436.31 2081.69,-434.76 2072.53,-429.44 2071.21,-436.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().</title>
<g id="a_node240"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn deserialize(data: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: Sized, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::from_storage( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SignedPreKeyRecordStructure::decode(data) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| ...">
<polygon fill="lightblue" stroke="black" points="2216,-1039 2125,-1039 2125,-1003 2216,-1003 2216,-1039"/>
<text text-anchor="middle" x="2170.5" y="-1017.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M2216.08,-1015.06C2251.6,-1013.09 2299.61,-1017.18 2326,-1048 2361.33,-1089.26 2356.37,-2948.98 2362,-3003 2385.69,-3230.38 2450.19,-3499.47 2471.82,-3585.84"/>
<polygon fill="gray" stroke="gray" points="2468.46,-3586.83 2474.3,-3595.67 2475.25,-3585.12 2468.46,-3586.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().</title>
<path fill="none" stroke="gray" d="M2124.92,-1014.61C2082.65,-1011.63 2022.55,-1015.65 1997,-1057 1979.91,-1084.66 1979.91,-3370.34 1997,-3398 2016.19,-3429.05 2054.51,-3440.19 2090.27,-3443.18"/>
<polygon fill="gray" stroke="gray" points="2090.06,-3446.67 2100.26,-3443.82 2090.51,-3439.69 2090.06,-3446.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/KeyPairSerde#from_public_and_private(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/KeyPairSerde#from_public_and_private().</title>
<g id="a_node245"><a xlink:title="impl KeySerde for PublicKey &#160;&#160;&#160;&#160;&#160;fn from_public_and_private(public_key: &amp;[u8], private_key: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: Sized; &#160;&#160;&#160;&#160;fn get_public(&amp;self) &#45;&gt; &amp;Self::PublicKey; &#160;&#160;&#160;&#160;fn g...">
<polygon fill="lightblue" stroke="black" points="2573,-1039 2387,-1039 2387,-1003 2573,-1003 2573,-1039"/>
<text text-anchor="middle" x="2480" y="-1017.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_public_and_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/KeyPairSerde#from_public_and_private(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/KeyPairSerde#from_public_and_private().</title>
<path fill="none" stroke="gray" d="M2216.21,-1021C2258.16,-1021 2322.42,-1021 2376.89,-1021"/>
<polygon fill="gray" stroke="gray" points="2376.94,-1024.5 2386.94,-1021 2376.94,-1017.5 2376.94,-1024.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/KeySerde#deserialize(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/KeySerde#deserialize().</title>
<g id="a_node246"><a xlink:title="pub trait KeyPairSerde &#160;&#160;&#160;&#160;&#160;fn deserialize&lt;T: AsRef&lt;[u8]&gt;&gt;(bytes: T) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: Sized; } &#160;{ &#160;&#160;&#160;&#160;type PublicKey: KeySerde; &#160;&#160;&#160;&#160;type PrivateKey: KeySerde; &#160;&#160;&#160;&#160;fn from_public...">
<polygon fill="lightblue" stroke="black" points="2525.5,-985 2434.5,-985 2434.5,-949 2525.5,-949 2525.5,-985"/>
<text text-anchor="middle" x="2480" y="-963.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/KeySerde#deserialize(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/KeySerde#deserialize().</title>
<path fill="none" stroke="gray" d="M2216.21,-1013.15C2271.32,-1003.47 2364.95,-987.03 2424.29,-976.61"/>
<polygon fill="gray" stroke="gray" points="2424.99,-980.04 2434.23,-974.86 2423.78,-973.14 2424.99,-980.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#from_storage(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#from_storage().</title>
<g id="a_node266"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn from_storage(storage: SignedPreKeyRecordStructure) &#45;&gt; Self; &#160;&#160;&#160;&#160;&#160;fn new(id: Self::Id, timestamp: Timestamp, key_pair: &amp;Self::KeyPair, signature: &amp;[u8]) &#45;&gt; Self &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: Size...">
<polygon fill="lightblue" stroke="black" points="2534,-1093 2426,-1093 2426,-1057 2534,-1057 2534,-1093"/>
<text text-anchor="middle" x="2480" y="-1071.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_storage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#from_storage(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#from_storage().</title>
<path fill="none" stroke="gray" d="M2216.13,-1028.78C2246.99,-1034.16 2288.99,-1041.5 2326,-1048 2355.58,-1053.19 2388.36,-1058.98 2415.97,-1063.85"/>
<polygon fill="gray" stroke="gray" points="2415.44,-1067.31 2425.9,-1065.61 2416.66,-1060.42 2415.44,-1067.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().</title>
<g id="a_node241"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;registration_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pre_key: Option&lt;(PreKeyId, PublicKey)&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signed_pre_key_id: SignedPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sig...">
<polygon fill="lightblue" stroke="black" points="2197.5,-514 2143.5,-514 2143.5,-478 2197.5,-478 2197.5,-514"/>
<text text-anchor="middle" x="2170.5" y="-492.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[SignedPreKey]new(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[SignedPreKey]new().</title>
<g id="a_node248"><a xlink:title=" &#160;&#160;&#160;fn new(id: SignedPreKeyId, public_key: PublicKey, signature: Vec&lt;u8&gt;) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2507,-541 2453,-541 2453,-505 2507,-505 2507,-541"/>
<text text-anchor="middle" x="2480" y="-519.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[SignedPreKey]new(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[SignedPreKey]new().</title>
<path fill="none" stroke="gray" d="M2197.72,-498.3C2252.64,-503.12 2379.85,-514.29 2442.63,-519.81"/>
<polygon fill="gray" stroke="gray" points="2442.58,-523.32 2452.85,-520.7 2443.19,-516.34 2442.58,-523.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[KyberPreKey]new(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[KyberPreKey]new().</title>
<g id="a_node255"><a xlink:title=" &#160;&#160;&#160;fn new(id: KyberPreKeyId, public_key: kem::PublicKey, signature: Vec&lt;u8&gt;) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2507,-487 2453,-487 2453,-451 2507,-451 2507,-487"/>
<text text-anchor="middle" x="2480" y="-465.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[KyberPreKey]new(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[KyberPreKey]new().</title>
<path fill="none" stroke="gray" d="M2197.72,-493.7C2252.64,-488.88 2379.85,-477.71 2442.63,-472.19"/>
<polygon fill="gray" stroke="gray" points="2443.19,-475.66 2452.85,-471.3 2442.58,-468.68 2443.19,-475.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node242"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; &#160;&#160;&#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = kem::KeyPair::gener...">
<polygon fill="lightblue" stroke="black" points="1667.5,-700 1588.5,-700 1588.5,-664 1667.5,-664 1667.5,-700"/>
<text text-anchor="middle" x="1628" y="-678.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]generate(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]generate().</title>
<path fill="none" stroke="gray" d="M1667.57,-679C1749.35,-673.56 1936.22,-666.23 1979,-709 2052.3,-782.28 1943.24,-1099.22 2015,-1174 2111.38,-1274.43 2230.87,-1109.38 2326,-1211 2430.18,-1322.28 2264,-1779.24 2362,-1896 2378.42,-1915.56 2405.91,-1922.58 2430.13,-1924.59"/>
<polygon fill="gray" stroke="gray" points="2430.08,-1928.09 2440.26,-1925.16 2430.47,-1921.1 2430.08,-1928.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().</title>
<path fill="none" stroke="gray" d="M1667.78,-678.8C1749.98,-672.95 1937.61,-664.89 1979,-709 2029.62,-762.94 1973.99,-3310.43 2015,-3372 2032.25,-3397.91 2061.88,-3413.85 2090.6,-3423.64"/>
<polygon fill="gray" stroke="gray" points="2089.7,-3427.03 2100.29,-3426.73 2091.82,-3420.36 2089.7,-3427.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new().</title>
<g id="a_node250"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new(id: Self::Id, timestamp: Timestamp, key_pair: &amp;Self::KeyPair, signature: &amp;[u8]) &#45;&gt; Self &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: Sized, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let timestamp = timestamp.epoch_millis(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p...">
<polygon fill="lightblue" stroke="black" points="2197.5,-1093 2143.5,-1093 2143.5,-1057 2197.5,-1057 2197.5,-1093"/>
<text text-anchor="middle" x="2170.5" y="-1071.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new().</title>
<path fill="none" stroke="gray" d="M1667.78,-679.08C1749.55,-673.81 1935.67,-666.9 1979,-709 2033.33,-761.79 1963.26,-992.66 2015,-1048 2044.79,-1079.86 2097.79,-1082.42 2133.29,-1079.87"/>
<polygon fill="gray" stroke="gray" points="2133.6,-1083.36 2143.25,-1078.99 2132.99,-1076.39 2133.6,-1083.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::Key&lt;kem::Public&gt;`][KeySerde]deserialize(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::Key&lt;kem::Public&gt;`][KeySerde]deserialize().</title>
<g id="a_node244"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn deserialize&lt;T: AsRef&lt;[u8]&gt;&gt;(bytes: T) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: Sized, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::deserialize(bytes.as_ref()) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1673.5,-106 1582.5,-106 1582.5,-70 1673.5,-70 1673.5,-106"/>
<text text-anchor="middle" x="1628" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::Key&lt;kem::Public&gt;`][KeySerde]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::Key&lt;kem::Public&gt;`][KeySerde]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().</title>
<path fill="none" stroke="gray" d="M1582.18,-84.41C1497.23,-78.69 1317.6,-72.14 1277,-115 1216.73,-178.62 1291.07,-1620.08 1241,-1692 1205.55,-1742.91 1134.07,-1762.97 1083.94,-1770.87"/>
<polygon fill="gray" stroke="gray" points="1083.3,-1767.43 1073.91,-1772.34 1084.31,-1774.35 1083.3,-1767.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle][`TryFrom&lt;PreKeyBundleContent&gt;`]try_from(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle][`TryFrom&lt;PreKeyBundleContent&gt;`]try_from().</title>
<g id="a_node247"><a xlink:title=" &#160;&#160;&#160;fn try_from(content: PreKeyBundleContent) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bundle = PreKeyBundle::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;content.registration_id.ok_or_else(|| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SignalProtocolError::In...">
<polygon fill="lightblue" stroke="black" points="1665.5,-484 1590.5,-484 1590.5,-448 1665.5,-448 1665.5,-484"/>
<text text-anchor="middle" x="1628" y="-462.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle][`TryFrom&lt;PreKeyBundleContent&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument# -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle][`TryFrom&lt;PreKeyBundleContent&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidArgument#</title>
<path fill="none" stroke="gray" d="M1665.54,-463.04C1746.39,-457.35 1936.63,-449.09 1979,-493 2046.18,-562.62 1950.52,-1290.87 2015,-1363 2108.22,-1467.26 2233.67,-1305.95 2326,-1411 2380.08,-1472.53 2325.12,-2811.86 2362,-2885 2376.93,-2914.6 2406.45,-2937.45 2432.11,-2952.85"/>
<polygon fill="gray" stroke="gray" points="2430.58,-2956.01 2440.99,-2957.99 2434.09,-2949.95 2430.58,-2956.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle][`TryFrom&lt;PreKeyBundleContent&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle][`TryFrom&lt;PreKeyBundleContent&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().</title>
<path fill="none" stroke="gray" d="M1665.73,-468.04C1764.53,-473.52 2035.16,-488.54 2133.33,-493.99"/>
<polygon fill="gray" stroke="gray" points="2133.17,-497.49 2143.35,-494.55 2133.56,-490.5 2133.17,-497.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord][GenericSignedPreKey]from_storage(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord][GenericSignedPreKey]from_storage().</title>
<g id="a_node249"><a xlink:title=" &#160;&#160;&#160;fn from_storage(storage: SignedPreKeyRecordStructure) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signed_pre_key: storage, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1682,-916 1574,-916 1574,-880 1682,-880 1682,-916"/>
<text text-anchor="middle" x="1628" y="-894.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_storage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#from_storage(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#from_storage().</title>
<path fill="none" stroke="gray" d="M2197.72,-1075C2245.65,-1075 2348.68,-1075 2415.84,-1075"/>
<polygon fill="gray" stroke="gray" points="2415.89,-1078.5 2425.89,-1075 2415.89,-1071.5 2415.89,-1078.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionStructure][`From&lt;SessionState&gt;`]from(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionStructure][`From&lt;SessionState&gt;`]from().</title>
<g id="a_node251"><a xlink:title=" &#160;&#160;&#160;fn from(value: SessionState) &#45;&gt; SessionStructure &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value.session &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1655,-862 1601,-862 1601,-826 1655,-826 1655,-862"/>
<text text-anchor="middle" x="1628" y="-840.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord][GenericSignedPreKey]from_storage(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord][GenericSignedPreKey]from_storage().</title>
<g id="a_node252"><a xlink:title=" &#160;&#160;&#160;fn from_storage(storage: SignedPreKeyRecordStructure) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signed_pre_key: storage, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1682,-808 1574,-808 1574,-772 1682,-772 1682,-808"/>
<text text-anchor="middle" x="1628" y="-786.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_storage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord][GenericSignedPreKey]from_storage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord][GenericSignedPreKey]from_storage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().</title>
<path fill="none" stroke="gray" d="M1573.75,-785.93C1485.98,-780.51 1316.67,-775.88 1277,-817 1209.44,-887.03 1297.33,-1612.66 1241,-1692 1205.09,-1742.59 1133.71,-1762.72 1083.73,-1770.72"/>
<polygon fill="gray" stroke="gray" points="1083.1,-1767.28 1073.73,-1772.21 1084.13,-1774.2 1083.1,-1767.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private().</title>
<g id="a_node253"><a xlink:title=" &#160;&#160;&#160;fn from_public_and_private(public_key: &amp;[u8], private_key: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(KeyPair::from_public_and_private(public_key, private_key)?) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1721,-754 1535,-754 1535,-718 1721,-718 1721,-754"/>
<text text-anchor="middle" x="1628" y="-732.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_public_and_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]decode().</title>
<path fill="none" stroke="gray" d="M1655.06,-301.8C1728.49,-296.24 1934.64,-285.09 1979,-331 2044.15,-398.42 1967.31,-1093.29 2015,-1174 2097.28,-1313.25 2244.9,-1223.05 2326,-1363 2404.13,-1497.83 2292.48,-2625.54 2362,-2765 2377.96,-2797.03 2410.68,-2821.54 2437.47,-2837.33"/>
<polygon fill="gray" stroke="gray" points="2435.87,-2840.45 2446.3,-2842.36 2439.34,-2834.37 2435.87,-2840.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().</title>
<path fill="none" stroke="gray" d="M1655.08,-304C1759.05,-304 2153.98,-304 2479,-304 2479,-304 2479,-304 2717,-304 2919.39,-304 3058.67,-1063.43 3085.34,-1220.7"/>
<polygon fill="gray" stroke="gray" points="3081.96,-1221.68 3087.07,-1230.97 3088.86,-1220.52 3081.96,-1221.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]new(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]new().</title>
<path fill="none" stroke="gray" d="M1655.35,-305.95C1713.68,-310.28 1858.12,-321.11 1979,-331 2257.57,-353.79 2385.75,-260.15 2598,-442 2821.16,-633.2 2905.35,-1007.98 2925.13,-1113.04"/>
<polygon fill="gray" stroke="gray" points="2921.69,-1113.69 2926.94,-1122.89 2928.58,-1112.42 2921.69,-1113.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb().</title>
<path fill="none" stroke="gray" d="M1655.07,-301.98C1758.96,-294.13 2153.65,-266 2479,-266 2479,-266 2479,-266 2932,-266 3116.89,-266 3197.2,-973.66 3212.31,-1125.52"/>
<polygon fill="gray" stroke="gray" points="3208.86,-1126.25 3213.32,-1135.86 3215.83,-1125.57 3208.86,-1126.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[`UnacknowledgedPreKeyMessageItems&lt;&#39;a&gt;`]new(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[`UnacknowledgedPreKeyMessageItems&lt;&#39;a&gt;`]new().</title>
<g id="a_node265"><a xlink:title=" &#160;&#160;&#160;) &#45;&gt; Self &#160;&#160;&#160;&#160;&#160;fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pre_key_id: Option&lt;PreKeyId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signed_pre_key_id: SignedPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;base_key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pending_kyber_pre_key: Option&lt;&amp;&#39;a session_structure::Pe...">
<polygon fill="lightblue" stroke="black" points="2197.5,-406 2143.5,-406 2143.5,-370 2197.5,-370 2197.5,-406"/>
<text text-anchor="middle" x="2170.5" y="-384.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[`UnacknowledgedPreKeyMessageItems&lt;&#39;a&gt;`]new(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[`UnacknowledgedPreKeyMessageItems&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="gray" d="M1655.43,-301.44C1715.14,-296.64 1864.17,-290.12 1979,-331 1997.35,-337.53 1997.1,-348.31 2015,-356 2053.44,-372.51 2101.01,-380.71 2133.13,-384.64"/>
<polygon fill="gray" stroke="gray" points="2133.06,-388.15 2143.39,-385.81 2133.86,-381.2 2133.06,-388.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/zip3(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/zip3().</title>
<g id="a_node256"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn zip3&lt;T, U, V&gt;(x: Option&lt;T&gt;, y: Option&lt;U&gt;, z: Option&lt;V&gt;) &#45;&gt; Option&lt;(T, U, V)&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x.zip(y).zip(z).map(|((x, y), z)| (x, y, z)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1655,-646 1601,-646 1601,-610 1655,-610 1655,-646"/>
<text text-anchor="middle" x="1628" y="-624.3" font-family="Helvetica,sans-Serif" font-size="14.00">zip3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PublicKey][KeySerde]deserialize(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PublicKey][KeySerde]deserialize().</title>
<g id="a_node257"><a xlink:title=" &#160;&#160;&#160;fn deserialize&lt;T: AsRef&lt;[u8]&gt;&gt;(bytes: T) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::deserialize(bytes.as_ref())?) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1673.5,-592 1582.5,-592 1582.5,-556 1673.5,-556 1673.5,-592"/>
<text text-anchor="middle" x="1628" y="-570.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::KeyPair`][KeyPairSerde]from_public_and_private(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::KeyPair`][KeyPairSerde]from_public_and_private().</title>
<g id="a_node258"><a xlink:title=" &#160;&#160;&#160;fn from_public_and_private(public_key: &amp;[u8], private_key: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kem::KeyPair::from_public_and_private(public_key, private_key) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1721,-52 1535,-52 1535,-16 1721,-16 1721,-52"/>
<text text-anchor="middle" x="1628" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_public_and_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::KeyPair`][KeyPairSerde]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::KeyPair`][KeyPairSerde]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private().</title>
<path fill="none" stroke="gray" d="M1534.73,-17.96C1459.2,-9.92 1352.82,-10.76 1277,-61 612.53,-501.3 659.68,-884.15 453,-1654 431.02,-1735.86 474.26,-2353.51 417,-2416 392.61,-2442.62 355.43,-2452.15 319.74,-2454.05"/>
<polygon fill="gray" stroke="gray" points="319.6,-2450.56 309.73,-2454.4 319.84,-2457.55 319.6,-2450.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SignalProtocolError][`From&lt;InvalidSessionError&gt;`]from(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SignalProtocolError][`From&lt;InvalidSessionError&gt;`]from().</title>
<g id="a_node259"><a xlink:title=" &#160;&#160;&#160;fn from(e: InvalidSessionError) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::InvalidSessionStructure(e.0) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1655,-1078 1601,-1078 1601,-1042 1655,-1042 1655,-1078"/>
<text text-anchor="middle" x="1628" y="-1056.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SignalProtocolError][`From&lt;InvalidSessionError&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure# -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SignalProtocolError][`From&lt;InvalidSessionError&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure#</title>
<path fill="none" stroke="gray" d="M1655.45,-1052.96C1719.17,-1037.71 1883,-1008.96 1979,-1087 2023.53,-1123.2 1982.35,-1163.81 2015,-1211 2113.26,-1353.04 2243.97,-1292.01 2326,-1444 2387.33,-1557.64 2303.19,-1909.03 2362,-2024 2378.02,-2055.31 2409.28,-2080.13 2435.46,-2096.68"/>
<polygon fill="gray" stroke="gray" points="2433.75,-2099.74 2444.11,-2101.97 2437.41,-2093.77 2433.75,-2099.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize().</title>
<g id="a_node260"><a xlink:title=" &#160;&#160;&#160;fn deserialize&lt;T: AsRef&lt;[u8]&gt;&gt;(bytes: T) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::deserialize(bytes.as_ref())?) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1673.5,-430 1582.5,-430 1582.5,-394 1673.5,-394 1673.5,-430"/>
<text text-anchor="middle" x="1628" y="-408.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]deserialize(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]deserialize().</title>
<g id="a_node262"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(data: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pre_key: PreKeyRecordStructure::decode(data) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::InvalidProtobufEncod...">
<polygon fill="lightblue" stroke="black" points="1673.5,-970 1582.5,-970 1582.5,-934 1673.5,-934 1673.5,-970"/>
<text text-anchor="middle" x="1628" y="-948.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding# -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#</title>
<path fill="none" stroke="gray" d="M1673.59,-948.64C1758.13,-943.31 1937.08,-937.42 1979,-979 2045.82,-1045.28 1950.21,-1332.73 2015,-1401 2111.05,-1502.21 2233.13,-1339.86 2326,-1444 2354.83,-1476.33 2357.41,-2959.93 2362,-3003 2386.22,-3230.33 2450.38,-3499.45 2471.87,-3585.83"/>
<polygon fill="gray" stroke="gray" points="2468.51,-3586.82 2474.33,-3595.67 2475.3,-3585.12 2468.51,-3586.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundleContent][`From&lt;PreKeyBundle&gt;`]from(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/bundle/impl#[PreKeyBundleContent][`From&lt;PreKeyBundle&gt;`]from().</title>
<g id="a_node263"><a xlink:title=" &#160;&#160;&#160;fn from(bundle: PreKeyBundle) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;registration_id: Some(bundle.registration_id), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;device_id: Some(bundle.device_id), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pre_key_id: bundle.pre...">
<polygon fill="lightblue" stroke="black" points="1655,-268 1601,-268 1601,-232 1655,-232 1655,-268"/>
<text text-anchor="middle" x="1628" y="-246.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionStructure][`From&lt;&amp;SessionState&gt;`]from(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionStructure][`From&lt;&amp;SessionState&gt;`]from().</title>
<g id="a_node264"><a xlink:title=" &#160;&#160;&#160;fn from(value: &amp;SessionState) &#45;&gt; SessionStructure &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value.session.clone() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1655,-214 1601,-214 1601,-178 1655,-178 1655,-214"/>
<text text-anchor="middle" x="1628" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::Key&lt;kem::Secret&gt;`][KeySerde]deserialize(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::Key&lt;kem::Secret&gt;`][KeySerde]deserialize().</title>
<g id="a_node268"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn deserialize&lt;T: AsRef&lt;[u8]&gt;&gt;(bytes: T) &#45;&gt; Result&lt;Self&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: Sized, { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::deserialize(bytes.as_ref()) &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1673.5,-538 1582.5,-538 1582.5,-502 1673.5,-502 1673.5,-538"/>
<text text-anchor="middle" x="1628" y="-516.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::Key&lt;kem::Secret&gt;`][KeySerde]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[`kem::Key&lt;kem::Secret&gt;`][KeySerde]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 kem/impl#[`Key&lt;T&gt;`]deserialize().</title>
<path fill="none" stroke="gray" d="M1582.21,-516.44C1497.32,-510.77 1317.79,-504.31 1277,-547 1189.07,-639.03 1314.18,-1587.85 1241,-1692 1205.33,-1742.76 1133.9,-1762.85 1083.84,-1770.8"/>
<polygon fill="gray" stroke="gray" points="1083.21,-1767.36 1073.82,-1772.28 1084.23,-1774.28 1083.21,-1767.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]deserialize(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]deserialize().</title>
<g id="a_node269"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(bytes: &amp;[u8]) &#45;&gt; Result&lt;Self, SignalProtocolError&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record = RecordStructure::decode(bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| InvalidSessionError(&#39; failed to decode session...">
<polygon fill="lightblue" stroke="black" points="1673.5,-160 1582.5,-160 1582.5,-124 1673.5,-124 1673.5,-160"/>
<text text-anchor="middle" x="1628" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState# -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionRecord]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidState#</title>
<path fill="none" stroke="gray" d="M1582.16,-138.16C1490.85,-131.75 1292.16,-124.34 1259,-178 1245.02,-200.61 1245.02,-2069.39 1259,-2092 1290.59,-2143.12 1471.91,-2141.52 1568.1,-2136.88"/>
<polygon fill="gray" stroke="gray" points="1568.45,-2140.37 1578.26,-2136.37 1568.09,-2133.38 1568.45,-2140.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore][Default]default(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore][Default]default().</title>
<g id="a_node270"><a xlink:title=" &#160;&#160;&#160;fn default() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::new() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1660.5,-5262 1595.5,-5262 1595.5,-5226 1660.5,-5226 1660.5,-5262"/>
<text text-anchor="middle" x="1628" y="-5240.3" font-family="Helvetica,sans-Serif" font-size="14.00">default</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore]new(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore]new().</title>
<g id="a_node280"><a xlink:title=" &#160;&#160;&#160;pub fn new() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keys: HashMap::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2197.5,-5262 2143.5,-5262 2143.5,-5226 2197.5,-5226 2197.5,-5262"/>
<text text-anchor="middle" x="2170.5" y="-5240.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore]new(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore]new().</title>
<path fill="none" stroke="gray" d="M1660.79,-5244C1755.11,-5244 2033,-5244 2133.07,-5244"/>
<polygon fill="gray" stroke="gray" points="2133.28,-5247.5 2143.28,-5244 2133.28,-5240.5 2133.28,-5247.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore]new(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore]new().</title>
<g id="a_node271"><a xlink:title=" &#160;&#160;&#160;pub fn new() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signed_pre_keys: HashMap::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2197.5,-5046 2143.5,-5046 2143.5,-5010 2197.5,-5010 2197.5,-5046"/>
<text text-anchor="middle" x="2170.5" y="-5024.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore][Default]default(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore][Default]default().</title>
<g id="a_node272"><a xlink:title=" &#160;&#160;&#160;fn default() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::new() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1660.5,-5208 1595.5,-5208 1595.5,-5172 1660.5,-5172 1660.5,-5208"/>
<text text-anchor="middle" x="1628" y="-5186.3" font-family="Helvetica,sans-Serif" font-size="14.00">default</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidKyberPreKeyId# -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidKyberPreKeyId#</title>
<path fill="none" stroke="gray" d="M1595.23,-5191.79C1428.66,-5200.61 656.08,-5234.72 453,-5121 325.98,-5049.87 252.07,-4878.17 227.11,-4810.79"/>
<polygon fill="gray" stroke="gray" points="230.36,-4809.48 223.65,-4801.27 223.78,-4811.86 230.36,-4809.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore]new(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore]new().</title>
<g id="a_node275"><a xlink:title=" &#160;&#160;&#160;pub fn new() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_pre_keys: HashMap::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2197.5,-5208 2143.5,-5208 2143.5,-5172 2197.5,-5172 2197.5,-5208"/>
<text text-anchor="middle" x="2170.5" y="-5186.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore]new(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore]new().</title>
<path fill="none" stroke="gray" d="M1660.79,-5190C1755.11,-5190 2033,-5190 2133.07,-5190"/>
<polygon fill="gray" stroke="gray" points="2133.28,-5193.5 2143.28,-5190 2133.28,-5186.5 2133.28,-5193.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore][Default]default(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore][Default]default().</title>
<g id="a_node273"><a xlink:title=" &#160;&#160;&#160;fn default() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::new() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1660.5,-4992 1595.5,-4992 1595.5,-4956 1660.5,-4956 1660.5,-4992"/>
<text text-anchor="middle" x="1628" y="-4970.3" font-family="Helvetica,sans-Serif" font-size="14.00">default</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new().</title>
<g id="a_node283"><a xlink:title=" &#160;&#160;&#160;pub fn new() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sessions: HashMap::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2197.5,-4992 2143.5,-4992 2143.5,-4956 2197.5,-4956 2197.5,-4992"/>
<text text-anchor="middle" x="2170.5" y="-4970.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new().</title>
<path fill="none" stroke="gray" d="M1660.79,-4974C1755.11,-4974 2033,-4974 2133.07,-4974"/>
<polygon fill="gray" stroke="gray" points="2133.28,-4977.5 2143.28,-4974 2133.28,-4970.5 2133.28,-4977.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore][Default]default(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore][Default]default().</title>
<g id="a_node274"><a xlink:title=" &#160;&#160;&#160;fn default() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::new() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1660.5,-5154 1595.5,-5154 1595.5,-5118 1660.5,-5118 1660.5,-5154"/>
<text text-anchor="middle" x="1628" y="-5132.3" font-family="Helvetica,sans-Serif" font-size="14.00">default</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidPreKeyId# -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidPreKeyId#</title>
<path fill="none" stroke="gray" d="M1595.29,-5135.02C1423.94,-5128.99 610.67,-5091.28 453,-4914 373.72,-4824.86 501.36,-4732.36 417,-4648 384.05,-4615.05 331.32,-4609.1 288.34,-4610.96"/>
<polygon fill="gray" stroke="gray" points="287.99,-4607.47 278.21,-4611.55 288.39,-4614.46 287.99,-4607.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore]new(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore]new().</title>
<g id="a_node282"><a xlink:title=" &#160;&#160;&#160;pub fn new() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pre_keys: HashMap::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2197.5,-5154 2143.5,-5154 2143.5,-5118 2197.5,-5118 2197.5,-5154"/>
<text text-anchor="middle" x="2170.5" y="-5132.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore]new(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore]new().</title>
<path fill="none" stroke="gray" d="M1660.79,-5136C1755.11,-5136 2033,-5136 2133.07,-5136"/>
<polygon fill="gray" stroke="gray" points="2133.28,-5139.5 2143.28,-5136 2133.28,-5132.5 2133.28,-5139.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().</title>
<g id="a_node277"><a xlink:title=" &#160;&#160;&#160;pub fn new(key_pair: IdentityKeyPair, registration_id: u32) &#45;&gt; Result&lt;Self&gt; &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;session_store: InMemSessionStore::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pre_key_store: InMemPreKeyStore::n...">
<polygon fill="lightblue" stroke="black" points="1655,-5100 1601,-5100 1601,-5064 1655,-5064 1655,-5100"/>
<text text-anchor="middle" x="1628" y="-5078.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore]new(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore]new().</title>
<path fill="none" stroke="gray" d="M1655.4,-5080.54C1713.82,-5077.18 1858.44,-5068.18 1979,-5055 2032.87,-5049.11 2094.98,-5039.84 2133.24,-5033.84"/>
<polygon fill="gray" stroke="gray" points="2134.04,-5037.26 2143.37,-5032.24 2132.95,-5030.34 2134.04,-5037.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore]new(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore]new().</title>
<path fill="none" stroke="gray" d="M1655.43,-5076.71C1717.04,-5065.84 1873.04,-5046.93 1979,-5109 2003.89,-5123.58 1990.84,-5147.24 2015,-5163 2050.5,-5186.15 2099.95,-5191.13 2133.26,-5191.48"/>
<polygon fill="gray" stroke="gray" points="2133.48,-5194.98 2143.47,-5191.45 2133.46,-5187.98 2133.48,-5194.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemIdentityKeyStore]new(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemIdentityKeyStore]new().</title>
<g id="a_node278"><a xlink:title=" &#160;&#160;&#160;pub fn new(key_pair: IdentityKeyPair, registration_id: u32) &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;registration_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;known_keys: HashMap::new(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="2197.5,-5100 2143.5,-5100 2143.5,-5064 2197.5,-5064 2197.5,-5100"/>
<text text-anchor="middle" x="2170.5" y="-5078.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemIdentityKeyStore]new(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemIdentityKeyStore]new().</title>
<path fill="none" stroke="gray" d="M1655.07,-5082C1743.36,-5082 2031.25,-5082 2133.26,-5082"/>
<polygon fill="gray" stroke="gray" points="2133.38,-5085.5 2143.38,-5082 2133.38,-5078.5 2133.38,-5085.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore]new(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore]new().</title>
<path fill="none" stroke="gray" d="M1655.26,-5075.2C1718.55,-5060.49 1881.49,-5032.85 1979,-5109 2018.88,-5140.14 1976.66,-5183.98 2015,-5217 2047.63,-5245.1 2098.9,-5248.79 2133.33,-5247.5"/>
<polygon fill="gray" stroke="gray" points="2133.64,-5250.99 2143.44,-5246.96 2133.27,-5244 2133.64,-5250.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore]new(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore]new().</title>
<path fill="none" stroke="gray" d="M1655.4,-5083.46C1713.82,-5086.82 1858.44,-5095.82 1979,-5109 2032.87,-5114.89 2094.98,-5124.16 2133.24,-5130.16"/>
<polygon fill="gray" stroke="gray" points="2132.95,-5133.66 2143.37,-5131.76 2134.04,-5126.74 2132.95,-5133.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new().</title>
<path fill="none" stroke="gray" d="M1655.43,-5087.29C1717.04,-5098.16 1873.04,-5117.07 1979,-5055 2003.89,-5040.42 1990.84,-5016.76 2015,-5001 2050.5,-4977.85 2099.95,-4972.87 2133.26,-4972.52"/>
<polygon fill="gray" stroke="gray" points="2133.46,-4976.02 2143.47,-4972.55 2133.48,-4969.02 2133.46,-4976.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore][Default]default(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore][Default]default().</title>
<g id="a_node279"><a xlink:title=" &#160;&#160;&#160;fn default() &#45;&gt; Self &#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::new() &#160;&#160;&#160;&#160;}">
<polygon fill="lightblue" stroke="black" points="1660.5,-5046 1595.5,-5046 1595.5,-5010 1660.5,-5010 1660.5,-5046"/>
<text text-anchor="middle" x="1628" y="-5024.3" font-family="Helvetica,sans-Serif" font-size="14.00">default</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSignedPreKeyId# -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#InvalidSignedPreKeyId#</title>
<path fill="none" stroke="gray" d="M1595.06,-5026.46C1533.41,-5023.28 1393.78,-5015.08 1277,-5001 903.77,-4955.99 699.23,-5094.07 453,-4810 389.25,-4736.46 486.86,-4661.76 417,-4594 389.71,-4567.53 349.59,-4558.68 312.48,-4557.26"/>
<polygon fill="gray" stroke="gray" points="312.17,-4553.75 302.1,-4557.04 312.03,-4560.75 312.17,-4553.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore]new(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore][Default]default().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore]new().</title>
<path fill="none" stroke="gray" d="M1660.79,-5028C1755.11,-5028 2033,-5028 2133.07,-5028"/>
<polygon fill="gray" stroke="gray" points="2133.28,-5031.5 2143.28,-5028 2133.28,-5024.5 2133.28,-5031.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound# -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 error/SignalProtocolError#SessionNotFound#</title>
<path fill="none" stroke="gray" d="M2150.03,-4955.83C2117.28,-4926.26 2047.96,-4867.84 1979,-4836 1890.35,-4795.07 1779.62,-4772.44 1706.74,-4761.02"/>
<polygon fill="gray" stroke="gray" points="1707.12,-4757.54 1696.71,-4759.49 1706.06,-4764.46 1707.12,-4757.54"/>
</g>
</g>
</svg>
