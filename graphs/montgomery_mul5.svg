<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="2799pt" height="7547pt"
 viewBox="0.00 0.00 2799.00 7547.12" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 7543.12)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-7543.12 2795,-7543.12 2795,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="443.5,-6069.12 443.5,-6414.12 1614,-6414.12 1614,-6069.12 443.5,-6069.12"/>
<text text-anchor="middle" x="1028.75" y="-6398.92" font-family="Helvetica,sans-Serif" font-size="14.00">dalek_benchmarks.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1373.5,-4860.12 1373.5,-4935.12 1570.5,-4935.12 1570.5,-4860.12 1373.5,-4860.12"/>
<text text-anchor="middle" x="1472" y="-4919.92" font-family="Helvetica,sans-Serif" font-size="14.00">pippenger.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2206.5,-7294.12 2206.5,-7531.12 2783,-7531.12 2783,-7294.12 2206.5,-7294.12"/>
<text text-anchor="middle" x="2494.75" y="-7515.92" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="828,-4943.12 828,-5234.12 1586,-5234.12 1586,-4943.12 828,-4943.12"/>
<text text-anchor="middle" x="1207" y="-5218.92" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="844.5,-4404.12 844.5,-4587.12 1571,-4587.12 1571,-4404.12 844.5,-4404.12"/>
<text text-anchor="middle" x="1207.75" y="-4571.92" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1264,-6642.12 1264,-6825.12 1680,-6825.12 1680,-6642.12 1264,-6642.12"/>
<text text-anchor="middle" x="1472" y="-6809.92" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1322,-6833.12 1322,-7286.12 2596.5,-7286.12 2596.5,-6833.12 1322,-6833.12"/>
<text text-anchor="middle" x="1959.25" y="-7270.92" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="989,-5986.12 989,-6061.12 1083,-6061.12 1083,-5986.12 989,-5986.12"/>
<text text-anchor="middle" x="1036" y="-6045.92" font-family="Helvetica,sans-Serif" font-size="14.00">hazmat.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="992,-5903.12 992,-5978.12 1519,-5978.12 1519,-5903.12 992,-5903.12"/>
<text text-anchor="middle" x="1255.5" y="-5962.92" font-family="Helvetica,sans-Serif" font-size="14.00">signing.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="974.5,-5820.12 974.5,-5895.12 1555.5,-5895.12 1555.5,-5820.12 974.5,-5820.12"/>
<text text-anchor="middle" x="1265" y="-5879.92" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="980.5,-5683.12 980.5,-5812.12 1555.5,-5812.12 1555.5,-5683.12 980.5,-5683.12"/>
<text text-anchor="middle" x="1268" y="-5796.92" font-family="Helvetica,sans-Serif" font-size="14.00">ed25519.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="502.5,-1548.12 502.5,-1677.12 651.5,-1677.12 651.5,-1548.12 502.5,-1548.12"/>
<text text-anchor="middle" x="577" y="-1661.92" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="870,-5546.12 870,-5675.12 1202,-5675.12 1202,-5546.12 870,-5546.12"/>
<text text-anchor="middle" x="1036" y="-5659.92" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="936.5,-5409.12 936.5,-5538.12 1555,-5538.12 1555,-5409.12 936.5,-5409.12"/>
<text text-anchor="middle" x="1245.75" y="-5522.92" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="112,-4860.12 112,-4989.12 222,-4989.12 222,-4860.12 112,-4860.12"/>
<text text-anchor="middle" x="167" y="-4973.92" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="1828.5,-704.12 1828.5,-779.12 2017.5,-779.12 2017.5,-704.12 1828.5,-704.12"/>
<text text-anchor="middle" x="1923" y="-763.92" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="970.5,-859.12 970.5,-988.12 1544,-988.12 1544,-859.12 970.5,-859.12"/>
<text text-anchor="middle" x="1257.25" y="-972.92" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="935.5,-2400.12 935.5,-2495.12 1980,-2495.12 1980,-2400.12 935.5,-2400.12"/>
<text text-anchor="middle" x="1457.75" y="-2479.92" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="87.5,-4595.12 87.5,-4852.12 1539.5,-4852.12 1539.5,-4595.12 87.5,-4595.12"/>
<text text-anchor="middle" x="813.5" y="-4836.92" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="87.5,-1930.12 87.5,-2005.12 649,-2005.12 649,-1930.12 87.5,-1930.12"/>
<text text-anchor="middle" x="368.25" y="-1989.92" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="420.5,-1685.12 420.5,-1922.12 1126.5,-1922.12 1126.5,-1685.12 420.5,-1685.12"/>
<text text-anchor="middle" x="773.5" y="-1906.92" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="121.5,-3454.12 121.5,-3583.12 657,-3583.12 657,-3454.12 121.5,-3454.12"/>
<text text-anchor="middle" x="389.25" y="-3567.92" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="471,-5242.12 471,-5317.12 683,-5317.12 683,-5242.12 471,-5242.12"/>
<text text-anchor="middle" x="577" y="-5301.92" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_benchmarks.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="978.5,-5242.12 978.5,-5371.12 1093.5,-5371.12 1093.5,-5242.12 978.5,-5242.12"/>
<text text-anchor="middle" x="1036" y="-5355.92" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="1403.5,-2633.12 1403.5,-2762.12 1970.5,-2762.12 1970.5,-2633.12 1403.5,-2633.12"/>
<text text-anchor="middle" x="1687" y="-2746.92" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="469,-3890.12 469,-4235.12 1124,-4235.12 1124,-3890.12 469,-3890.12"/>
<text text-anchor="middle" x="796.5" y="-4219.92" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="989,-2215.12 989,-2344.12 1084,-2344.12 1084,-2215.12 989,-2215.12"/>
<text text-anchor="middle" x="1036.5" y="-2328.92" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="988.5,-2836.12 988.5,-3073.12 1519.5,-3073.12 1519.5,-2836.12 988.5,-2836.12"/>
<text text-anchor="middle" x="1254" y="-3057.92" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="975.5,-2503.12 975.5,-2632.12 1097.5,-2632.12 1097.5,-2503.12 975.5,-2503.12"/>
<text text-anchor="middle" x="1036.5" y="-2616.92" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="1871.5,-3915.12 1871.5,-3990.12 1974.5,-3990.12 1974.5,-3915.12 1871.5,-3915.12"/>
<text text-anchor="middle" x="1923" y="-3974.92" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="476.5,-2258.12 476.5,-2495.12 677.5,-2495.12 677.5,-2258.12 476.5,-2258.12"/>
<text text-anchor="middle" x="577" y="-2479.92" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="506.5,-3155.12 506.5,-3446.12 647.5,-3446.12 647.5,-3155.12 506.5,-3155.12"/>
<text text-anchor="middle" x="577" y="-3430.92" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="505,-2013.12 505,-2250.12 649,-2250.12 649,-2013.12 505,-2013.12"/>
<text text-anchor="middle" x="577" y="-2234.92" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="501.5,-2856.12 501.5,-3147.12 653.5,-3147.12 653.5,-2856.12 501.5,-2856.12"/>
<text text-anchor="middle" x="577.5" y="-3131.92" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="487,-5628.12 487,-5757.12 667,-5757.12 667,-5628.12 487,-5628.12"/>
<text text-anchor="middle" x="577" y="-5741.92" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="476.5,-6587.12 476.5,-6770.12 677.5,-6770.12 677.5,-6587.12 476.5,-6587.12"/>
<text text-anchor="middle" x="577" y="-6754.92" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-3591.12 8,-3882.12 741.5,-3882.12 741.5,-3591.12 8,-3591.12"/>
<text text-anchor="middle" x="374.75" y="-3866.92" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="382.5,-857.12 382.5,-1472.12 771.5,-1472.12 771.5,-857.12 382.5,-857.12"/>
<text text-anchor="middle" x="577" y="-1456.92" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="1871.5,-787.12 1871.5,-862.12 1974.5,-862.12 1974.5,-787.12 1871.5,-787.12"/>
<text text-anchor="middle" x="1923" y="-846.92" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="529.5,-531.12 529.5,-714.12 1540.5,-714.12 1540.5,-531.12 529.5,-531.12"/>
<text text-anchor="middle" x="1035" y="-698.92" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="1001,-174.12 1001,-249.12 1511.5,-249.12 1511.5,-174.12 1001,-174.12"/>
<text text-anchor="middle" x="1256.25" y="-233.92" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="483,-37.12 483,-166.12 1083.5,-166.12 1083.5,-37.12 483,-37.12"/>
<text text-anchor="middle" x="783.25" y="-150.92" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="466.5,-6778.12 466.5,-6853.12 1079,-6853.12 1079,-6778.12 466.5,-6778.12"/>
<text text-anchor="middle" x="772.75" y="-6837.92" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="997,-1088.12 997,-1649.12 1075,-1649.12 1075,-1088.12 997,-1088.12"/>
<text text-anchor="middle" x="1036" y="-1633.92" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="928.5,-722.12 928.5,-851.12 1144.5,-851.12 1144.5,-722.12 928.5,-722.12"/>
<text text-anchor="middle" x="1036.5" y="-835.92" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_credential_request.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="991.5,-257.12 991.5,-332.12 1536,-332.12 1536,-257.12 991.5,-257.12"/>
<text text-anchor="middle" x="1263.75" y="-316.92" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_struct.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="511.5,-340.12 511.5,-523.12 1083.5,-523.12 1083.5,-340.12 511.5,-340.12"/>
<text text-anchor="middle" x="797.5" y="-507.92" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="996,-1005.12 996,-1080.12 1531.5,-1080.12 1531.5,-1005.12 996,-1005.12"/>
<text text-anchor="middle" x="1263.75" y="-1064.92" font-family="Helvetica,sans-Serif" font-size="14.00">timestamp_struct.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="493,-6450.12 493,-6579.12 1079,-6579.12 1079,-6450.12 493,-6450.12"/>
<text text-anchor="middle" x="786" y="-6563.92" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="346,-2503.12 346,-2848.12 808,-2848.12 808,-2503.12 346,-2503.12"/>
<text text-anchor="middle" x="577" y="-2832.92" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightblue" stroke="lightblue" points="483,-774.12 483,-849.12 671,-849.12 671,-774.12 483,-774.12"/>
<text text-anchor="middle" x="577" y="-833.92" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;fn batch_scalar_inversion&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for batch_size in &amp;BATCH_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new(&#39; Batch scalar inve...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1123,-6221.12 949,-6221.12 949,-6185.12 1123,-6185.12 1123,-6221.12"/>
<text text-anchor="middle" x="1036" y="-6199.42" font-family="Helvetica,sans-Serif" font-size="14.00">batch_scalar_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;pub fn random&lt;R: CryptoRngCore + ?Sized&gt;(rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scal...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1958.5,-6985.12 1887.5,-6985.12 1887.5,-6949.12 1958.5,-6949.12 1958.5,-6985.12"/>
<text text-anchor="middle" x="1923" y="-6963.42" font-family="Helvetica,sans-Serif" font-size="14.00">random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1123.39,-6210.07C1161.46,-6208.75 1204.59,-6200.75 1236,-6176.12 1262.69,-6155.19 1235.96,-6124.2 1264,-6105.12 1416.85,-6001.09 1547.09,-5976.59 1680,-6105.12 1746.73,-6169.65 1645.45,-6871.53 1708,-6940.12 1750.05,-6986.23 1828.04,-6983.75 1877.36,-6976.4"/>
<polygon fill="gray" stroke="gray" points="1878.11,-6979.82 1887.42,-6974.77 1876.99,-6972.91 1878.11,-6979.82"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;pub fn batch_invert(inputs: &amp;mut [Scalar]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This code is essentially identical to the FieldElement &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// implementation, and is documented there. &#160;Unfortunately, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1974.5,-7201.12 1871.5,-7201.12 1871.5,-7165.12 1974.5,-7165.12 1974.5,-7201.12"/>
<text text-anchor="middle" x="1923" y="-7179.42" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1123.08,-6193.57C1162.25,-6194.04 1206.36,-6202.09 1236,-6230.12 1283.69,-6275.21 1227,-6320.91 1264,-6375.12 1387.31,-6555.79 1569.32,-6449.44 1680,-6638.12 1709.16,-6687.83 1668.73,-7113.93 1708,-7156.12 1746,-7196.93 1812.19,-7199.4 1860.93,-7194.32"/>
<polygon fill="gray" stroke="gray" points="1861.53,-7197.78 1871.05,-7193.14 1860.71,-7190.83 1861.53,-7197.78"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;fn montgomery_ladder&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Montgomery pseudomultiplication&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = constants::X25519_BASEPOINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1550.5,-6204.12 1393.5,-6204.12 1393.5,-6168.12 1550.5,-6168.12 1550.5,-6204.12"/>
<text text-anchor="middle" x="1472" y="-6182.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_ladder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1951.5,-6931.12 1894.5,-6931.12 1894.5,-6895.12 1951.5,-6895.12 1951.5,-6931.12"/>
<text text-anchor="middle" x="1923" y="-6909.42" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1550.7,-6174.06C1595.1,-6171.92 1648.12,-6178.3 1680,-6213.12 1730.54,-6268.32 1657.35,-6831.02 1708,-6886.12 1752.27,-6934.27 1835.77,-6929.28 1884.34,-6921.25"/>
<polygon fill="gray" stroke="gray" points="1885.21,-6924.65 1894.44,-6919.46 1883.98,-6917.76 1885.21,-6924.65"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;fn construct_scalars(n: usize) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(0..n).map(|_| Scalar::random(&amp;mut rng)).collect() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1104.5,-6383.12 967.5,-6383.12 967.5,-6347.12 1104.5,-6347.12 1104.5,-6383.12"/>
<text text-anchor="middle" x="1036" y="-6361.42" font-family="Helvetica,sans-Serif" font-size="14.00">construct_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1104.96,-6366.55C1147.96,-6371.06 1201.7,-6383.91 1236,-6418.12 1269.89,-6451.92 1230.3,-6488.12 1264,-6522.12 1399.12,-6658.45 1556.99,-6490.78 1680,-6638.12 1723.2,-6689.86 1661.14,-6891.68 1708,-6940.12 1751.27,-6984.84 1828.54,-6982.88 1877.43,-6976"/>
<polygon fill="gray" stroke="gray" points="1878.06,-6979.44 1887.41,-6974.47 1877,-6972.52 1878.06,-6979.44"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;fn vartime_multiscalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new( &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="670,-6383.12 484,-6383.12 484,-6347.12 670,-6347.12 670,-6383.12"/>
<text text-anchor="middle" x="577" y="-6361.42" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M670.21,-6365.12C754.42,-6365.12 877.56,-6365.12 957,-6365.12"/>
<polygon fill="gray" stroke="gray" points="957.43,-6368.62 967.43,-6365.12 957.43,-6361.62 957.43,-6368.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn construct_points(n: usize) &#45;&gt; Vec&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(0..n) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| EdwardsPoint::mul_base(&amp;Scalar::random(&amp;mut rng))) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.collect...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1101.5,-6329.12 970.5,-6329.12 970.5,-6293.12 1101.5,-6293.12 1101.5,-6329.12"/>
<text text-anchor="middle" x="1036" y="-6307.42" font-family="Helvetica,sans-Serif" font-size="14.00">construct_points</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M670.06,-6354.34C712.12,-6349.41 762.58,-6343.48 808,-6338.12 858.83,-6332.11 916.05,-6325.31 960.32,-6320.03"/>
<polygon fill="gray" stroke="gray" points="960.91,-6323.48 970.42,-6318.83 960.08,-6316.53 960.91,-6323.48"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1101.65,-6302C1145.16,-6299.7 1200.81,-6304.8 1236,-6338.12 1283.98,-6383.54 1215.04,-6439.75 1264,-6484.12 1332.79,-6546.45 1615.16,-6455.69 1680,-6522.12 1745.03,-6588.74 1644.13,-6872.39 1708,-6940.12 1750.69,-6985.39 1828.14,-6983.26 1877.22,-6976.2"/>
<polygon fill="gray" stroke="gray" points="1877.9,-6979.63 1887.24,-6974.63 1876.82,-6972.72 1877.9,-6979.63"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_pure_static&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::ne...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="702.5,-6329.12 451.5,-6329.12 451.5,-6293.12 702.5,-6293.12 702.5,-6329.12"/>
<text text-anchor="middle" x="577" y="-6307.42" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_pure_static</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M702.74,-6325.73C736.87,-6329.73 773.86,-6334.08 808,-6338.12 857.73,-6343.99 913.58,-6350.64 957.44,-6355.86"/>
<polygon fill="gray" stroke="gray" points="957.12,-6359.35 967.46,-6357.06 957.94,-6352.4 957.12,-6359.35"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M702.58,-6311.12C785.07,-6311.12 890.54,-6311.12 960.3,-6311.12"/>
<polygon fill="gray" stroke="gray" points="960.33,-6314.62 970.33,-6311.12 960.33,-6307.62 960.33,-6314.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;fn vartime_double_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Variable&#45;time aA+bB, A variable, B fixed&#39; , |bench| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1594.5,-6366.12 1349.5,-6366.12 1349.5,-6330.12 1594.5,-6330.12 1594.5,-6366.12"/>
<text text-anchor="middle" x="1472" y="-6344.42" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_double_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1546.06,-6366.2C1592.69,-6381.83 1649.85,-6409.48 1680,-6456.12 1738.49,-6546.6 1634.44,-6861.4 1708,-6940.12 1750.49,-6985.59 1827.99,-6983.4 1877.15,-6976.27"/>
<polygon fill="gray" stroke="gray" points="1877.85,-6979.7 1887.18,-6974.69 1876.76,-6972.79 1877.85,-6979.7"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1595,-6258.12 1349,-6258.12 1349,-6222.12 1595,-6222.12 1595,-6258.12"/>
<text text-anchor="middle" x="1472" y="-6236.42" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1595.02,-6229.34C1626.86,-6232.99 1658.3,-6243.5 1680,-6267.12 1726.58,-6317.81 1661.31,-6835.52 1708,-6886.12 1752.36,-6934.19 1835.82,-6929.23 1884.37,-6921.23"/>
<polygon fill="gray" stroke="gray" points="1885.23,-6924.63 1894.46,-6919.44 1884,-6917.74 1885.23,-6924.63"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn consttime_variable_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = &amp;constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1606,-6312.12 1338,-6312.12 1338,-6276.12 1606,-6276.12 1606,-6312.12"/>
<text text-anchor="middle" x="1472" y="-6290.42" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_variable_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1606.25,-6285C1634.12,-6289.72 1660.83,-6300.34 1680,-6321.12 1722.63,-6367.31 1665.28,-6840.02 1708,-6886.12 1752.46,-6934.1 1835.89,-6929.17 1884.4,-6921.2"/>
<polygon fill="gray" stroke="gray" points="1885.25,-6924.6 1894.49,-6919.41 1884.03,-6917.71 1885.25,-6924.6"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn scalar_arith&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Scalar inversion&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1084.5,-6275.12 987.5,-6275.12 987.5,-6239.12 1084.5,-6239.12 1084.5,-6275.12"/>
<text text-anchor="middle" x="1036" y="-6253.42" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_arith</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1084.54,-6250.22C1128.87,-6246.57 1194.26,-6248.71 1236,-6284.12 1268.27,-6311.49 1231.95,-6347.49 1264,-6375.12 1405.65,-6497.19 1553.71,-6300.21 1680,-6438.12 1747.37,-6511.68 1639.73,-6813.39 1708,-6886.12 1752.65,-6933.68 1835.64,-6929.01 1884.1,-6921.17"/>
<polygon fill="gray" stroke="gray" points="1884.94,-6924.58 1894.19,-6919.42 1883.73,-6917.69 1884.94,-6924.58"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1084.89,-6249.39C1129.79,-6245.05 1195.87,-6246.63 1236,-6284.12 1281.1,-6326.24 1219.28,-6377.59 1264,-6420.12 1399.57,-6549.02 1553.9,-6345.94 1680,-6484.12 1748.44,-6559.11 1638.55,-6866.06 1708,-6940.12 1750.57,-6985.51 1828.05,-6983.35 1877.17,-6976.24"/>
<polygon fill="gray" stroke="gray" points="1877.87,-6979.68 1887.21,-6974.67 1876.78,-6972.76 1877.87,-6979.68"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn consttime_multiscalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new( &#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="677.5,-6275.12 476.5,-6275.12 476.5,-6239.12 677.5,-6239.12 677.5,-6275.12"/>
<text text-anchor="middle" x="577" y="-6253.42" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M677.67,-6246.66C721.77,-6247.22 771.74,-6255.6 808,-6284.12 828.12,-6299.94 807.99,-6322.17 828,-6338.12 863.82,-6366.66 914.71,-6373.6 957.07,-6373.32"/>
<polygon fill="gray" stroke="gray" points="957.16,-6376.82 967.08,-6373.12 957.02,-6369.82 957.16,-6376.82"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M677.63,-6268.78C718.09,-6273.52 765.28,-6279.07 808,-6284.12 858.83,-6290.12 916.05,-6296.93 960.32,-6302.21"/>
<polygon fill="gray" stroke="gray" points="960.08,-6305.7 970.42,-6303.41 960.91,-6298.75 960.08,-6305.7"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_helper&lt;M: Measurement&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c: &amp;mut BenchmarkGroup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dynamic_fraction: f64, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bench_...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="687,-6221.12 467,-6221.12 467,-6185.12 687,-6185.12 687,-6221.12"/>
<text text-anchor="middle" x="577" y="-6199.42" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_helper</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M687.06,-6189.99C729.77,-6190.88 776.08,-6200.24 808,-6230.12 843.64,-6263.47 792.57,-6304.53 828,-6338.12 861.72,-6370.09 913.6,-6376.81 956.97,-6375.55"/>
<polygon fill="gray" stroke="gray" points="957.39,-6379.03 967.23,-6375.1 957.09,-6372.04 957.39,-6379.03"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M687.27,-6192.9C728.89,-6194.53 774.34,-6203.65 808,-6230.12 828.12,-6245.94 807.99,-6268.17 828,-6284.12 864.73,-6313.39 917.33,-6319.95 960.31,-6319.28"/>
<polygon fill="gray" stroke="gray" points="960.56,-6322.78 970.45,-6318.99 960.36,-6315.78 960.56,-6322.78"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn scalar_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; scalar benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_arith(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;batch_scalar_inversion(...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="638.5,-6167.12 515.5,-6167.12 515.5,-6131.12 638.5,-6131.12 638.5,-6167.12"/>
<text text-anchor="middle" x="577" y="-6145.42" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M638.54,-6156.2C684.92,-6161.63 750.51,-6169.32 808,-6176.12 850.87,-6181.18 898.3,-6186.82 938.67,-6191.63"/>
<polygon fill="gray" stroke="gray" points="938.43,-6195.12 948.77,-6192.83 939.25,-6188.17 938.43,-6195.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M638.51,-6140.06C689.07,-6135.95 760.36,-6138.65 808,-6176.12 828.12,-6191.94 807.99,-6214.17 828,-6230.12 869.76,-6263.4 932.03,-6267.32 977.36,-6264.64"/>
<polygon fill="gray" stroke="gray" points="977.61,-6268.13 987.34,-6263.93 977.12,-6261.15 977.61,-6268.13"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn montgomery_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; montgomery benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;montgomery_ladder(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consttime_...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1121.5,-6113.12 950.5,-6113.12 950.5,-6077.12 1121.5,-6077.12 1121.5,-6113.12"/>
<text text-anchor="middle" x="1036" y="-6091.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M638.69,-6141.95C715.8,-6132.84 849.74,-6117.01 940.33,-6106.3"/>
<polygon fill="gray" stroke="gray" points="940.81,-6109.77 950.33,-6105.12 939.99,-6102.82 940.81,-6109.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn edwards_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; edwards benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;decompress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1106,-6167.12 966,-6167.12 966,-6131.12 1106,-6131.12 1106,-6167.12"/>
<text text-anchor="middle" x="1036" y="-6145.42" font-family="Helvetica,sans-Serif" font-size="14.00">edwards_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M638.69,-6149.12C720.28,-6149.12 865.49,-6149.12 955.66,-6149.12"/>
<polygon fill="gray" stroke="gray" points="955.84,-6152.62 965.84,-6149.12 955.84,-6145.62 955.84,-6152.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1595,-6150.12 1349,-6150.12 1349,-6114.12 1595,-6114.12 1595,-6150.12"/>
<text text-anchor="middle" x="1472" y="-6128.42" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1595.12,-6121.24C1626.97,-6124.89 1658.38,-6135.43 1680,-6159.12 1734.5,-6218.83 1653.38,-6826.53 1708,-6886.12 1752.2,-6934.34 1835.72,-6929.32 1884.32,-6921.27"/>
<polygon fill="gray" stroke="gray" points="1885.19,-6924.67 1894.42,-6919.47 1883.96,-6917.78 1885.19,-6924.67"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1121.58,-6092.34C1158.85,-6094.58 1201.84,-6102.15 1236,-6122.12 1253.8,-6132.52 1246.17,-6148.76 1264,-6159.12 1299.53,-6179.76 1344.18,-6187.41 1382.92,-6189.54"/>
<polygon fill="gray" stroke="gray" points="1383,-6193.04 1393.15,-6189.98 1383.31,-6186.05 1383,-6193.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1121.71,-6102.34C1183.31,-6107.59 1267.91,-6114.8 1338.42,-6120.82"/>
<polygon fill="gray" stroke="gray" points="1338.46,-6124.33 1348.72,-6121.69 1339.05,-6117.36 1338.46,-6124.33"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1106.38,-6139.8C1149.12,-6138.13 1202.05,-6144.02 1236,-6176.12 1283.69,-6221.21 1216.19,-6276.15 1264,-6321.12 1284.45,-6340.36 1311.49,-6350.43 1339.25,-6355.11"/>
<polygon fill="gray" stroke="gray" points="1339.1,-6358.63 1349.5,-6356.6 1340.1,-6351.7 1339.1,-6358.63"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1106.2,-6145.69C1146.55,-6146.69 1197.02,-6153.33 1236,-6176.12 1253.8,-6186.52 1246.17,-6202.76 1264,-6213.12 1286.58,-6226.24 1312.84,-6234.11 1338.93,-6238.65"/>
<polygon fill="gray" stroke="gray" points="1338.49,-6242.12 1348.91,-6240.23 1339.58,-6235.21 1338.49,-6242.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1106.18,-6141.05C1148.31,-6140 1200.64,-6146.12 1236,-6176.12 1268.27,-6203.49 1231.66,-6239.83 1264,-6267.12 1282.11,-6282.41 1304.49,-6291.65 1327.76,-6296.93"/>
<polygon fill="gray" stroke="gray" points="1327.28,-6300.4 1337.77,-6298.96 1328.67,-6293.54 1327.28,-6300.4"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn test_vartime_pippenger() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Reuse points across different tests &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut n = 512; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = Scalar::from(2128506u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = Scalar::from(4443282u64).in...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1562.5,-4904.12 1381.5,-4904.12 1381.5,-4868.12 1562.5,-4868.12 1562.5,-4904.12"/>
<text text-anchor="middle" x="1472" y="-4882.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_vartime_pippenger</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1562.6,-4885.46C1605.05,-4890.26 1652.39,-4904.08 1680,-4939.12 1746.94,-5024.09 1635.87,-6805.49 1708,-6886.12 1751.71,-6934.97 1835.7,-6929.64 1884.45,-6921.38"/>
<polygon fill="gray" stroke="gray" points="1885.08,-6924.82 1894.29,-6919.59 1883.82,-6917.94 1885.08,-6924.82"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;pub fn as_montgomery(&amp;self) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_mul(self, &amp;constants::RR) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2576,-7392.12 2448,-7392.12 2448,-7356.12 2576,-7356.12 2576,-7392.12"/>
<text text-anchor="middle" x="2512" y="-7370.42" font-family="Helvetica,sans-Serif" font-size="14.00">as_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_mul(a: &amp;Scalar52, b: &amp;Scalar52) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_reduce(&amp;Scalar52::mul_internal(a, b)) &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="2775,-7392.12 2636,-7392.12 2636,-7356.12 2775,-7356.12 2775,-7392.12"/>
<text text-anchor="middle" x="2705.5" y="-7370.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2576.23,-7374.12C2592.02,-7374.12 2609.15,-7374.12 2625.59,-7374.12"/>
<polygon fill="gray" stroke="gray" points="2625.72,-7377.62 2635.72,-7374.12 2625.72,-7370.62 2625.72,-7377.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_wide(bytes: &amp;[u8; 64]) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut words = [0u64; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;words[i] |= (bytes[(i * 8) + j] as u64...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2578.5,-7446.12 2445.5,-7446.12 2445.5,-7410.12 2578.5,-7410.12 2578.5,-7446.12"/>
<text text-anchor="middle" x="2512" y="-7424.42" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2577.03,-7410.06C2594.28,-7405.2 2613.08,-7399.9 2630.8,-7394.9"/>
<polygon fill="gray" stroke="gray" points="2631.85,-7398.24 2640.53,-7392.16 2629.95,-7391.5 2631.85,-7398.24"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_max() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::montgomery_mul(&amp;X, &amp;X); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XX_MONT[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="2600,-7338.12 2424,-7338.12 2424,-7302.12 2600,-7302.12 2600,-7338.12"/>
<text text-anchor="middle" x="2512" y="-7316.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2577.03,-7338.17C2594.28,-7343.04 2613.08,-7348.34 2630.8,-7353.34"/>
<polygon fill="gray" stroke="gray" points="2629.95,-7356.73 2640.53,-7356.08 2631.85,-7350 2629.95,-7356.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::montgomery_mul(&amp;X, &amp;Y); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XY_MONT[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="2581.5,-7500.12 2442.5,-7500.12 2442.5,-7464.12 2581.5,-7464.12 2581.5,-7500.12"/>
<text text-anchor="middle" x="2512" y="-7478.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2580.02,-7464.03C2586.91,-7461.37 2593.69,-7458.41 2600,-7455.12 2628.94,-7440.05 2657.95,-7416.74 2678.04,-7398.99"/>
<polygon fill="gray" stroke="gray" points="2680.45,-7401.54 2685.55,-7392.25 2675.77,-7396.33 2680.45,-7401.54"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;fn from_bytes_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bignum = [255u8; 64]; // 2^512 &#45; 1 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let reduced = Scalar52::from_bytes_wide(&amp;bignum); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(reduced[i] == C[i]); &#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2347.5,-7446.12 2214.5,-7446.12 2214.5,-7410.12 2347.5,-7410.12 2347.5,-7446.12"/>
<text text-anchor="middle" x="2281" y="-7424.42" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2347.62,-7428.12C2374.93,-7428.12 2406.81,-7428.12 2435.12,-7428.12"/>
<polygon fill="gray" stroke="gray" points="2435.37,-7431.62 2445.37,-7428.12 2435.37,-7424.62 2435.37,-7431.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_1000() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(1000); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1156,-5041.12 916,-5041.12 916,-5005.12 1156,-5005.12 1156,-5041.12"/>
<text text-anchor="middle" x="1036" y="-5019.42" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_1000</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_iter(n: usize) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Construct random coefficients x0, ..., x_{n&#45;1}, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// followed by some extra hardcoded ones. ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1578,-5095.12 1366,-5095.12 1366,-5059.12 1578,-5059.12 1578,-5095.12"/>
<text text-anchor="middle" x="1472" y="-5073.42" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_iter</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1156.17,-5037.95C1218.33,-5045.68 1294.03,-5055.1 1355.63,-5062.76"/>
<polygon fill="gray" stroke="gray" points="1355.42,-5066.26 1365.78,-5064.03 1356.29,-5059.32 1355.42,-5066.26"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_500() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(500); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1151.5,-4987.12 920.5,-4987.12 920.5,-4951.12 1151.5,-4951.12 1151.5,-4987.12"/>
<text text-anchor="middle" x="1036" y="-4965.42" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_500</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1151.63,-4980.75C1179.44,-4984.64 1208.95,-4989.69 1236,-4996.12 1299.83,-5011.29 1370.72,-5037.01 1417.78,-5055.4"/>
<polygon fill="gray" stroke="gray" points="1416.57,-5058.68 1427.16,-5059.09 1419.13,-5052.17 1416.57,-5058.68"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_250() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(250); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1151.5,-5149.12 920.5,-5149.12 920.5,-5113.12 1151.5,-5113.12 1151.5,-5149.12"/>
<text text-anchor="middle" x="1036" y="-5127.42" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_250</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1151.6,-5116.86C1214.65,-5109.01 1292.67,-5099.31 1355.81,-5091.45"/>
<polygon fill="gray" stroke="gray" points="1356.32,-5094.91 1365.81,-5090.21 1355.46,-5087.97 1356.32,-5094.91"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1491.52,-5095.14C1534.61,-5138.5 1640.88,-5254.03 1680,-5375.12 1706.73,-5457.86 1649.91,-6875.41 1708,-6940.12 1749.69,-6986.55 1827.79,-6983.98 1877.22,-6976.52"/>
<polygon fill="gray" stroke="gray" points="1878.01,-6979.94 1887.31,-6974.87 1876.88,-6973.03 1878.01,-6979.94"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_vs_nonprecomputed_multiscalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let static_scalars = (0..128) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| Scalar::random(&amp;mut rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1236,-5203.12 836,-5203.12 836,-5167.12 1236,-5167.12 1236,-5203.12"/>
<text text-anchor="middle" x="1036" y="-5181.42" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_vs_nonprecomputed_multiscalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1236.11,-5194.12C1385.49,-5212.62 1580.66,-5264.39 1680,-5405.12 1729.18,-5474.8 1651.01,-6876.66 1708,-6940.12 1749.7,-6986.55 1827.79,-6983.97 1877.23,-6976.51"/>
<polygon fill="gray" stroke="gray" points="1878.01,-6979.93 1887.32,-6974.87 1876.88,-6973.02 1878.01,-6979.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_100() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(100); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1151.5,-5095.12 920.5,-5095.12 920.5,-5059.12 1151.5,-5059.12 1151.5,-5095.12"/>
<text text-anchor="middle" x="1036" y="-5073.42" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_100</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1151.6,-5077.12C1214.65,-5077.12 1292.67,-5077.12 1355.81,-5077.12"/>
<polygon fill="gray" stroke="gray" points="1355.81,-5080.62 1365.81,-5077.12 1355.81,-5073.62 1355.81,-5080.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_bits_be() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Make a random prime&#45;order point P &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_edwards = rand_prime_order_po...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="1133.5,-4448.12 938.5,-4448.12 938.5,-4412.12 1133.5,-4412.12 1133.5,-4448.12"/>
<text text-anchor="middle" x="1036" y="-4426.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_bits_be</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn rand_prime_order_point(mut rng: impl RngCore + CryptoRng) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s: Scalar = Scalar::random(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EdwardsPoint::mul_base(&amp;s) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1563,-4556.12 1381,-4556.12 1381,-4520.12 1563,-4520.12 1563,-4556.12"/>
<text text-anchor="middle" x="1472" y="-4534.42" font-family="Helvetica,sans-Serif" font-size="14.00">rand_prime_order_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1133.61,-4439.34C1166.37,-4443.5 1203.01,-4449.28 1236,-4457.12 1299.83,-4472.29 1370.72,-4498.01 1417.78,-4516.4"/>
<polygon fill="gray" stroke="gray" points="1416.57,-4519.68 1427.16,-4520.09 1419.13,-4513.17 1416.57,-4519.68"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order_wide(input: &amp;[u8; 64]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScalar::from_bytes_wide(input).pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2388,-6877.12 2174,-6877.12 2174,-6841.12 2388,-6841.12 2388,-6877.12"/>
<text text-anchor="middle" x="2281" y="-6855.42" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1133.57,-4418.83C1263.18,-4407.66 1498.13,-4401.57 1680,-4476.12 1927.65,-4577.63 2017.35,-4628.21 2138,-4867.12 2230.6,-5050.48 2273.45,-6601.54 2279.3,-6830.84"/>
<polygon fill="gray" stroke="gray" points="2275.81,-6831.12 2279.56,-6841.03 2282.8,-6830.95 2275.81,-6831.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_bits_be_twist() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Make a random point P on the curve or its twist &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_montgomer...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="1153.5,-4502.12 918.5,-4502.12 918.5,-4466.12 1153.5,-4466.12 1153.5,-4502.12"/>
<text text-anchor="middle" x="1036" y="-4480.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_bits_be_twist</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1563.17,-4537.49C1605.49,-4542.34 1652.55,-4556.19 1680,-4591.12 1720.32,-4642.43 1664.55,-6891.43 1708,-6940.12 1749.55,-6986.68 1827.69,-6984.06 1877.17,-6976.56"/>
<polygon fill="gray" stroke="gray" points="1877.97,-6979.98 1887.27,-6974.9 1876.84,-6973.07 1877.97,-6979.98"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn montgomery_ladder_matches_edwards_scalarmult() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_edwards = rand_prime_order_point(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1219.5,-4556.12 852.5,-4556.12 852.5,-4520.12 1219.5,-4520.12 1219.5,-4556.12"/>
<text text-anchor="middle" x="1036" y="-4534.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_ladder_matches_edwards_scalarmult</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1219.8,-4538.12C1271.49,-4538.12 1325.83,-4538.12 1370.7,-4538.12"/>
<polygon fill="gray" stroke="gray" points="1370.71,-4541.62 1380.71,-4538.12 1370.71,-4534.62 1370.71,-4541.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1165.81,-4520.11C1197.83,-4516.38 1232.11,-4513.01 1264,-4511.12 1356.28,-4505.65 1614.26,-4446.13 1680,-4511.12 1727.99,-4558.56 1663.08,-6889.76 1708,-6940.12 1749.54,-6986.69 1827.68,-6984.07 1877.17,-6976.57"/>
<polygon fill="gray" stroke="gray" points="1877.97,-6979.98 1887.27,-6974.91 1876.84,-6973.07 1877.97,-6979.98"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;fn random_roundtrip() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = RistrettoPoint::mul_base(&amp;Scalar::random(&amp;mut rng)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed_P = P.compress();...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1543,-6740.12 1401,-6740.12 1401,-6704.12 1543,-6704.12 1543,-6740.12"/>
<text text-anchor="middle" x="1472" y="-6718.42" font-family="Helvetica,sans-Serif" font-size="14.00">random_roundtrip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1543.16,-6711.59C1588.23,-6709.04 1644.74,-6714.42 1680,-6749.12 1741.15,-6809.3 1646.73,-6880.06 1708,-6940.12 1752.32,-6983.56 1828.93,-6982.07 1877.46,-6975.62"/>
<polygon fill="gray" stroke="gray" points="1877.97,-6979.08 1887.36,-6974.18 1876.97,-6972.16 1877.97,-6979.08"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;fn four_torsion_random() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = RistrettoPoint::mul_base(&amp;Scalar::random(&amp;mut rng)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P_coset = P.coset4(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for point in P_coset { &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1552.5,-6686.12 1391.5,-6686.12 1391.5,-6650.12 1552.5,-6650.12 1552.5,-6686.12"/>
<text text-anchor="middle" x="1472" y="-6664.42" font-family="Helvetica,sans-Serif" font-size="14.00">four_torsion_random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1552.61,-6656.8C1596.11,-6655.36 1647.59,-6662.18 1680,-6695.12 1756.88,-6773.23 1630.96,-6862.17 1708,-6940.12 1751.62,-6984.25 1828.44,-6982.56 1877.2,-6975.88"/>
<polygon fill="gray" stroke="gray" points="1877.78,-6979.33 1887.15,-6974.39 1876.75,-6972.41 1877.78,-6979.33"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_vs_nonprecomputed_multiscalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let static_scalars = (0..128) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| Scalar::random(&amp;mut rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1672,-6794.12 1272,-6794.12 1272,-6758.12 1672,-6758.12 1672,-6794.12"/>
<text text-anchor="middle" x="1472" y="-6772.42" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_vs_nonprecomputed_multiscalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1623.85,-6794.12C1644.74,-6802.16 1664.35,-6813.42 1680,-6829.12 1715.91,-6865.16 1669.9,-6906.39 1708,-6940.12 1754.11,-6980.93 1829.27,-6980.45 1877.15,-6974.89"/>
<polygon fill="gray" stroke="gray" points="1877.75,-6978.34 1887.22,-6973.6 1876.86,-6971.4 1877.75,-6978.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_montgomery().montgomery_invert().from_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2309.5,-7243.12 2252.5,-7243.12 2252.5,-7207.12 2309.5,-7207.12 2309.5,-7243.12"/>
<text text-anchor="middle" x="2281" y="-7221.42" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1951.57,-6908.9C1995.37,-6903.76 2081.65,-6900.14 2138,-6940.12 2226.92,-7003.2 2263.11,-7138.24 2275.04,-7196.92"/>
<polygon fill="gray" stroke="gray" points="2271.65,-7197.81 2277,-7206.96 2278.52,-7196.47 2271.65,-7197.81"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;fn invert() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let inv_X = X.invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(inv_X, XINV); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let should_be_one = inv_X * X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(should_be_one, Scalar::ONE); &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1500.5,-6985.12 1443.5,-6985.12 1443.5,-6949.12 1500.5,-6949.12 1500.5,-6985.12"/>
<text text-anchor="middle" x="1472" y="-6963.42" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1500.75,-6963.78C1578.1,-6954.48 1796.21,-6928.25 1884.35,-6917.65"/>
<polygon fill="gray" stroke="gray" points="1884.93,-6921.1 1894.44,-6916.43 1884.09,-6914.15 1884.93,-6921.1"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn non_adjacent_form_random() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..1_000 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = Scalar::random(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for w in &amp;[5, 6, 7, 8] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1576.5,-7039.12 1367.5,-7039.12 1367.5,-7003.12 1576.5,-7003.12 1576.5,-7039.12"/>
<text text-anchor="middle" x="1472" y="-7017.42" font-family="Helvetica,sans-Serif" font-size="14.00">non_adjacent_form_random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1576.57,-7008.66C1671.54,-6997.24 1807.65,-6980.87 1877.26,-6972.5"/>
<polygon fill="gray" stroke="gray" points="1877.93,-6975.94 1887.44,-6971.27 1877.1,-6968.99 1877.93,-6975.94"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn square_multiply(y: &amp;mut UnpackedScalar, squarings: usize, x: &amp;UnpackedScalar) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..squarings { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*y = y.montgomery_square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*y ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1535.5,-7255.12 1408.5,-7255.12 1408.5,-7219.12 1535.5,-7219.12 1535.5,-7255.12"/>
<text text-anchor="middle" x="1472" y="-7233.42" font-family="Helvetica,sans-Serif" font-size="14.00">square_multiply</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1516.01,-7255.23C1648.35,-7309.68 2062.43,-7470.51 2424,-7509.12 2501.78,-7517.42 2529.77,-7543.57 2600,-7509.12 2645.34,-7486.88 2676.61,-7434.45 2692.46,-7401.86"/>
<polygon fill="gray" stroke="gray" points="2695.81,-7402.98 2696.89,-7392.44 2689.47,-7400 2695.81,-7402.98"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_with_a_zero_input_panics() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut xs = vec![Scalar::ONE; 16]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xs[3] = Scalar::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should panic in debug mode. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::batch_invert(&amp;mut...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1614,-7147.12 1330,-7147.12 1330,-7111.12 1614,-7111.12 1614,-7147.12"/>
<text text-anchor="middle" x="1472" y="-7125.42" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_with_a_zero_input_panics</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1614.14,-7146.09C1697.2,-7156.08 1797.99,-7168.2 1861.08,-7175.79"/>
<polygon fill="gray" stroke="gray" points="1860.91,-7179.3 1871.26,-7177.02 1861.75,-7172.35 1860.91,-7179.3"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_consistency() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut x = Scalar::from(1u64); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut v1: Vec&lt;_&gt; = (0..16) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let tmp = x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x + x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1567.5,-7093.12 1376.5,-7093.12 1376.5,-7057.12 1567.5,-7057.12 1567.5,-7093.12"/>
<text text-anchor="middle" x="1472" y="-7071.42" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_consistency</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1567.71,-7084.58C1606.73,-7083.4 1649.78,-7074.81 1680,-7048.12 1717.17,-7015.29 1670.76,-6972.86 1708,-6940.12 1756.63,-6897.36 1837.2,-6900.04 1884.38,-6906.29"/>
<polygon fill="gray" stroke="gray" points="1884.08,-6909.79 1894.48,-6907.75 1885.08,-6902.86 1884.08,-6909.79"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1567.63,-7069.2C1605.51,-7071.23 1647.72,-7079.5 1680,-7102.12 1702.14,-7117.63 1685.83,-7140.65 1708,-7156.12 1752.55,-7187.18 1815.3,-7191.72 1861.34,-7189.81"/>
<polygon fill="gray" stroke="gray" points="1861.68,-7193.3 1871.48,-7189.27 1861.31,-7186.31 1861.68,-7193.3"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Scalar::ONE, Scalar::batch_invert(&amp;mut [])); &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1549,-7201.12 1395,-7201.12 1395,-7165.12 1549,-7165.12 1549,-7201.12"/>
<text text-anchor="middle" x="1472" y="-7179.42" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1549.17,-7183.12C1637.22,-7183.12 1780.39,-7183.12 1861.29,-7183.12"/>
<polygon fill="gray" stroke="gray" points="1861.32,-7186.62 1871.32,-7183.12 1861.32,-7179.62 1861.32,-7186.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn fuzzer_testcase_reduction() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// LE bytes of 24519928653854221733733552434404946937899825954937634815 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_bytes = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;255, 255, 255, 255, 255, 255, 255, 255, 255, 25...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2021.5,-7039.12 1824.5,-7039.12 1824.5,-7003.12 2021.5,-7003.12 2021.5,-7039.12"/>
<text text-anchor="middle" x="1923" y="-7017.42" font-family="Helvetica,sans-Serif" font-size="14.00">fuzzer_testcase_reduction</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2021.64,-7021.67C2059.48,-7018.64 2102.22,-7011.09 2138,-6994.12 2190.54,-6969.2 2236.22,-6917.37 2260.78,-6885.68"/>
<polygon fill="gray" stroke="gray" points="2263.88,-6887.39 2267.14,-6877.31 2258.3,-6883.16 2263.88,-6887.39"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Uses the addition chain from &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://briansmith.org/ecc&#45;inversion&#45;addition&#45;chains&#45;01#curve25519_scalar_inversion &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2588.5,-7243.12 2435.5,-7243.12 2435.5,-7207.12 2588.5,-7207.12 2588.5,-7243.12"/>
<text text-anchor="middle" x="2512" y="-7221.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2570.61,-7243.28C2580.83,-7247.69 2591.05,-7252.96 2600,-7259.12 2635.34,-7283.44 2667.1,-7321.92 2686.09,-7347.58"/>
<polygon fill="gray" stroke="gray" points="2683.31,-7349.72 2692.02,-7355.76 2688.98,-7345.61 2683.31,-7349.72"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1958.64,-6966.88C2001.74,-6965.65 2077.08,-6960.44 2138,-6940.12 2177.84,-6926.83 2219.07,-6901.84 2246.77,-6883.11"/>
<polygon fill="gray" stroke="gray" points="2249.01,-6885.82 2255.27,-6877.28 2245.05,-6880.05 2249.01,-6885.82"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;fn test_pippenger_radix() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use core::iter; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// For each valid radix it tests that 1000 random&#45;ish scalars can be restored &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// from the produced representation precisely. &#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1553.5,-6931.12 1390.5,-6931.12 1390.5,-6895.12 1553.5,-6895.12 1553.5,-6931.12"/>
<text text-anchor="middle" x="1472" y="-6909.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_pippenger_radix</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1553.53,-6913.12C1651.19,-6913.12 1811.71,-6913.12 1884.28,-6913.12"/>
<polygon fill="gray" stroke="gray" points="1884.33,-6916.62 1894.33,-6913.12 1884.33,-6909.62 1884.33,-6916.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;fn montgomery_reduce_matches_from_bytes_mod_order_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bignum = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// set bignum = x + 2^256x &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[i] = X[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2138,-7147.12 1708,-7147.12 1708,-7111.12 2138,-7111.12 2138,-7147.12"/>
<text text-anchor="middle" x="1923" y="-7125.42" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_reduce_matches_from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2125.12,-7147.17C2129.58,-7149.89 2133.89,-7152.87 2138,-7156.12 2173.75,-7184.37 2144.78,-7217.15 2174,-7252.12 2242.59,-7334.21 2359.4,-7382.9 2435.89,-7407.58"/>
<polygon fill="gray" stroke="gray" points="2434.88,-7410.93 2445.47,-7410.61 2437,-7404.26 2434.88,-7410.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2122.67,-7111C2127.95,-7108.32 2133.08,-7105.37 2138,-7102.12 2216.39,-7050.34 2257.12,-6939.28 2272.55,-6887.18"/>
<polygon fill="gray" stroke="gray" points="2276,-6887.87 2275.38,-6877.29 2269.27,-6885.94 2276,-6887.87"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1962.75,-7201.26C2011.34,-7223.53 2097.56,-7261.5 2174,-7287.12 2263.42,-7317.09 2369.07,-7342.85 2437.92,-7358.4"/>
<polygon fill="gray" stroke="gray" points="2437.28,-7361.84 2447.8,-7360.62 2438.81,-7355.01 2437.28,-7361.84"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1974.63,-7199.88C2024.71,-7215.8 2103.82,-7239.16 2174,-7252.12 2361.05,-7286.66 2423.2,-7222.98 2600,-7293.12 2631.08,-7305.45 2660.62,-7329.97 2680.32,-7348.82"/>
<polygon fill="gray" stroke="gray" points="2678.03,-7351.48 2687.62,-7355.98 2682.93,-7346.48 2678.03,-7351.48"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1974.7,-7181.72C2060.27,-7180.05 2238.64,-7179.47 2388,-7198.12 2401.53,-7199.81 2415.77,-7202.28 2429.56,-7205.04"/>
<polygon fill="gray" stroke="gray" points="2429.01,-7208.5 2439.52,-7207.1 2430.43,-7201.65 2429.01,-7208.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;pub fn hash_from_bytes&lt;D&gt;(input: &amp;[u8]) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash = D::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hash.update(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::fr...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1539,-6877.12 1405,-6877.12 1405,-6841.12 1539,-6841.12 1539,-6877.12"/>
<text text-anchor="middle" x="1472" y="-6855.42" font-family="Helvetica,sans-Serif" font-size="14.00">hash_from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;pub fn from_hash&lt;D&gt;(hash: D) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut output = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output.copy_from_slice(hash.finalize().as_slice()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1967.5,-6877.12 1878.5,-6877.12 1878.5,-6841.12 1967.5,-6841.12 1967.5,-6877.12"/>
<text text-anchor="middle" x="1923" y="-6855.42" font-family="Helvetica,sans-Serif" font-size="14.00">from_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1539.25,-6859.12C1628.5,-6859.12 1785.63,-6859.12 1868.06,-6859.12"/>
<polygon fill="gray" stroke="gray" points="1868.22,-6862.62 1878.22,-6859.12 1868.22,-6855.62 1868.22,-6862.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1967.65,-6859.12C2016.13,-6859.12 2096.39,-6859.12 2163.41,-6859.12"/>
<polygon fill="gray" stroke="gray" points="2163.63,-6862.62 2173.63,-6859.12 2163.63,-6855.62 2163.63,-6862.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2288.58,-6877.26C2306.62,-6927.6 2357.6,-7073.51 2388,-7198.12 2409.72,-7287.14 2363.4,-7332.39 2424,-7401.12 2427.66,-7405.27 2431.95,-7408.79 2436.62,-7411.78"/>
<polygon fill="gray" stroke="gray" points="2434.94,-7414.85 2445.39,-7416.59 2438.31,-7408.71 2434.94,-7414.85"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2309.62,-7237.62C2332.52,-7248.97 2364.95,-7267.37 2388,-7290.12 2409.33,-7311.16 2400.22,-7328.88 2424,-7347.12 2428.47,-7350.55 2433.38,-7353.54 2438.52,-7356.16"/>
<polygon fill="gray" stroke="gray" points="2437.44,-7359.51 2447.99,-7360.48 2440.34,-7353.15 2437.44,-7359.51"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2309.62,-7225.12C2338.14,-7225.12 2384.09,-7225.12 2424.9,-7225.12"/>
<polygon fill="gray" stroke="gray" points="2425.15,-7228.62 2435.15,-7225.12 2425.15,-7221.62 2425.15,-7228.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;fn from_bytes_mod_order_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bignum = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// set bignum = x + 2^256x &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[i] = X[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[32 + i] = X[i]; &#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2030,-7093.12 1816,-7093.12 1816,-7057.12 2030,-7057.12 2030,-7093.12"/>
<text text-anchor="middle" x="1923" y="-7071.42" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2030.02,-7078.16C2066.27,-7075.07 2105.78,-7066.82 2138,-7048.12 2203.36,-7010.17 2248.17,-6929.02 2268.17,-6886.45"/>
<polygon fill="gray" stroke="gray" points="2271.4,-6887.8 2272.39,-6877.25 2265.04,-6884.88 2271.4,-6887.8"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().</title>
<g id="a_node55"><a xlink:title="pub fn raw_sign&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;esk: &amp;ExpandedSecretKey, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Signature where &#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, { &#160;&#160;&#160;&#160;esk.raw_sign::&lt;CtxDig...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1075,-6030.12 997,-6030.12 997,-5994.12 1075,-5994.12 1075,-6030.12"/>
<text text-anchor="middle" x="1036" y="-6008.42" font-family="Helvetica,sans-Serif" font-size="14.00">raw_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_sign&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, &#160;&#160;&#160;&#160;) &#45;&gt; Signature &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1511,-5947.12 1433,-5947.12 1433,-5911.12 1511,-5911.12 1511,-5947.12"/>
<text text-anchor="middle" x="1472" y="-5925.42" font-family="Helvetica,sans-Serif" font-size="14.00">raw_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1075.29,-6007.18C1115.46,-6001.81 1180.37,-5992.57 1236,-5982.12 1301.1,-5969.89 1375.6,-5952.5 1422.94,-5941.02"/>
<polygon fill="gray" stroke="gray" points="1424.03,-5944.36 1432.91,-5938.6 1422.37,-5937.56 1424.03,-5944.36"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1511.32,-5944.49C1557.92,-5965.11 1635.8,-6006.09 1680,-6065.12 1869.55,-6318.28 1911.96,-6720.91 1920.2,-6830.68"/>
<polygon fill="gray" stroke="gray" points="1916.73,-6831.22 1920.93,-6840.94 1923.71,-6830.72 1916.73,-6831.22"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;fn try_sign(&amp;self, message: &amp;[u8]) &#45;&gt; Result&lt;Signature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expanded: ExpandedSecretKey = (&amp;self.secret_key).into(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(expanded.raw_sign::&lt;Sha512&gt;(message, &amp;self...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1072,-5947.12 1000,-5947.12 1000,-5911.12 1072,-5911.12 1072,-5947.12"/>
<text text-anchor="middle" x="1036" y="-5925.42" font-family="Helvetica,sans-Serif" font-size="14.00">try_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1072.15,-5929.12C1149.5,-5929.12 1334.59,-5929.12 1422.74,-5929.12"/>
<polygon fill="gray" stroke="gray" points="1422.74,-5932.62 1432.74,-5929.12 1422.74,-5925.62 1422.74,-5932.62"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1089.5,-5864.12 982.5,-5864.12 982.5,-5828.12 1089.5,-5828.12 1089.5,-5864.12"/>
<text text-anchor="middle" x="1036" y="-5842.42" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Dige...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1547.5,-5864.12 1396.5,-5864.12 1396.5,-5828.12 1547.5,-5828.12 1547.5,-5864.12"/>
<text text-anchor="middle" x="1472" y="-5842.42" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1089.78,-5846.12C1163.56,-5846.12 1298.31,-5846.12 1386.24,-5846.12"/>
<polygon fill="gray" stroke="gray" points="1386.46,-5849.62 1396.46,-5846.12 1386.46,-5842.62 1386.46,-5849.62"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1547.57,-5846.98C1591.69,-5851.47 1645.5,-5864.49 1680,-5899.12 1817.89,-6037.52 1901.71,-6687.12 1918.76,-6830.9"/>
<polygon fill="gray" stroke="gray" points="1915.32,-6831.56 1919.96,-6841.09 1922.27,-6830.75 1915.32,-6831.56"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().</title>
<g id="a_node60"><a xlink:title=" &#160;&#160;&#160;fn repudiation() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message1 = b&#39; Send 100 USD to Alice&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message2 = b&#39; Send 100000 USD to Alice&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s: Scalar = non_null_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pubkey = WEA...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1083.5,-5754.12 988.5,-5754.12 988.5,-5718.12 1083.5,-5718.12 1083.5,-5754.12"/>
<text text-anchor="middle" x="1036" y="-5732.42" font-family="Helvetica,sans-Serif" font-size="14.00">repudiation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;fn non_null_scalar() &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s_candidate = Scalar::random(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while s_candidate == Scalar::ZERO { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s_candidat...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1533.5,-5781.12 1410.5,-5781.12 1410.5,-5745.12 1533.5,-5745.12 1533.5,-5781.12"/>
<text text-anchor="middle" x="1472" y="-5759.42" font-family="Helvetica,sans-Serif" font-size="14.00">non_null_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1083.86,-5739.03C1160.05,-5743.77 1311.23,-5753.18 1400.46,-5758.73"/>
<polygon fill="gray" stroke="gray" points="1400.29,-5762.23 1410.49,-5759.35 1400.73,-5755.24 1400.29,-5762.23"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pub_key: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature_r: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h = Sha512::defa...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1547.5,-5727.12 1396.5,-5727.12 1396.5,-5691.12 1547.5,-5691.12 1547.5,-5727.12"/>
<text text-anchor="middle" x="1472" y="-5705.42" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1083.86,-5733.2C1156.14,-5728.71 1295.93,-5720.01 1386.27,-5714.39"/>
<polygon fill="gray" stroke="gray" points="1386.72,-5717.87 1396.49,-5713.75 1386.29,-5710.88 1386.72,-5717.87"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1533.69,-5760.51C1581.52,-5762.09 1645.68,-5773.02 1680,-5816.12 1718.91,-5864.98 1666.11,-6893.78 1708,-6940.12 1749.85,-6986.41 1827.9,-6983.87 1877.28,-6976.46"/>
<polygon fill="gray" stroke="gray" points="1878.05,-6979.88 1887.36,-6974.82 1876.93,-6972.98 1878.05,-6979.88"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1547.63,-5699.15C1591.48,-5697.62 1645.01,-5703.9 1680,-5736.12 1764.71,-5814.11 1893.51,-6665.21 1917.93,-6831.16"/>
<polygon fill="gray" stroke="gray" points="1914.47,-6831.7 1919.38,-6841.09 1921.4,-6830.68 1914.47,-6831.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node63"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="641.5,-1646.12 512.5,-1646.12 512.5,-1610.12 641.5,-1610.12 641.5,-1646.12"/>
<text text-anchor="middle" x="577" y="-1624.42" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="1063,-1785.12 1009,-1785.12 1009,-1749.12 1063,-1749.12 1063,-1785.12"/>
<text text-anchor="middle" x="1036" y="-1763.42" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M641.73,-1626.71C692.7,-1629 762.87,-1640.3 808,-1681.12 828.54,-1699.69 806.59,-1722.56 828,-1740.12 876.36,-1779.77 953.58,-1778.24 998.77,-1773.02"/>
<polygon fill="blue" stroke="blue" points="999.25,-1776.49 1008.72,-1771.75 998.36,-1769.55 999.25,-1776.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node64"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="643.5,-1592.12 510.5,-1592.12 510.5,-1556.12 643.5,-1556.12 643.5,-1592.12"/>
<text text-anchor="middle" x="577" y="-1570.42" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="1085,-1731.12 987,-1731.12 987,-1695.12 1085,-1695.12 1085,-1731.12"/>
<text text-anchor="middle" x="1036" y="-1709.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M643.71,-1563.38C694.61,-1558.99 763.7,-1562.15 808,-1601.12 835.52,-1625.32 800.93,-1656.42 828,-1681.12 867.71,-1717.35 930.58,-1722.41 976.62,-1720.21"/>
<polygon fill="blue" stroke="blue" points="976.99,-1723.7 986.76,-1719.6 976.57,-1716.71 976.99,-1723.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="1194,-5644.12 878,-5644.12 878,-5608.12 1194,-5608.12 1194,-5644.12"/>
<text text-anchor="middle" x="1036" y="-5622.42" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="1547,-5507.12 1397,-5507.12 1397,-5471.12 1547,-5471.12 1547,-5507.12"/>
<text text-anchor="middle" x="1472" y="-5485.42" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1194.1,-5609.36C1208.39,-5606.47 1222.54,-5603.08 1236,-5599.12 1307.96,-5577.93 1385.74,-5537.76 1431.32,-5512.27"/>
<polygon fill="blue" stroke="blue" points="1433.28,-5515.19 1440.27,-5507.22 1429.84,-5509.09 1433.28,-5515.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="1182.5,-5590.12 889.5,-5590.12 889.5,-5554.12 1182.5,-5554.12 1182.5,-5590.12"/>
<text text-anchor="middle" x="1036" y="-5568.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="1536,-5453.12 1408,-5453.12 1408,-5417.12 1536,-5417.12 1536,-5453.12"/>
<text text-anchor="middle" x="1472" y="-5431.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1182.74,-5569.02C1202.13,-5563.43 1220.6,-5554.88 1236,-5542.12 1265.01,-5518.08 1234.75,-5485.86 1264,-5462.12 1300.86,-5432.19 1354.2,-5425.83 1397.5,-5426.74"/>
<polygon fill="blue" stroke="blue" points="1397.59,-5430.25 1407.71,-5427.09 1397.83,-5423.25 1397.59,-5430.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="1093.5,-5453.12 978.5,-5453.12 978.5,-5417.12 1093.5,-5417.12 1093.5,-5453.12"/>
<text text-anchor="middle" x="1036" y="-5431.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1093.74,-5435.12C1171.68,-5435.12 1311.94,-5435.12 1397.73,-5435.12"/>
<polygon fill="blue" stroke="blue" points="1397.91,-5438.62 1407.91,-5435.12 1397.91,-5431.62 1397.91,-5438.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1127.5,-5507.12 944.5,-5507.12 944.5,-5471.12 1127.5,-5471.12 1127.5,-5507.12"/>
<text text-anchor="middle" x="1036" y="-5485.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1127.72,-5477.83C1207.82,-5467.86 1323.12,-5453.52 1397.56,-5444.26"/>
<polygon fill="blue" stroke="blue" points="1398.29,-5447.69 1407.78,-5442.98 1397.42,-5440.75 1398.29,-5447.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1127.72,-5489.12C1204.02,-5489.12 1312.27,-5489.12 1386.7,-5489.12"/>
<polygon fill="blue" stroke="blue" points="1386.97,-5492.62 1396.97,-5489.12 1386.97,-5485.62 1386.97,-5492.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M1536.43,-5424.49C1582.86,-5420.65 1643.84,-5424.49 1680,-5462.12 1703.97,-5487.05 1703.1,-5737.88 1708,-5772.12 1768.87,-6197.16 1886.32,-6707.51 1915.38,-6831.16"/>
<polygon fill="blue" stroke="blue" points="1911.99,-6832.04 1917.69,-6840.97 1918.8,-6830.44 1911.99,-6832.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M1502.42,-5507.22C1548.19,-5537.03 1635.77,-5601.01 1680,-5679.12 1709.87,-5731.87 1884.2,-6657.29 1916.76,-6831.1"/>
<polygon fill="blue" stroke="blue" points="1913.34,-6831.83 1918.62,-6841.02 1920.22,-6830.55 1913.34,-6831.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node71"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="211.5,-4958.12 122.5,-4958.12 122.5,-4922.12 211.5,-4922.12 211.5,-4958.12"/>
<text text-anchor="middle" x="167" y="-4936.42" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1063,-4758.12 1009,-4758.12 1009,-4722.12 1063,-4722.12 1063,-4758.12"/>
<text text-anchor="middle" x="1036" y="-4736.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M211.67,-4946.63C325.19,-4960.95 632.91,-4982.7 808,-4830.12 830.15,-4810.82 805.47,-4785.97 828,-4767.12 876.1,-4726.89 953.74,-4728.7 999.02,-4734.11"/>
<polygon fill="blue" stroke="blue" points="998.61,-4737.59 1008.98,-4735.42 999.52,-4730.64 998.61,-4737.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="614,-4767.12 540,-4767.12 540,-4731.12 614,-4731.12 614,-4767.12"/>
<text text-anchor="middle" x="577" y="-4745.42" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M211.63,-4944.39C245.15,-4945.13 290.27,-4940.2 318,-4913.12 362.46,-4869.69 300.23,-4818.16 346,-4776.12 395.31,-4730.82 477.79,-4733.03 529.42,-4740.11"/>
<polygon fill="blue" stroke="blue" points="529.23,-4743.62 539.63,-4741.63 530.26,-4736.69 529.23,-4743.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node72"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="214,-4904.12 120,-4904.12 120,-4868.12 214,-4868.12 214,-4904.12"/>
<text text-anchor="middle" x="167" y="-4882.42" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="604,-4713.12 550,-4713.12 550,-4677.12 604,-4677.12 604,-4713.12"/>
<text text-anchor="middle" x="577" y="-4691.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M214.11,-4889.37C247.39,-4889.08 291.03,-4882.86 318,-4856.12 361.21,-4813.28 301.1,-4763.18 346,-4722.12 398.76,-4673.86 489.22,-4679.62 539.54,-4687.64"/>
<polygon fill="blue" stroke="blue" points="539.19,-4691.13 549.63,-4689.36 540.37,-4684.23 539.19,-4691.13"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().</title>
<g id="a_node73"><a xlink:title="pub fn scalar_from_slice_wide(bytes: &amp;[u8]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="2009.5,-748.12 1836.5,-748.12 1836.5,-712.12 2009.5,-712.12 2009.5,-748.12"/>
<text text-anchor="middle" x="1923" y="-726.42" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M2009.63,-728.08C2055.11,-731.95 2107.72,-745.34 2138,-783.12 2239.34,-909.54 2276.96,-6389.91 2279.82,-6830.98"/>
<polygon fill="blue" stroke="blue" points="2276.32,-6831.01 2279.89,-6840.99 2283.32,-6830.97 2276.32,-6831.01"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="1093.5,-957.12 978.5,-957.12 978.5,-921.12 1093.5,-921.12 1093.5,-957.12"/>
<text text-anchor="middle" x="1036" y="-935.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M1093.74,-947.76C1139.56,-954.28 1205.76,-962.67 1264,-966.12 1356.28,-971.59 1611.3,-1027.97 1680,-966.12 1724.17,-926.35 1663.83,-739.89 1708,-700.12 1850.03,-572.25 2001.32,-566.55 2138,-700.12 2255.5,-814.94 2278.27,-6385.23 2279.9,-6830.87"/>
<polygon fill="blue" stroke="blue" points="2276.4,-6830.99 2279.94,-6840.98 2283.4,-6830.96 2276.4,-6830.99"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node75"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="1536,-903.12 1408,-903.12 1408,-867.12 1536,-867.12 1536,-903.12"/>
<text text-anchor="middle" x="1472" y="-881.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1093.74,-932.06C1171.68,-922.36 1311.94,-904.91 1397.73,-894.23"/>
<polygon fill="blue" stroke="blue" points="1398.42,-897.68 1407.91,-892.97 1397.56,-890.73 1398.42,-897.68"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node76"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="1499,-957.12 1445,-957.12 1445,-921.12 1499,-921.12 1499,-957.12"/>
<text text-anchor="middle" x="1472" y="-935.42" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1093.74,-939.12C1184.18,-939.12 1358.55,-939.12 1434.34,-939.12"/>
<polygon fill="blue" stroke="blue" points="1434.78,-942.62 1444.78,-939.12 1434.78,-935.62 1434.78,-942.62"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="1972,-2444.12 1874,-2444.12 1874,-2408.12 1972,-2408.12 1972,-2444.12"/>
<text text-anchor="middle" x="1923" y="-2422.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1536.18,-875.18C1582.17,-871.78 1642.7,-875.88 1680,-912.12 1902.75,-1128.54 1920.49,-2208.37 1921.88,-2397.75"/>
<polygon fill="blue" stroke="blue" points="1918.38,-2398.01 1921.95,-2407.99 1925.38,-2397.97 1918.38,-2398.01"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node77"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="1500,-2444.12 1444,-2444.12 1444,-2408.12 1500,-2408.12 1500,-2444.12"/>
<text text-anchor="middle" x="1472" y="-2422.42" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1444.69,-937.44C1394.04,-936.05 1287.33,-941.75 1250,-1010.12 1231.94,-1043.2 1231.94,-2334.03 1250,-2367.12 1284.31,-2429.96 1379.68,-2433.68 1433.59,-2430.29"/>
<polygon fill="blue" stroke="blue" points="1434.08,-2433.76 1443.79,-2429.53 1433.56,-2426.78 1434.08,-2433.76"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M1500.38,-2429.7C1620.35,-2445.68 2095.53,-2511.8 2138,-2562.12 2284.53,-2735.71 2280.78,-6466 2280.07,-6830.52"/>
<polygon fill="blue" stroke="blue" points="2276.57,-6830.76 2280.04,-6840.76 2283.57,-6830.77 2276.57,-6830.76"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1500.08,-2426.12C1571.4,-2426.12 1765.69,-2426.12 1863.74,-2426.12"/>
<polygon fill="blue" stroke="blue" points="1863.78,-2429.62 1873.78,-2426.12 1863.78,-2422.62 1863.78,-2429.62"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M1972.04,-2425.69C2022.32,-2428.12 2099.25,-2440.59 2138,-2491.12 2278.63,-2674.5 2280.2,-6465.89 2280.02,-6830.93"/>
<polygon fill="blue" stroke="blue" points="2276.52,-6830.95 2280.02,-6840.95 2283.52,-6830.95 2276.52,-6830.95"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="1128.5,-2464.12 943.5,-2464.12 943.5,-2428.12 1128.5,-2428.12 1128.5,-2464.12"/>
<text text-anchor="middle" x="1036" y="-2442.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M1128.54,-2458.14C1386.78,-2492.47 2104.51,-2590.92 2138,-2629.12 2285.43,-2797.27 2280.87,-6471.86 2280.07,-6830.95"/>
<polygon fill="blue" stroke="blue" points="2276.57,-6831.03 2280.05,-6841.04 2283.57,-6831.04 2276.57,-6831.03"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1128.51,-2441.9C1223.17,-2437.54 1366.38,-2430.94 1433.63,-2427.84"/>
<polygon fill="blue" stroke="blue" points="1433.92,-2431.33 1443.75,-2427.37 1433.6,-2424.34 1433.92,-2431.33"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1128.66,-2449.59C1170,-2450.99 1219.45,-2452.43 1264,-2453.12 1448.87,-2455.97 1495.4,-2463.38 1680,-2453.12 1743.05,-2449.61 1814.91,-2441 1863.84,-2434.44"/>
<polygon fill="blue" stroke="blue" points="1864.48,-2437.89 1873.92,-2433.08 1863.54,-2430.95 1864.48,-2437.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<g id="a_node80"><a xlink:title="fn scalars_summing_to&lt;R: Rng + CryptoRng&gt;(n: NonZeroUsize, s: &amp;Scalar, rng: &amp;mut R) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut v: Vec&lt;Scalar&gt; = repeat_with(|| random_scalar(rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.take(n.get() &#45; 1) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1115,-4664.12 957,-4664.12 957,-4628.12 1115,-4628.12 1115,-4664.12"/>
<text text-anchor="middle" x="1036" y="-4642.42" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<g id="a_node81"><a xlink:title="fn random_scalar&lt;R: Rng + CryptoRng&gt;(r: &amp;mut R) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;r.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="1531.5,-4721.12 1412.5,-4721.12 1412.5,-4685.12 1531.5,-4685.12 1531.5,-4721.12"/>
<text text-anchor="middle" x="1472" y="-4699.42" font-family="Helvetica,sans-Serif" font-size="14.00">random_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1115.09,-4656.37C1196.84,-4667.11 1323.95,-4683.81 1402.09,-4694.07"/>
<polygon fill="blue" stroke="blue" points="1401.94,-4697.58 1412.31,-4695.41 1402.85,-4690.64 1401.94,-4697.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M1524.76,-4721.19C1571.86,-4740.22 1639.97,-4774.63 1680,-4826.12 2207.32,-5504.42 2271.85,-6636.4 2279.13,-6830.41"/>
<polygon fill="blue" stroke="blue" points="2275.64,-6830.76 2279.49,-6840.63 2282.64,-6830.52 2275.64,-6830.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="614,-4821.12 540,-4821.12 540,-4785.12 614,-4785.12 614,-4821.12"/>
<text text-anchor="middle" x="577" y="-4799.42" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M591.75,-4821.3C634.16,-4878.64 762.8,-5062.3 808,-5238.12 816.16,-5269.87 805.42,-6394.35 828,-6418.12 890.58,-6484.02 1171.6,-6382 1236,-6446.12 1296.48,-6506.33 1205.83,-6766.67 1264,-6829.12 1296.49,-6864 1350.09,-6871 1394.61,-6869.53"/>
<polygon fill="blue" stroke="blue" points="1395.01,-6873.02 1404.83,-6869.05 1394.68,-6866.03 1395.01,-6873.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.17,-4737.89C1129.19,-4732.26 1304.21,-4717.34 1402.16,-4708.99"/>
<polygon fill="blue" stroke="blue" points="1402.59,-4712.46 1412.26,-4708.13 1402,-4705.49 1402.59,-4712.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node84"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1111,-4812.12 961,-4812.12 961,-4776.12 1111,-4776.12 1111,-4812.12"/>
<text text-anchor="middle" x="1036" y="-4790.42" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M1082.26,-4812.32C1130.27,-4834.36 1203.56,-4876.49 1236,-4939.12 1284.3,-5032.36 1194.69,-6750.23 1264,-6829.12 1295.64,-6865.13 1349.7,-6871.98 1394.63,-6870.17"/>
<polygon fill="blue" stroke="blue" points="1394.87,-6873.66 1404.66,-6869.61 1394.48,-6866.67 1394.87,-6873.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;fn scalars_summing_to_works() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(n in 1usize..10)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut seed = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.try_fill_bytes(&amp;mut seed...">
<polygon fill="white" stroke="black" points="680,-4639.12 474,-4639.12 474,-4603.12 680,-4603.12 680,-4639.12"/>
<text text-anchor="middle" x="577" y="-4617.42" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to_works</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M590.83,-4602.98C623.89,-4558.02 717.21,-4442.07 828,-4400.12 964.4,-4348.47 2041.33,-4374.9 2138,-4484.12 2219.86,-4576.59 2272.71,-6569.59 2279.3,-6830.94"/>
<polygon fill="blue" stroke="blue" points="2275.81,-6831.21 2279.56,-6841.11 2282.81,-6831.03 2275.81,-6831.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M680.28,-4626.71C760.35,-4631.09 870.56,-4637.12 946.79,-4641.29"/>
<polygon fill="blue" stroke="blue" points="946.67,-4644.79 956.85,-4641.84 947.05,-4637.8 946.67,-4644.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="238.5,-4740.12 95.5,-4740.12 95.5,-4704.12 238.5,-4704.12 238.5,-4740.12"/>
<text text-anchor="middle" x="167" y="-4718.42" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M218.79,-4740.16C254.06,-4752.03 302.37,-4767.02 346,-4776.12 408.93,-4789.25 482.99,-4796.51 529.71,-4800.11"/>
<polygon fill="blue" stroke="blue" points="529.59,-4803.61 539.83,-4800.87 530.11,-4796.63 529.59,-4803.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M213.99,-4704.07C249.43,-4691.17 300,-4674.94 346,-4668.12 447.56,-4653.05 706.54,-4652.41 808,-4668.12 827.17,-4671.08 940.2,-4708.39 999.19,-4728.09"/>
<polygon fill="blue" stroke="blue" points="998.26,-4731.47 1008.86,-4731.33 1000.48,-4724.84 998.26,-4731.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M238.6,-4726.79C322.19,-4732.32 458.98,-4741.37 529.98,-4746.07"/>
<polygon fill="blue" stroke="blue" points="529.76,-4749.57 539.97,-4746.73 530.22,-4742.58 529.76,-4749.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M238.6,-4717.45C326.07,-4711.66 471.79,-4702.01 539.43,-4697.54"/>
<polygon fill="blue" stroke="blue" points="539.85,-4701.02 549.6,-4696.87 539.39,-4694.03 539.85,-4701.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M614.25,-4740.68C665.72,-4731.1 759.14,-4723 808,-4776.12 853.08,-4825.13 780.95,-5327.99 828,-5375.12 894.92,-5442.16 1613.57,-5337.59 1680,-5405.12 1737.71,-5463.78 1652.99,-6824.91 1708,-6886.12 1751.72,-6934.77 1835.42,-6929.6 1884.18,-6921.4"/>
<polygon fill="blue" stroke="blue" points="1885.1,-6924.79 1894.31,-6919.57 1883.85,-6917.9 1885.1,-6924.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M614.23,-4743.14C663.18,-4737.15 750.86,-4734.04 808,-4776.12 825.62,-4789.1 809.9,-4808.82 828,-4821.12 1141.47,-5034.11 1410,-4590.17 1680,-4856.12 1719.48,-4895.01 1702.54,-5298.97 1708,-5354.12 1767.31,-5953.02 1890.77,-6679.16 1917.02,-6830.62"/>
<polygon fill="blue" stroke="blue" points="1913.65,-6831.65 1918.81,-6840.9 1920.55,-6830.45 1913.65,-6831.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M614.11,-4748.28C659.97,-4746.44 741.16,-4740.61 808,-4722.12 817.39,-4719.52 818.49,-4715.24 828,-4713.12 882.73,-4700.93 1247.5,-4701.71 1402.03,-4702.61"/>
<polygon fill="blue" stroke="blue" points="1402.32,-4706.12 1412.34,-4702.68 1402.36,-4699.12 1402.32,-4706.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M614.24,-4752.69C686.49,-4759.8 850.16,-4775.92 950.74,-4785.82"/>
<polygon fill="blue" stroke="blue" points="950.58,-4789.32 960.87,-4786.82 951.27,-4782.36 950.58,-4789.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.21,-4692.31C669.35,-4685.32 840.91,-4666.93 946.83,-4655.57"/>
<polygon fill="blue" stroke="blue" points="947.3,-4659.04 956.87,-4654.49 946.56,-4652.08 947.3,-4659.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.02,-4695.08C692.53,-4694.99 990.12,-4694.94 1236,-4698.12 1291.88,-4698.84 1355.23,-4700.22 1402.06,-4701.35"/>
<polygon fill="blue" stroke="blue" points="1402.01,-4704.85 1412.09,-4701.59 1402.18,-4697.85 1402.01,-4704.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.08,-4690.49C650.1,-4683.85 746.65,-4676.94 808,-4722.12 825.62,-4735.1 810.46,-4754.03 828,-4767.12 862.67,-4793 910.03,-4800.61 950.69,-4801.37"/>
<polygon fill="blue" stroke="blue" points="950.85,-4804.87 960.87,-4801.42 950.89,-4797.87 950.85,-4804.87"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node89"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="238.5,-1974.12 95.5,-1974.12 95.5,-1938.12 238.5,-1938.12 238.5,-1974.12"/>
<text text-anchor="middle" x="167" y="-1952.42" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node90"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="641,-1974.12 513,-1974.12 513,-1938.12 641,-1938.12 641,-1974.12"/>
<text text-anchor="middle" x="577" y="-1952.42" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M238.6,-1956.12C312.45,-1956.12 427.82,-1956.12 502.67,-1956.12"/>
<polygon fill="blue" stroke="blue" points="502.95,-1959.62 512.95,-1956.12 502.95,-1952.62 502.95,-1959.62"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M169.22,-1937.75C174.78,-1870.58 204.06,-1637.42 346,-1544.12 388.9,-1515.92 769.9,-1509.71 808,-1544.12 840.49,-1573.46 797.48,-1708.73 828,-1740.12 872.16,-1785.53 952.51,-1781.52 999.05,-1774.4"/>
<polygon fill="blue" stroke="blue" points="999.7,-1777.84 1009,-1772.75 998.56,-1770.94 999.7,-1777.84"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M168.68,-1938C172.37,-1868.43 196.03,-1617.23 346,-1516.12 388.56,-1487.42 769.58,-1482.07 808,-1516.12 863.29,-1565.11 776.63,-1628.04 828,-1681.12 865.7,-1720.07 929.68,-1724.51 976.55,-1721.42"/>
<polygon fill="blue" stroke="blue" points="976.88,-1724.91 986.57,-1720.63 976.33,-1717.93 976.88,-1724.91"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M641.22,-1965.67C692.4,-1969.66 763.12,-1966.1 808,-1926.12 835.37,-1901.74 803.68,-1873.54 828,-1846.12 872.49,-1795.96 952.37,-1777.48 998.81,-1770.79"/>
<polygon fill="blue" stroke="blue" points="999.3,-1774.26 1008.75,-1769.47 998.37,-1767.32 999.3,-1774.26"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="722.5,-1783.12 431.5,-1783.12 431.5,-1747.12 722.5,-1747.12 722.5,-1783.12"/>
<text text-anchor="middle" x="577" y="-1761.42" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.6,-1765.75C819.34,-1766.17 939.39,-1766.7 998.55,-1766.96"/>
<polygon fill="blue" stroke="blue" points="998.86,-1770.46 1008.87,-1767 998.89,-1763.46 998.86,-1770.46"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.6,-1748.66C808.55,-1738.88 912.9,-1727.01 976.6,-1719.76"/>
<polygon fill="blue" stroke="blue" points="977.31,-1723.2 986.85,-1718.6 976.52,-1716.25 977.31,-1723.2"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_should_produce_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(&amp;nickname, discriminator).u...">
<polygon fill="white" stroke="black" points="725.5,-1891.12 428.5,-1891.12 428.5,-1855.12 725.5,-1855.12 725.5,-1891.12"/>
<text text-anchor="middle" x="577" y="-1869.42" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_should_produce_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<g id="a_node96"><a xlink:title="fn username_sha_scalar(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Scalar, UsernameError&gt; { &#160;&#160;&#160;&#160;let mut hash = Sha512::new(); &#160;&#160;&#160;&#160;hash.update(nickname.as_bytes()); &#160;&#160;&#160;&#160;hash.update([0x00]); &#160;&#160;&#160;&#160;hash....">
<polygon fill="white" stroke="black" points="1118.5,-1891.12 953.5,-1891.12 953.5,-1855.12 1118.5,-1855.12 1118.5,-1891.12"/>
<text text-anchor="middle" x="1036" y="-1869.42" font-family="Helvetica,sans-Serif" font-size="14.00">username_sha_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M725.74,-1873.12C797.26,-1873.12 880.88,-1873.12 943.13,-1873.12"/>
<polygon fill="blue" stroke="blue" points="943.32,-1876.62 953.32,-1873.12 943.32,-1869.62 943.32,-1876.62"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.14,-1769.72C1106.08,-1775.44 1191.25,-1793.17 1236,-1846.12 1274.43,-1891.59 1245.2,-1920.63 1264,-1977.12 1319.4,-2143.58 1418.28,-2330.44 1455.91,-2399.02"/>
<polygon fill="blue" stroke="blue" points="1452.91,-2400.83 1460.8,-2407.9 1459.04,-2397.45 1452.91,-2400.83"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1085.31,-1704.95C1130.52,-1700.3 1196.81,-1701.65 1236,-1740.12 1294.09,-1797.14 1222.51,-1851.08 1264,-1921.12 1343.2,-2054.81 1756.52,-2322 1884.31,-2402.58"/>
<polygon fill="blue" stroke="blue" points="1882.69,-2405.69 1893.01,-2408.06 1886.41,-2399.77 1882.69,-2405.69"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="704,-1729.12 450,-1729.12 450,-1693.12 704,-1693.12 704,-1729.12"/>
<text text-anchor="middle" x="577" y="-1707.42" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M704.27,-1725.71C737.98,-1729.66 774.38,-1734 808,-1738.12 875.36,-1746.37 953.89,-1756.52 998.69,-1762.36"/>
<polygon fill="blue" stroke="blue" points="998.43,-1765.86 1008.8,-1763.68 999.33,-1758.92 998.43,-1765.86"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M704.09,-1711.67C793.17,-1712.06 908.44,-1712.56 976.77,-1712.86"/>
<polygon fill="blue" stroke="blue" points="976.9,-1716.36 986.91,-1712.91 976.93,-1709.36 976.9,-1716.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M1052.81,-1891.21C1088.44,-1931.51 1178.6,-2030.77 1264,-2103.12 1436.56,-2249.29 1574.1,-2196.3 1680,-2396.12 1700.79,-2435.34 1705.96,-3949.77 1708,-3994.12 1762.18,-5170.07 1898.35,-6612.87 1919.28,-6830.96"/>
<polygon fill="blue" stroke="blue" points="1915.8,-6831.34 1920.24,-6840.96 1922.77,-6830.67 1915.8,-6831.34"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<g id="a_node97"><a xlink:title="fn make_scalars(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Vec&lt;Scalar&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Ok(vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(nickname, discriminator)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname_scalar(nickname)?, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="632,-1837.12 522,-1837.12 522,-1801.12 632,-1801.12 632,-1837.12"/>
<text text-anchor="middle" x="577" y="-1815.42" font-family="Helvetica,sans-Serif" font-size="14.00">make_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M632.37,-1825.48C678.98,-1830.93 747.91,-1839.02 808,-1846.12 852.51,-1851.38 901.93,-1857.25 943.26,-1862.17"/>
<polygon fill="blue" stroke="blue" points="942.97,-1865.66 953.31,-1863.37 943.8,-1858.71 942.97,-1865.66"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node98"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="204.5,-3552.12 129.5,-3552.12 129.5,-3516.12 204.5,-3516.12 204.5,-3552.12"/>
<text text-anchor="middle" x="167" y="-3530.42" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node99"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="649,-3552.12 505,-3552.12 505,-3516.12 649,-3516.12 649,-3552.12"/>
<text text-anchor="middle" x="577" y="-3530.42" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M204.57,-3534.12C269.48,-3534.12 406.29,-3534.12 494.52,-3534.12"/>
<polygon fill="blue" stroke="blue" points="494.77,-3537.62 504.77,-3534.12 494.77,-3530.62 494.77,-3537.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<g id="a_node100"><a xlink:title="fn key_derivation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;let mut info_sho = poksho::ShoHmacSha256::new(b&#39; ExampleEndorsements&#39; ); &#160;&#160;&#160;&#160;info_sho....">
<polygon fill="white" stroke="black" points="635.5,-3498.12 518.5,-3498.12 518.5,-3462.12 635.5,-3462.12 635.5,-3498.12"/>
<text text-anchor="middle" x="577" y="-3476.42" font-family="Helvetica,sans-Serif" font-size="14.00">key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M204.77,-3528.17C240.72,-3522.44 297.06,-3513.7 346,-3507.12 400.46,-3499.79 462.32,-3492.59 508.16,-3487.47"/>
<polygon fill="blue" stroke="blue" points="508.72,-3490.93 518.27,-3486.35 507.95,-3483.98 508.72,-3490.93"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<g id="a_node101"><a xlink:title="fn attribute_key_inversion(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let key_pair = KeyPair::&lt;ExampleDomain&gt;::derive_from(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; KeyPair...">
<polygon fill="white" stroke="black" points="666,-5286.12 488,-5286.12 488,-5250.12 666,-5250.12 666,-5286.12"/>
<text text-anchor="middle" x="577" y="-5264.42" font-family="Helvetica,sans-Serif" font-size="14.00">attribute_key_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M204.53,-3535.79C239.97,-3539.57 292.09,-3551.32 318,-3587.12 359.35,-3644.24 327.49,-4788.07 346,-4856.12 389.33,-5015.41 506.97,-5179.22 555.07,-5241.73"/>
<polygon fill="blue" stroke="blue" points="552.49,-5244.11 561.38,-5249.86 558.02,-5239.82 552.49,-5244.11"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M649.03,-3544.99C695.31,-3553.4 756.45,-3567.04 808,-3587.12 1223.26,-3748.85 1453.85,-3698.12 1680,-4082.12 1719.53,-4149.24 1656.19,-6827.95 1708,-6886.12 1751.6,-6935.07 1835.63,-6929.7 1884.42,-6921.41"/>
<polygon fill="blue" stroke="blue" points="1885.05,-6924.85 1894.26,-6919.62 1883.8,-6917.96 1885.05,-6924.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKCredential_Endorsements_ServerRootKeyPair_generate_20240207&#39; ,...">
<polygon fill="white" stroke="black" points="1075.5,-3934.12 996.5,-3934.12 996.5,-3898.12 1075.5,-3898.12 1075.5,-3934.12"/>
<text text-anchor="middle" x="1036" y="-3912.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649.22,-3530.44C701.02,-3531.93 768.7,-3543.24 808,-3587.12 859.05,-3644.12 790.14,-3691.62 828,-3758.12 864.46,-3822.15 938.41,-3868.7 987.33,-3894.06"/>
<polygon fill="blue" stroke="blue" points="985.95,-3897.29 996.46,-3898.7 989.13,-3891.05 985.95,-3897.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="1081.5,-4096.12 990.5,-4096.12 990.5,-4060.12 1081.5,-4060.12 1081.5,-4096.12"/>
<text text-anchor="middle" x="1036" y="-4074.42" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649.07,-3529.61C701.5,-3530.54 770.08,-3541.51 808,-3587.12 840.99,-3626.8 793.13,-4013.08 828,-4051.12 865.65,-4092.18 932.72,-4093.66 980.31,-4088.3"/>
<polygon fill="blue" stroke="blue" points="980.96,-4091.74 990.45,-4087.02 980.09,-4084.8 980.96,-4091.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="1063,-4150.12 1009,-4150.12 1009,-4114.12 1063,-4114.12 1063,-4150.12"/>
<text text-anchor="middle" x="1036" y="-4128.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649.13,-3529.56C701.59,-3530.46 770.18,-3541.43 808,-3587.12 844.73,-3631.49 789.17,-4062.58 828,-4105.12 870.7,-4151.9 951.59,-4147.39 998.61,-4139.82"/>
<polygon fill="blue" stroke="blue" points="999.41,-4143.23 1008.67,-4138.07 998.21,-4136.33 999.41,-4143.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;pub fn from_blinding_scalar(scalar: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_inv: scalar.invert(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1116,-4204.12 956,-4204.12 956,-4168.12 1116,-4168.12 1116,-4204.12"/>
<text text-anchor="middle" x="1036" y="-4182.42" font-family="Helvetica,sans-Serif" font-size="14.00">from_blinding_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649.17,-3529.52C701.67,-3530.4 770.26,-3541.36 808,-3587.12 848.46,-3636.18 785.21,-4112.07 828,-4159.12 857.06,-4191.07 903.92,-4199.13 945.72,-4198.61"/>
<polygon fill="blue" stroke="blue" points="946.04,-4202.1 955.94,-4198.31 945.84,-4195.1 946.04,-4202.1"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.derive_key_from_tag_scalar(&amp;t) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1081.5,-3988.12 990.5,-3988.12 990.5,-3952.12 1081.5,-3952.12 1081.5,-3988.12"/>
<text text-anchor="middle" x="1036" y="-3966.42" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649.17,-3529.75C701.48,-3530.79 769.84,-3541.84 808,-3587.12 859.06,-3647.71 774.07,-3885.07 828,-3943.12 865.8,-3983.81 932.53,-3985.46 980,-3980.23"/>
<polygon fill="blue" stroke="blue" points="980.63,-3983.68 990.12,-3978.98 979.77,-3976.73 980.63,-3983.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="1069,-4042.12 1003,-4042.12 1003,-4006.12 1069,-4006.12 1069,-4042.12"/>
<text text-anchor="middle" x="1036" y="-4020.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649.27,-3529.67C701.63,-3530.67 770.01,-3541.7 808,-3587.12 837.26,-3622.1 797.08,-3963.59 828,-3997.12 869.2,-4041.8 945.25,-4039.53 992.81,-4032.64"/>
<polygon fill="blue" stroke="blue" points="993.46,-4036.09 1002.79,-4031.07 992.37,-4029.17 993.46,-4036.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) &#160;&#160;...">
<polygon fill="white" stroke="black" points="1966.5,-3959.12 1879.5,-3959.12 1879.5,-3923.12 1966.5,-3923.12 1966.5,-3959.12"/>
<text text-anchor="middle" x="1923" y="-3937.42" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649,-3533.87C830.18,-3535.89 1320.7,-3558.09 1680,-3730.12 1775.37,-3775.78 1862.28,-3869.62 1900.9,-3915.17"/>
<polygon fill="blue" stroke="blue" points="1898.43,-3917.68 1907.54,-3923.1 1903.8,-3913.18 1898.43,-3917.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M635.9,-3473.02C685.67,-3469.95 757.24,-3473.09 808,-3507.12 948.13,-3601.04 1010.31,-3811.84 1028.78,-3888"/>
<polygon fill="blue" stroke="blue" points="1025.39,-3888.89 1031.1,-3897.82 1032.21,-3887.28 1025.39,-3888.89"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M635.63,-3468.26C688.63,-3461.09 765.26,-3460.81 808,-3507.12 849.02,-3551.57 787.26,-4006.41 828,-4051.12 865.52,-4092.3 932.62,-4093.76 980.24,-4088.35"/>
<polygon fill="blue" stroke="blue" points="980.91,-4091.8 990.39,-4087.06 980.03,-4084.85 980.91,-4091.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M635.54,-3468.35C688.46,-3461.24 765.05,-3461 808,-3507.12 841.05,-3542.61 795.18,-3907.42 828,-3943.12 865.71,-3984.13 932.77,-3985.62 980.33,-3980.27"/>
<polygon fill="blue" stroke="blue" points="980.99,-3983.72 990.47,-3979 980.11,-3976.77 980.99,-3983.72"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;pub fn inverse_of&lt;D2: Domain&gt;(other: &amp;KeyPair&lt;D2&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_ne!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D2::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; You must provide a new domain for an inverse key&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="1080,-5286.12 992,-5286.12 992,-5250.12 1080,-5250.12 1080,-5286.12"/>
<text text-anchor="middle" x="1036" y="-5264.42" font-family="Helvetica,sans-Serif" font-size="14.00">inverse_of</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M666.11,-5268.12C759.7,-5268.12 904.57,-5268.12 981.97,-5268.12"/>
<polygon fill="blue" stroke="blue" points="981.98,-5271.62 991.98,-5268.12 981.98,-5264.62 981.98,-5271.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a1 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a2 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_scalars(a1, a2) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1085.5,-5340.12 986.5,-5340.12 986.5,-5304.12 1085.5,-5304.12 1085.5,-5340.12"/>
<text text-anchor="middle" x="1036" y="-5318.42" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M666.11,-5278.53C757.34,-5289.31 897.3,-5305.85 976,-5315.15"/>
<polygon fill="blue" stroke="blue" points="975.87,-5318.66 986.21,-5316.35 976.69,-5311.7 975.87,-5318.66"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M1080.34,-5265.75C1211.42,-5259.62 1599.67,-5249.31 1680,-5337.12 1738.1,-5400.62 1650.49,-6822.08 1708,-6886.12 1751.7,-6934.79 1835.41,-6929.61 1884.17,-6921.41"/>
<polygon fill="blue" stroke="blue" points="1885.09,-6924.8 1894.31,-6919.57 1883.85,-6917.91 1885.09,-6924.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1085.91,-5322.85C1220.96,-5323.8 1594.68,-5318.91 1680,-5238.12 1872.55,-5055.79 1914.76,-4142.33 1921.07,-3969.4"/>
<polygon fill="blue" stroke="blue" points="1924.57,-3969.42 1921.43,-3959.31 1917.57,-3969.18 1924.57,-3969.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node104"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="1532.5,-2731.12 1411.5,-2731.12 1411.5,-2695.12 1532.5,-2695.12 1532.5,-2731.12"/>
<text text-anchor="middle" x="1472" y="-2709.42" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1532.86,-2723.98C1579.87,-2735.68 1643.32,-2759.06 1680,-2804.12 1826.03,-2983.53 1904.58,-3753.4 1919.41,-3912.34"/>
<polygon fill="blue" stroke="blue" points="1915.96,-3913.08 1920.37,-3922.71 1922.93,-3912.43 1915.96,-3913.08"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CredentialPrivateKey::generate(randomness).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1511.5,-2677.12 1432.5,-2677.12 1432.5,-2641.12 1511.5,-2641.12 1511.5,-2677.12"/>
<text text-anchor="middle" x="1472" y="-2655.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ShoHmacSha256::new(b&#39; Signal_ZKCredential_CredentialPrivateKey_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_an...">
<polygon fill="white" stroke="black" points="1962.5,-2704.12 1883.5,-2704.12 1883.5,-2668.12 1962.5,-2668.12 1962.5,-2704.12"/>
<text text-anchor="middle" x="1923" y="-2682.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1511.67,-2661.44C1593.31,-2666.35 1783.13,-2677.77 1873.06,-2683.18"/>
<polygon fill="blue" stroke="blue" points="1873.07,-2686.68 1883.26,-2683.79 1873.49,-2679.69 1873.07,-2686.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1923,-2704.2C1923,-3107.09 1923,-3509.99 1923,-3912.88"/>
<polygon fill="blue" stroke="blue" points="1919.5,-3913 1923,-3923 1926.5,-3913 1919.5,-3913"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="627.5,-4042.12 526.5,-4042.12 526.5,-4006.12 627.5,-4006.12 627.5,-4042.12"/>
<text text-anchor="middle" x="577" y="-4020.42" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M627.55,-4032.16C678.3,-4037.5 756.81,-4037.38 808,-3997.12 828.12,-3981.3 807.99,-3959.07 828,-3943.12 872.53,-3907.63 940.37,-3905.53 986.14,-3909.21"/>
<polygon fill="blue" stroke="blue" points="985.84,-3912.69 996.12,-3910.13 986.49,-3905.72 985.84,-3912.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M627.8,-4029.94C674.39,-4035.4 745.91,-4043.78 808,-4051.12 866.81,-4058.07 934.18,-4066.09 980.16,-4071.57"/>
<polygon fill="blue" stroke="blue" points="979.86,-4075.06 990.21,-4072.77 980.69,-4068.11 979.86,-4075.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M627.55,-4016.08C678.3,-4010.74 756.81,-4010.85 808,-4051.12 828.12,-4066.94 807.99,-4089.17 828,-4105.12 876.8,-4144.01 953.61,-4142.8 998.66,-4137.84"/>
<polygon fill="blue" stroke="blue" points="999.36,-4141.28 1008.86,-4136.59 998.51,-4134.33 999.36,-4141.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M627.59,-4014.55C679.5,-4007.65 760,-4006.2 808,-4051.12 843.64,-4084.47 792.57,-4125.53 828,-4159.12 858.85,-4188.37 904.9,-4196.48 945.73,-4196.68"/>
<polygon fill="blue" stroke="blue" points="946.03,-4200.18 955.99,-4196.57 945.95,-4193.18 946.03,-4200.18"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M627.8,-4018.29C674.39,-4012.84 745.91,-4004.45 808,-3997.12 866.81,-3990.17 934.18,-3982.15 980.16,-3976.66"/>
<polygon fill="blue" stroke="blue" points="980.69,-3980.13 990.21,-3975.47 979.86,-3973.18 980.69,-3980.13"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M627.78,-4024.12C718.27,-4024.12 908.2,-4024.12 992.79,-4024.12"/>
<polygon fill="blue" stroke="blue" points="992.81,-4027.62 1002.81,-4024.12 992.81,-4020.62 992.81,-4027.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M627.83,-4013.88C680.33,-4006.29 761.71,-4004.17 808,-4051.12 838.43,-4081.98 795.82,-4216.09 828,-4245.12 895.32,-4305.85 1151.29,-4277.43 1236,-4245.12 1251.59,-4239.17 1249.21,-4227.84 1264,-4220.12 1432.47,-4132.15 1507.77,-4201.48 1680,-4121.12 1767.33,-4080.37 1854.17,-4005.18 1896.09,-3966.13"/>
<polygon fill="blue" stroke="blue" points="1898.49,-3968.67 1903.38,-3959.27 1893.7,-3963.57 1898.49,-3968.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="675,-4150.12 479,-4150.12 479,-4114.12 675,-4114.12 675,-4150.12"/>
<text text-anchor="middle" x="577" y="-4128.42" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M675.09,-4146.16C721.33,-4147.16 773.85,-4139.06 808,-4105.12 859.45,-4053.97 776.88,-3994.59 828,-3943.12 868.69,-3902.15 938.9,-3901.72 986.13,-3907.23"/>
<polygon fill="blue" stroke="blue" points="985.77,-3910.71 996.14,-3908.53 986.67,-3903.77 985.77,-3910.71"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M675.09,-4120.75C716.1,-4115.94 764.38,-4110.27 808,-4105.12 866.81,-4098.17 934.18,-4090.15 980.16,-4084.66"/>
<polygon fill="blue" stroke="blue" points="980.69,-4088.13 990.21,-4083.47 979.86,-4081.18 980.69,-4088.13"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M675.2,-4132.12C776.2,-4132.12 929,-4132.12 998.4,-4132.12"/>
<polygon fill="blue" stroke="blue" points="998.8,-4135.62 1008.8,-4132.12 998.8,-4128.62 998.8,-4135.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M675.09,-4143.48C716.1,-4148.29 764.38,-4153.96 808,-4159.12 853.42,-4164.49 903.95,-4170.49 945.79,-4175.47"/>
<polygon fill="blue" stroke="blue" points="945.61,-4178.98 955.95,-4176.69 946.43,-4172.03 945.61,-4178.98"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M675.1,-4145.28C720.91,-4145.94 773.07,-4137.81 808,-4105.12 843.64,-4071.76 792.57,-4030.7 828,-3997.12 867.98,-3959.22 933.46,-3956.81 980.07,-3961.1"/>
<polygon fill="blue" stroke="blue" points="979.99,-3964.61 990.3,-3962.18 980.72,-3957.65 979.99,-3964.61"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M675.09,-4142.6C719.81,-4142.34 771.03,-4134.2 808,-4105.12 828.12,-4089.3 807.99,-4067.07 828,-4051.12 874.67,-4013.92 946.95,-4013.41 992.58,-4017.77"/>
<polygon fill="blue" stroke="blue" points="992.42,-4021.28 1002.74,-4018.87 993.17,-4014.32 992.42,-4021.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M675.17,-4118.28C721.29,-4117.37 773.69,-4125.49 808,-4159.12 854.46,-4204.65 778.96,-4261.38 828,-4304.12 971.11,-4428.84 1514.9,-4335.81 1680,-4242.12 1796.8,-4175.83 1878.97,-4029.03 1909.2,-3968.26"/>
<polygon fill="blue" stroke="blue" points="1912.35,-3969.8 1913.6,-3959.28 1906.06,-3966.72 1912.35,-3969.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="648.5,-3988.12 505.5,-3988.12 505.5,-3952.12 648.5,-3952.12 648.5,-3988.12"/>
<text text-anchor="middle" x="577" y="-3966.42" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.65,-3961.77C742.36,-3950.7 905.32,-3931.44 986.35,-3921.87"/>
<polygon fill="blue" stroke="blue" points="986.77,-3925.34 996.29,-3920.69 985.95,-3918.39 986.77,-3925.34"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.57,-3960.35C698.19,-3957.44 763.44,-3962.07 808,-3997.12 828.12,-4012.94 807.99,-4035.17 828,-4051.12 870.69,-4085.14 934.79,-4088.47 980.34,-4085.45"/>
<polygon fill="blue" stroke="blue" points="980.64,-4088.94 990.34,-4084.67 980.1,-4081.96 980.64,-4088.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.61,-3958.27C699.41,-3954.03 766.1,-3957.9 808,-3997.12 843.64,-4030.47 792.57,-4071.53 828,-4105.12 873.63,-4148.37 952.48,-4145.4 998.57,-4138.99"/>
<polygon fill="blue" stroke="blue" points="999.35,-4142.41 1008.71,-4137.45 998.3,-4135.49 999.35,-4142.41"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.65,-3970.12C739.96,-3970.12 897.01,-3970.12 979.96,-3970.12"/>
<polygon fill="blue" stroke="blue" points="980.19,-3973.62 990.19,-3970.12 980.19,-3966.62 980.19,-3973.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.72,-3978.39C694.21,-3983.72 754.6,-3990.81 808,-3997.12 872.35,-4004.72 946.96,-4013.61 992.56,-4019.05"/>
<polygon fill="blue" stroke="blue" points="992.33,-4022.55 1002.67,-4020.26 993.16,-4015.6 992.33,-4022.55"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.6,-3957.28C700.08,-3952.33 767.64,-3955.75 808,-3997.12 841.67,-4031.62 792.38,-4180.64 828,-4213.12 895,-4274.2 1153.14,-4249.93 1236,-4213.12 1252.97,-4205.58 1248.61,-4192.5 1264,-4182.12 1277.31,-4173.14 1716.16,-4015.07 1869.64,-3959.92"/>
<polygon fill="blue" stroke="blue" points="1871.1,-3963.11 1879.33,-3956.44 1868.73,-3956.52 1871.1,-3963.11"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1075.6,-3917.21C1216.96,-3921.2 1706.66,-3935.03 1869.15,-3939.62"/>
<polygon fill="blue" stroke="blue" points="1869.27,-3943.13 1879.37,-3939.91 1869.47,-3936.13 1869.27,-3943.13"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M1081.86,-4076.03C1204.05,-4073.13 1542.76,-4084.32 1680,-4286.12 1720.62,-4345.84 1659.94,-6832.2 1708,-6886.12 1751.62,-6935.05 1835.64,-6929.69 1884.42,-6921.4"/>
<polygon fill="blue" stroke="blue" points="1885.06,-6924.85 1894.27,-6919.61 1883.8,-6917.96 1885.06,-6924.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1081.7,-4072.37C1122.06,-4067.1 1183.06,-4058.95 1236,-4051.12 1472.57,-4016.11 1754.18,-3969.35 1869.16,-3950.04"/>
<polygon fill="blue" stroke="blue" points="1869.83,-3953.47 1879.11,-3948.36 1868.67,-3946.57 1869.83,-3953.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;pub fn for_first_point_of_attribute&lt;D&gt;(key_pair: &amp;crate::attributes::KeyPair&lt;D&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_blinding_scalar(key_pair.a1) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="677,-4204.12 477,-4204.12 477,-4168.12 677,-4168.12 677,-4204.12"/>
<text text-anchor="middle" x="577" y="-4182.42" font-family="Helvetica,sans-Serif" font-size="14.00">for_first_point_of_attribute</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M677.16,-4186.12C757.05,-4186.12 868.4,-4186.12 945.58,-4186.12"/>
<polygon fill="blue" stroke="blue" points="945.76,-4189.62 955.76,-4186.12 945.76,-4182.62 945.76,-4189.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.13,-4137.9C1106.45,-4145.77 1192.65,-4153.81 1236,-4105.12 1290.54,-4043.86 1231.53,-2704.43 1264,-2629.12 1299.62,-2546.49 1386.44,-2480.27 1435.57,-2447.84"/>
<polygon fill="blue" stroke="blue" points="1437.52,-2450.75 1444,-2442.36 1433.71,-2444.88 1437.52,-2450.75"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M1073.68,-4204.29C1118,-4225.77 1195.21,-4261.69 1264,-4286.12 1444.65,-4350.27 1562.87,-4248.35 1680,-4400.12 1722.19,-4454.79 1662.03,-6834.58 1708,-6886.12 1751.63,-6935.04 1835.65,-6929.68 1884.43,-6921.4"/>
<polygon fill="blue" stroke="blue" points="1885.06,-6924.84 1894.27,-6919.61 1883.81,-6917.96 1885.06,-6924.84"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="621,-4096.12 533,-4096.12 533,-4060.12 621,-4060.12 621,-4096.12"/>
<text text-anchor="middle" x="577" y="-4074.42" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M621.08,-4086.77C672.55,-4094.38 757.95,-4097.96 808,-4051.12 843.64,-4017.76 792.57,-3976.7 828,-3943.12 869.69,-3903.6 939.12,-3902.66 985.94,-3907.69"/>
<polygon fill="blue" stroke="blue" points="985.81,-3911.2 996.16,-3908.92 986.65,-3904.25 985.81,-3911.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M621.41,-4078.12C704.97,-4078.12 888.03,-4078.12 979.99,-4078.12"/>
<polygon fill="blue" stroke="blue" points="980.2,-4081.62 990.2,-4078.12 980.2,-4074.62 980.2,-4081.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M621.24,-4083.17C667.47,-4088.58 742.92,-4097.43 808,-4105.12 875.32,-4113.07 953.86,-4122.43 998.68,-4127.78"/>
<polygon fill="blue" stroke="blue" points="998.44,-4131.28 1008.79,-4128.99 999.27,-4124.33 998.44,-4131.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M621.13,-4070.8C671.47,-4064.8 754.59,-4063.11 808,-4105.12 828.12,-4120.94 807.99,-4143.17 828,-4159.12 860.72,-4185.2 906.04,-4193.25 945.93,-4194.22"/>
<polygon fill="blue" stroke="blue" points="945.91,-4197.72 955.95,-4194.32 945.98,-4190.72 945.91,-4197.72"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M621.13,-4085.44C671.47,-4091.44 754.59,-4093.12 808,-4051.12 828.12,-4035.3 807.99,-4013.07 828,-3997.12 870.69,-3963.1 934.79,-3959.76 980.34,-3962.78"/>
<polygon fill="blue" stroke="blue" points="980.1,-3966.27 990.34,-3963.56 980.64,-3959.29 980.1,-3966.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M621.24,-4073.06C667.47,-4067.65 742.92,-4058.81 808,-4051.12 872.35,-4043.51 946.96,-4034.63 992.56,-4029.19"/>
<polygon fill="blue" stroke="blue" points="993.16,-4032.64 1002.67,-4027.98 992.33,-4025.69 993.16,-4032.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M621.16,-4068.99C673.1,-4060.78 759.4,-4056.49 808,-4105.12 862.09,-4159.24 770.84,-4225.25 828,-4276.12 895.73,-4336.39 1145.81,-4285.36 1236,-4276.12 1436.47,-4255.57 1502.75,-4280.01 1680,-4184.12 1781.27,-4129.33 1867.64,-4018.65 1903.83,-3967.78"/>
<polygon fill="blue" stroke="blue" points="1906.91,-3969.49 1909.8,-3959.29 1901.18,-3965.46 1906.91,-3969.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1081.8,-3968.65C1230.76,-3963.77 1709.08,-3948.09 1869.21,-3942.85"/>
<polygon fill="blue" stroke="blue" points="1869.41,-3946.34 1879.29,-3942.52 1869.18,-3939.35 1869.41,-3946.34"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1069.33,-4028.49C1111.76,-4032.42 1186.63,-4032.97 1236,-3997.12 1603.39,-3730.37 1565.02,-3516.33 1680,-3077.12 1705.26,-2980.62 1665.77,-2719.49 1708,-2629.12 1745.93,-2547.93 1832,-2482.88 1882.67,-2449.85"/>
<polygon fill="blue" stroke="blue" points="1884.87,-2452.59 1891.4,-2444.24 1881.09,-2446.7 1884.87,-2452.59"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="1063,-2313.12 1009,-2313.12 1009,-2277.12 1063,-2277.12 1063,-2313.12"/>
<text text-anchor="middle" x="1036" y="-2291.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.17,-2303.02C1137.22,-2325.37 1348.41,-2389.11 1434.15,-2414.99"/>
<polygon fill="blue" stroke="blue" points="1433.38,-2418.42 1443.96,-2417.96 1435.4,-2411.72 1433.38,-2418.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.33,-2300.05C1107.34,-2309.82 1195.06,-2336.11 1236,-2396.12 1272.49,-2449.6 1218.99,-2639.58 1264,-2686.12 1298.67,-2721.96 1355.87,-2727.08 1401.36,-2724.14"/>
<polygon fill="blue" stroke="blue" points="1401.78,-2727.62 1411.47,-2723.34 1401.23,-2720.64 1401.78,-2727.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="1064,-2259.12 1008,-2259.12 1008,-2223.12 1064,-2223.12 1064,-2259.12"/>
<text text-anchor="middle" x="1036" y="-2237.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.09,-2244.42C1102.44,-2249.17 1174.7,-2258.44 1236,-2268.12 1434.06,-2299.38 1485.48,-2299.48 1680,-2348.12 1743.9,-2364.1 1815.53,-2387.95 1864.17,-2405.07"/>
<polygon fill="blue" stroke="blue" points="1863.29,-2408.47 1873.88,-2408.5 1865.62,-2401.87 1863.29,-2408.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;pub fn blind( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn RevealedAttribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedPoint&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This is technically something you can do with just th...">
<polygon fill="white" stroke="black" points="1499,-2988.12 1445,-2988.12 1445,-2952.12 1499,-2952.12 1499,-2988.12"/>
<text text-anchor="middle" x="1472" y="-2966.42" font-family="Helvetica,sans-Serif" font-size="14.00">blind</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1499.3,-2965.1C1542.66,-2958.46 1629.4,-2952.31 1680,-2997.12 1823.82,-3124.47 1902.91,-3768.68 1918.94,-3912.58"/>
<polygon fill="blue" stroke="blue" points="1915.49,-3913.24 1920.06,-3922.79 1922.45,-3912.47 1915.49,-3913.24"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BlindingPrivateKey::generate(sho).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1075.5,-3042.12 996.5,-3042.12 996.5,-3006.12 1075.5,-3006.12 1075.5,-3042.12"/>
<text text-anchor="middle" x="1036" y="-3020.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y: sho.get_scalar(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1511.5,-3042.12 1432.5,-3042.12 1432.5,-3006.12 1511.5,-3006.12 1511.5,-3042.12"/>
<text text-anchor="middle" x="1472" y="-3020.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1075.51,-3024.12C1154.56,-3024.12 1334.97,-3024.12 1422.11,-3024.12"/>
<polygon fill="blue" stroke="blue" points="1422.26,-3027.62 1432.26,-3024.12 1422.26,-3020.62 1422.26,-3027.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1481.97,-3042.44C1538.09,-3157.06 1840.8,-3775.28 1908.54,-3913.64"/>
<polygon fill="blue" stroke="blue" points="1905.47,-3915.31 1913.01,-3922.76 1911.76,-3912.24 1905.47,-3915.31"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="1063,-2880.12 1009,-2880.12 1009,-2844.12 1063,-2844.12 1063,-2880.12"/>
<text text-anchor="middle" x="1036" y="-2858.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1054.52,-2843.85C1092.44,-2804.39 1185.06,-2708.32 1264,-2629.12 1328.46,-2564.45 1405.51,-2489.49 1444.94,-2451.31"/>
<polygon fill="blue" stroke="blue" points="1447.55,-2453.64 1452.3,-2444.17 1442.69,-2448.61 1447.55,-2453.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.32,-2862.54C1104.28,-2861.87 1183.95,-2855.17 1236,-2816.12 1256.37,-2800.83 1243.81,-2781.64 1264,-2766.12 1303.21,-2735.97 1357.71,-2722.85 1400.95,-2717.2"/>
<polygon fill="blue" stroke="blue" points="1401.61,-2720.64 1411.12,-2715.98 1400.78,-2713.69 1401.61,-2720.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.08,-2861.62C1171.71,-2860.1 1586.86,-2859.92 1680,-2943.12 1831.6,-3078.55 1905.14,-3764.62 1919.4,-3912.86"/>
<polygon fill="blue" stroke="blue" points="1915.93,-3913.33 1920.36,-3922.96 1922.89,-3912.67 1915.93,-3913.33"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="1064,-2988.12 1008,-2988.12 1008,-2952.12 1064,-2952.12 1064,-2988.12"/>
<text text-anchor="middle" x="1036" y="-2966.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.12,-2968.54C1102.81,-2965.83 1175.81,-2958.94 1236,-2943.12 1441.45,-2889.1 1543.71,-2929.07 1680,-2766.12 1719.87,-2718.45 1677.84,-2683.46 1708,-2629.12 1751.84,-2550.13 1836.88,-2483.61 1885.52,-2449.88"/>
<polygon fill="blue" stroke="blue" points="1887.59,-2452.7 1893.87,-2444.16 1883.64,-2446.92 1887.59,-2452.7"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn Attribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedAttribute&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The points in a regular verifiably encrypted attribute ...">
<polygon fill="white" stroke="black" points="1071,-2934.12 1001,-2934.12 1001,-2898.12 1071,-2898.12 1071,-2934.12"/>
<text text-anchor="middle" x="1036" y="-2912.42" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1071.06,-2920.36C1151.36,-2930.35 1352.01,-2955.31 1434.6,-2965.59"/>
<polygon fill="blue" stroke="blue" points="1434.41,-2969.09 1444.76,-2966.85 1435.27,-2962.15 1434.41,-2969.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="1070.5,-2601.12 1001.5,-2601.12 1001.5,-2565.12 1070.5,-2565.12 1070.5,-2601.12"/>
<text text-anchor="middle" x="1036" y="-2579.42" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1070.59,-2582.32C1110.85,-2580.52 1179.9,-2574.71 1236,-2556.12 1312.76,-2530.67 1393.37,-2480.04 1437.39,-2450.02"/>
<polygon fill="blue" stroke="blue" points="1439.44,-2452.86 1445.69,-2444.31 1435.47,-2447.09 1439.44,-2452.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1070.78,-2591.88C1114.82,-2604.99 1191.46,-2633.82 1236,-2685.12 1260.97,-2713.88 1234.81,-2741.65 1264,-2766.12 1407.46,-2886.38 1543.88,-2703.61 1680,-2832.12 1844.25,-2987.18 1908.39,-3753.86 1920.01,-3912.4"/>
<polygon fill="blue" stroke="blue" points="1916.54,-3913.02 1920.75,-3922.74 1923.52,-3912.52 1916.54,-3913.02"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1064,-2547.12 1008,-2547.12 1008,-2511.12 1064,-2511.12 1064,-2547.12"/>
<text text-anchor="middle" x="1036" y="-2525.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.3,-2526.51C1153.11,-2517.96 1441.84,-2489.62 1680,-2460.12 1742.89,-2452.33 1814.78,-2442.05 1863.76,-2434.84"/>
<polygon fill="blue" stroke="blue" points="1864.47,-2438.28 1873.85,-2433.36 1863.45,-2431.35 1864.47,-2438.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M1936.5,-3959.36C1975.1,-4016.83 2092.54,-4200.51 2138,-4372.12 2269.7,-4869.28 2279.25,-6589.39 2279.95,-6830.87"/>
<polygon fill="blue" stroke="blue" points="2276.45,-6830.95 2279.97,-6840.94 2283.45,-6830.94 2276.45,-6830.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="640,-2464.12 514,-2464.12 514,-2428.12 640,-2428.12 640,-2464.12"/>
<text text-anchor="middle" x="577" y="-2442.42" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M640.08,-2444.77C691.1,-2446.98 762.19,-2458.13 808,-2499.12 828.01,-2517.02 807.15,-2539.2 828,-2556.12 873.83,-2593.29 945.09,-2594.1 990.9,-2589.77"/>
<polygon fill="blue" stroke="blue" points="991.55,-2593.22 1001.12,-2588.67 990.81,-2586.26 991.55,-2593.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="633.5,-2410.12 520.5,-2410.12 520.5,-2374.12 633.5,-2374.12 633.5,-2410.12"/>
<text text-anchor="middle" x="577" y="-2388.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M633.81,-2382.35C685.32,-2376.73 760.75,-2377.57 808,-2419.12 835.52,-2443.32 800.81,-2474.54 828,-2499.12 874.36,-2541.02 951.94,-2540.14 997.81,-2535.07"/>
<polygon fill="blue" stroke="blue" points="998.42,-2538.52 1007.92,-2533.82 997.57,-2531.57 998.42,-2538.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="669.5,-2356.12 484.5,-2356.12 484.5,-2320.12 669.5,-2320.12 669.5,-2356.12"/>
<text text-anchor="middle" x="577" y="-2334.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M669.66,-2329.49C770.53,-2320 927.73,-2305.21 998.41,-2298.56"/>
<polygon fill="blue" stroke="blue" points="998.96,-2302.02 1008.59,-2297.6 998.3,-2295.06 998.96,-2302.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="638.5,-2302.12 515.5,-2302.12 515.5,-2266.12 638.5,-2266.12 638.5,-2302.12"/>
<text text-anchor="middle" x="577" y="-2280.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M638.69,-2278.41C734.57,-2269.39 918.33,-2252.1 997.35,-2244.66"/>
<polygon fill="blue" stroke="blue" points="998.16,-2248.1 1007.79,-2243.68 997.5,-2241.13 998.16,-2248.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="605,-3199.12 549,-3199.12 549,-3163.12 605,-3163.12 605,-3199.12"/>
<text text-anchor="middle" x="577" y="-3177.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M605.34,-3187.38C654.25,-3196.79 756.42,-3207.9 808,-3151.12 852.47,-3102.15 783.53,-2605.08 828,-2556.12 870.36,-2509.48 950.65,-2513.73 997.82,-2521.27"/>
<polygon fill="blue" stroke="blue" points="997.47,-2524.76 1007.92,-2523.01 998.66,-2517.86 997.47,-2524.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="611.5,-3253.12 542.5,-3253.12 542.5,-3217.12 611.5,-3217.12 611.5,-3253.12"/>
<text text-anchor="middle" x="577" y="-3231.42" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M611.58,-3242.95C662.28,-3252.57 757.8,-3261.63 808,-3208.12 836.63,-3177.61 812.74,-2871.07 828,-2832.12 865.89,-2735.38 956.95,-2648.55 1004.67,-2607.73"/>
<polygon fill="blue" stroke="blue" points="1007.12,-2610.25 1012.5,-2601.12 1002.6,-2604.9 1007.12,-2610.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;const VERSION: u8&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_key: &amp;libsignal_account_keys::BackupKey&lt;VERSION&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// derive the backup&#45;id (blinded in the is...">
<polygon fill="white" stroke="black" points="604,-3415.12 550,-3415.12 550,-3379.12 604,-3379.12 604,-3415.12"/>
<text text-anchor="middle" x="577" y="-3393.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.33,-3397.65C647.94,-3397.74 737.33,-3394.57 808,-3370.12 1018.78,-3297.2 1103.83,-3287.77 1236,-3108.12 1266.15,-3067.14 1225.97,-3030.92 1264,-2997.12 1310.87,-2955.46 1388.94,-2957.78 1434.63,-2963.66"/>
<polygon fill="blue" stroke="blue" points="1434.29,-2967.14 1444.68,-2965.08 1435.27,-2960.21 1434.29,-2967.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.25,-3403.07C651.86,-3412.17 752.64,-3423.34 808,-3370.12 849.19,-3330.52 802.8,-3294.4 828,-3243.12 869.46,-3158.74 954.72,-3084.9 1001.85,-3048.39"/>
<polygon fill="blue" stroke="blue" points="1004.1,-3051.08 1009.91,-3042.22 999.84,-3045.52 1004.1,-3051.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="610,-3361.12 544,-3361.12 544,-3325.12 610,-3325.12 610,-3361.12"/>
<text text-anchor="middle" x="577" y="-3339.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M610.27,-3350.66C660.57,-3360.28 757.13,-3369.83 808,-3316.12 856.84,-3264.55 779.49,-3049 828,-2997.12 870.92,-2951.22 950.66,-2955.11 997.65,-2962.4"/>
<polygon fill="blue" stroke="blue" points="997.28,-2965.89 1007.72,-2964.09 998.44,-2958.98 997.28,-2965.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="604,-3307.12 550,-3307.12 550,-3271.12 604,-3271.12 604,-3307.12"/>
<text text-anchor="middle" x="577" y="-3285.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.03,-3295.45C652.21,-3305.45 755.17,-3318.4 808,-3262.12 864.81,-3201.59 771.58,-2950 828,-2889.12 871.05,-2842.65 951.81,-2847.05 998.71,-2854.52"/>
<polygon fill="blue" stroke="blue" points="998.3,-2858 1008.75,-2856.24 999.48,-2851.1 998.3,-2858"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="641,-2111.12 513,-2111.12 513,-2075.12 641,-2075.12 641,-2111.12"/>
<text text-anchor="middle" x="577" y="-2089.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M641,-2081.49C692.94,-2075.83 764.84,-2077.71 808,-2120.12 855.34,-2166.64 780.96,-2221.29 828,-2268.12 872.77,-2312.69 952.55,-2309.08 998.9,-2302.24"/>
<polygon fill="blue" stroke="blue" points="999.49,-2305.69 1008.81,-2300.65 998.39,-2298.78 999.49,-2305.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="605,-2165.12 549,-2165.12 549,-2129.12 605,-2129.12 605,-2165.12"/>
<text text-anchor="middle" x="577" y="-2143.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M605.13,-2140.59C653.7,-2130.7 755.36,-2118.48 808,-2174.12 857.73,-2226.68 778.99,-2445.89 828,-2499.12 870.65,-2545.44 950.48,-2542.77 997.57,-2536.23"/>
<polygon fill="blue" stroke="blue" points="998.3,-2539.66 1007.66,-2534.7 997.24,-2532.74 998.3,-2539.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="610,-2057.12 544,-2057.12 544,-2021.12 610,-2021.12 610,-2057.12"/>
<text text-anchor="middle" x="577" y="-2035.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M610.2,-2037.6C655.94,-2036.6 741.54,-2039.05 808,-2066.12 892.68,-2100.61 972.75,-2175.75 1011.2,-2215.41"/>
<polygon fill="blue" stroke="blue" points="1008.88,-2218.05 1018.32,-2222.85 1013.93,-2213.21 1008.88,-2218.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="611.5,-2219.12 542.5,-2219.12 542.5,-2183.12 611.5,-2183.12 611.5,-2219.12"/>
<text text-anchor="middle" x="577" y="-2197.42" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M611.58,-2197.66C662.75,-2194.47 759.39,-2197.02 808,-2254.12 851.6,-2305.33 781.98,-2507.07 828,-2556.12 869.13,-2599.94 943.83,-2598.32 991.36,-2591.74"/>
<polygon fill="blue" stroke="blue" points="991.99,-2595.18 1001.35,-2590.23 990.94,-2588.26 991.99,-2595.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node142"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="610,-3062.12 544,-3062.12 544,-3026.12 610,-3026.12 610,-3062.12"/>
<text text-anchor="middle" x="577" y="-3040.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M610.33,-3046.77C656.59,-3049.19 743.23,-3048.49 808,-3017.12 819.31,-3011.64 816.72,-3002.67 828,-2997.12 882.67,-2970.2 954.82,-2966.99 997.91,-2967.96"/>
<polygon fill="blue" stroke="blue" points="997.84,-2971.46 1007.94,-2968.28 998.06,-2964.47 997.84,-2971.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="604,-3008.12 550,-3008.12 550,-2972.12 604,-2972.12 604,-3008.12"/>
<text text-anchor="middle" x="577" y="-2986.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.08,-2995.55C650.96,-3003.67 750.01,-3013.15 808,-2963.12 833.8,-2940.86 802.35,-2911.54 828,-2889.12 875.21,-2847.85 953.16,-2850.03 998.74,-2855.78"/>
<polygon fill="blue" stroke="blue" points="998.38,-2859.27 1008.77,-2857.17 999.34,-2852.33 998.38,-2859.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="611.5,-2954.12 542.5,-2954.12 542.5,-2918.12 611.5,-2918.12 611.5,-2954.12"/>
<text text-anchor="middle" x="577" y="-2932.42" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M611.53,-2942.83C660.88,-2950.63 753.14,-2956.92 808,-2909.12 834.66,-2885.89 811.87,-2863.58 828,-2832.12 875.55,-2739.39 962.77,-2650.39 1007.28,-2608.35"/>
<polygon fill="blue" stroke="blue" points="1009.91,-2610.68 1014.82,-2601.29 1005.13,-2605.57 1009.91,-2610.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="605,-2900.12 549,-2900.12 549,-2864.12 605,-2864.12 605,-2900.12"/>
<text text-anchor="middle" x="577" y="-2878.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M605.15,-2888.21C653.76,-2897.34 755.47,-2908.02 808,-2852.12 853.14,-2804.07 782.86,-2604.16 828,-2556.12 871.03,-2510.32 950.73,-2514.18 997.69,-2521.43"/>
<polygon fill="blue" stroke="blue" points="997.31,-2524.92 1007.75,-2523.12 998.46,-2518.01 997.31,-2524.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;pub fn new(room_id: &amp;[u8], randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;poksho::ShoHmacSha256::new(b&#39; 20230413_Signal_CreateCallLinkCredentialRequest&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.ab...">
<polygon fill="white" stroke="black" points="604,-3116.12 550,-3116.12 550,-3080.12 604,-3080.12 604,-3116.12"/>
<text text-anchor="middle" x="577" y="-3094.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.05,-3104.54C698.44,-3126.22 1027.9,-3188.02 1236,-3051.12 1258.59,-3036.26 1241.86,-3012.63 1264,-2997.12 1314.84,-2961.5 1390.3,-2961.46 1434.69,-2965.33"/>
<polygon fill="blue" stroke="blue" points="1434.44,-2968.82 1444.74,-2966.32 1435.13,-2961.86 1434.44,-2968.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.03,-3096.16C646.83,-3092.69 734.64,-3084.54 808,-3071.12 817.01,-3069.47 819.06,-3068.14 828,-3066.12 882.02,-3053.89 944.36,-3041.47 986.39,-3033.34"/>
<polygon fill="blue" stroke="blue" points="987.2,-3036.75 996.36,-3031.42 985.88,-3029.88 987.2,-3036.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_root_key(root_key: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20230419_CallLinkSecretParams_DeriveFromRootKey&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_key, &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="659,-5672.12 495,-5672.12 495,-5636.12 659,-5636.12 659,-5672.12"/>
<text text-anchor="middle" x="577" y="-5650.42" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_root_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M591.84,-5635.98C626.85,-5591.16 723.63,-5473.85 828,-5405.12 874.2,-5374.69 933.31,-5352.38 976.52,-5338.59"/>
<polygon fill="blue" stroke="blue" points="977.82,-5341.85 986.32,-5335.53 975.73,-5335.17 977.82,-5341.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node148"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="626,-5726.12 528,-5726.12 528,-5690.12 626,-5690.12 626,-5726.12"/>
<text text-anchor="middle" x="577" y="-5704.42" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node203"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="1071,-6496.12 1001,-6496.12 1001,-6460.12 1071,-6460.12 1071,-6496.12"/>
<text text-anchor="middle" x="1036" y="-6474.42" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M594.9,-5726.39C639.67,-5776.11 761.1,-5919.89 808,-6065.12 821.03,-6105.46 799.57,-6414.67 828,-6446.12 868.32,-6490.73 942.93,-6491.06 990.7,-6485.7"/>
<polygon fill="blue" stroke="blue" points="991.27,-6489.16 1000.75,-6484.44 990.4,-6482.21 991.27,-6489.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node149"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="650,-6685.12 504,-6685.12 504,-6649.12 650,-6649.12 650,-6685.12"/>
<text text-anchor="middle" x="577" y="-6663.42" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M650.16,-6667.8C696.63,-6666.05 757.55,-6659.59 808,-6640.12 889.94,-6608.49 969.74,-6540.34 1009.28,-6503.31"/>
<polygon fill="blue" stroke="blue" points="1011.79,-6505.76 1016.64,-6496.34 1006.98,-6500.67 1011.79,-6505.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node150"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="652.5,-6739.12 501.5,-6739.12 501.5,-6703.12 652.5,-6703.12 652.5,-6739.12"/>
<text text-anchor="middle" x="577" y="-6717.42" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node181"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="1071,-6822.12 1001,-6822.12 1001,-6786.12 1071,-6786.12 1071,-6822.12"/>
<text text-anchor="middle" x="1036" y="-6800.42" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M652.7,-6734.68C748.73,-6752.13 912.41,-6781.85 990.71,-6796.07"/>
<polygon fill="blue" stroke="blue" points="990.27,-6799.55 1000.73,-6797.89 991.52,-6792.66 990.27,-6799.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<g id="a_node151"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_master_key(master_key: GroupMasterKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_GroupMasterKey_GroupSecretParams_DeriveFromMasterKey&#39; , &#160;...">
<polygon fill="white" stroke="black" points="669.5,-6631.12 484.5,-6631.12 484.5,-6595.12 669.5,-6595.12 669.5,-6631.12"/>
<text text-anchor="middle" x="577" y="-6609.42" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_master_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M669.55,-6627.04C717.96,-6628.82 774.2,-6620.96 808,-6583.12 851.6,-6534.3 790.87,-5459.02 828,-5405.12 861.22,-5356.89 927.44,-5336.68 976.07,-5328.21"/>
<polygon fill="blue" stroke="blue" points="976.85,-5331.63 986.16,-5326.58 975.73,-5324.72 976.85,-5331.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="318,-3743.12 16,-3743.12 16,-3707.12 318,-3707.12 318,-3743.12"/>
<text text-anchor="middle" x="167" y="-3721.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M304.33,-3743.26C309.11,-3745.88 313.69,-3748.82 318,-3752.12 341.06,-3769.75 322.48,-3794.1 346,-3811.12 513.67,-3932.42 659.48,-3725.01 808,-3869.12 849.32,-3909.21 786.77,-3956.92 828,-3997.12 871.18,-4039.22 945.7,-4038 992.56,-4031.98"/>
<polygon fill="blue" stroke="blue" points="993.28,-4035.41 1002.69,-4030.55 992.3,-4028.48 993.28,-4035.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;fn derive_public_signing_key_from_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorsements::ServerRootPublicKey&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;zkcredent...">
<polygon fill="white" stroke="black" points="733.5,-3690.12 420.5,-3690.12 420.5,-3654.12 733.5,-3654.12 733.5,-3690.12"/>
<text text-anchor="middle" x="577" y="-3668.42" font-family="Helvetica,sans-Serif" font-size="14.00">derive_public_signing_key_from_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M306.7,-3707.1C345.57,-3702.05 387.97,-3696.54 427.38,-3691.42"/>
<polygon fill="blue" stroke="blue" points="427.87,-3694.89 437.34,-3690.13 426.97,-3687.95 427.87,-3694.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node153"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="194,-3851.12 140,-3851.12 140,-3815.12 194,-3815.12 194,-3851.12"/>
<text text-anchor="middle" x="167" y="-3829.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M194.23,-3844.86C228.42,-3859.63 290.42,-3884.56 346,-3897.12 446.64,-3919.85 734.19,-3871.03 808,-3943.12 859.9,-3993.81 776.88,-4053.64 828,-4105.12 872.52,-4149.94 952.39,-4146.24 998.82,-4139.32"/>
<polygon fill="blue" stroke="blue" points="999.44,-4142.76 1008.75,-4137.71 998.32,-4135.85 999.44,-4142.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<g id="a_node154"><a xlink:title=" &#160;&#160;&#160;pub fn for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root: impl AsRef&lt;zkcredential::endorsements::ServerRootKeyPair&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: ReservedByte::de...">
<polygon fill="white" stroke="black" points="223.5,-3797.12 110.5,-3797.12 110.5,-3761.12 223.5,-3761.12 223.5,-3797.12"/>
<text text-anchor="middle" x="167" y="-3775.42" font-family="Helvetica,sans-Serif" font-size="14.00">for_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M223.62,-3778.15C253.92,-3780.17 290.68,-3787.01 318,-3806.12 338.24,-3820.27 325.18,-3840.84 346,-3854.12 432.93,-3909.57 733.78,-3825.54 808,-3897.12 857.68,-3945.03 779.21,-4002.3 828,-4051.12 867.14,-4090.28 933.3,-4092.32 980.28,-4087.59"/>
<polygon fill="blue" stroke="blue" points="980.75,-4091.06 990.29,-4086.45 979.96,-4084.1 980.75,-4091.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="260.5,-3635.12 73.5,-3635.12 73.5,-3599.12 260.5,-3599.12 260.5,-3635.12"/>
<text text-anchor="middle" x="167" y="-3613.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M260.68,-3620.27C281.04,-3624.49 301.43,-3631.81 318,-3644.12 340.02,-3660.48 323.59,-3683.3 346,-3699.12 515.18,-3818.5 664.94,-3609.43 808,-3759.12 844.67,-3797.49 791.34,-3958.74 828,-3997.12 869.86,-4040.95 945.36,-4039.03 992.69,-4032.44"/>
<polygon fill="blue" stroke="blue" points="993.27,-4035.89 1002.63,-4030.93 992.22,-4028.97 993.27,-4035.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M260.58,-3629.6C311.26,-3636.43 375.18,-3645.05 432.2,-3652.73"/>
<polygon fill="blue" stroke="blue" points="432.01,-3656.24 442.39,-3654.11 432.95,-3649.3 432.01,-3656.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="259.5,-3689.12 74.5,-3689.12 74.5,-3653.12 259.5,-3653.12 259.5,-3689.12"/>
<text text-anchor="middle" x="167" y="-3667.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M259.88,-3673.55C280.61,-3677.75 301.37,-3685.23 318,-3698.12 341.58,-3716.39 321.83,-3741.63 346,-3759.12 429.71,-3819.67 735.13,-3737.88 808,-3811.12 866.64,-3870.05 769.88,-3937.67 828,-3997.12 870.37,-4040.45 945.72,-4038.69 992.87,-4032.26"/>
<polygon fill="blue" stroke="blue" points="993.4,-4035.72 1002.78,-4030.79 992.37,-4028.8 993.4,-4035.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M259.56,-3671.34C303.95,-3671.45 358.65,-3671.59 410.03,-3671.71"/>
<polygon fill="blue" stroke="blue" points="410.24,-3675.21 420.25,-3671.74 410.26,-3668.21 410.24,-3675.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M733.78,-3684.76C762.1,-3694.01 788.72,-3708.55 808,-3731.12 838.73,-3767.1 795.14,-3909.07 828,-3943.12 866.57,-3983.09 933.14,-3984.88 980.37,-3979.88"/>
<polygon fill="blue" stroke="blue" points="980.92,-3983.34 990.44,-3978.68 980.09,-3976.38 980.92,-3983.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="743.5,-901.12 410.5,-901.12 410.5,-865.12 743.5,-865.12 743.5,-901.12"/>
<text text-anchor="middle" x="577" y="-879.42" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<g id="a_node175"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CommitmentWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let commitment_system = SystemParams::get_hardcoded...">
<polygon fill="white" stroke="black" points="1063,-218.12 1009,-218.12 1009,-182.12 1063,-182.12 1063,-218.12"/>
<text text-anchor="middle" x="1036" y="-196.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M743.7,-889.78C768.18,-883.34 790.88,-871.97 808,-853.12 852.84,-803.73 786.23,-305.12 828,-253.12 868.82,-202.3 951.12,-196.27 998.73,-197.49"/>
<polygon fill="blue" stroke="blue" points="998.78,-201 1008.91,-197.88 999.05,-194 998.78,-201"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node177"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_struct: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let r1 = sho.get_scalar(); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1071,-135.12 1001,-135.12 1001,-99.12 1071,-99.12 1071,-135.12"/>
<text text-anchor="middle" x="1036" y="-113.42" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M743.76,-889.84C768.23,-883.4 790.92,-872.01 808,-853.12 858.92,-796.81 780.57,-229.4 828,-170.12 866.54,-121.94 942.36,-113.99 990.76,-114.34"/>
<polygon fill="blue" stroke="blue" points="990.88,-117.84 1000.95,-114.53 991.02,-110.84 990.88,-117.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node179"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1075.5,-81.12 996.5,-81.12 996.5,-45.12 1075.5,-45.12 1075.5,-81.12"/>
<text text-anchor="middle" x="1036" y="-59.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M743.52,-889.96C768.1,-883.53 790.88,-872.11 808,-853.12 864.79,-790.13 771.21,-153.11 828,-90.12 866.89,-46.98 938.2,-47.27 986.1,-53.52"/>
<polygon fill="blue" stroke="blue" points="985.85,-57.02 996.25,-54.98 986.85,-50.09 985.85,-57.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node186"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="1063,-1564.12 1009,-1564.12 1009,-1528.12 1063,-1528.12 1063,-1564.12"/>
<text text-anchor="middle" x="1036" y="-1542.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M743.55,-874.15C768.04,-880.28 790.79,-891.4 808,-910.12 853.82,-959.96 782.5,-1468.98 828,-1519.12 870.68,-1566.15 951.93,-1561.44 998.94,-1553.79"/>
<polygon fill="blue" stroke="blue" points="999.75,-1557.21 1008.99,-1552.03 998.54,-1550.31 999.75,-1557.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node159"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="713,-1117.12 441,-1117.12 441,-1081.12 713,-1081.12 713,-1117.12"/>
<text text-anchor="middle" x="577" y="-1095.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<g id="a_node174"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid: uid_struct::UidStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile...">
<polygon fill="white" stroke="black" points="1205,-683.12 867,-683.12 867,-647.12 1205,-647.12 1205,-683.12"/>
<text text-anchor="middle" x="1036" y="-661.42" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M713.22,-1112.84C748.6,-1109.25 783.61,-1098.03 808,-1072.12 862.01,-1014.75 777.95,-778.97 828,-718.12 838.54,-705.31 851.71,-695.35 866.28,-687.65"/>
<polygon fill="blue" stroke="blue" points="868.06,-690.67 875.51,-683.14 864.99,-684.38 868.06,-690.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node182"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="1063,-1240.12 1009,-1240.12 1009,-1204.12 1063,-1204.12 1063,-1240.12"/>
<text text-anchor="middle" x="1036" y="-1218.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M713.27,-1089.53C747.41,-1093.51 781.77,-1103.9 808,-1126.12 832.36,-1146.75 803.77,-1174.33 828,-1195.12 875.59,-1235.95 953.41,-1233.92 998.85,-1228.32"/>
<polygon fill="blue" stroke="blue" points="999.42,-1231.77 1008.86,-1226.96 998.48,-1224.84 999.42,-1231.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node184"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="1064,-1456.12 1008,-1456.12 1008,-1420.12 1064,-1420.12 1064,-1456.12"/>
<text text-anchor="middle" x="1036" y="-1434.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M713.29,-1085.64C748.57,-1089.27 783.51,-1100.45 808,-1126.12 851.83,-1172.05 784.46,-1364.91 828,-1411.12 871.09,-1456.86 950.77,-1453.02 997.7,-1445.79"/>
<polygon fill="blue" stroke="blue" points="998.48,-1449.21 1007.76,-1444.11 997.32,-1442.3 998.48,-1449.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node160"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="763.5,-1441.12 390.5,-1441.12 390.5,-1405.12 763.5,-1405.12 763.5,-1441.12"/>
<text text-anchor="middle" x="577" y="-1419.42" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node190"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="1063,-1618.12 1009,-1618.12 1009,-1582.12 1063,-1582.12 1063,-1618.12"/>
<text text-anchor="middle" x="1036" y="-1596.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M754.45,-1441.18C774.42,-1449.43 792.97,-1460.73 808,-1476.12 838.76,-1507.6 795.75,-1543.16 828,-1573.12 874.07,-1615.91 952.76,-1613.1 998.7,-1606.85"/>
<polygon fill="blue" stroke="blue" points="999.44,-1610.28 1008.81,-1605.34 998.41,-1603.35 999.44,-1610.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node161"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="718,-1387.12 436,-1387.12 436,-1351.12 718,-1351.12 718,-1387.12"/>
<text text-anchor="middle" x="577" y="-1365.42" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node189"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="1063,-1510.12 1009,-1510.12 1009,-1474.12 1063,-1474.12 1063,-1510.12"/>
<text text-anchor="middle" x="1036" y="-1488.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M718.06,-1360.13C750.6,-1364.51 783,-1374.94 808,-1396.12 832.36,-1416.75 803.77,-1444.33 828,-1465.12 875.59,-1505.95 953.41,-1503.92 998.85,-1498.32"/>
<polygon fill="blue" stroke="blue" points="999.42,-1501.77 1008.86,-1496.96 998.48,-1494.84 999.42,-1501.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<g id="a_node162"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCredentialReq...">
<polygon fill="white" stroke="black" points="730,-955.12 424,-955.12 424,-919.12 730,-919.12 730,-955.12"/>
<text text-anchor="middle" x="577" y="-933.42" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node192"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1075.5,-766.12 996.5,-766.12 996.5,-730.12 1075.5,-730.12 1075.5,-766.12"/>
<text text-anchor="middle" x="1036" y="-744.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M730.27,-946.78C759.18,-941.53 786.94,-930.56 808,-910.12 851.53,-867.88 784.74,-817.63 828,-775.12 869.18,-734.65 939.27,-734.09 986.34,-739.44"/>
<polygon fill="blue" stroke="blue" points="985.95,-742.92 996.31,-740.7 986.83,-735.98 985.95,-742.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node193"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = credentials::convert_to_point_M2_recei...">
<polygon fill="white" stroke="black" points="1071,-820.12 1001,-820.12 1001,-784.12 1071,-784.12 1071,-820.12"/>
<text text-anchor="middle" x="1036" y="-798.42" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M730.27,-942.84C758.35,-937.66 785.77,-927.71 808,-910.12 828.4,-893.98 808.73,-872.59 828,-855.12 872.85,-814.47 944.61,-804.11 990.77,-801.94"/>
<polygon fill="blue" stroke="blue" points="990.91,-805.43 1000.78,-801.57 990.66,-798.44 990.91,-805.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="761.5,-1333.12 392.5,-1333.12 392.5,-1297.12 761.5,-1297.12 761.5,-1333.12"/>
<text text-anchor="middle" x="577" y="-1311.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node185"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="1064,-1402.12 1008,-1402.12 1008,-1366.12 1064,-1366.12 1064,-1402.12"/>
<text text-anchor="middle" x="1036" y="-1380.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M761.62,-1327.74C777.58,-1331.51 793.25,-1336.22 808,-1342.12 818.32,-1346.24 817.71,-1352.93 828,-1357.12 884.01,-1379.92 954.95,-1384.47 997.56,-1384.87"/>
<polygon fill="blue" stroke="blue" points="997.75,-1388.37 1007.75,-1384.89 997.76,-1381.37 997.75,-1388.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<g id="a_node164"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="616.5,-1225.12 537.5,-1225.12 537.5,-1189.12 616.5,-1189.12 616.5,-1225.12"/>
<text text-anchor="middle" x="577" y="-1203.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.76,-1198.3C668.6,-1189.06 759.59,-1182.24 808,-1234.12 839.8,-1268.19 795.39,-1619.82 828,-1653.12 891.59,-1718.05 1172.85,-1615.76 1236,-1681.12 1299.19,-1746.52 1222.53,-2418.18 1264,-2499.12 1298.02,-2565.52 1373.62,-2612.59 1423.42,-2637.79"/>
<polygon fill="blue" stroke="blue" points="1421.89,-2640.94 1432.41,-2642.24 1425,-2634.67 1421.89,-2640.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.6,-1198.13C668.68,-1188.55 760.42,-1181.2 808,-1234.12 825.12,-1253.15 824.77,-3051.72 828,-3077.12 869.31,-3402.31 990.9,-3783.58 1025.63,-3888.31"/>
<polygon fill="blue" stroke="blue" points="1022.42,-3889.73 1028.9,-3898.11 1029.06,-3887.52 1022.42,-3889.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(S::NUM_ATTRS &gt;= 1, &#39; at least one attribute required&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S::NUM_ATTRS &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; mo...">
<polygon fill="white" stroke="black" points="1075.5,-575.12 996.5,-575.12 996.5,-539.12 1075.5,-539.12 1075.5,-575.12"/>
<text text-anchor="middle" x="1036" y="-553.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.87,-1216.03C668.83,-1225.39 759.96,-1232.34 808,-1180.12 852.86,-1131.35 783.45,-633.17 828,-584.12 867.04,-541.13 938.31,-541.38 986.17,-547.58"/>
<polygon fill="blue" stroke="blue" points="985.91,-551.08 996.3,-549.03 986.9,-544.15 985.91,-551.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<g id="a_node196"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signing_key = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = signing_key * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1075.5,-384.12 996.5,-384.12 996.5,-348.12 1075.5,-348.12 1075.5,-384.12"/>
<text text-anchor="middle" x="1036" y="-362.42" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.93,-1216.09C668.96,-1225.51 760.17,-1232.54 808,-1180.12 866.96,-1115.5 769.46,-458.11 828,-393.12 866.87,-349.97 938.18,-350.26 986.09,-356.51"/>
<polygon fill="blue" stroke="blue" points="985.84,-360.01 996.24,-357.97 986.84,-353.08 985.84,-360.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node165"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="674.5,-1279.12 479.5,-1279.12 479.5,-1243.12 674.5,-1243.12 674.5,-1279.12"/>
<text text-anchor="middle" x="577" y="-1257.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node183"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="1064,-1348.12 1008,-1348.12 1008,-1312.12 1064,-1312.12 1064,-1348.12"/>
<text text-anchor="middle" x="1036" y="-1326.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M674.76,-1261.27C716.94,-1264.15 766.19,-1271.41 808,-1288.12 818.32,-1292.24 817.71,-1298.93 828,-1303.12 884.01,-1325.92 954.95,-1330.47 997.56,-1330.87"/>
<polygon fill="blue" stroke="blue" points="997.75,-1334.37 1007.75,-1330.89 997.76,-1327.37 997.75,-1334.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node166"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="668,-1009.12 486,-1009.12 486,-973.12 668,-973.12 668,-1009.12"/>
<text text-anchor="middle" x="577" y="-987.42" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<g id="a_node170"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: receipt_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expi...">
<polygon fill="white" stroke="black" points="1159.5,-629.12 912.5,-629.12 912.5,-593.12 1159.5,-593.12 1159.5,-629.12"/>
<text text-anchor="middle" x="1036" y="-607.42" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M668.19,-1005.75C716.48,-1008.09 773.05,-1001.07 808,-964.12 857.88,-911.39 778.46,-691.17 828,-638.12 847.42,-617.33 874.39,-606.75 902.45,-602.07"/>
<polygon fill="blue" stroke="blue" points="903.01,-605.53 912.42,-600.66 902.02,-598.6 903.01,-605.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="1063,-1186.12 1009,-1186.12 1009,-1150.12 1063,-1150.12 1063,-1186.12"/>
<text text-anchor="middle" x="1036" y="-1164.42" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M668.23,-977.81C715.77,-976.1 771.61,-983.31 808,-1018.12 848.02,-1056.4 788.23,-1102.58 828,-1141.12 873.27,-1184.99 952.6,-1181.71 998.79,-1175.09"/>
<polygon fill="blue" stroke="blue" points="999.61,-1178.51 1008.95,-1173.51 998.53,-1171.59 999.61,-1178.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="720,-1063.12 434,-1063.12 434,-1027.12 720,-1027.12 720,-1063.12"/>
<text text-anchor="middle" x="577" y="-1041.42" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node191"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="1064,-1132.12 1008,-1132.12 1008,-1096.12 1064,-1096.12 1064,-1132.12"/>
<text text-anchor="middle" x="1036" y="-1110.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M720.28,-1052.3C749.79,-1056.42 780.32,-1062.68 808,-1072.12 817.81,-1075.46 818.23,-1080.64 828,-1084.12 884.92,-1104.39 955.3,-1110.98 997.6,-1113.12"/>
<polygon fill="blue" stroke="blue" points="997.57,-1116.62 1007.72,-1113.57 997.88,-1109.63 997.57,-1116.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node168"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="716,-1171.12 438,-1171.12 438,-1135.12 716,-1135.12 716,-1171.12"/>
<text text-anchor="middle" x="577" y="-1149.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="1064,-1294.12 1008,-1294.12 1008,-1258.12 1064,-1258.12 1064,-1294.12"/>
<text text-anchor="middle" x="1036" y="-1272.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M716.26,-1143.89C749.41,-1148.13 782.54,-1158.55 808,-1180.12 832.36,-1200.75 803.77,-1228.33 828,-1249.12 875.2,-1289.63 952.16,-1287.95 997.75,-1282.45"/>
<polygon fill="blue" stroke="blue" points="998.35,-1285.9 1007.81,-1281.11 997.43,-1278.96 998.35,-1285.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<g id="a_node169"><a xlink:title=" &#160;&#160;&#160;pub fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1966.5,-831.12 1879.5,-831.12 1879.5,-795.12 1966.5,-795.12 1966.5,-831.12"/>
<text text-anchor="middle" x="1923" y="-809.42" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M1927.2,-831.44C1949.66,-960.67 2084.08,-1748.72 2138,-2396.12 2215.97,-3332.33 2273.59,-6496.28 2279.5,-6830.48"/>
<polygon fill="blue" stroke="blue" points="2276,-6830.83 2279.68,-6840.77 2283,-6830.71 2276,-6830.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1159.69,-611.43C1186.34,-615.82 1213.31,-623.93 1236,-638.12 1255.02,-650.01 1244.65,-668.76 1264,-680.12 1343.97,-727.08 1605.33,-658.13 1680,-713.12 1706.98,-732.99 1681.63,-762.45 1708,-783.12 1753.66,-818.91 1822.26,-822.41 1869.41,-819.56"/>
<polygon fill="blue" stroke="blue" points="1869.7,-823.05 1879.42,-818.85 1869.2,-816.07 1869.7,-823.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node171"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1532.5,-671.12 1411.5,-671.12 1411.5,-635.12 1532.5,-635.12 1532.5,-671.12"/>
<text text-anchor="middle" x="1472" y="-649.42" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1159.63,-622.98C1237.79,-630.55 1336.24,-640.08 1401.27,-646.37"/>
<polygon fill="blue" stroke="blue" points="1401.12,-649.87 1411.41,-647.35 1401.8,-642.9 1401.12,-649.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<g id="a_node195"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1_from(receipt_expiration_time: Timestamp, receipt_level: ReceiptLevel) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[0u8; std::mem::size_of::&lt;Timestamp&gt;() + std::mem::size_of::&lt;Re...">
<polygon fill="white" stroke="black" points="1528,-301.12 1416,-301.12 1416,-265.12 1528,-265.12 1528,-301.12"/>
<text text-anchor="middle" x="1472" y="-279.42" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1159.58,-613.22C1186.67,-608.79 1213.87,-600.07 1236,-584.12 1258.9,-567.61 1248.53,-550.73 1264,-527.12 1320.61,-440.73 1404.18,-351.12 1445.69,-308.54"/>
<polygon fill="blue" stroke="blue" points="1448.43,-310.73 1452.93,-301.14 1443.43,-305.84 1448.43,-310.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1532.76,-646.31C1578.46,-644.52 1640.19,-649.99 1680,-685.12 1713.97,-715.09 1673.82,-753.39 1708,-783.12 1751.91,-821.31 1821.18,-824.23 1868.95,-820.61"/>
<polygon fill="blue" stroke="blue" points="1869.45,-824.08 1879.1,-819.71 1868.83,-817.1 1869.45,-824.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node172"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="616.5,-629.12 537.5,-629.12 537.5,-593.12 616.5,-593.12 616.5,-629.12"/>
<text text-anchor="middle" x="577" y="-607.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.57,-606.56C699.55,-596.75 894.91,-573.67 986.28,-562.87"/>
<polygon fill="blue" stroke="blue" points="986.85,-566.33 996.37,-561.68 986.03,-559.38 986.85,-566.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.57,-615.68C672.78,-622.32 780.56,-635.05 872.65,-645.93"/>
<polygon fill="blue" stroke="blue" points="872.31,-649.42 882.65,-647.12 873.13,-642.47 872.31,-649.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.93,-609.36C669.86,-604.67 763.04,-587.72 808,-527.12 855.34,-463.3 777.54,-231.5 828,-170.12 867.07,-122.6 942.38,-114.4 990.59,-114.52"/>
<polygon fill="blue" stroke="blue" points="990.69,-118.03 1000.74,-114.67 990.79,-111.03 990.69,-118.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.57,-609.46C669.52,-604.9 763.23,-588.12 808,-527.12 836.76,-487.93 795.1,-125.9 828,-90.12 867.31,-47.37 938.51,-47.56 986.28,-53.68"/>
<polygon fill="blue" stroke="blue" points="986,-57.18 996.39,-55.11 986.98,-50.24 986,-57.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.92,-625.18C670.73,-646.94 765.97,-694.35 808,-770.12 830.93,-811.46 795.98,-1160.34 828,-1195.12 870.9,-1241.72 951.71,-1237.27 998.67,-1229.76"/>
<polygon fill="blue" stroke="blue" points="999.45,-1233.18 1008.71,-1228.03 998.26,-1226.28 999.45,-1233.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M616.75,-625.27C670.35,-647.15 765.34,-694.7 808,-770.12 842.42,-830.98 780.58,-1032.73 828,-1084.12 870.7,-1130.39 950.51,-1127.74 997.58,-1121.22"/>
<polygon fill="blue" stroke="blue" points="998.31,-1124.65 1007.67,-1119.69 997.26,-1117.73 998.31,-1124.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1075.71,-555.48C1200.94,-551.03 1592.05,-544.08 1680,-626.12 1731.83,-674.46 1656.96,-733.94 1708,-783.12 1750.25,-823.82 1820.73,-825.99 1869.19,-821.52"/>
<polygon fill="blue" stroke="blue" points="1869.6,-824.99 1879.18,-820.47 1868.87,-818.03 1869.6,-824.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1113.37,-683.13C1157.25,-693.01 1213.51,-704.89 1264,-713.12 1447.69,-743.07 1507.89,-690.29 1680,-761.12 1694.64,-767.14 1693.44,-776.92 1708,-783.12 1759.88,-805.21 1824.6,-811.7 1869.21,-813.3"/>
<polygon fill="blue" stroke="blue" points="1869.15,-816.8 1879.25,-813.59 1869.35,-809.8 1869.15,-816.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1205.11,-660.47C1273.27,-658.58 1348.23,-656.51 1401.14,-655.05"/>
<polygon fill="blue" stroke="blue" points="1401.51,-658.54 1411.41,-654.77 1401.32,-651.54 1401.51,-658.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<g id="a_node201"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m_from(timestamp: Timestamp) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20220524_Timestamp_Calc_m&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;timestamp.to_be_bytes(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1523.5,-1049.12 1420.5,-1049.12 1420.5,-1013.12 1523.5,-1013.12 1523.5,-1049.12"/>
<text text-anchor="middle" x="1472" y="-1027.42" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1186.82,-683.3C1205.57,-691.38 1222.78,-702.61 1236,-718.12 1275.72,-764.69 1222.58,-947.05 1264,-992.12 1300.42,-1031.75 1363.4,-1038.7 1410.35,-1037.45"/>
<polygon fill="blue" stroke="blue" points="1410.56,-1040.94 1420.41,-1037.05 1410.28,-1033.95 1410.56,-1040.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<g id="a_node176"><a xlink:title=" &#160;&#160;&#160;pub fn calc_j3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY_LEN].co...">
<polygon fill="white" stroke="black" points="1503.5,-218.12 1440.5,-218.12 1440.5,-182.12 1503.5,-182.12 1503.5,-218.12"/>
<text text-anchor="middle" x="1472" y="-196.42" font-family="Helvetica,sans-Serif" font-size="14.00">calc_j3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.17,-200.12C1136.08,-200.12 1341.91,-200.12 1430.08,-200.12"/>
<polygon fill="blue" stroke="blue" points="1430.23,-203.62 1440.23,-200.12 1430.23,-196.62 1430.23,-203.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1503.78,-197.77C1550.16,-196.11 1637.09,-200.75 1680,-253.12 1754.75,-344.35 1628.29,-696.19 1708,-783.12 1748.01,-826.74 1819.99,-827.99 1869.33,-822.52"/>
<polygon fill="blue" stroke="blue" points="1870,-825.97 1879.5,-821.27 1869.15,-819.02 1870,-825.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1071.35,-114.34C1192.29,-105.38 1595.65,-82.62 1680,-170.12 1727.32,-219.2 1662.1,-732.7 1708,-783.12 1747.85,-826.89 1819.87,-828.1 1869.26,-822.59"/>
<polygon fill="blue" stroke="blue" points="1869.95,-826.03 1879.44,-821.32 1869.09,-819.08 1869.95,-826.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node178"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="663,-135.12 491,-135.12 491,-99.12 663,-99.12 663,-135.12"/>
<text text-anchor="middle" x="577" y="-113.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M656.56,-135.14C705.68,-146.07 770.34,-159.84 828,-170.12 887.52,-180.73 957.19,-190.23 998.62,-195.57"/>
<polygon fill="blue" stroke="blue" points="998.41,-199.07 1008.77,-196.87 999.3,-192.13 998.41,-199.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.15,-117.12C760.21,-117.12 915.13,-117.12 990.68,-117.12"/>
<polygon fill="blue" stroke="blue" points="990.79,-120.62 1000.79,-117.12 990.79,-113.62 990.79,-120.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.15,-107.06C758.23,-95.82 908.85,-78.02 985.97,-68.91"/>
<polygon fill="blue" stroke="blue" points="986.83,-72.33 996.35,-67.68 986.01,-65.38 986.83,-72.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1075.5,-50.4C1187.48,-16.08 1515.47,64.9 1680,-103.12 1732.91,-157.15 1657.22,-727.09 1708,-783.12 1747.75,-826.98 1819.79,-828.17 1869.22,-822.63"/>
<polygon fill="blue" stroke="blue" points="1869.92,-826.07 1879.4,-821.36 1869.05,-819.12 1869.92,-826.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node180"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="679.5,-6822.12 474.5,-6822.12 474.5,-6786.12 679.5,-6786.12 679.5,-6822.12"/>
<text text-anchor="middle" x="577" y="-6800.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M679.77,-6818.3C725.7,-6818.62 776.59,-6809.37 808,-6774.12 858.6,-6717.33 784.92,-5467.81 828,-5405.12 861.16,-5356.85 927.39,-5336.65 976.04,-5328.19"/>
<polygon fill="blue" stroke="blue" points="976.82,-5331.61 986.14,-5326.56 975.71,-5324.7 976.82,-5331.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M679.71,-6804.12C776.9,-6804.12 918.87,-6804.12 990.36,-6804.12"/>
<polygon fill="blue" stroke="blue" points="990.79,-6807.62 1000.79,-6804.12 990.79,-6800.62 990.79,-6807.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M1053.57,-6785.93C1088.3,-6749.35 1173.04,-6667.83 1264,-6638.12 1439.75,-6580.71 1542.13,-6514.93 1680,-6638.12 1721.36,-6675.07 1669.04,-6846.65 1708,-6886.12 1753.83,-6932.55 1836.39,-6928.29 1884.46,-6920.83"/>
<polygon fill="blue" stroke="blue" points="1885.18,-6924.26 1894.46,-6919.15 1884.02,-6917.35 1885.18,-6924.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.24,-1217.06C1105.55,-1210.55 1188.87,-1204.83 1236,-1249.12 1410.79,-1413.36 1461.25,-2234.01 1469.65,-2397.69"/>
<polygon fill="blue" stroke="blue" points="1466.16,-2398.1 1470.16,-2407.92 1473.15,-2397.75 1466.16,-2398.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.1,-1222.43C1102.08,-1222.06 1177.21,-1218.06 1236,-1195.12 1320.47,-1162.15 1403.77,-1093 1444.76,-1055.9"/>
<polygon fill="blue" stroke="blue" points="1447.13,-1058.47 1452.15,-1049.14 1442.41,-1053.31 1447.13,-1058.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.18,-1329.09C1174.45,-1325.5 1586.92,-1317.85 1680,-1400.12 1836.53,-1538.46 1906.33,-2245.96 1919.61,-2397.51"/>
<polygon fill="blue" stroke="blue" points="1916.15,-2398.17 1920.5,-2407.83 1923.13,-2397.57 1916.15,-2398.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.05,-1436.39C1103.92,-1434.99 1179.8,-1436.8 1236,-1465.12 1488.61,-1592.42 1518.08,-1689.18 1680,-1921.12 1796.38,-2087.81 1884.1,-2319.13 1912.33,-2398.28"/>
<polygon fill="blue" stroke="blue" points="1909.14,-2399.74 1915.77,-2408 1915.73,-2397.4 1909.14,-2399.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.36,-1386.24C1181.06,-1395.54 1633.35,-1434.08 1680,-1476.12 1823.72,-1605.61 1903.02,-2254.24 1918.98,-2397.91"/>
<polygon fill="blue" stroke="blue" points="1915.53,-2398.53 1920.1,-2408.09 1922.49,-2397.77 1915.53,-2398.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.26,-1389.32C1106.86,-1395.74 1189.18,-1400.97 1236,-1357.12 1281.67,-1314.33 1233.08,-1273.53 1264,-1219.12 1305.44,-1146.21 1385.21,-1086.09 1432.71,-1054.7"/>
<polygon fill="blue" stroke="blue" points="1434.72,-1057.57 1441.19,-1049.18 1430.9,-1051.7 1434.72,-1057.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.15,-1540.57C1106.11,-1533.15 1191.29,-1525.9 1236,-1573.12 1289.34,-1629.45 1245.96,-1845.66 1264,-1921.12 1309.65,-2112.06 1417,-2324.73 1456.28,-2398.88"/>
<polygon fill="blue" stroke="blue" points="1453.35,-2400.83 1461.14,-2408.01 1459.53,-2397.54 1453.35,-2400.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.28,-1163.01C1105.66,-1156.44 1189.05,-1150.63 1236,-1195.12 1418.35,-1367.92 1462.94,-2230.66 1469.93,-2397.98"/>
<polygon fill="blue" stroke="blue" points="1466.43,-2398.14 1470.33,-2407.99 1473.42,-2397.85 1466.43,-2398.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.33,-1173.84C1106.56,-1181.5 1192.12,-1189.1 1236,-1141.12 1282.09,-1090.72 1239.01,-590.68 1264,-527.12 1301.37,-432.06 1391.84,-347.68 1439.86,-307.68"/>
<polygon fill="blue" stroke="blue" points="1442.25,-310.24 1447.74,-301.19 1437.8,-304.84 1442.25,-310.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.16,-1274.05C1174.32,-1266.23 1586.46,-1242.97 1680,-1324.12 1849.6,-1471.25 1909.51,-2238.58 1920.18,-2397.35"/>
<polygon fill="blue" stroke="blue" points="1916.71,-2397.97 1920.86,-2407.71 1923.7,-2397.5 1916.71,-2397.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.21,-1486.51C1106.25,-1479.02 1191.55,-1471.66 1236,-1519.12 1266.61,-1551.8 1253.82,-1877.51 1264,-1921.12 1308.62,-2112.31 1416.61,-2324.82 1456.16,-2398.9"/>
<polygon fill="blue" stroke="blue" points="1453.25,-2400.87 1461.07,-2408.03 1459.42,-2397.56 1453.25,-2400.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.08,-1493.17C1102.37,-1493.78 1178.27,-1491.04 1236,-1465.12 1565.2,-1317.31 1834.45,-943.25 1904.32,-839.92"/>
<polygon fill="blue" stroke="blue" points="1907.43,-841.57 1910.1,-831.32 1901.62,-837.67 1907.43,-841.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.11,-1598.52C1106.4,-1597.44 1192.56,-1602.3 1236,-1653.12 1274.91,-1698.63 1249.39,-1863.05 1264,-1921.12 1311.92,-2111.51 1417.87,-2324.52 1456.52,-2398.81"/>
<polygon fill="blue" stroke="blue" points="1453.58,-2400.73 1461.31,-2407.97 1459.78,-2397.48 1453.58,-2400.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.26,-1600.01C1102.13,-1599.08 1176.77,-1594.38 1236,-1573.12 1454.46,-1494.68 1523.56,-1469.6 1680,-1298.12 1812.62,-1152.74 1890.05,-921.26 1913.97,-841.34"/>
<polygon fill="blue" stroke="blue" points="1917.39,-842.09 1916.86,-831.51 1910.68,-840.11 1917.39,-842.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.31,-1110.78C1163.65,-1100.33 1508.86,-1078.89 1680,-1260.12 1843.22,-1432.95 1908.48,-2236.18 1920.06,-2397.76"/>
<polygon fill="blue" stroke="blue" points="1916.58,-2398.13 1920.78,-2407.86 1923.57,-2397.64 1916.58,-2398.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.14,-1110.66C1102.55,-1105.62 1174.88,-1095.6 1236,-1084.12 1295.67,-1072.91 1363.24,-1057.37 1410.56,-1046.01"/>
<polygon fill="blue" stroke="blue" points="1411.43,-1049.4 1420.34,-1043.66 1409.79,-1042.6 1411.43,-1049.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1075.6,-750.95C1216.96,-761.34 1706.66,-797.3 1869.15,-809.24"/>
<polygon fill="blue" stroke="blue" points="1869.14,-812.74 1879.37,-809.99 1869.65,-805.76 1869.14,-812.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1071.15,-802.54C1206.36,-804.22 1704.82,-810.42 1869.1,-812.46"/>
<polygon fill="blue" stroke="blue" points="1869.39,-815.96 1879.43,-812.59 1869.48,-808.96 1869.39,-815.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<g id="a_node194"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m1_from(self.receipt_expiration_time, self.receipt_level) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1072.5,-301.12 999.5,-301.12 999.5,-265.12 1072.5,-265.12 1072.5,-301.12"/>
<text text-anchor="middle" x="1036" y="-279.42" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1072.52,-283.12C1145.4,-283.12 1312.8,-283.12 1405.77,-283.12"/>
<polygon fill="blue" stroke="blue" points="1405.9,-286.62 1415.9,-283.12 1405.9,-279.62 1405.9,-286.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1520.14,-301.19C1569.36,-322.81 1644.27,-364.03 1680,-426.12 1719.7,-495.09 1653.47,-725.16 1708,-783.12 1748.44,-826.1 1819.99,-827.59 1869.14,-822.34"/>
<polygon fill="blue" stroke="blue" points="1869.75,-825.8 1879.27,-821.14 1868.93,-818.85 1869.75,-825.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1075.64,-361.95C1189.43,-352.06 1525,-340.58 1680,-527.12 1753.15,-615.15 1628.3,-700.97 1708,-783.12 1748.97,-825.35 1820.07,-827.1 1869,-822.11"/>
<polygon fill="blue" stroke="blue" points="1869.54,-825.57 1879.08,-820.96 1868.75,-818.62 1869.54,-825.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node197"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="634.5,-438.12 519.5,-438.12 519.5,-402.12 634.5,-402.12 634.5,-438.12"/>
<text text-anchor="middle" x="577" y="-416.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M634.96,-413.39C725.57,-402.68 901,-381.95 986.2,-371.88"/>
<polygon fill="blue" stroke="blue" points="986.86,-375.33 996.38,-370.68 986.04,-368.38 986.86,-375.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node198"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1063,-492.12 1009,-492.12 1009,-456.12 1063,-456.12 1063,-492.12"/>
<text text-anchor="middle" x="1036" y="-470.42" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M634.96,-426.85C730.33,-438.12 919.67,-460.49 998.86,-469.85"/>
<polygon fill="blue" stroke="blue" points="998.5,-473.33 1008.84,-471.03 999.32,-466.38 998.5,-473.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node199"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="1064,-438.12 1008,-438.12 1008,-402.12 1064,-402.12 1064,-438.12"/>
<text text-anchor="middle" x="1036" y="-416.42" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M634.96,-420.12C729.87,-420.12 917.85,-420.12 997.71,-420.12"/>
<polygon fill="blue" stroke="blue" points="997.79,-423.62 1007.79,-420.12 997.79,-416.62 997.79,-423.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1063.28,-472.37C1106.83,-471.08 1193.36,-475.62 1236,-527.12 1290.71,-593.19 1205.1,-849.75 1264,-912.12 1307.49,-958.17 1388.09,-953.92 1434.85,-946.6"/>
<polygon fill="blue" stroke="blue" points="1435.57,-950.02 1444.85,-944.9 1434.4,-943.12 1435.57,-950.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.07,-414.51C1107.18,-407.32 1191.12,-400.79 1236,-447.12 1278.12,-490.61 1235.11,-664.91 1264,-718.12 1300.4,-785.16 1376.04,-835.22 1425.1,-862.3"/>
<polygon fill="blue" stroke="blue" points="1423.48,-865.4 1433.94,-867.09 1426.81,-859.25 1423.48,-865.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().</title>
<g id="a_node200"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m_from(self.timestamp) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1068,-1049.12 1004,-1049.12 1004,-1013.12 1068,-1013.12 1068,-1049.12"/>
<text text-anchor="middle" x="1036" y="-1027.42" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.21,-1031.12C1139.68,-1031.12 1316.25,-1031.12 1410.09,-1031.12"/>
<polygon fill="blue" stroke="blue" points="1410.29,-1034.62 1420.29,-1031.12 1410.29,-1027.62 1410.29,-1034.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1523.79,-1027.92C1566.88,-1023.74 1629.56,-1014.13 1680,-992.12 1768.19,-953.63 1854.71,-877.9 1896.34,-838.42"/>
<polygon fill="blue" stroke="blue" points="1899.02,-840.7 1903.82,-831.26 1894.18,-835.64 1899.02,-840.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node202"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="653,-6548.12 501,-6548.12 501,-6512.12 653,-6512.12 653,-6548.12"/>
<text text-anchor="middle" x="577" y="-6526.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653.05,-6544.15C704.5,-6549.03 770.08,-6544.98 808,-6503.12 848.96,-6457.9 793.36,-5455.34 828,-5405.12 861.25,-5356.91 927.46,-5336.7 976.08,-5328.22"/>
<polygon fill="blue" stroke="blue" points="976.86,-5331.64 986.17,-5326.59 975.74,-5324.73 976.86,-5331.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653.21,-6521.56C749.35,-6510.62 912.7,-6492.03 990.82,-6483.14"/>
<polygon fill="blue" stroke="blue" points="991.28,-6486.62 1000.82,-6482.01 990.48,-6479.66 991.28,-6486.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M1071.31,-6469.9C1179.21,-6446.3 1514.33,-6390.61 1680,-6564.12 1729.6,-6616.07 1658.21,-6834.35 1708,-6886.12 1753.23,-6933.13 1836.01,-6928.66 1884.28,-6921.01"/>
<polygon fill="blue" stroke="blue" points="1885.05,-6924.43 1894.32,-6919.29 1883.87,-6917.53 1885.05,-6924.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node204"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="653,-6494.12 501,-6494.12 501,-6458.12 653,-6458.12 653,-6494.12"/>
<text text-anchor="middle" x="577" y="-6472.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653.11,-6479.06C705.29,-6476.64 771.73,-6463.73 808,-6418.12 843.03,-6374.06 796,-5451.43 828,-5405.12 861.29,-5356.94 927.49,-5336.72 976.1,-5328.24"/>
<polygon fill="blue" stroke="blue" points="976.88,-5331.66 986.19,-5326.6 975.76,-5324.75 976.88,-5331.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653.21,-6476.45C749.16,-6476.87 912.03,-6477.58 990.34,-6477.92"/>
<polygon fill="blue" stroke="blue" points="990.8,-6481.42 1000.82,-6477.97 990.83,-6474.42 990.8,-6481.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node205"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="764.5,-2601.12 389.5,-2601.12 389.5,-2565.12 764.5,-2565.12 764.5,-2601.12"/>
<text text-anchor="middle" x="577" y="-2579.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.57,-2580.45C780.99,-2587.07 795.93,-2596.64 808,-2610.12 857.78,-2665.66 778.58,-5239.25 828,-5295.12 863.91,-5335.71 928.49,-5338.09 976,-5333.05"/>
<polygon fill="blue" stroke="blue" points="976.65,-5336.5 986.16,-5331.84 975.82,-5329.55 976.65,-5336.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.78,-2586.7C780.34,-2592.31 795.04,-2599.93 808,-2610.12 828.12,-2625.94 806.99,-2649.5 828,-2664.12 902.42,-2715.91 1145.34,-2665.08 1236,-2664.12 1300.44,-2663.43 1374.8,-2661.69 1422.32,-2660.46"/>
<polygon fill="blue" stroke="blue" points="1422.43,-2663.95 1432.33,-2660.19 1422.24,-2656.96 1422.43,-2663.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.76,-2584.13C780.88,-2577.75 795.69,-2568.69 808,-2556.12 840.49,-2522.94 797.8,-2383.39 828,-2348.12 870.28,-2298.73 951.68,-2292.12 998.82,-2292.87"/>
<polygon fill="blue" stroke="blue" points="998.81,-2296.37 1008.9,-2293.15 999,-2289.37 998.81,-2296.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.56,-2584.69C780.82,-2578.22 795.72,-2568.99 808,-2556.12 852.27,-2509.69 784.03,-2314.83 828,-2268.12 871.07,-2222.36 950.76,-2226.2 997.7,-2233.44"/>
<polygon fill="blue" stroke="blue" points="997.32,-2236.93 1007.76,-2235.13 998.47,-2230.02 997.32,-2236.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.54,-2583.12C847.66,-2583.12 938.46,-2583.12 990.86,-2583.12"/>
<polygon fill="blue" stroke="blue" points="991.13,-2586.62 1001.13,-2583.12 991.13,-2579.62 991.13,-2586.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M731.72,-2565.11C757.2,-2562.11 783.35,-2559.03 808,-2556.12 874.77,-2548.23 952.58,-2538.96 997.58,-2533.59"/>
<polygon fill="blue" stroke="blue" points="998.23,-2537.03 1007.75,-2532.37 997.4,-2530.08 998.23,-2537.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node206"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="645.5,-2547.12 508.5,-2547.12 508.5,-2511.12 645.5,-2511.12 645.5,-2547.12"/>
<text text-anchor="middle" x="577" y="-2525.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M645.6,-2515.76C698.1,-2509.72 768.43,-2511.95 808,-2556.12 858.77,-2612.78 777.59,-5238.13 828,-5295.12 863.9,-5335.71 928.49,-5338.09 976,-5333.06"/>
<polygon fill="blue" stroke="blue" points="976.65,-5336.5 986.16,-5331.84 975.82,-5329.55 976.65,-5336.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M645.53,-2518.23C696.25,-2514.07 764.22,-2517.62 808,-2556.12 835.52,-2580.32 799.52,-2613.05 828,-2636.12 850.99,-2654.74 1276.53,-2658.29 1422.41,-2658.96"/>
<polygon fill="blue" stroke="blue" points="1422.4,-2662.46 1432.42,-2659.01 1422.43,-2655.46 1422.4,-2662.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M645.59,-2540.24C697.19,-2544.58 766.32,-2540.72 808,-2499.12 855.92,-2451.3 783.06,-2398.75 828,-2348.12 871.04,-2299.63 951.8,-2292.64 998.71,-2293.09"/>
<polygon fill="blue" stroke="blue" points="998.67,-2296.59 1008.74,-2293.31 998.82,-2289.6 998.67,-2296.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M645.58,-2540.71C697.54,-2545.41 767.13,-2541.8 808,-2499.12 843.64,-2461.9 792.36,-2305.33 828,-2268.12 871.46,-2222.73 951.01,-2226.44 997.82,-2233.56"/>
<polygon fill="blue" stroke="blue" points="997.41,-2237.04 1007.85,-2235.21 998.55,-2230.13 997.41,-2237.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M645.68,-2537.04C691.5,-2542.4 753.4,-2549.67 808,-2556.12 871.62,-2563.64 945.27,-2572.41 991,-2577.86"/>
<polygon fill="blue" stroke="blue" points="990.81,-2581.37 1001.16,-2579.08 991.64,-2574.42 990.81,-2581.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M645.92,-2529.12C743.76,-2529.12 921.02,-2529.12 997.84,-2529.12"/>
<polygon fill="blue" stroke="blue" points="998,-2532.62 1007.99,-2529.12 997.99,-2525.62 998,-2532.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node207"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="676.5,-2709.12 477.5,-2709.12 477.5,-2673.12 676.5,-2673.12 676.5,-2709.12"/>
<text text-anchor="middle" x="577" y="-2687.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M676.5,-2675.47C723.25,-2674.02 775.8,-2682.19 808,-2718.12 855.78,-2771.42 780.56,-5241.51 828,-5295.12 863.91,-5335.7 928.49,-5338.09 976,-5333.05"/>
<polygon fill="blue" stroke="blue" points="976.65,-5336.5 986.17,-5331.84 975.82,-5329.55 976.65,-5336.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M676.52,-2696.45C722.53,-2698.69 778.05,-2701.02 828,-2702.12 1009.29,-2706.1 1060.74,-2748.66 1236,-2702.12 1249.85,-2698.44 1250.41,-2690.69 1264,-2686.12 1316.2,-2668.56 1379.37,-2662.33 1422.09,-2660.17"/>
<polygon fill="blue" stroke="blue" points="1422.39,-2663.66 1432.23,-2659.72 1422.08,-2656.67 1422.39,-2663.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M676.71,-2676.32C722.92,-2675.26 774.94,-2683.53 808,-2718.12 850.95,-2763.06 785.34,-2951.91 828,-2997.12 867.74,-3039.24 938.51,-3039.3 986.09,-3033.39"/>
<polygon fill="blue" stroke="blue" points="986.74,-3036.84 996.17,-3032.01 985.79,-3029.9 986.74,-3036.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M676.67,-2680.1C721.21,-2680.38 771.82,-2688.69 808,-2718.12 829.8,-2735.86 808.77,-2757.62 828,-2778.12 874.04,-2827.19 952.74,-2848.33 998.7,-2856.86"/>
<polygon fill="blue" stroke="blue" points="998.35,-2860.35 1008.81,-2858.63 999.56,-2853.45 998.35,-2860.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M676.75,-2676.56C722.83,-2675.6 774.72,-2683.89 808,-2718.12 842.99,-2754.11 793.24,-2906.9 828,-2943.12 871.51,-2988.45 951.04,-2984.76 997.84,-2977.66"/>
<polygon fill="blue" stroke="blue" points="998.56,-2981.09 1007.86,-2976.01 997.43,-2974.18 998.56,-2981.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M676.63,-2676.96C722.54,-2676.14 774.32,-2684.42 808,-2718.12 862.09,-2772.24 774.25,-2834.65 828,-2889.12 869.98,-2931.66 943.76,-2930.6 990.96,-2924.45"/>
<polygon fill="blue" stroke="blue" points="991.5,-2927.91 1000.9,-2923.04 990.51,-2920.98 991.5,-2927.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M676.77,-2684.45C717.74,-2680.42 765.52,-2674.05 808,-2664.12 873.86,-2648.71 947.05,-2620.47 992.06,-2601.74"/>
<polygon fill="blue" stroke="blue" points="993.63,-2604.88 1001.49,-2597.78 990.92,-2598.42 993.63,-2604.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M676.54,-2704.3C722.01,-2704.77 773.43,-2696.47 808,-2664.12 843.64,-2630.76 792.57,-2589.7 828,-2556.12 873.36,-2513.12 951.55,-2515.8 997.75,-2522.13"/>
<polygon fill="blue" stroke="blue" points="997.24,-2525.59 1007.65,-2523.61 998.28,-2518.67 997.24,-2525.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node208"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="800,-2763.12 354,-2763.12 354,-2727.12 800,-2727.12 800,-2763.12"/>
<text text-anchor="middle" x="577" y="-2741.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M799.1,-2763.31C802.21,-2766.04 805.18,-2768.97 808,-2772.12 854.79,-2824.3 781.55,-5242.64 828,-5295.12 863.92,-5335.7 928.5,-5338.08 976,-5333.05"/>
<polygon fill="blue" stroke="blue" points="976.65,-5336.5 986.17,-5331.83 975.82,-5329.55 976.65,-5336.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.29,-2759.66C961.31,-2766.31 1163.01,-2765.47 1236,-2726.12 1255.1,-2715.82 1245.44,-2697.37 1264,-2686.12 1311.92,-2657.08 1377.46,-2653.26 1421.86,-2654.8"/>
<polygon fill="blue" stroke="blue" points="1421.96,-2658.31 1432.11,-2655.26 1422.27,-2651.32 1421.96,-2658.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M798.29,-2763.26C801.67,-2766 804.92,-2768.95 808,-2772.12 842.99,-2808.11 793.24,-2960.9 828,-2997.12 868.1,-3038.9 938.78,-3039.04 986.24,-3033.25"/>
<polygon fill="blue" stroke="blue" points="986.86,-3036.7 996.3,-3031.89 985.92,-3029.76 986.86,-3036.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M794.09,-2763.14C798.89,-2765.87 803.53,-2768.86 808,-2772.12 825.35,-2784.78 811.32,-2802.59 828,-2816.12 877.24,-2856.05 953.89,-2863.07 998.8,-2863.39"/>
<polygon fill="blue" stroke="blue" points="998.98,-2866.89 1008.96,-2863.36 998.95,-2859.89 998.98,-2866.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M798.17,-2763.38C801.59,-2766.08 804.87,-2768.99 808,-2772.12 862.09,-2826.24 774.25,-2888.65 828,-2943.12 872.02,-2987.73 951.02,-2984.39 997.66,-2977.53"/>
<polygon fill="blue" stroke="blue" points="998.33,-2980.96 1007.65,-2975.93 997.23,-2974.05 998.33,-2980.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M797.47,-2763.25C801.13,-2765.98 804.65,-2768.94 808,-2772.12 846.27,-2808.43 789.97,-2852.56 828,-2889.12 870.88,-2930.33 943.83,-2929.8 990.69,-2924.11"/>
<polygon fill="blue" stroke="blue" points="991.41,-2927.55 1000.85,-2922.75 990.48,-2920.61 991.41,-2927.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M777.09,-2727.09C787.64,-2724.48 798,-2721.5 808,-2718.12 883.97,-2692.38 962.12,-2638.77 1003.99,-2607.41"/>
<polygon fill="blue" stroke="blue" points="1006.25,-2610.08 1012.12,-2601.26 1002.03,-2604.5 1006.25,-2610.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M798.14,-2726.83C801.57,-2724.14 804.86,-2721.24 808,-2718.12 859.45,-2666.97 776.88,-2607.59 828,-2556.12 872.16,-2511.65 951.11,-2514.94 997.7,-2521.75"/>
<polygon fill="blue" stroke="blue" points="997.26,-2525.23 1007.69,-2523.34 998.36,-2518.31 997.26,-2525.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node209"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="642.5,-2817.12 511.5,-2817.12 511.5,-2781.12 642.5,-2781.12 642.5,-2817.12"/>
<text text-anchor="middle" x="577" y="-2795.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M642.53,-2794.2C695.97,-2794.06 769.21,-2803.78 808,-2852.12 849.49,-2903.81 784.41,-5188.18 828,-5238.12 865.15,-5280.68 933.6,-5282.59 981.59,-5277.54"/>
<polygon fill="blue" stroke="blue" points="982.28,-5280.98 991.8,-5276.33 981.46,-5274.03 982.28,-5280.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M642.53,-2794.2C695.97,-2794.06 769.21,-2803.78 808,-2852.12 850.47,-2905.05 783.02,-5244.31 828,-5295.12 863.92,-5335.69 928.5,-5338.08 976.01,-5333.05"/>
<polygon fill="blue" stroke="blue" points="976.66,-5336.49 986.17,-5331.83 975.82,-5329.54 976.66,-5336.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node210"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="614,-2655.12 540,-2655.12 540,-2619.12 614,-2619.12 614,-2655.12"/>
<text text-anchor="middle" x="577" y="-2633.42" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M614.18,-2645.16C665.13,-2654.12 757.43,-2661.32 808,-2610.12 837.99,-2579.75 796.29,-2447.68 828,-2419.12 917.16,-2338.8 1310.04,-2398.32 1433.64,-2419.45"/>
<polygon fill="blue" stroke="blue" points="1433.3,-2422.94 1443.75,-2421.2 1434.49,-2416.05 1433.3,-2422.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M614.32,-2645.29C665.43,-2654.41 757.92,-2661.8 808,-2610.12 844.32,-2572.64 789.56,-2411.42 828,-2376.12 904.52,-2305.86 1647.69,-2392 1863.51,-2418.71"/>
<polygon fill="blue" stroke="blue" points="1863.33,-2422.21 1873.69,-2419.97 1864.2,-2415.27 1863.33,-2422.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M614.03,-2633.27C661.59,-2629.9 746.47,-2629.99 808,-2664.12 820.44,-2671.02 816.42,-2680.85 828,-2689.12 984.76,-2801 1061.14,-2754.39 1236,-2835.12 1309.89,-2869.23 1391.21,-2918.88 1436.19,-2947.49"/>
<polygon fill="blue" stroke="blue" points="1434.38,-2950.49 1444.69,-2952.92 1438.15,-2944.59 1434.38,-2950.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M614.13,-2629.49C664.59,-2621.15 755.83,-2614.83 808,-2664.12 845.39,-2699.44 795.68,-2738.1 828,-2778.12 870.71,-2830.99 951.95,-2850.84 998.95,-2858.1"/>
<polygon fill="blue" stroke="blue" points="998.6,-2861.58 1009,-2859.54 999.6,-2854.66 998.6,-2861.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M614.41,-2628.86C665.64,-2619.62 758.28,-2612.09 808,-2664.12 850.95,-2709.06 785.34,-2897.91 828,-2943.12 871.12,-2988.82 950.79,-2985 997.71,-2977.78"/>
<polygon fill="blue" stroke="blue" points="998.48,-2981.2 1007.77,-2976.1 997.33,-2974.29 998.48,-2981.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M614.25,-2632.88C659.57,-2627.58 739.53,-2618.21 808,-2610.12 871.62,-2602.6 945.27,-2593.83 991,-2588.37"/>
<polygon fill="blue" stroke="blue" points="991.64,-2591.82 1001.16,-2587.16 990.81,-2584.87 991.64,-2591.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M614.21,-2643.56C663.53,-2650.18 752.07,-2654.11 808,-2610.12 828.12,-2594.3 807.99,-2572.07 828,-2556.12 876.51,-2517.45 952.69,-2518.42 997.85,-2523.31"/>
<polygon fill="blue" stroke="blue" points="997.47,-2526.79 1007.81,-2524.51 998.3,-2519.84 997.47,-2526.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node211"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="663,-818.12 491,-818.12 491,-782.12 663,-782.12 663,-818.12"/>
<text text-anchor="middle" x="577" y="-796.42" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.12,-789.8C712.02,-779.53 770.91,-759.02 808,-718.12 832.62,-690.97 800.63,-662.5 828,-638.12 848.55,-619.81 875.11,-609.99 902.32,-605.23"/>
<polygon fill="blue" stroke="blue" points="903.01,-608.67 912.37,-603.7 901.95,-601.75 903.01,-608.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.16,-791.35C712.87,-781.63 772.59,-761.17 808,-718.12 846.25,-671.61 785.03,-626.3 828,-584.12 869.2,-543.67 939.29,-543.11 986.35,-548.45"/>
<polygon fill="blue" stroke="blue" points="985.96,-551.93 996.32,-549.71 986.84,-544.99 985.96,-551.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.25,-796.12C713.32,-798.76 773.39,-811.55 808,-853.12 840.03,-891.58 794.15,-1266.25 828,-1303.12 870.61,-1349.53 950.81,-1345.36 997.9,-1337.9"/>
<polygon fill="blue" stroke="blue" points="998.72,-1341.31 1007.98,-1336.17 997.53,-1334.41 998.72,-1341.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.17,-796.44C713.05,-799.23 772.94,-812.06 808,-853.12 849.66,-901.9 784.03,-1094.41 828,-1141.12 871.42,-1187.24 952.04,-1182.97 998.83,-1175.62"/>
<polygon fill="blue" stroke="blue" points="999.56,-1179.04 1008.83,-1173.92 998.38,-1172.14 999.56,-1179.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.16,-796.19C713.2,-798.86 773.26,-811.66 808,-853.12 836.29,-886.89 798.11,-1216.76 828,-1249.12 870.64,-1295.28 950.48,-1291.3 997.56,-1283.92"/>
<polygon fill="blue" stroke="blue" points="998.38,-1287.33 1007.65,-1282.21 997.21,-1280.43 998.38,-1287.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.14,-795.96C713.33,-798.52 773.57,-811.27 808,-853.12 851.23,-905.66 782.28,-1414.73 828,-1465.12 870.68,-1512.15 951.93,-1507.44 998.94,-1499.79"/>
<polygon fill="blue" stroke="blue" points="999.75,-1503.21 1008.99,-1498.03 998.54,-1496.31 999.75,-1503.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.15,-790.43C758.23,-779.61 908.85,-762.47 985.97,-753.7"/>
<polygon fill="blue" stroke="blue" points="986.81,-757.12 996.35,-752.52 986.02,-750.17 986.81,-757.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.15,-800.49C760.21,-800.92 915.13,-801.59 990.68,-801.92"/>
<polygon fill="blue" stroke="blue" points="990.78,-805.42 1000.79,-801.97 990.81,-798.42 990.78,-805.42"/>
</g>
</g>
</svg>
