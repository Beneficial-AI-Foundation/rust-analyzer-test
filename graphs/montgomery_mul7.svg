<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="4761pt" height="12067pt"
 viewBox="0.00 0.00 4761.00 12067.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 12063)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-12063 4757,-12063 4757,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2017.5,-912 2017.5,-1419 3510.5,-1419 3510.5,-912 2017.5,-912"/>
<text text-anchor="middle" x="2764" y="-1403.8" font-family="Helvetica,sans-Serif" font-size="14.00">dalek_benchmarks.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3335.5,-5101 3335.5,-5176 3532.5,-5176 3532.5,-5101 3335.5,-5101"/>
<text text-anchor="middle" x="3434" y="-5160.8" font-family="Helvetica,sans-Serif" font-size="14.00">pippenger.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4168.5,-11794 4168.5,-12031 4745,-12031 4745,-11794 4168.5,-11794"/>
<text text-anchor="middle" x="4456.75" y="-12015.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2790,-4165 2790,-4456 3548,-4456 3548,-4165 2790,-4165"/>
<text text-anchor="middle" x="3169" y="-4440.8" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2806.5,-11036 2806.5,-11219 3533,-11219 3533,-11036 2806.5,-11036"/>
<text text-anchor="middle" x="3169.75" y="-11203.8" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3226,-3974 3226,-4157 3642,-4157 3642,-3974 3226,-3974"/>
<text text-anchor="middle" x="3434" y="-4141.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3284,-11333 3284,-11786 4558.5,-11786 4558.5,-11333 3284,-11333"/>
<text text-anchor="middle" x="3921.25" y="-11770.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="541,-4092 541,-4221 1171.5,-4221 1171.5,-4092 541,-4092"/>
<text text-anchor="middle" x="856.25" y="-4205.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed25519_benchmarks.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1028,-3401 1028,-3530 1620,-3530 1620,-3401 1028,-3401"/>
<text text-anchor="middle" x="1324" y="-3514.8" font-family="Helvetica,sans-Serif" font-size="14.00">hazmat.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1511,-3864 1511,-4101 2134,-4101 2134,-3864 1511,-3864"/>
<text text-anchor="middle" x="1822.5" y="-4085.8" font-family="Helvetica,sans-Serif" font-size="14.00">signing.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2051,-3727 2051,-3856 3517.5,-3856 3517.5,-3727 2051,-3727"/>
<text text-anchor="middle" x="2784.25" y="-3840.8" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="979,-4229 979,-4358 1651.5,-4358 1651.5,-4229 979,-4229"/>
<text text-anchor="middle" x="1315.25" y="-4342.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed25519.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1466.5,-3538 1466.5,-3667 1669.5,-3667 1669.5,-3538 1466.5,-3538"/>
<text text-anchor="middle" x="1568" y="-3651.8" font-family="Helvetica,sans-Serif" font-size="14.00">validation_criteria.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="476,-2032 476,-2755 766,-2755 766,-2032 476,-2032"/>
<text text-anchor="middle" x="621" y="-2739.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1461.5,-10114 1461.5,-10351 1674.5,-10351 1674.5,-10114 1461.5,-10114"/>
<text text-anchor="middle" x="1568" y="-10335.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="1270,-6553 1270,-9004 1866,-9004 1866,-6553 1270,-6553"/>
<text text-anchor="middle" x="1568" y="-8988.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="1069,-3318 1069,-3393 1620.5,-3393 1620.5,-3318 1069,-3318"/>
<text text-anchor="middle" x="1344.75" y="-3377.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="2035,-1510 2035,-1585 2139,-1585 2139,-1510 2035,-1510"/>
<text text-anchor="middle" x="2087" y="-1569.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="1997,-3309 1997,-3478 3164,-3478 3164,-3309 1997,-3309"/>
<text text-anchor="middle" x="2580.5" y="-3462.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="2898.5,-3486 2898.5,-3615 3517,-3615 3517,-3486 2898.5,-3486"/>
<text text-anchor="middle" x="3207.75" y="-3599.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="1027,-3675 1027,-3750 1677.5,-3750 1677.5,-3675 1027,-3675"/>
<text text-anchor="middle" x="1352.25" y="-3734.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="1032,-9977 1032,-10106 1657,-10106 1657,-9977 1032,-9977"/>
<text text-anchor="middle" x="1344.5" y="-10090.8" font-family="Helvetica,sans-Serif" font-size="14.00">account_data.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="548.5,-5572 548.5,-5701 1663,-5701 1663,-5572 548.5,-5572"/>
<text text-anchor="middle" x="1105.75" y="-5685.8" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="1054,-9894 1054,-9969 1628.5,-9969 1628.5,-9894 1054,-9894"/>
<text text-anchor="middle" x="1341.25" y="-9953.8" font-family="Helvetica,sans-Serif" font-size="14.00">recipient.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="1054,-10114 1054,-10189 1175,-10189 1175,-10114 1054,-10114"/>
<text text-anchor="middle" x="1114.5" y="-10173.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialize.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="582,-5489 582,-5564 1607,-5564 1607,-5489 582,-5489"/>
<text text-anchor="middle" x="1094.5" y="-5548.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="1455,-9811 1455,-9886 1681,-9886 1681,-9811 1455,-9811"/>
<text text-anchor="middle" x="1568" y="-9870.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="1456.5,-9591 1456.5,-9720 1679.5,-9720 1679.5,-9591 1456.5,-9591"/>
<text text-anchor="middle" x="1568" y="-9704.8" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="1427,-11657 1427,-11786 2142,-11786 2142,-11657 1427,-11657"/>
<text text-anchor="middle" x="1784.5" y="-11770.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="1525,-11520 1525,-11649 1611,-11649 1611,-11520 1525,-11520"/>
<text text-anchor="middle" x="1568" y="-11633.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="3790.5,-11036 3790.5,-11111 3979.5,-11111 3979.5,-11036 3790.5,-11036"/>
<text text-anchor="middle" x="3885" y="-11095.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="2473.5,-10796 2473.5,-10925 3070,-10925 3070,-10796 2473.5,-10796"/>
<text text-anchor="middle" x="2771.75" y="-10909.8" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="2897.5,-10933 2897.5,-11028 3942,-11028 3942,-10933 2897.5,-10933"/>
<text text-anchor="middle" x="3419.75" y="-11012.8" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-62 8,-137 99,-137 99,-62 8,-62"/>
<text text-anchor="middle" x="53.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="527,-2763 527,-2838 715,-2838 715,-2763 527,-2763"/>
<text text-anchor="middle" x="621" y="-2822.8" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="555,-8 555,-137 688,-137 688,-8 555,-8"/>
<text text-anchor="middle" x="621.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="119,-145 119,-220 716,-220 716,-145 119,-145"/>
<text text-anchor="middle" x="417.5" y="-204.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="1048,-2927 1048,-3056 1181,-3056 1181,-2927 1048,-2927"/>
<text text-anchor="middle" x="1114.5" y="-3040.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="499,-1895 499,-2024 1214,-2024 1214,-1895 499,-1895"/>
<text text-anchor="middle" x="856.5" y="-2008.8" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="1389,-2846 1389,-3029 2122,-3029 2122,-2846 1389,-2846"/>
<text text-anchor="middle" x="1755.5" y="-3013.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="1015.5,-3064 1015.5,-3301 2130.5,-3301 2130.5,-3064 1015.5,-3064"/>
<text text-anchor="middle" x="1573" y="-3285.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="1017.5,-1812 1017.5,-1887 1211.5,-1887 1211.5,-1812 1017.5,-1812"/>
<text text-anchor="middle" x="1114.5" y="-1871.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="2024.5,-1427 2024.5,-1502 2149.5,-1502 2149.5,-1427 2024.5,-1427"/>
<text text-anchor="middle" x="2087" y="-1486.8" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="381.5,-2846 381.5,-3515 860.5,-3515 860.5,-2846 381.5,-2846"/>
<text text-anchor="middle" x="621" y="-3499.8" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="366.5,-3523 366.5,-4084 875.5,-4084 875.5,-3523 366.5,-3523"/>
<text text-anchor="middle" x="621" y="-4068.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="283,-228 283,-1545 1149.5,-1545 1149.5,-228 283,-228"/>
<text text-anchor="middle" x="716.25" y="-1529.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="1019.5,-1621 1019.5,-1804 2122,-1804 2122,-1621 1019.5,-1621"/>
<text text-anchor="middle" x="1570.75" y="-1788.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="2007.5,-11794 2007.5,-12051 3501.5,-12051 3501.5,-11794 2007.5,-11794"/>
<text text-anchor="middle" x="2754.5" y="-12035.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="575.5,-5352 575.5,-5481 1640,-5481 1640,-5352 575.5,-5352"/>
<text text-anchor="middle" x="1107.75" y="-5465.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="1414.5,-10359 1414.5,-10758 3524.5,-10758 3524.5,-10359 1414.5,-10359"/>
<text text-anchor="middle" x="2469.5" y="-10742.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightblue" stroke="lightblue" points="2041.5,-4673 2041.5,-4802 2619,-4802 2619,-4673 2041.5,-4673"/>
<text text-anchor="middle" x="2330.25" y="-4786.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust52" class="cluster">
<title>cluster_51</title>
<polygon fill="lightblue" stroke="lightblue" points="2892,-4912 2892,-4987 3104,-4987 3104,-4912 2892,-4912"/>
<text text-anchor="middle" x="2998" y="-4971.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_benchmarks.rs</text>
</g>
<g id="clust53" class="cluster">
<title>cluster_52</title>
<polygon fill="lightblue" stroke="lightblue" points="3376.5,-4912 3376.5,-5041 3491.5,-5041 3491.5,-4912 3376.5,-4912"/>
<text text-anchor="middle" x="3434" y="-5025.8" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust54" class="cluster">
<title>cluster_53</title>
<polygon fill="lightblue" stroke="lightblue" points="3350,-7895 3350,-8024 4290.5,-8024 4290.5,-7895 3350,-7895"/>
<text text-anchor="middle" x="3820.25" y="-8008.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust55" class="cluster">
<title>cluster_54</title>
<polygon fill="lightblue" stroke="lightblue" points="2431,-7586 2431,-7931 3086,-7931 3086,-7586 2431,-7586"/>
<text text-anchor="middle" x="2758.5" y="-7915.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust56" class="cluster">
<title>cluster_55</title>
<polygon fill="lightblue" stroke="lightblue" points="2951,-6055 2951,-6184 3046,-6184 3046,-6055 2951,-6055"/>
<text text-anchor="middle" x="2998.5" y="-6168.8" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust57" class="cluster">
<title>cluster_56</title>
<polygon fill="lightblue" stroke="lightblue" points="2914,-5763 2914,-6000 3932.5,-6000 3932.5,-5763 2914,-5763"/>
<text text-anchor="middle" x="3423.25" y="-5984.8" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust58" class="cluster">
<title>cluster_57</title>
<polygon fill="lightblue" stroke="lightblue" points="2937.5,-5558 2937.5,-5687 3059.5,-5687 3059.5,-5558 2937.5,-5558"/>
<text text-anchor="middle" x="2998.5" y="-5671.8" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust59" class="cluster">
<title>cluster_58</title>
<polygon fill="lightblue" stroke="lightblue" points="3833.5,-7666 3833.5,-7741 3936.5,-7741 3936.5,-7666 3833.5,-7666"/>
<text text-anchor="middle" x="3885" y="-7725.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust60" class="cluster">
<title>cluster_59</title>
<polygon fill="lightblue" stroke="lightblue" points="1069,-9728 1069,-9803 1702,-9803 1702,-9728 1069,-9728"/>
<text text-anchor="middle" x="1385.5" y="-9787.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust61" class="cluster">
<title>cluster_60</title>
<polygon fill="lightblue" stroke="lightblue" points="1415,-5709 1415,-5892 1721,-5892 1721,-5709 1415,-5709"/>
<text text-anchor="middle" x="1568" y="-5876.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust62" class="cluster">
<title>cluster_61</title>
<polygon fill="lightblue" stroke="lightblue" points="1984.5,-7825 1984.5,-7954 2190.5,-7954 2190.5,-7825 1984.5,-7825"/>
<text text-anchor="middle" x="2087.5" y="-7938.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential_with_pni.rs</text>
</g>
<g id="clust63" class="cluster">
<title>cluster_62</title>
<polygon fill="lightblue" stroke="lightblue" points="1995,-5875 1995,-6166 2639.5,-6166 2639.5,-5875 1995,-5875"/>
<text text-anchor="middle" x="2317.25" y="-6150.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust64" class="cluster">
<title>cluster_63</title>
<polygon fill="lightblue" stroke="lightblue" points="1419,-6174 1419,-6545 2631.5,-6545 2631.5,-6174 1419,-6174"/>
<text text-anchor="middle" x="2025.25" y="-6529.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust65" class="cluster">
<title>cluster_64</title>
<polygon fill="lightblue" stroke="lightblue" points="2467,-5630 2467,-5867 2611,-5867 2611,-5630 2467,-5630"/>
<text text-anchor="middle" x="2539" y="-5851.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust66" class="cluster">
<title>cluster_65</title>
<polygon fill="lightblue" stroke="lightblue" points="2463.5,-5187 2463.5,-5478 2615.5,-5478 2615.5,-5187 2463.5,-5187"/>
<text text-anchor="middle" x="2539.5" y="-5462.8" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust67" class="cluster">
<title>cluster_66</title>
<polygon fill="lightblue" stroke="lightblue" points="2449,-5050 2449,-5179 2629,-5179 2629,-5050 2449,-5050"/>
<text text-anchor="middle" x="2539" y="-5163.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust68" class="cluster">
<title>cluster_67</title>
<polygon fill="lightblue" stroke="lightblue" points="2899.5,-6192 2899.5,-6267 3096.5,-6267 3096.5,-6192 2899.5,-6192"/>
<text text-anchor="middle" x="2998" y="-6251.8" font-family="Helvetica,sans-Serif" font-size="14.00">generic_server_params.rs</text>
</g>
<g id="clust69" class="cluster">
<title>cluster_68</title>
<polygon fill="lightblue" stroke="lightblue" points="1977.5,-6925 1977.5,-7216 3098.5,-7216 3098.5,-6925 1977.5,-6925"/>
<text text-anchor="middle" x="2538" y="-7200.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust70" class="cluster">
<title>cluster_69</title>
<polygon fill="lightblue" stroke="lightblue" points="1928,-7233 1928,-7578 2703.5,-7578 2703.5,-7233 1928,-7233"/>
<text text-anchor="middle" x="2315.75" y="-7562.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust71" class="cluster">
<title>cluster_70</title>
<polygon fill="lightblue" stroke="lightblue" points="2012,-9217 2012,-9292 2162,-9292 2162,-9217 2012,-9217"/>
<text text-anchor="middle" x="2087" y="-9276.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust72" class="cluster">
<title>cluster_71</title>
<polygon fill="lightblue" stroke="lightblue" points="1892.5,-9574 1892.5,-10351 2731.5,-10351 2731.5,-9574 1892.5,-9574"/>
<text text-anchor="middle" x="2312" y="-10335.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust73" class="cluster">
<title>cluster_72</title>
<polygon fill="lightblue" stroke="lightblue" points="1435,-6091 1435,-6166 1701,-6166 1701,-6091 1435,-6091"/>
<text text-anchor="middle" x="1568" y="-6150.8" font-family="Helvetica,sans-Serif" font-size="14.00">generate_generic_server_params.rs</text>
</g>
<g id="clust74" class="cluster">
<title>cluster_73</title>
<polygon fill="lightblue" stroke="lightblue" points="3382.5,-8511 3382.5,-8586 3485.5,-8586 3485.5,-8511 3382.5,-8511"/>
<text text-anchor="middle" x="3434" y="-8570.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust75" class="cluster">
<title>cluster_74</title>
<polygon fill="lightblue" stroke="lightblue" points="1959,-8266 1959,-8449 3066.5,-8449 3066.5,-8266 1959,-8266"/>
<text text-anchor="middle" x="2512.75" y="-8433.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust76" class="cluster">
<title>cluster_75</title>
<polygon fill="lightblue" stroke="lightblue" points="2010.5,-9300 2010.5,-9375 3037.5,-9375 3037.5,-9300 2010.5,-9300"/>
<text text-anchor="middle" x="2524" y="-9359.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust77" class="cluster">
<title>cluster_76</title>
<polygon fill="lightblue" stroke="lightblue" points="1993,-8457 1993,-8586 2586.5,-8586 2586.5,-8457 1993,-8457"/>
<text text-anchor="middle" x="2289.75" y="-8570.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust78" class="cluster">
<title>cluster_77</title>
<polygon fill="lightblue" stroke="lightblue" points="2887.5,-5475 2887.5,-5550 3477,-5550 3477,-5475 2887.5,-5475"/>
<text text-anchor="middle" x="3182.25" y="-5534.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust79" class="cluster">
<title>cluster_78</title>
<polygon fill="lightblue" stroke="lightblue" points="2500,-8731 2500,-9292 2578,-9292 2578,-8731 2500,-8731"/>
<text text-anchor="middle" x="2539" y="-9276.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust80" class="cluster">
<title>cluster_79</title>
<polygon fill="lightblue" stroke="lightblue" points="2431.5,-8594 2431.5,-8723 2647.5,-8723 2647.5,-8594 2431.5,-8594"/>
<text text-anchor="middle" x="2539.5" y="-8707.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_credential_request.rs</text>
</g>
<g id="clust81" class="cluster">
<title>cluster_80</title>
<polygon fill="lightblue" stroke="lightblue" points="2494.5,-8183 2494.5,-8258 3062,-8258 3062,-8183 2494.5,-8183"/>
<text text-anchor="middle" x="2778.25" y="-8242.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_struct.rs</text>
</g>
<g id="clust82" class="cluster">
<title>cluster_81</title>
<polygon fill="lightblue" stroke="lightblue" points="2021.5,-9383 2021.5,-9566 2586.5,-9566 2586.5,-9383 2021.5,-9383"/>
<text text-anchor="middle" x="2304" y="-9550.8" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust83" class="cluster">
<title>cluster_82</title>
<polygon fill="lightblue" stroke="lightblue" points="2499,-8100 2499,-8175 3057.5,-8175 3057.5,-8100 2499,-8100"/>
<text text-anchor="middle" x="2778.25" y="-8159.8" font-family="Helvetica,sans-Serif" font-size="14.00">timestamp_struct.rs</text>
</g>
<g id="clust84" class="cluster">
<title>cluster_83</title>
<polygon fill="lightblue" stroke="lightblue" points="2914,-5291 2914,-5420 3477,-5420 3477,-5291 2914,-5291"/>
<text text-anchor="middle" x="3195.5" y="-5404.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust85" class="cluster">
<title>cluster_84</title>
<polygon fill="lightblue" stroke="lightblue" points="2308,-3970 2308,-4369 2770,-4369 2770,-3970 2308,-3970"/>
<text text-anchor="middle" x="2539" y="-4353.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust86" class="cluster">
<title>cluster_85</title>
<polygon fill="lightblue" stroke="lightblue" points="1426.5,-5163 1426.5,-5238 1709.5,-5238 1709.5,-5163 1426.5,-5163"/>
<text text-anchor="middle" x="1568" y="-5222.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust87" class="cluster">
<title>cluster_86</title>
<polygon fill="lightblue" stroke="lightblue" points="1886,-5562 1886,-5799 2288,-5799 2288,-5562 1886,-5562"/>
<text text-anchor="middle" x="2087" y="-5783.8" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust88" class="cluster">
<title>cluster_87</title>
<polygon fill="lightblue" stroke="lightblue" points="1431.5,-5900 1431.5,-6083 1704.5,-6083 1704.5,-5900 1431.5,-5900"/>
<text text-anchor="middle" x="1568" y="-6067.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust89" class="cluster">
<title>cluster_88</title>
<polygon fill="lightblue" stroke="lightblue" points="1344.5,-9292 1344.5,-9583 1791.5,-9583 1791.5,-9292 1344.5,-9292"/>
<text text-anchor="middle" x="1568" y="-9567.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust90" class="cluster">
<title>cluster_89</title>
<polygon fill="lightblue" stroke="lightblue" points="1474,-5026 1474,-5155 1662,-5155 1662,-5026 1474,-5026"/>
<text text-anchor="middle" x="1568" y="-5139.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn montgomery_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; montgomery benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;montgomery_ladder(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consttime_...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2624.5,-1118 2453.5,-1118 2453.5,-1082 2624.5,-1082 2624.5,-1118"/>
<text text-anchor="middle" x="2539" y="-1096.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn montgomery_ladder&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Montgomery pseudomultiplication&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = constants::X25519_BASEPOINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3076.5,-1118 2919.5,-1118 2919.5,-1082 3076.5,-1082 3076.5,-1118"/>
<text text-anchor="middle" x="2998" y="-1096.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_ladder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2624.62,-1100C2705.61,-1100 2827.27,-1100 2909.28,-1100"/>
<polygon fill="gray" stroke="gray" points="2909.33,-1103.5 2919.33,-1100 2909.33,-1096.5 2909.33,-1103.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3121,-1172 2875,-1172 2875,-1136 3121,-1136 3121,-1172"/>
<text text-anchor="middle" x="2998" y="-1150.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2624.62,-1110C2691.91,-1117.95 2787.26,-1129.22 2864.63,-1138.36"/>
<polygon fill="gray" stroke="gray" points="2864.6,-1141.88 2874.94,-1139.58 2865.42,-1134.93 2864.6,-1141.88"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;fn consttime_multiscalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new( &#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3098.5,-1280 2897.5,-1280 2897.5,-1244 3098.5,-1244 3098.5,-1280"/>
<text text-anchor="middle" x="2998" y="-1258.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn construct_scalars(n: usize) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(0..n).map(|_| Scalar::random(&amp;mut rng)).collect() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3502.5,-1307 3365.5,-1307 3365.5,-1271 3502.5,-1271 3502.5,-1307"/>
<text text-anchor="middle" x="3434" y="-1285.3" font-family="Helvetica,sans-Serif" font-size="14.00">construct_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3098.57,-1268.19C3176.45,-1273.04 3283.2,-1279.68 3354.96,-1284.15"/>
<polygon fill="gray" stroke="gray" points="3355.09,-1287.66 3365.29,-1284.79 3355.53,-1280.67 3355.09,-1287.66"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn construct_points(n: usize) &#45;&gt; Vec&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(0..n) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| EdwardsPoint::mul_base(&amp;Scalar::random(&amp;mut rng))) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.collect...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3499.5,-1361 3368.5,-1361 3368.5,-1325 3499.5,-1325 3499.5,-1361"/>
<text text-anchor="middle" x="3434" y="-1339.3" font-family="Helvetica,sans-Serif" font-size="14.00">construct_points</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3098.72,-1263.25C3131.62,-1266.81 3167.56,-1274.26 3198,-1289 3213.56,-1296.54 3210.42,-1308.5 3226,-1316 3266.95,-1335.7 3317.43,-1342.58 3358.3,-1344.47"/>
<polygon fill="gray" stroke="gray" points="3358.34,-1347.98 3368.47,-1344.85 3358.61,-1340.98 3358.34,-1347.98"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn multiscalar_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; multiscalar benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consttime_multiscalar_mul(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2618,-1280 2460,-1280 2460,-1244 2618,-1244 2618,-1280"/>
<text text-anchor="middle" x="2539" y="-1258.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/consttime_multiscalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2618.04,-1262C2692.07,-1262 2804.03,-1262 2887.08,-1262"/>
<polygon fill="gray" stroke="gray" points="2887.31,-1265.5 2897.31,-1262 2887.31,-1258.5 2887.31,-1265.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_pure_static&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::ne...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3123.5,-1334 2872.5,-1334 2872.5,-1298 3123.5,-1298 3123.5,-1334"/>
<text text-anchor="middle" x="2998" y="-1312.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_pure_static</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2618.04,-1271.22C2684.91,-1279.12 2782.71,-1290.68 2862.21,-1300.07"/>
<polygon fill="gray" stroke="gray" points="2861.97,-1303.57 2872.31,-1301.27 2862.79,-1296.62 2861.97,-1303.57"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn vartime_multiscalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new( &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3091,-1388 2905,-1388 2905,-1352 3091,-1352 3091,-1388"/>
<text text-anchor="middle" x="2998" y="-1366.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2586.74,-1280C2636.44,-1298.46 2717.67,-1326.71 2790,-1343 2823.72,-1350.59 2861.05,-1356.28 2894.62,-1360.42"/>
<polygon fill="gray" stroke="gray" points="2894.56,-1363.94 2904.91,-1361.66 2895.4,-1356.99 2894.56,-1363.94"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_helper&lt;M: Measurement&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c: &amp;mut BenchmarkGroup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dynamic_fraction: f64, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for multiscalar_size in &amp;MULTISCALAR_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bench_...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3108,-1226 2888,-1226 2888,-1190 3108,-1190 3108,-1226"/>
<text text-anchor="middle" x="2998" y="-1204.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_helper</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2618.04,-1252.78C2689.26,-1244.36 2795.57,-1231.8 2877.48,-1222.12"/>
<polygon fill="gray" stroke="gray" points="2878.08,-1225.58 2887.6,-1220.93 2877.26,-1218.62 2878.08,-1225.58"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;fn scalar_arith&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Scalar inversion&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2587.5,-1010 2490.5,-1010 2490.5,-974 2587.5,-974 2587.5,-1010"/>
<text text-anchor="middle" x="2539" y="-988.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_arith</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3913.5,-11593 3856.5,-11593 3856.5,-11557 3913.5,-11557 3913.5,-11593"/>
<text text-anchor="middle" x="3885" y="-11571.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2587.68,-999.84C2638.36,-1005.38 2718.17,-1005.76 2770,-965 2790.12,-949.18 2768.99,-925.62 2790,-911 2945.68,-802.65 3515.58,-820.6 3642,-962 3691,-1016.8 3621.31,-11492.92 3670,-11548 3713.42,-11597.11 3797.52,-11591.68 3846.36,-11583.34"/>
<polygon fill="gray" stroke="gray" points="3847.02,-11586.78 3856.22,-11581.53 3845.76,-11579.89 3847.02,-11586.78"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;pub fn random&lt;R: CryptoRngCore + ?Sized&gt;(rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scal...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3920.5,-11485 3849.5,-11485 3849.5,-11449 3920.5,-11449 3920.5,-11485"/>
<text text-anchor="middle" x="3885" y="-11463.3" font-family="Helvetica,sans-Serif" font-size="14.00">random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2587.9,-1001.53C2639.92,-1008.85 2721.98,-1011.06 2770,-965 2810.61,-926.06 2747.19,-876.51 2790,-840 2826.02,-809.29 3608.49,-806.57 3642,-840 3694.12,-891.98 3621.24,-11384.85 3670,-11440 3711.33,-11486.75 3789.54,-11484.08 3839.09,-11476.52"/>
<polygon fill="gray" stroke="gray" points="3839.91,-11479.93 3849.21,-11474.84 3838.77,-11473.02 3839.91,-11479.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3076.77,-1094.69C3231.16,-1086.02 3567.89,-1077.12 3642,-1158 3690.75,-1211.2 3622.21,-11493.95 3670,-11548 3713.42,-11597.11 3797.52,-11591.68 3846.36,-11583.34"/>
<polygon fill="gray" stroke="gray" points="3847.02,-11586.78 3856.22,-11581.53 3845.76,-11579.89 3847.02,-11586.78"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn vartime_double_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Variable&#45;time aA+bB, A variable, B fixed&#39; , |bench| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3120.5,-956 2875.5,-956 2875.5,-920 3120.5,-920 3120.5,-956"/>
<text text-anchor="middle" x="2998" y="-934.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_double_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3057.38,-919.96C3185.11,-884.53 3490.05,-822.72 3642,-986 3691.46,-1039.14 3621.91,-11385.61 3670,-11440 3711.34,-11486.75 3789.54,-11484.08 3839.09,-11476.52"/>
<polygon fill="gray" stroke="gray" points="3839.91,-11479.93 3849.21,-11474.84 3838.77,-11473.02 3839.91,-11479.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3121,-1064 2875,-1064 2875,-1028 3121,-1028 3121,-1064"/>
<text text-anchor="middle" x="2998" y="-1042.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3121.27,-1034.6C3287.91,-1022.09 3573.49,-1012.41 3642,-1085 3691.87,-1137.84 3621.87,-11493.57 3670,-11548 3713.42,-11597.11 3797.52,-11591.68 3846.36,-11583.34"/>
<polygon fill="gray" stroke="gray" points="3847.02,-11586.78 3856.22,-11581.53 3845.76,-11579.89 3847.02,-11586.78"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3123.66,-1308.24C3198.3,-1303.6 3290.87,-1297.84 3355.2,-1293.84"/>
<polygon fill="gray" stroke="gray" points="3355.51,-1297.33 3365.28,-1293.21 3355.08,-1290.34 3355.51,-1297.33"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_pure_static().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3123.66,-1323.76C3199.49,-1328.47 3293.83,-1334.34 3358.25,-1338.35"/>
<polygon fill="gray" stroke="gray" points="3358.13,-1341.85 3368.33,-1338.98 3358.57,-1334.86 3358.13,-1341.85"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn scalar_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; scalar benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_arith(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;batch_scalar_inversion(...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2148.5,-1064 2025.5,-1064 2025.5,-1028 2148.5,-1028 2148.5,-1064"/>
<text text-anchor="middle" x="2087" y="-1042.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2148.69,-1053.53C2192.86,-1059 2254.13,-1066.53 2308,-1073 2352.44,-1078.34 2401.72,-1084.14 2443.23,-1088.99"/>
<polygon fill="gray" stroke="gray" points="2442.99,-1092.48 2453.33,-1090.17 2443.81,-1085.53 2442.99,-1092.48"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/multiscalar_benches().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2125.59,-1064.04C2207.4,-1103.31 2401.42,-1196.44 2491.08,-1239.48"/>
<polygon fill="gray" stroke="gray" points="2489.67,-1242.68 2500.2,-1243.85 2492.7,-1236.37 2489.67,-1242.68"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2148.69,-1038.47C2192.86,-1033 2254.13,-1025.47 2308,-1019 2366.64,-1011.96 2433.71,-1004.11 2480.23,-998.7"/>
<polygon fill="gray" stroke="gray" points="2480.89,-1002.14 2490.42,-997.51 2480.08,-995.19 2480.89,-1002.14"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn edwards_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; edwards benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;decompress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2609,-1064 2469,-1064 2469,-1028 2609,-1028 2609,-1064"/>
<text text-anchor="middle" x="2539" y="-1042.3" font-family="Helvetica,sans-Serif" font-size="14.00">edwards_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2148.69,-1046C2228.77,-1046 2369.89,-1046 2458.44,-1046"/>
<polygon fill="gray" stroke="gray" points="2458.7,-1049.5 2468.7,-1046 2458.7,-1042.5 2458.7,-1049.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn batch_scalar_inversion&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for batch_size in &amp;BATCH_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new(&#39; Batch scalar inve...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2626,-956 2452,-956 2452,-920 2626,-920 2626,-956"/>
<text text-anchor="middle" x="2539" y="-934.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_scalar_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2128.06,-1027.98C2171.49,-1009.23 2243.28,-980.48 2308,-965 2351.35,-954.63 2400.28,-948.18 2441.84,-944.2"/>
<polygon fill="gray" stroke="gray" points="2442.33,-947.67 2451.96,-943.26 2441.68,-940.7 2442.33,-947.67"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge490" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3502.84,-1277.19C3549.29,-1273.38 3608.35,-1277.78 3642,-1316 3688.46,-1368.77 3623.43,-11387.33 3670,-11440 3711.34,-11486.75 3789.54,-11484.08 3839.09,-11476.51"/>
<polygon fill="gray" stroke="gray" points="3839.92,-11479.93 3849.21,-11474.84 3838.77,-11473.02 3839.92,-11479.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn consttime_variable_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = &amp;constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3132,-1010 2864,-1010 2864,-974 3132,-974 3132,-1010"/>
<text text-anchor="middle" x="2998" y="-988.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_variable_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge498" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3132.14,-977.58C3299.89,-962.73 3574.49,-950.56 3642,-1021 3692.58,-1073.78 3621.58,-11493.23 3670,-11548 3713.42,-11597.11 3797.52,-11591.68 3846.36,-11583.34"/>
<polygon fill="gray" stroke="gray" points="3847.02,-11586.78 3856.22,-11581.53 3845.76,-11579.89 3847.02,-11586.78"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul(). -->
<g id="edge549" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/vartime_double_base_scalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2609.25,-1055.69C2659.04,-1058.76 2725.05,-1054.36 2770,-1019 2790.12,-1003.18 2769.99,-980.95 2790,-965 2811.39,-947.95 2838.17,-938.61 2865.29,-933.91"/>
<polygon fill="gray" stroke="gray" points="2865.93,-937.35 2875.28,-932.38 2864.87,-930.43 2865.93,-937.35"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul(). -->
<g id="edge550" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2609.41,-1046C2676.95,-1046 2781.31,-1046 2864.74,-1046"/>
<polygon fill="gray" stroke="gray" points="2864.8,-1049.5 2874.8,-1046 2864.8,-1042.5 2864.8,-1049.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul(). -->
<g id="edge548" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2609.2,-1037.9C2654.86,-1032.56 2716,-1025.38 2770,-1019 2797.03,-1015.81 2825.87,-1012.39 2853.6,-1009.09"/>
<polygon fill="gray" stroke="gray" points="2854.25,-1012.54 2863.77,-1007.88 2853.42,-1005.59 2854.25,-1012.54"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;pub fn batch_invert(inputs: &amp;mut [Scalar]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This code is essentially identical to the FieldElement &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// implementation, and is documented there. &#160;Unfortunately, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3936.5,-11701 3833.5,-11701 3833.5,-11665 3936.5,-11665 3936.5,-11701"/>
<text text-anchor="middle" x="3885" y="-11679.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge553" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2605.35,-919.92C2726.28,-889.76 2991.46,-839.22 3198,-911 3435.61,-993.58 3532.07,-1035.74 3642,-1262 3673.54,-1326.92 3622.19,-11601.92 3670,-11656 3707.17,-11698.04 3774.14,-11700.11 3823.3,-11694.61"/>
<polygon fill="gray" stroke="gray" points="3824.01,-11698.05 3833.5,-11693.33 3823.14,-11691.1 3824.01,-11698.05"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge552" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2570.11,-919.96C2713.68,-836.47 3334.51,-504.32 3642,-811 3694.26,-863.12 3621.11,-11384.7 3670,-11440 3711.33,-11486.75 3789.54,-11484.08 3839.09,-11476.52"/>
<polygon fill="gray" stroke="gray" points="3839.91,-11479.93 3849.21,-11474.84 3838.77,-11473.02 3839.91,-11479.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge651" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3091.14,-1369.51C3126.03,-1366.3 3165.21,-1358.88 3198,-1343 3213.56,-1335.46 3210.42,-1323.5 3226,-1316 3265.89,-1296.81 3314.84,-1289.78 3355.12,-1287.68"/>
<polygon fill="gray" stroke="gray" points="3355.33,-1291.18 3365.17,-1287.25 3355.03,-1284.18 3355.33,-1291.18"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge650" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3091.04,-1364.27C3170.53,-1359.33 3283.96,-1352.27 3358.03,-1347.66"/>
<polygon fill="gray" stroke="gray" points="3358.45,-1351.15 3368.21,-1347.03 3358.01,-1344.16 3358.45,-1351.15"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge740" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3437.39,-1361.03C3457.44,-1513.07 3597.72,-2597.02 3642,-3482 3644.76,-3537.2 3633.38,-11398.61 3670,-11440 3711.35,-11486.73 3789.55,-11484.07 3839.1,-11476.51"/>
<polygon fill="gray" stroke="gray" points="3839.92,-11479.92 3849.22,-11474.84 3838.78,-11473.01 3839.92,-11479.92"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge792" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3121.23,-1156.36C3288.94,-1162.48 3577.05,-1184.34 3642,-1262 3687.83,-1316.79 3622.68,-11494.49 3670,-11548 3713.42,-11597.11 3797.52,-11591.68 3846.36,-11583.34"/>
<polygon fill="gray" stroke="gray" points="3847.02,-11586.78 3856.22,-11581.53 3845.76,-11579.89 3847.02,-11586.78"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars(). -->
<g id="edge796" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_scalars().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3108.25,-1221C3137.49,-1224.98 3169.02,-1229.72 3198,-1235 3250.95,-1244.65 3309.98,-1258.23 3355.64,-1269.36"/>
<polygon fill="gray" stroke="gray" points="3354.92,-1272.78 3365.47,-1271.76 3356.59,-1265.98 3354.92,-1272.78"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points(). -->
<g id="edge795" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/vartime_precomputed_helper().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 multiscalar_benches/construct_points().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3108.05,-1201.93C3139.98,-1205.32 3172.99,-1214.51 3198,-1235 3227.46,-1259.14 3196.47,-1291.94 3226,-1316 3262.41,-1345.68 3315.01,-1352.22 3358.08,-1351.46"/>
<polygon fill="gray" stroke="gray" points="3358.35,-1354.95 3368.24,-1351.14 3358.13,-1347.95 3358.35,-1354.95"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn test_vartime_pippenger() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Reuse points across different tests &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut n = 512; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = Scalar::from(2128506u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = Scalar::from(4443282u64).in...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3524.5,-5145 3343.5,-5145 3343.5,-5109 3524.5,-5109 3524.5,-5145"/>
<text text-anchor="middle" x="3434" y="-5123.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_vartime_pippenger</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge856" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3524.75,-5126.23C3567.24,-5131 3614.57,-5144.82 3642,-5180 3696.39,-5249.75 3611.36,-11481.79 3670,-11548 3713.46,-11597.07 3797.54,-11591.66 3846.38,-11583.33"/>
<polygon fill="gray" stroke="gray" points="3847.03,-11586.77 3856.23,-11581.53 3845.77,-11579.88 3847.03,-11586.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;pub fn as_montgomery(&amp;self) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_mul(self, &amp;constants::RR) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4538,-12000 4410,-12000 4410,-11964 4538,-11964 4538,-12000"/>
<text text-anchor="middle" x="4474" y="-11978.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_mul(a: &amp;Scalar52, b: &amp;Scalar52) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_reduce(&amp;Scalar52::mul_internal(a, b)) &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="4737,-11838 4598,-11838 4598,-11802 4737,-11802 4737,-11838"/>
<text text-anchor="middle" x="4667.5" y="-11816.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4538.01,-11967.55C4546.47,-11964.18 4554.72,-11960.05 4562,-11955 4602.83,-11926.68 4635,-11877.55 4652.34,-11847.02"/>
<polygon fill="gray" stroke="gray" points="4655.45,-11848.62 4657.24,-11838.18 4649.33,-11845.23 4655.45,-11848.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_wide(bytes: &amp;[u8; 64]) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut words = [0u64; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;words[i] |= (bytes[(i * 8) + j] as u64...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4540.5,-11892 4407.5,-11892 4407.5,-11856 4540.5,-11856 4540.5,-11892"/>
<text text-anchor="middle" x="4474" y="-11870.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4539.03,-11855.94C4556.28,-11851.08 4575.08,-11845.78 4592.8,-11840.78"/>
<polygon fill="gray" stroke="gray" points="4593.85,-11844.12 4602.53,-11838.04 4591.95,-11837.38 4593.85,-11844.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::montgomery_mul(&amp;X, &amp;Y); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XY_MONT[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="4543.5,-11838 4404.5,-11838 4404.5,-11802 4543.5,-11802 4543.5,-11838"/>
<text text-anchor="middle" x="4474" y="-11816.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge500" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4543.59,-11820C4557.9,-11820 4573.08,-11820 4587.71,-11820"/>
<polygon fill="gray" stroke="gray" points="4587.74,-11823.5 4597.74,-11820 4587.74,-11816.5 4587.74,-11823.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;fn from_bytes_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bignum = [255u8; 64]; // 2^512 &#45; 1 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let reduced = Scalar52::from_bytes_wide(&amp;bignum); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(reduced[i] == C[i]); &#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4309.5,-11892 4176.5,-11892 4176.5,-11856 4309.5,-11856 4309.5,-11892"/>
<text text-anchor="middle" x="4243" y="-11870.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge782" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4309.62,-11874C4336.93,-11874 4368.81,-11874 4397.12,-11874"/>
<polygon fill="gray" stroke="gray" points="4397.37,-11877.5 4407.37,-11874 4397.37,-11870.5 4397.37,-11877.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_max() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::montgomery_mul(&amp;X, &amp;X); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XX_MONT[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="4562,-11946 4386,-11946 4386,-11910 4562,-11910 4562,-11946"/>
<text text-anchor="middle" x="4474" y="-11924.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge828" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4542.02,-11909.91C4548.91,-11907.25 4555.69,-11904.29 4562,-11901 4590.94,-11885.93 4619.95,-11862.63 4640.04,-11844.88"/>
<polygon fill="gray" stroke="gray" points="4642.45,-11847.42 4647.55,-11838.13 4637.77,-11842.21 4642.45,-11847.42"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_iter(n: usize) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Construct random coefficients x0, ..., x_{n&#45;1}, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// followed by some extra hardcoded ones. ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3540,-4371 3328,-4371 3328,-4335 3540,-4335 3540,-4371"/>
<text text-anchor="middle" x="3434" y="-4349.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_iter</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3444.43,-4371.01C3479.38,-4438.93 3601.63,-4686.96 3642,-4908 3650.15,-4952.62 3639.93,-11406.04 3670,-11440 3711.37,-11486.72 3789.56,-11484.05 3839.11,-11476.5"/>
<polygon fill="gray" stroke="gray" points="3839.92,-11479.92 3849.22,-11474.83 3838.78,-11473.01 3839.92,-11479.92"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_vs_nonprecomputed_multiscalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let static_scalars = (0..128) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| Scalar::random(&amp;mut rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3198,-4209 2798,-4209 2798,-4173 3198,-4173 3198,-4209"/>
<text text-anchor="middle" x="2998" y="-4187.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_vs_nonprecomputed_multiscalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3160.82,-4172.99C3311.94,-4166.28 3530.45,-4184.63 3642,-4326 3703.21,-4403.57 3604.51,-11366.02 3670,-11440 3711.36,-11486.73 3789.56,-11484.06 3839.1,-11476.51"/>
<polygon fill="gray" stroke="gray" points="3839.92,-11479.92 3849.22,-11474.84 3838.78,-11473.01 3839.92,-11479.92"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_1000() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(1000); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3118,-4425 2878,-4425 2878,-4389 3118,-4389 3118,-4425"/>
<text text-anchor="middle" x="2998" y="-4403.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_1000</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_1000().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3118.17,-4392.17C3180.33,-4384.44 3256.03,-4375.02 3317.63,-4367.36"/>
<polygon fill="gray" stroke="gray" points="3318.29,-4370.8 3327.78,-4366.09 3317.42,-4363.85 3318.29,-4370.8"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_100() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(100); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3113.5,-4371 2882.5,-4371 2882.5,-4335 3113.5,-4335 3113.5,-4371"/>
<text text-anchor="middle" x="2998" y="-4349.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_100</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge648" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_100().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3113.6,-4353C3176.65,-4353 3254.67,-4353 3317.81,-4353"/>
<polygon fill="gray" stroke="gray" points="3317.81,-4356.5 3327.81,-4353 3317.81,-4349.5 3317.81,-4356.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_250() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(250); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3113.5,-4317 2882.5,-4317 2882.5,-4281 3113.5,-4281 3113.5,-4317"/>
<text text-anchor="middle" x="2998" y="-4295.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_250</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge673" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_250().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3113.6,-4313.26C3176.65,-4321.1 3254.67,-4330.81 3317.81,-4338.67"/>
<polygon fill="gray" stroke="gray" points="3317.46,-4342.15 3327.81,-4339.91 3318.32,-4335.2 3317.46,-4342.15"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_consistency_n_500() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let iters = 50; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..iters { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;multiscalar_consistency_iter(500); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3113.5,-4263 2882.5,-4263 2882.5,-4227 3113.5,-4227 3113.5,-4263"/>
<text text-anchor="middle" x="2998" y="-4241.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_consistency_n_500</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter(). -->
<g id="edge798" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_n_500().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/test/multiscalar_consistency_iter().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3113.63,-4256.63C3141.44,-4260.52 3170.95,-4265.57 3198,-4272 3261.83,-4287.17 3332.72,-4312.89 3379.78,-4331.28"/>
<polygon fill="gray" stroke="gray" points="3378.57,-4334.56 3389.16,-4334.97 3381.13,-4328.05 3378.57,-4334.56"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_bits_be() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Make a random prime&#45;order point P &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_edwards = rand_prime_order_po...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="3095.5,-11134 2900.5,-11134 2900.5,-11098 3095.5,-11098 3095.5,-11134"/>
<text text-anchor="middle" x="2998" y="-11112.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_bits_be</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn rand_prime_order_point(mut rng: impl RngCore + CryptoRng) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s: Scalar = Scalar::random(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EdwardsPoint::mul_base(&amp;s) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3525,-11188 3343,-11188 3343,-11152 3525,-11152 3525,-11188"/>
<text text-anchor="middle" x="3434" y="-11166.3" font-family="Helvetica,sans-Serif" font-size="14.00">rand_prime_order_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3095.59,-11128.02C3166.06,-11136.79 3261.31,-11148.64 3332.64,-11157.51"/>
<polygon fill="gray" stroke="gray" points="3332.63,-11161.04 3342.99,-11158.8 3333.5,-11154.09 3332.63,-11161.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order_wide(input: &amp;[u8; 64]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScalar::from_bytes_wide(input).pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4350,-11415 4136,-11415 4136,-11379 4350,-11379 4350,-11415"/>
<text text-anchor="middle" x="4243" y="-11393.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3095.62,-11105.07C3222.08,-11093.04 3450.21,-11079.2 3642,-11110 3747.81,-11126.99 4008.15,-11205.8 4100,-11261 4149.48,-11290.73 4195.55,-11340.53 4221.13,-11370.91"/>
<polygon fill="gray" stroke="gray" points="4218.7,-11373.47 4227.78,-11378.93 4224.09,-11369 4218.7,-11373.47"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn montgomery_ladder_matches_edwards_scalarmult() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_edwards = rand_prime_order_point(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3181.5,-11188 2814.5,-11188 2814.5,-11152 3181.5,-11152 3181.5,-11188"/>
<text text-anchor="middle" x="2998" y="-11166.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_ladder_matches_edwards_scalarmult</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point(). -->
<g id="edge627" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3181.8,-11170C3233.49,-11170 3287.83,-11170 3332.7,-11170"/>
<polygon fill="gray" stroke="gray" points="3332.71,-11173.5 3342.71,-11170 3332.71,-11166.5 3332.71,-11173.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge626" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_ladder_matches_edwards_scalarmult().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3127.81,-11152C3159.83,-11148.26 3194.11,-11144.89 3226,-11143 3318.28,-11137.53 3573.63,-11080.78 3642,-11143 3691.03,-11187.62 3623.87,-11392.39 3670,-11440 3713.3,-11484.69 3790.56,-11482.74 3839.45,-11475.87"/>
<polygon fill="gray" stroke="gray" points="3840.07,-11479.31 3849.42,-11474.34 3839.01,-11472.39 3840.07,-11479.31"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge703" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/rand_prime_order_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3525.06,-11170.98C3566.56,-11176.33 3612.94,-11190.14 3642,-11223 3706.43,-11295.84 3601.14,-11371.34 3670,-11440 3713.94,-11483.82 3790.66,-11482.22 3839.32,-11475.64"/>
<polygon fill="gray" stroke="gray" points="3839.87,-11479.1 3849.25,-11474.18 3838.85,-11472.18 3839.87,-11479.1"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_bits_be_twist() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Make a random point P on the curve or its twist &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_montgomer...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="3115.5,-11080 2880.5,-11080 2880.5,-11044 3115.5,-11044 3115.5,-11080"/>
<text text-anchor="middle" x="2998" y="-11058.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_bits_be_twist</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;fn random_roundtrip() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = RistrettoPoint::mul_base(&amp;Scalar::random(&amp;mut rng)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed_P = P.compress();...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3505,-4018 3363,-4018 3363,-3982 3505,-3982 3505,-4018"/>
<text text-anchor="middle" x="3434" y="-3996.3" font-family="Helvetica,sans-Serif" font-size="14.00">random_roundtrip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/random_roundtrip().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3505.32,-3988.01C3551.36,-3984.57 3608.93,-3989.48 3642,-4027 3710.08,-4104.24 3601.76,-11362.9 3670,-11440 3711.36,-11486.73 3789.56,-11484.06 3839.1,-11476.51"/>
<polygon fill="gray" stroke="gray" points="3839.92,-11479.92 3849.22,-11474.84 3838.78,-11473.01 3839.92,-11479.92"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;fn vartime_precomputed_vs_nonprecomputed_multiscalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let static_scalars = (0..128) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| Scalar::random(&amp;mut rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3634,-4126 3234,-4126 3234,-4090 3634,-4090 3634,-4126"/>
<text text-anchor="middle" x="3434" y="-4104.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_precomputed_vs_nonprecomputed_multiscalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge540" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/vartime_precomputed_vs_nonprecomputed_multiscalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3596.76,-4126.11C3614.26,-4134.35 3630.03,-4145.64 3642,-4161 3704.14,-4240.74 3602.99,-11364.3 3670,-11440 3711.36,-11486.73 3789.56,-11484.06 3839.1,-11476.51"/>
<polygon fill="gray" stroke="gray" points="3839.92,-11479.92 3849.22,-11474.84 3838.78,-11473.01 3839.92,-11479.92"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;fn four_torsion_random() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = RistrettoPoint::mul_base(&amp;Scalar::random(&amp;mut rng)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P_coset = P.coset4(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for point in P_coset { &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3514.5,-4072 3353.5,-4072 3353.5,-4036 3514.5,-4036 3514.5,-4072"/>
<text text-anchor="middle" x="3434" y="-4050.3" font-family="Helvetica,sans-Serif" font-size="14.00">four_torsion_random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge730" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/test/four_torsion_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3514.72,-4041.43C3558.97,-4039.37 3611.15,-4046 3642,-4081 3709.58,-4157.68 3602.26,-11363.47 3670,-11440 3711.36,-11486.73 3789.56,-11484.06 3839.1,-11476.51"/>
<polygon fill="gray" stroke="gray" points="3839.92,-11479.92 3849.22,-11474.84 3838.78,-11473.01 3839.92,-11479.92"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_montgomery().montgomery_invert().from_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4271.5,-11674 4214.5,-11674 4214.5,-11638 4271.5,-11638 4271.5,-11674"/>
<text text-anchor="middle" x="4243" y="-11652.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3913.75,-11576.39C3954.93,-11578.93 4034.42,-11585.64 4100,-11602 4136.63,-11611.14 4176.68,-11626.94 4204.89,-11639.09"/>
<polygon fill="gray" stroke="gray" points="4203.78,-11642.43 4214.34,-11643.22 4206.58,-11636.01 4203.78,-11642.43"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Scalar::ONE, Scalar::batch_invert(&amp;mut [])); &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3511,-11755 3357,-11755 3357,-11719 3511,-11719 3511,-11755"/>
<text text-anchor="middle" x="3434" y="-11733.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3511.17,-11727.84C3599.22,-11717.25 3742.39,-11700.03 3823.29,-11690.3"/>
<polygon fill="gray" stroke="gray" points="3823.81,-11693.76 3833.32,-11689.09 3822.98,-11686.81 3823.81,-11693.76"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn square_multiply(y: &amp;mut UnpackedScalar, squarings: usize, x: &amp;UnpackedScalar) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..squarings { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*y = y.montgomery_square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*y ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3497.5,-11377 3370.5,-11377 3370.5,-11341 3497.5,-11341 3497.5,-11377"/>
<text text-anchor="middle" x="3434" y="-11355.3" font-family="Helvetica,sans-Serif" font-size="14.00">square_multiply</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3481.08,-11340.9C3653.45,-11276.53 4265.39,-11078.59 4562,-11387 4618.93,-11446.2 4653.33,-11705.27 4663.4,-11791.77"/>
<polygon fill="gray" stroke="gray" points="4659.94,-11792.35 4664.55,-11801.89 4666.89,-11791.56 4659.94,-11792.35"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4262.86,-11674.08C4286.89,-11698.21 4327.92,-11743.35 4350,-11790 4382.11,-11857.84 4335.26,-11899.69 4386,-11955 4390.28,-11959.67 4395.35,-11963.53 4400.85,-11966.73"/>
<polygon fill="gray" stroke="gray" points="4399.31,-11969.88 4409.82,-11971.24 4402.46,-11963.62 4399.31,-11969.88"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Uses the addition chain from &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://briansmith.org/ecc&#45;inversion&#45;addition&#45;chains&#45;01#curve25519_scalar_inversion &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4550.5,-11711 4397.5,-11711 4397.5,-11675 4550.5,-11675 4550.5,-11711"/>
<text text-anchor="middle" x="4474" y="-11689.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4271.62,-11660.46C4300.2,-11665.08 4346.28,-11672.53 4387.16,-11679.13"/>
<polygon fill="gray" stroke="gray" points="4386.72,-11682.6 4397.15,-11680.74 4387.84,-11675.69 4386.72,-11682.6"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4502.44,-11711.2C4536.14,-11733.55 4593.4,-11771.52 4630.58,-11796.18"/>
<polygon fill="gray" stroke="gray" points="4628.85,-11799.23 4639.11,-11801.84 4632.71,-11793.39 4628.85,-11799.23"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;fn montgomery_reduce_matches_from_bytes_mod_order_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bignum = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// set bignum = x + 2^256x &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[i] = X[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4100,-11647 3670,-11647 3670,-11611 4100,-11611 4100,-11647"/>
<text text-anchor="middle" x="3885" y="-11625.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_reduce_matches_from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4074.18,-11647.03C4083.02,-11649.65 4091.67,-11652.63 4100,-11656 4118.54,-11663.5 4119.26,-11672.06 4136,-11683 4227.45,-11742.79 4266.02,-11734.1 4350,-11804 4369.16,-11819.95 4365.25,-11833.19 4386,-11847 4389.81,-11849.53 4393.86,-11851.84 4398.06,-11853.94"/>
<polygon fill="gray" stroke="gray" points="4396.89,-11857.25 4407.45,-11858.2 4399.79,-11850.88 4396.89,-11857.25"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4083.06,-11610.97C4088.89,-11608.28 4094.56,-11605.3 4100,-11602 4169.17,-11560.04 4213.02,-11470.11 4231.66,-11424.6"/>
<polygon fill="gray" stroke="gray" points="4235,-11425.66 4235.46,-11415.07 4228.5,-11423.06 4235,-11425.66"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn from_bytes_mod_order_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bignum = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// set bignum = x + 2^256x &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[i] = X[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[32 + i] = X[i]; &#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3992,-11431 3778,-11431 3778,-11395 3992,-11395 3992,-11431"/>
<text text-anchor="middle" x="3885" y="-11409.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3992.33,-11408.22C4034.34,-11406.33 4082.75,-11404.16 4125.69,-11402.23"/>
<polygon fill="gray" stroke="gray" points="4126.08,-11405.71 4135.91,-11401.77 4125.76,-11398.72 4126.08,-11405.71"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;fn fuzzer_testcase_reduction() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// LE bytes of 24519928653854221733733552434404946937899825954937634815 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_bytes = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;255, 255, 255, 255, 255, 255, 255, 255, 255, 25...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3983.5,-11377 3786.5,-11377 3786.5,-11341 3983.5,-11341 3983.5,-11377"/>
<text text-anchor="middle" x="3885" y="-11355.3" font-family="Helvetica,sans-Serif" font-size="14.00">fuzzer_testcase_reduction</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3983.75,-11369.43C4027.66,-11374.12 4079.82,-11379.69 4125.73,-11384.59"/>
<polygon fill="gray" stroke="gray" points="4125.41,-11388.07 4135.73,-11385.66 4126.15,-11381.11 4125.41,-11388.07"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3936.88,-11698.22C4051.03,-11732.74 4319.92,-11816.37 4350,-11847 4385.45,-11883.1 4349.85,-11919.6 4386,-11955 4390.27,-11959.18 4395.18,-11962.72 4400.44,-11965.71"/>
<polygon fill="gray" stroke="gray" points="4399.06,-11968.93 4409.58,-11970.24 4402.17,-11962.66 4399.06,-11968.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3936.76,-11692.44C3985.55,-11698.33 4057.9,-11698.11 4100,-11656 4190.58,-11565.4 4039.92,-11454.74 4136,-11370 4207.33,-11307.09 4265.4,-11326.53 4350,-11370 4529.83,-11462.4 4628.66,-11709.65 4657.49,-11792.51"/>
<polygon fill="gray" stroke="gray" points="4654.19,-11793.66 4660.74,-11801.99 4660.81,-11791.4 4654.19,-11793.66"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3936.56,-11683.86C4037.04,-11685.57 4262.88,-11689.42 4387.09,-11691.54"/>
<polygon fill="gray" stroke="gray" points="4387.26,-11695.04 4397.32,-11691.71 4387.38,-11688.04 4387.26,-11695.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;pub fn hash_from_bytes&lt;D&gt;(input: &amp;[u8]) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash = D::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hash.update(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::fr...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3501,-11485 3367,-11485 3367,-11449 3501,-11449 3501,-11485"/>
<text text-anchor="middle" x="3434" y="-11463.3" font-family="Helvetica,sans-Serif" font-size="14.00">hash_from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;pub fn from_hash&lt;D&gt;(hash: D) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut output = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output.copy_from_slice(hash.finalize().as_slice()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3929.5,-11539 3840.5,-11539 3840.5,-11503 3929.5,-11503 3929.5,-11539"/>
<text text-anchor="middle" x="3885" y="-11517.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge440" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3501.25,-11474.97C3590.5,-11485.7 3747.63,-11504.6 3830.06,-11514.51"/>
<polygon fill="gray" stroke="gray" points="3829.87,-11518.02 3840.22,-11515.73 3830.71,-11511.07 3829.87,-11518.02"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge592" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3920.77,-11464.43C3963.36,-11460.86 4037.55,-11453.3 4100,-11440 4126.69,-11434.32 4155.61,-11425.97 4180.34,-11418.15"/>
<polygon fill="gray" stroke="gray" points="4181.5,-11421.45 4189.95,-11415.06 4179.36,-11414.78 4181.5,-11421.45"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_consistency() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut x = Scalar::from(1u64); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut v1: Vec&lt;_&gt; = (0..16) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let tmp = x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x + x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3529.5,-11647 3338.5,-11647 3338.5,-11611 3529.5,-11611 3529.5,-11647"/>
<text text-anchor="middle" x="3434" y="-11625.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_consistency</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge618" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3529.67,-11617.61C3628.05,-11605.78 3777.11,-11587.86 3846.28,-11579.54"/>
<polygon fill="gray" stroke="gray" points="3846.77,-11583 3856.28,-11578.33 3845.94,-11576.05 3846.77,-11583"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge619" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3529.67,-11640.39C3618.14,-11651.03 3747.58,-11666.59 3823.06,-11675.67"/>
<polygon fill="gray" stroke="gray" points="3823,-11679.19 3833.35,-11676.91 3823.84,-11672.24 3823,-11679.19"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge701" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4254.4,-11415.28C4275.74,-11453.62 4324.61,-11545.77 4350,-11629 4378.66,-11722.93 4321.49,-11772.96 4386,-11847 4389.64,-11851.17 4393.9,-11854.71 4398.56,-11857.71"/>
<polygon fill="gray" stroke="gray" points="4396.87,-11860.77 4407.32,-11862.54 4400.26,-11854.64 4396.87,-11860.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;fn invert() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let inv_X = X.invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(inv_X, XINV); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let should_be_one = inv_X * X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(should_be_one, Scalar::ONE); &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3462.5,-11593 3405.5,-11593 3405.5,-11557 3462.5,-11557 3462.5,-11593"/>
<text text-anchor="middle" x="3434" y="-11571.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge702" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3462.75,-11575C3540.1,-11575 3758.21,-11575 3846.35,-11575"/>
<polygon fill="gray" stroke="gray" points="3846.44,-11578.5 3856.44,-11575 3846.44,-11571.5 3846.44,-11578.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn non_adjacent_form_random() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..1_000 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = Scalar::random(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for w in &amp;[5, 6, 7, 8] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3538.5,-11431 3329.5,-11431 3329.5,-11395 3538.5,-11395 3538.5,-11431"/>
<text text-anchor="middle" x="3434" y="-11409.3" font-family="Helvetica,sans-Serif" font-size="14.00">non_adjacent_form_random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge727" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/non_adjacent_form_random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3538.57,-11425.46C3633.54,-11436.88 3769.65,-11453.25 3839.26,-11461.62"/>
<polygon fill="gray" stroke="gray" points="3839.1,-11465.12 3849.44,-11462.84 3839.93,-11458.18 3839.1,-11465.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_with_a_zero_input_panics() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut xs = vec![Scalar::ONE; 16]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xs[3] = Scalar::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should panic in debug mode. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::batch_invert(&amp;mut...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3576,-11701 3292,-11701 3292,-11665 3576,-11665 3576,-11701"/>
<text text-anchor="middle" x="3434" y="-11679.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_with_a_zero_input_panics</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge768" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3576.14,-11683C3659.2,-11683 3759.99,-11683 3823.08,-11683"/>
<polygon fill="gray" stroke="gray" points="3823.26,-11686.5 3833.26,-11683 3823.26,-11679.5 3823.26,-11686.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;fn test_pippenger_radix() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use core::iter; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// For each valid radix it tests that 1000 random&#45;ish scalars can be restored &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// from the produced representation precisely. &#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3515.5,-11539 3352.5,-11539 3352.5,-11503 3515.5,-11503 3515.5,-11539"/>
<text text-anchor="middle" x="3434" y="-11517.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pippenger_radix</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge824" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3515.53,-11530.69C3613.19,-11542.43 3773.71,-11561.74 3846.28,-11570.46"/>
<polygon fill="gray" stroke="gray" points="3845.99,-11573.95 3856.33,-11571.67 3846.82,-11567 3845.99,-11573.95"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge837" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3929.66,-11521.43C3973.95,-11520.51 4043.8,-11515.31 4100,-11494 4143.77,-11477.41 4187.19,-11444.76 4214.27,-11421.94"/>
<polygon fill="gray" stroke="gray" points="4216.81,-11424.37 4222.13,-11415.2 4212.26,-11419.05 4216.81,-11424.37"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;fn verify_strict(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng: ThreadRng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let keypair: SigningKey = SigningKey::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let msg: &amp;[u8] = b&#39; &#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1163.5,-4190 1065.5,-4190 1065.5,-4154 1163.5,-4154 1163.5,-4190"/>
<text text-anchor="middle" x="1114.5" y="-4168.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_strict</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;pub fn verify_strict( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verifying_key.verify_strict(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1617,-4016 1519,-4016 1519,-3980 1617,-3980 1617,-4016"/>
<text text-anchor="middle" x="1568" y="-3994.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_strict</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1163.67,-4173.58C1190.1,-4171.83 1221.56,-4165.05 1242,-4145 1281.09,-4106.64 1228.69,-4060.95 1270,-4025 1335.44,-3968.06 1442.43,-3974.08 1508.56,-3985.05"/>
<polygon fill="gray" stroke="gray" points="1508.35,-3988.56 1518.81,-3986.84 1509.56,-3981.67 1508.35,-3988.56"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;fn verify(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng: ThreadRng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let keypair: SigningKey = SigningKey::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let msg: &amp;[u8] = b&#39; &#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let si...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1142.5,-4136 1086.5,-4136 1086.5,-4100 1142.5,-4100 1142.5,-4136"/>
<text text-anchor="middle" x="1114.5" y="-4114.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;pub fn verify(&amp;self, message: &amp;[u8], signature: &amp;Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verifying_key.verify(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1596,-3908 1540,-3908 1540,-3872 1596,-3872 1596,-3908"/>
<text text-anchor="middle" x="1568" y="-3886.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1123.23,-4099.75C1141.71,-4058.74 1192.69,-3959.54 1270,-3917 1353.66,-3870.96 1470.92,-3877.25 1529.95,-3884.36"/>
<polygon fill="gray" stroke="gray" points="1529.57,-3887.84 1539.94,-3885.63 1530.46,-3880.89 1529.57,-3887.84"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/ed25519_benches(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/ed25519_benches().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;name = ed25519_benches; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;config = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;targets = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sign, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verify, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verify_strict, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verify_batch_signatures, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="693,-4163 549,-4163 549,-4127 693,-4127 693,-4163"/>
<text text-anchor="middle" x="621" y="-4141.3" font-family="Helvetica,sans-Serif" font-size="14.00">ed25519_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/ed25519_benches().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict(). -->
<g id="edge584" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/ed25519_benches().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify_strict().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M693.21,-4148.91C790.93,-4154.28 964.78,-4163.83 1055.21,-4168.8"/>
<polygon fill="gray" stroke="gray" points="1055.11,-4172.3 1065.29,-4169.35 1055.49,-4165.31 1055.11,-4172.3"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/ed25519_benches().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify(). -->
<g id="edge585" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/ed25519_benches().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 ed25519_benches/verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M693.21,-4141.09C799.12,-4135.27 994.45,-4124.54 1076.09,-4120.05"/>
<polygon fill="gray" stroke="gray" points="1076.59,-4123.53 1086.39,-4119.49 1076.21,-4116.54 1076.59,-4123.53"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;fn sign_verify_nonspec() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Generate the keypair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let rng = OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let esk = ExpandedSecretKey::random(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vk = VerifyingKey::from(&amp;esk); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let msg = ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1193,-3472 1036,-3472 1036,-3436 1193,-3436 1193,-3472"/>
<text text-anchor="middle" x="1114.5" y="-3450.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign_verify_nonspec</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().</title>
<g id="a_node60"><a xlink:title="pub fn raw_sign&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;esk: &amp;ExpandedSecretKey, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Signature where &#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, { &#160;&#160;&#160;&#160;esk.raw_sign::&lt;CtxDig...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1607,-3499 1529,-3499 1529,-3463 1607,-3463 1607,-3499"/>
<text text-anchor="middle" x="1568" y="-3477.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1193.12,-3458.64C1286.62,-3464.23 1440.82,-3473.45 1518.74,-3478.11"/>
<polygon fill="gray" stroke="gray" points="1518.57,-3481.61 1528.76,-3478.71 1518.99,-3474.62 1518.57,-3481.61"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify().</title>
<g id="a_node61"><a xlink:title="pub fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;vk: &amp;VerifyingKey, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, ) &#45;&gt; Result&lt;(), SignatureError&gt; where &#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, { &#160;&#160;&#160;&#160;vk.raw...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1612,-3445 1524,-3445 1524,-3409 1612,-3409 1612,-3445"/>
<text text-anchor="middle" x="1568" y="-3423.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/test/sign_verify_nonspec().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1193.12,-3449.36C1284.57,-3443.89 1434.09,-3434.95 1513.5,-3430.2"/>
<polygon fill="gray" stroke="gray" points="1513.99,-3433.68 1523.76,-3429.59 1513.57,-3426.69 1513.99,-3433.68"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_sign&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, &#160;&#160;&#160;&#160;) &#45;&gt; Signature &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2126,-3917 2048,-3917 2048,-3881 2126,-3881 2126,-3917"/>
<text text-anchor="middle" x="2087" y="-3895.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="edge671" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1607.13,-3474.64C1671.37,-3466.34 1800.59,-3460.57 1866,-3534 1914.28,-3588.19 1838.16,-3805.42 1886,-3860 1923.07,-3902.29 1991.23,-3907.1 2037.57,-3904.66"/>
<polygon fill="gray" stroke="gray" points="2037.93,-3908.15 2047.68,-3904 2037.48,-3901.16 2037.93,-3908.15"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2583,-3771 2495,-3771 2495,-3735 2583,-3735 2583,-3771"/>
<text text-anchor="middle" x="2539" y="-3749.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge869" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 hazmat/raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1612.13,-3420.29C1673.06,-3413.04 1785.83,-3408.03 1866,-3454 1879.27,-3461.61 1873.03,-3473.9 1886,-3482 2039.67,-3577.88 2122.97,-3474.35 2288,-3549 2384.54,-3592.67 2474.9,-3683.17 2515.51,-3727.46"/>
<polygon fill="gray" stroke="gray" points="2512.96,-3729.87 2522.27,-3734.92 2518.15,-3725.16 2512.96,-3729.87"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;pub fn verify_strict( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature = InternalSignature::try_from(signa...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2588,-3825 2490,-3825 2490,-3789 2588,-3789 2588,-3825"/>
<text text-anchor="middle" x="2539" y="-3803.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_strict</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1617.18,-4009.41C1682.24,-4021.7 1797.87,-4032.1 1866,-3971 1899.42,-3941.03 1852.64,-3902.03 1886,-3872 1919.35,-3841.99 2243.36,-3838.52 2288,-3834 2353.62,-3827.36 2428.87,-3819.15 2479.52,-3813.54"/>
<polygon fill="gray" stroke="gray" points="2480.07,-3817 2489.63,-3812.42 2479.3,-3810.04 2480.07,-3817"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;fn try_sign(&amp;self, message: &amp;[u8]) &#45;&gt; Result&lt;Signature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expanded: ExpandedSecretKey = (&amp;self.secret_key).into(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(expanded.raw_sign::&lt;Sha512&gt;(message, &amp;self...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1604,-4070 1532,-4070 1532,-4034 1604,-4034 1604,-4070"/>
<text text-anchor="middle" x="1568" y="-4048.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Signer&lt;Signature&gt;`]try_sign().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1604.24,-4053.58C1660.84,-4055.07 1774.89,-4053.72 1866,-4025 1938.5,-4002.14 2013.31,-3952.78 2054.32,-3923.07"/>
<polygon fill="gray" stroke="gray" points="2056.54,-3925.78 2062.54,-3917.05 2052.4,-3920.14 2056.54,-3925.78"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge678" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[ExpandedSecretKey]raw_sign().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2126.36,-3902.9C2256.26,-3915.23 2676.71,-3947.55 2770,-3860 2823.87,-3809.45 2734.71,-3743.99 2790,-3695 2860.85,-3632.22 3574.94,-3628.18 3642,-3695 3718.73,-3771.46 3598.21,-11412.88 3670,-11494 3709.01,-11538.08 3780.78,-11538.21 3830.38,-11531.74"/>
<polygon fill="gray" stroke="gray" points="3830.9,-11535.2 3840.3,-11530.32 3829.91,-11528.27 3830.9,-11535.2"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Verifier&lt;Signature&gt;`]verify(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Verifier&lt;Signature&gt;`]verify().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verifying_key.verify(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1596,-3962 1540,-3962 1540,-3926 1596,-3926 1596,-3962"/>
<text text-anchor="middle" x="1568" y="-3940.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;ed25519::Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.raw_verify::&lt;Sha512&gt;(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2115,-3825 2059,-3825 2059,-3789 2115,-3789 2115,-3825"/>
<text text-anchor="middle" x="2087" y="-3803.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Verifier&lt;Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge793" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey][`Verifier&lt;Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1596.24,-3950.8C1653.64,-3963.36 1788.14,-3983.28 1866,-3917 1893.25,-3893.8 1859.55,-3863.11 1886,-3839 1930.27,-3798.64 2004.17,-3797.83 2048.68,-3801.8"/>
<polygon fill="gray" stroke="gray" points="2048.48,-3805.29 2058.78,-3802.83 2049.19,-3798.33 2048.48,-3805.29"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge857" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1596.34,-3892.68C1650.58,-3896.83 1774.46,-3900.37 1866,-3858 1877.13,-3852.85 1875.01,-3844.43 1886,-3839 1938.34,-3813.12 2006.92,-3807.35 2048.66,-3806.49"/>
<polygon fill="gray" stroke="gray" points="2048.96,-3809.99 2058.92,-3806.37 2048.88,-3802.99 2048.96,-3809.99"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3051.5,-3825 2944.5,-3825 2944.5,-3789 3051.5,-3789 3051.5,-3825"/>
<text text-anchor="middle" x="2998" y="-3803.3" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge432" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2588.04,-3807C2671.21,-3807 2841.93,-3807 2934.31,-3807"/>
<polygon fill="gray" stroke="gray" points="2934.36,-3810.5 2944.36,-3807 2934.36,-3803.5 2934.36,-3810.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge438" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2583.24,-3758.06C2629.47,-3763.47 2704.92,-3772.31 2770,-3780 2825.51,-3786.56 2888.65,-3794.07 2934.23,-3799.51"/>
<polygon fill="gray" stroke="gray" points="2933.91,-3802.99 2944.25,-3800.7 2934.74,-3796.04 2933.91,-3802.99"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Dige...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3509.5,-3825 3358.5,-3825 3358.5,-3789 3509.5,-3789 3509.5,-3825"/>
<text text-anchor="middle" x="3434" y="-3803.3" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge538" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3475.66,-3825.08C3525.45,-3849.73 3607.41,-3899.08 3642,-3970 3687.81,-4063.93 3600.74,-11415.75 3670,-11494 3709.01,-11538.07 3780.78,-11538.21 3830.39,-11531.74"/>
<polygon fill="gray" stroke="gray" points="3830.9,-11535.2 3840.3,-11530.32 3829.91,-11528.27 3830.9,-11535.2"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="edge700" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3051.78,-3807C3125.56,-3807 3260.31,-3807 3348.24,-3807"/>
<polygon fill="gray" stroke="gray" points="3348.46,-3810.5 3358.46,-3807 3348.46,-3803.5 3348.46,-3810.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge866" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2115.09,-3803.63C2156.6,-3798.47 2238.46,-3788.35 2308,-3780 2368.49,-3772.74 2437.96,-3764.61 2484.58,-3759.19"/>
<polygon fill="gray" stroke="gray" points="2485.22,-3762.64 2494.75,-3758.01 2484.42,-3755.69 2485.22,-3762.64"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pub_key: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature_r: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h = Sha512::defa...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1643.5,-4327 1492.5,-4327 1492.5,-4291 1643.5,-4291 1643.5,-4327"/>
<text text-anchor="middle" x="1568" y="-4305.3" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1643.6,-4316.97C1793.59,-4328.33 2130.74,-4329.35 2288,-4133 2334.73,-4074.65 2254.28,-4017.98 2308,-3966 2382.05,-3894.34 2696.7,-3998.44 2770,-3926 2802.24,-3894.14 2756.41,-3753.44 2790,-3723 2825.07,-3691.21 3608.47,-3689.59 3642,-3723 3718.46,-3799.18 3598.47,-11413.17 3670,-11494 3709.01,-11538.08 3780.78,-11538.21 3830.38,-11531.74"/>
<polygon fill="gray" stroke="gray" points="3830.9,-11535.2 3840.3,-11530.32 3829.91,-11528.27 3830.9,-11535.2"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;fn against_reference_implementation() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TestGolden &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut line: String; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut lineno: usize = 0; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let f = File::open(&#39; TESTVECTORS&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if f.is_err() {...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1242,-4273 987,-4273 987,-4237 1242,-4237 1242,-4273"/>
<text text-anchor="middle" x="1114.5" y="-4251.3" font-family="Helvetica,sans-Serif" font-size="14.00">against_reference_implementation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signing/impl#[SigningKey]verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1228.49,-4236.98C1233.45,-4233.57 1238.01,-4229.6 1242,-4225 1287.02,-4173.07 1221.4,-3965.6 1270,-3917 1338.84,-3848.16 1466.78,-3865.88 1529.87,-3880.14"/>
<polygon fill="gray" stroke="gray" points="1529.24,-3883.59 1539.78,-3882.48 1530.85,-3876.78 1529.24,-3883.59"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/against_reference_implementation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1228.91,-4236.92C1233.73,-4233.52 1238.14,-4229.57 1242,-4225 1304.21,-4151.33 1201.79,-3860.15 1270,-3792 1316.94,-3745.1 1800.97,-3767.19 1866,-3754 1875.23,-3752.13 1876.72,-3748.58 1886,-3747 2062.14,-3717.07 2132.33,-3659.32 2288,-3747 2302.94,-3755.42 2293.57,-3770.73 2308,-3780 2359.15,-3812.88 2430.14,-3816.34 2479.67,-3813.66"/>
<polygon fill="gray" stroke="gray" points="2480.15,-3817.13 2489.9,-3813 2479.7,-3810.15 2480.15,-3817.13"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn non_null_scalar() &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s_candidate = Scalar::random(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while s_candidate == Scalar::ZERO { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s_candidat...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1629.5,-4273 1506.5,-4273 1506.5,-4237 1629.5,-4237 1629.5,-4273"/>
<text text-anchor="middle" x="1568" y="-4251.3" font-family="Helvetica,sans-Serif" font-size="14.00">non_null_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1605.46,-4236.83C1663.29,-4208.97 1780.36,-4156.45 1886,-4133 1929.71,-4123.3 2255.69,-4135.99 2288,-4105 2345.77,-4049.59 2252.27,-3983.46 2308,-3926 2452.4,-3777.1 2624.95,-4008.27 2770,-3860 2821.97,-3806.88 2734.4,-3743.3 2790,-3694 2860.83,-3631.19 3574.94,-3627.18 3642,-3694 3718.21,-3769.94 3598.7,-11359.43 3670,-11440 3711.36,-11486.73 3789.55,-11484.06 3839.1,-11476.51"/>
<polygon fill="gray" stroke="gray" points="3839.92,-11479.92 3849.22,-11474.84 3838.78,-11473.01 3839.92,-11479.92"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;fn repudiation() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message1 = b&#39; Send 100 USD to Alice&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message2 = b&#39; Send 100000 USD to Alice&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s: Scalar = non_null_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pubkey = WEA...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1162,-4327 1067,-4327 1067,-4291 1162,-4291 1162,-4327"/>
<text text-anchor="middle" x="1114.5" y="-4305.3" font-family="Helvetica,sans-Serif" font-size="14.00">repudiation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge849" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1162.18,-4311.95C1189.64,-4310.95 1222.67,-4304.47 1242,-4282 1309.09,-4204.03 1197.08,-3892.54 1270,-3820 1317.02,-3773.22 1800.95,-3799.92 1866,-3787 1875.24,-3785.17 1876.72,-3781.58 1886,-3780 2062.14,-3750.07 2109.59,-3770.39 2288,-3780 2353.86,-3783.55 2429.07,-3792.31 2479.64,-3798.9"/>
<polygon fill="gray" stroke="gray" points="2479.36,-3802.39 2489.73,-3800.23 2480.27,-3795.45 2479.36,-3802.39"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge848" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1162.13,-4311.91C1189.58,-4310.89 1222.6,-4304.41 1242,-4282 1303.5,-4210.93 1203.5,-3926.41 1270,-3860 1273.5,-3856.51 1889.42,-3818.92 2048.73,-3809.26"/>
<polygon fill="gray" stroke="gray" points="2049.21,-3812.73 2058.98,-3808.64 2048.79,-3805.75 2049.21,-3812.73"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge(). -->
<g id="edge850" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/compute_challenge().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1162.12,-4309C1237.55,-4309 1387.46,-4309 1482.18,-4309"/>
<polygon fill="gray" stroke="gray" points="1482.31,-4312.5 1492.31,-4309 1482.31,-4305.5 1482.31,-4312.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar(). -->
<g id="edge847" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/repudiation().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 vectors/non_null_scalar().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1162.34,-4299.78C1192.89,-4294.02 1233.69,-4286.81 1270,-4282 1347.02,-4271.79 1435.8,-4264.27 1496.09,-4259.8"/>
<polygon fill="gray" stroke="gray" points="1496.54,-4263.27 1506.26,-4259.05 1496.03,-4256.29 1496.54,-4263.27"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().</title>
<g id="a_node76"><a xlink:title="fn check_validation_criteria() { &#160;&#160;&#160;&#160;let verify_allowed_edgecases = Set::from_iter(VERIFY_ALLOWED_EDGECASES.to_vec()); &#160;&#160;&#160;&#160;let verify_strict_allowed_edgecases = Set::from_iter(VERIFY_STRICT_ALLOWED_ED...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1661.5,-3636 1474.5,-3636 1474.5,-3600 1661.5,-3600 1661.5,-3636"/>
<text text-anchor="middle" x="1568" y="-3614.3" font-family="Helvetica,sans-Serif" font-size="14.00">check_validation_criteria</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1661.82,-3617.43C1834.53,-3618.29 2196.06,-3629.81 2288,-3709 2312.84,-3730.4 2283.06,-3758.72 2308,-3780 2354.92,-3820.05 2428.21,-3821.79 2479.42,-3816.76"/>
<polygon fill="gray" stroke="gray" points="2480.11,-3820.2 2489.67,-3815.63 2479.35,-3813.24 2480.11,-3820.2"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 check_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1661.73,-3625.48C1721.56,-3632.49 1800.2,-3645.84 1866,-3671 1939.03,-3698.92 2014.49,-3751.77 2055.29,-3782.73"/>
<polygon fill="gray" stroke="gray" points="2053.39,-3785.68 2063.46,-3788.98 2057.65,-3780.12 2053.39,-3785.68"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().</title>
<g id="a_node77"><a xlink:title="fn find_validation_criteria() { &#160;&#160;&#160;&#160;let mut verify_allowed_edgecases = Set::new(); &#160;&#160;&#160;&#160;let mut verify_strict_allowed_edgecases = Set::new(); &#160;&#160;&#160;&#160;&#160;// Counts the number of times a signature with a re&#45;en...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1654.5,-3582 1481.5,-3582 1481.5,-3546 1654.5,-3546 1654.5,-3582"/>
<text text-anchor="middle" x="1568" y="-3560.3" font-family="Helvetica,sans-Serif" font-size="14.00">find_validation_criteria</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict(). -->
<g id="edge508" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]verify_strict().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1654.68,-3557.94C1825.41,-3547.85 2199.31,-3536.3 2288,-3621 2339.51,-3670.19 2257.43,-3729.85 2308,-3780 2352.29,-3823.93 2427.38,-3824.53 2479.67,-3818.18"/>
<polygon fill="gray" stroke="gray" points="2480.35,-3821.62 2489.8,-3816.83 2479.43,-3814.68 2480.35,-3821.62"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge507" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 find_validation_criteria().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1654.52,-3556.9C1716.08,-3555.24 1799.63,-3560.28 1866,-3591 1913.72,-3613.09 2017.79,-3728.52 2063.6,-3780.99"/>
<polygon fill="gray" stroke="gray" points="2061.23,-3783.6 2070.43,-3788.85 2066.51,-3779 2061.23,-3783.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node78"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="706,-2616 536,-2616 536,-2580 706,-2580 706,-2616"/>
<text text-anchor="middle" x="621" y="-2594.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node202"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="1141.5,-3108 1087.5,-3108 1087.5,-3072 1141.5,-3072 1141.5,-3108"/>
<text text-anchor="middle" x="1114.5" y="-3086.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M706.17,-2592.97C792.31,-2589.83 918.06,-2591.48 951,-2625 1018.89,-2694.1 916.02,-2986.4 979,-3060 1002.83,-3087.85 1046.3,-3093.11 1077.37,-3092.84"/>
<polygon fill="blue" stroke="blue" points="1077.49,-3096.34 1087.39,-3092.57 1077.29,-3089.35 1077.49,-3096.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().</title>
<g id="a_node79"><a xlink:title="async fn GroupCipher_EncryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;CiphertextMessage&gt; { &#160;&#160;&#160;&#160;let mut rng =...">
<polygon fill="white" stroke="black" points="734,-2562 508,-2562 508,-2526 734,-2526 734,-2562"/>
<text text-anchor="middle" x="621" y="-2540.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_EncryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node191"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="1173,-3025 1056,-3025 1056,-2989 1173,-2989 1173,-3025"/>
<text text-anchor="middle" x="1114.5" y="-3003.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M734.05,-2538.21C817.33,-2536.56 921.42,-2541.01 951,-2571 1014.98,-2635.85 918.89,-2911.54 979,-2980 995.57,-2998.88 1021.32,-3006.78 1045.87,-3009.55"/>
<polygon fill="blue" stroke="blue" points="1045.65,-3013.05 1055.92,-3010.42 1046.26,-3006.07 1045.65,-3013.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node80"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="753,-2400 489,-2400 489,-2364 753,-2364 753,-2400"/>
<text text-anchor="middle" x="621" y="-2378.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node198"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="1632,-2890 1504,-2890 1504,-2854 1632,-2854 1632,-2890"/>
<text text-anchor="middle" x="1568" y="-2868.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M753.31,-2376.13C832.56,-2375.66 923.4,-2381.59 951,-2409 1000.71,-2458.36 933.56,-2669.68 979,-2723 1012.7,-2762.54 1343.85,-2829.66 1493.84,-2858.34"/>
<polygon fill="blue" stroke="blue" points="1493.41,-2861.82 1503.88,-2860.26 1494.72,-2854.95 1493.41,-2861.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().</title>
<g id="a_node81"><a xlink:title="async fn GroupCipher_DecryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;group_decrypt(message, store, sender).await }">
<polygon fill="white" stroke="black" points="734.5,-2508 507.5,-2508 507.5,-2472 734.5,-2472 734.5,-2508"/>
<text text-anchor="middle" x="621" y="-2486.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node190"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="1173,-2971 1056,-2971 1056,-2935 1173,-2935 1173,-2971"/>
<text text-anchor="middle" x="1114.5" y="-2949.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M734.78,-2484.32C817.84,-2482.79 921.29,-2487.34 951,-2517 1003.71,-2569.62 943.11,-2785.74 979,-2851 998.34,-2886.17 1035.49,-2912.91 1065.86,-2930.17"/>
<polygon fill="blue" stroke="blue" points="1064.18,-2933.24 1074.63,-2935 1067.56,-2927.11 1064.18,-2933.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node82"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="715,-2346 527,-2346 527,-2310 715,-2310 715,-2346"/>
<text text-anchor="middle" x="621" y="-2324.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node196"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2114,-2998 2060,-2998 2060,-2962 2114,-2962 2114,-2998"/>
<text text-anchor="middle" x="2087" y="-2976.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M711.34,-2309.96C783.91,-2300.72 884.73,-2300.92 951,-2355 985.43,-2383.1 949.75,-2417.54 979,-2451 1262.88,-2775.79 1484.22,-2644.2 1866,-2845 1933.57,-2880.54 2008.65,-2928.57 2051.31,-2956.73"/>
<polygon fill="blue" stroke="blue" points="2049.64,-2959.82 2059.91,-2962.42 2053.5,-2953.98 2049.64,-2959.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().</title>
<g id="a_node83"><a xlink:title="async fn SealedSender_DecryptMessage( &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: u32, &#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="738.5,-2724 503.5,-2724 503.5,-2688 738.5,-2688 738.5,-2724"/>
<text text-anchor="middle" x="621" y="-2702.3" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node200"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="1202.5,-3270 1026.5,-3270 1026.5,-3234 1202.5,-3234 1202.5,-3270"/>
<text text-anchor="middle" x="1114.5" y="-3248.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M738.7,-2691.49C810.62,-2689.6 898.79,-2701.3 951,-2759 1020.61,-2835.92 910.88,-3146.76 979,-3225 988.85,-3236.31 1001.99,-3243.69 1016.21,-3248.39"/>
<polygon fill="blue" stroke="blue" points="1015.62,-3251.86 1026.19,-3251.23 1017.53,-3245.13 1015.62,-3251.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node84"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="708,-2670 534,-2670 534,-2634 708,-2634 708,-2670"/>
<text text-anchor="middle" x="621" y="-2648.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node204"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1141.5,-3162 1087.5,-3162 1087.5,-3126 1141.5,-3126 1141.5,-3162"/>
<text text-anchor="middle" x="1114.5" y="-3140.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge431" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.15,-2646.89C794.22,-2643.85 918.32,-2645.73 951,-2679 1019.34,-2748.58 914.82,-3043.56 979,-3117 1003.01,-3144.47 1046.44,-3148.73 1077.46,-3147.73"/>
<polygon fill="blue" stroke="blue" points="1077.65,-3151.22 1087.46,-3147.21 1077.29,-3144.23 1077.65,-3151.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node85"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="694,-2238 548,-2238 548,-2202 694,-2202 694,-2238"/>
<text text-anchor="middle" x="621" y="-2216.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="2614,-3353 2464,-3353 2464,-3317 2614,-3317 2614,-3353"/>
<text text-anchor="middle" x="2539" y="-3331.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge457" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M694.1,-2224.06C998.18,-2241.82 2165.87,-2316.52 2288,-2423 2428.35,-2545.37 2516.26,-3166.95 2534.47,-3306.96"/>
<polygon fill="blue" stroke="blue" points="2531,-3307.43 2535.75,-3316.91 2537.95,-3306.54 2531,-3307.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node86"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="758,-2130 484,-2130 484,-2094 758,-2094 758,-2130"/>
<text text-anchor="middle" x="621" y="-2108.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node193"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="1201,-1939 1028,-1939 1028,-1903 1201,-1903 1201,-1939"/>
<text text-anchor="middle" x="1114.5" y="-1917.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge597" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M702.77,-2130.01C776.57,-2141.37 884.11,-2144.32 951,-2085 997.5,-2043.76 934.98,-1991.87 979,-1948 989.79,-1937.24 1003.59,-1930.18 1018.22,-1925.63"/>
<polygon fill="blue" stroke="blue" points="1019.2,-1928.99 1027.94,-1922.99 1017.37,-1922.23 1019.2,-1928.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node87"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="694.5,-2292 547.5,-2292 547.5,-2256 694.5,-2256 694.5,-2292"/>
<text text-anchor="middle" x="621" y="-2270.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2603,-3407 2475,-3407 2475,-3371 2603,-3371 2603,-3407"/>
<text text-anchor="middle" x="2539" y="-3385.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge621" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M694.93,-2271.54C964.8,-2266.91 1910.64,-2291.63 2288,-2842 2320.7,-2889.69 2268.75,-3319.54 2308,-3362 2346.76,-3403.93 2413.31,-3407.64 2464.88,-3402.64"/>
<polygon fill="blue" stroke="blue" points="2465.43,-3406.1 2474.98,-3401.53 2464.66,-3399.14 2465.43,-3406.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node88"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="758,-2076 484,-2076 484,-2040 758,-2040 758,-2076"/>
<text text-anchor="middle" x="621" y="-2054.3" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node205"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="1203.5,-1856 1025.5,-1856 1025.5,-1820 1203.5,-1820 1203.5,-1856"/>
<text text-anchor="middle" x="1114.5" y="-1834.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge632" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.98,-2076C782.58,-2085.82 886.15,-2086.05 951,-2028 997.31,-1986.55 939.03,-1938.59 979,-1891 990.2,-1877.66 1005.21,-1867.66 1021.14,-1860.17"/>
<polygon fill="blue" stroke="blue" points="1022.83,-1863.25 1030.6,-1856.04 1020.04,-1856.83 1022.83,-1863.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node89"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="749.5,-2184 492.5,-2184 492.5,-2148 749.5,-2148 749.5,-2184"/>
<text text-anchor="middle" x="621" y="-2162.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node192"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="1206,-1993 1023,-1993 1023,-1957 1206,-1957 1206,-1993"/>
<text text-anchor="middle" x="1114.5" y="-1971.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge666" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M749.52,-2175.82C812.79,-2175.75 888.79,-2167.98 951,-2139 1016.42,-2108.52 1070.21,-2039.78 1096.36,-2001.68"/>
<polygon fill="blue" stroke="blue" points="1099.42,-2003.4 1102.11,-1993.15 1093.62,-1999.49 1099.42,-2003.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node90"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="720.5,-2454 521.5,-2454 521.5,-2418 720.5,-2418 720.5,-2454"/>
<text text-anchor="middle" x="621" y="-2432.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node199"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="1603.5,-3228 1532.5,-3228 1532.5,-3192 1603.5,-3192 1603.5,-3228"/>
<text text-anchor="middle" x="1568" y="-3206.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge684" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M720.51,-2430.68C805.53,-2428.4 919.49,-2431.7 951,-2463 1000.86,-2512.52 940.62,-2719.13 979,-2778 1051.9,-2889.81 1160.36,-2817.4 1242,-2923 1272.85,-2962.91 1239.82,-2992.58 1270,-3033 1335.07,-3120.15 1456.82,-3172.61 1522.41,-3195.82"/>
<polygon fill="blue" stroke="blue" points="1521.46,-3199.19 1532.06,-3199.16 1523.75,-3192.58 1521.46,-3199.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node91"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="1666.5,-10320 1469.5,-10320 1469.5,-10284 1666.5,-10284 1666.5,-10320"/>
<text text-anchor="middle" x="1568" y="-10298.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<g id="a_node281"><a xlink:title=" &#160;&#160;&#160;pub fn from_parts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;limits: NicknameLimits, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should perform the same set of checks...">
<polygon fill="white" stroke="black" points="2133,-10626 2041,-10626 2041,-10590 2133,-10590 2133,-10626"/>
<text text-anchor="middle" x="2087" y="-10604.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1666.71,-10291.95C1732.42,-10290.98 1815.89,-10302 1866,-10355 1916.75,-10408.68 1841.98,-10460.68 1886,-10520 1920.33,-10566.26 1984.31,-10588.6 2030.68,-10599.13"/>
<polygon fill="blue" stroke="blue" points="2030.07,-10602.57 2040.58,-10601.26 2031.54,-10595.73 2030.07,-10602.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node92"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="1632.5,-10266 1503.5,-10266 1503.5,-10230 1632.5,-10230 1632.5,-10266"/>
<text text-anchor="middle" x="1568" y="-10244.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<g id="a_node276"><a xlink:title=" &#160;&#160;&#160;pub fn new(s: &amp;str) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (nickname, discriminator) = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s.rsplit_once(&#39;.&#39;).ok_or(UsernameError::MissingSeparator)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_parts_withou...">
<polygon fill="white" stroke="black" points="2114,-10511 2060,-10511 2060,-10475 2114,-10475 2114,-10511"/>
<text text-anchor="middle" x="2087" y="-10489.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge529" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1632.77,-10232.91C1700.34,-10221.08 1805.46,-10215.28 1866,-10275 1896.38,-10304.97 1856.28,-10435.38 1886,-10466 1928.22,-10509.5 2004.73,-10506.53 2049.89,-10500.04"/>
<polygon fill="blue" stroke="blue" points="2050.51,-10503.49 2059.84,-10498.48 2049.42,-10496.57 2050.51,-10503.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node93"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="1634.5,-10212 1501.5,-10212 1501.5,-10176 1634.5,-10176 1634.5,-10212"/>
<text text-anchor="middle" x="1568" y="-10190.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node282"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="2136,-10457 2038,-10457 2038,-10421 2136,-10421 2136,-10457"/>
<text text-anchor="middle" x="2087" y="-10435.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge547" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1634.63,-10178.58C1702.26,-10166.98 1806.01,-10161.83 1866,-10221 1896.38,-10250.97 1856.28,-10381.38 1886,-10412 1921.96,-10449.05 1982.79,-10452.39 2027.94,-10448.56"/>
<polygon fill="blue" stroke="blue" points="2028.29,-10452.04 2037.9,-10447.58 2027.6,-10445.07 2028.29,-10452.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node94"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="1632.5,-10158 1503.5,-10158 1503.5,-10122 1632.5,-10122 1632.5,-10158"/>
<text text-anchor="middle" x="1568" y="-10136.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge614" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1632.59,-10124.58C1700.51,-10112.31 1806.41,-10105.97 1866,-10167 1912.52,-10214.65 1840.52,-10417.35 1886,-10466 1927.51,-10510.41 2004.61,-10507.02 2050,-10500.23"/>
<polygon fill="blue" stroke="blue" points="2050.69,-10503.67 2060,-10498.6 2049.56,-10496.76 2050.69,-10503.67"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node283"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="2114,-10403 2060,-10403 2060,-10367 2114,-10367 2114,-10403"/>
<text text-anchor="middle" x="2087" y="-10381.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge613" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1632.75,-10124.92C1700.31,-10113.11 1805.41,-10107.33 1866,-10167 1895.93,-10196.48 1856.94,-10324.66 1886,-10355 1928.02,-10398.87 2004.6,-10397.14 2049.83,-10391.41"/>
<polygon fill="blue" stroke="blue" points="2050.38,-10394.87 2059.8,-10390.02 2049.41,-10387.94 2050.38,-10394.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().</title>
<g id="a_node95"><a xlink:title="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId( &#160;&#160;&#160;&#160;params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;auth_credential_with_pni_response_bytes:...">
<polygon fill="white" stroke="black" points="1794,-8109 1342,-8109 1342,-8073 1794,-8073 1794,-8109"/>
<text text-anchor="middle" x="1568" y="-8087.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="node326" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<g id="a_node326"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: crate::Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni, ZkGr...">
<polygon fill="white" stroke="black" points="2120,-7869 2054,-7869 2054,-7833 2120,-7833 2120,-7869"/>
<text text-anchor="middle" x="2087" y="-7847.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.45,-8109.01C1718.49,-8118.37 1810.73,-8118.37 1866,-8064 1925.27,-8005.69 1828.01,-7937.58 1886,-7878 1926.36,-7836.54 1997.87,-7837.33 2043.55,-7843.12"/>
<polygon fill="blue" stroke="blue" points="2043.34,-7846.62 2053.73,-7844.55 2044.31,-7839.69 2043.34,-7846.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node96"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="1721,-7245 1415,-7245 1415,-7209 1721,-7209 1721,-7245"/>
<text text-anchor="middle" x="1568" y="-7223.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node352" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node352"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="2567,-5728 2511,-5728 2511,-5692 2567,-5692 2567,-5728"/>
<text text-anchor="middle" x="2539" y="-5706.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.39,-7245.04C1714.45,-7255.83 1811,-7257.9 1866,-7200 1904.98,-7158.96 1847.09,-6732.11 1886,-6691 1947.68,-6625.83 2226.89,-6718.71 2288,-6653 2322.67,-6615.73 2273.76,-5774.66 2308,-5737 2356.2,-5683.98 2448.76,-5691.7 2500.56,-5701.28"/>
<polygon fill="blue" stroke="blue" points="2500.17,-5704.77 2510.65,-5703.27 2501.52,-5697.9 2500.17,-5704.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().</title>
<g id="a_node97"><a xlink:title="fn GroupSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::generate(*randomness).into() }">
<polygon fill="white" stroke="black" points="1725.5,-7731 1410.5,-7731 1410.5,-7695 1725.5,-7695 1725.5,-7731"/>
<text text-anchor="middle" x="1568" y="-7709.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="node367" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<g id="a_node367"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_GroupSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2578.5,-6969 2499.5,-6969 2499.5,-6933 2578.5,-6933 2578.5,-6969"/>
<text text-anchor="middle" x="2539" y="-6947.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.66,-7731.03C1714.66,-7741.74 1810.96,-7743.69 1866,-7686 1901.09,-7649.23 1850.84,-7265.71 1886,-7229 1948.03,-7164.24 2206.46,-7231.3 2288,-7194 2395.19,-7144.97 2483.96,-7029.92 2520.31,-6977.67"/>
<polygon fill="blue" stroke="blue" points="2523.32,-6979.48 2526.09,-6969.25 2517.55,-6975.52 2523.32,-6979.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node98"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="1727,-7083 1409,-7083 1409,-7047 1727,-7047 1727,-7083"/>
<text text-anchor="middle" x="1568" y="-7061.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node356" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node356"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="2567,-5339 2511,-5339 2511,-5303 2567,-5303 2567,-5339"/>
<text text-anchor="middle" x="2539" y="-5317.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.65,-7083.02C1714.65,-7093.73 1810.94,-7095.67 1866,-7038 1900.64,-7001.72 1851.43,-6623.34 1886,-6587 1947.85,-6521.99 2227.06,-6614.86 2288,-6549 2333.32,-6500.02 2263.24,-5397.49 2308,-5348 2356.07,-5294.86 2448.68,-5302.62 2500.52,-5312.25"/>
<polygon fill="blue" stroke="blue" points="2500.14,-5315.74 2510.62,-5314.24 2501.49,-5308.87 2500.14,-5315.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node99"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="1773,-8433 1363,-8433 1363,-8397 1773,-8397 1773,-8433"/>
<text text-anchor="middle" x="1568" y="-8411.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node380" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node380"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="2226,-9780 1948,-9780 1948,-9744 2226,-9744 2226,-9780"/>
<text text-anchor="middle" x="2087" y="-9758.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8396.98C1713.12,-8385.7 1811.16,-8382.88 1866,-8442 1914.85,-8494.67 1838.3,-9681.28 1886,-9735 1899.89,-9750.65 1918.19,-9760.47 1938.08,-9766.32"/>
<polygon fill="blue" stroke="blue" points="1937.4,-9769.76 1947.96,-9768.88 1939.16,-9762.98 1937.4,-9769.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node100"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="1825,-7839 1311,-7839 1311,-7803 1825,-7803 1825,-7839"/>
<text text-anchor="middle" x="1568" y="-7817.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node371" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node371"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="2179.5,-7385 1994.5,-7385 1994.5,-7349 2179.5,-7349 2179.5,-7385"/>
<text text-anchor="middle" x="2087" y="-7363.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.91,-7839C1714.83,-7849.61 1810.87,-7851.42 1866,-7794 1896.82,-7761.9 1855.89,-7426.76 1886,-7394 1910.65,-7367.18 1948.27,-7357.69 1984.26,-7355.88"/>
<polygon fill="blue" stroke="blue" points="1984.47,-7359.38 1994.35,-7355.56 1984.25,-7352.38 1984.47,-7359.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node101"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="1736,-7137 1400,-7137 1400,-7101 1736,-7101 1736,-7137"/>
<text text-anchor="middle" x="1568" y="-7115.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node357" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node357"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2573.5,-5393 2504.5,-5393 2504.5,-5357 2573.5,-5357 2573.5,-5393"/>
<text text-anchor="middle" x="2539" y="-5371.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.67,-7137.04C1714.68,-7147.76 1810.98,-7149.71 1866,-7092 1901.84,-7054.41 1850.46,-6662.88 1886,-6625 1947.47,-6559.48 2227.38,-6648.31 2288,-6582 2332.24,-6533.61 2264.01,-5450.62 2308,-5402 2354.15,-5350.99 2441.35,-5356.1 2494.11,-5365.11"/>
<polygon fill="blue" stroke="blue" points="2493.72,-5368.59 2504.18,-5366.94 2494.97,-5361.71 2493.72,-5368.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node102"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="1772,-7353 1364,-7353 1364,-7317 1772,-7317 1772,-7353"/>
<text text-anchor="middle" x="1568" y="-7331.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node340" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node340"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="2572,-6286 2506,-6286 2506,-6250 2572,-6250 2572,-6286"/>
<text text-anchor="middle" x="2539" y="-6264.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.08,-7353.01C1714.17,-7363.86 1810.96,-7366.04 1866,-7308 1906.63,-7265.16 1845.98,-6820.41 1886,-6777 2007.97,-6644.71 2165.48,-6860.78 2288,-6729 2320.87,-6693.65 2275.1,-6330.32 2308,-6295 2355.27,-6244.25 2443.27,-6249.64 2495.64,-6258.55"/>
<polygon fill="blue" stroke="blue" points="2495.16,-6262.02 2505.62,-6260.36 2496.41,-6255.13 2495.16,-6262.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().</title>
<g id="a_node103"><a xlink:title="fn GroupSecretParams_DeriveFromMasterKey( &#160;&#160;&#160;&#160;master_key: Serialized&lt;GroupMasterKey&gt;, ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::derive_from_master_key(master_key.into_inner()).into()...">
<polygon fill="white" stroke="black" points="1723.5,-7569 1412.5,-7569 1412.5,-7533 1723.5,-7533 1723.5,-7569"/>
<text text-anchor="middle" x="1568" y="-7547.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DeriveFromMasterKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="node366" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<g id="a_node366"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_master_key(master_key: GroupMasterKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_GroupMasterKey_GroupSecretParams_DeriveFromMasterKey&#39; , &#160;...">
<polygon fill="white" stroke="black" points="3090.5,-6969 2905.5,-6969 2905.5,-6933 3090.5,-6933 3090.5,-6969"/>
<text text-anchor="middle" x="2998" y="-6947.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_master_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.81,-7569.01C1713.96,-7579.95 1810.99,-7582.26 1866,-7524 1911.8,-7475.5 1838.05,-6970.37 1886,-6924 1956.6,-6855.71 2671.95,-6918.19 2770,-6924 2811.01,-6926.43 2855.96,-6931.31 2894.97,-6936.26"/>
<polygon fill="blue" stroke="blue" points="2894.91,-6939.78 2905.27,-6937.59 2895.8,-6932.84 2894.91,-6939.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().</title>
<g id="a_node104"><a xlink:title="fn ServerSecretParams_VerifyAuthCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;curren...">
<polygon fill="white" stroke="black" points="1764,-8649 1372,-8649 1372,-8613 1764,-8613 1764,-8649"/>
<text text-anchor="middle" x="1568" y="-8627.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyAuthCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="node384" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<g id="a_node384"><a xlink:title=" &#160;&#160;&#160;pub fn verify_auth_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::auth::AnyAuthCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cur...">
<polygon fill="white" stroke="black" points="2218.5,-9996 1955.5,-9996 1955.5,-9960 2218.5,-9960 2218.5,-9996"/>
<text text-anchor="middle" x="2087" y="-9974.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_auth_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8612.98C1713.12,-8601.7 1811.16,-8598.88 1866,-8658 1914.85,-8710.67 1838.3,-9897.28 1886,-9951 1901.62,-9968.6 1922.81,-9978.82 1945.57,-9984.32"/>
<polygon fill="blue" stroke="blue" points="1944.9,-9987.76 1955.41,-9986.4 1946.35,-9980.91 1944.9,-9987.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().</title>
<g id="a_node105"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_serial: &amp;[u8; RECEIPT_SERIAL...">
<polygon fill="white" stroke="black" points="1833,-8325 1303,-8325 1303,-8289 1833,-8289 1833,-8325"/>
<text text-anchor="middle" x="1568" y="-8303.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="node385" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<g id="a_node385"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCredentialReq...">
<polygon fill="white" stroke="black" points="2240,-9672 1934,-9672 1934,-9636 2240,-9636 2240,-9672"/>
<text text-anchor="middle" x="2087" y="-9650.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8288.98C1713.12,-8277.7 1811.16,-8274.88 1866,-8334 1914.85,-8386.67 1838.3,-9573.28 1886,-9627 1896.59,-9638.93 1909.74,-9647.47 1924.2,-9653.45"/>
<polygon fill="blue" stroke="blue" points="1923.29,-9656.84 1933.88,-9657.02 1925.71,-9650.27 1923.29,-9656.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().</title>
<g id="a_node106"><a xlink:title="fn GenericServerSecretParams_GenerateDeterministic(randomness: &amp;[u8; RANDOMNESS_LEN]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = GenericServerSecretParams::generate(*randomness); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="1754,-7515 1382,-7515 1382,-7479 1754,-7479 1754,-7515"/>
<text text-anchor="middle" x="1568" y="-7493.3" font-family="Helvetica,sans-Serif" font-size="14.00">GenericServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="node361" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<g id="a_node361"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: Default::default(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: zkcredential::credentials::CredentialKeyPair::generate(ra...">
<polygon fill="white" stroke="black" points="3037.5,-6236 2958.5,-6236 2958.5,-6200 3037.5,-6200 3037.5,-6236"/>
<text text-anchor="middle" x="2998" y="-6214.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.13,-7515.05C1714.25,-7525.93 1811.05,-7528.13 1866,-7470 1910.45,-7422.98 1842.04,-6935.48 1886,-6888 1947.06,-6822.03 2202.95,-6872.09 2288,-6843 2525.42,-6761.79 2587.89,-6721.63 2770,-6549 2870.84,-6453.41 2952.31,-6305.92 2983.4,-6245.37"/>
<polygon fill="blue" stroke="blue" points="2986.71,-6246.59 2988.12,-6236.09 2980.47,-6243.42 2986.71,-6246.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().</title>
<g id="a_node107"><a xlink:title="fn ServerPublicParams_VerifySignature( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;notary_signature: &amp;[u8; SIGNATURE_LEN], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1701.5,-8757 1434.5,-8757 1434.5,-8721 1701.5,-8721 1701.5,-8757"/>
<text text-anchor="middle" x="1568" y="-8735.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="node378" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<g id="a_node378"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: NotarySignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.sig_public_key.verify(messag...">
<polygon fill="white" stroke="black" points="2151,-10104 2023,-10104 2023,-10068 2151,-10068 2151,-10104"/>
<text text-anchor="middle" x="2087" y="-10082.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8720.98C1713.12,-8709.7 1811.16,-8706.88 1866,-8766 1914.85,-8818.67 1838.3,-10005.28 1886,-10059 1916.86,-10093.76 1969.45,-10099.74 2012.95,-10097.44"/>
<polygon fill="blue" stroke="blue" points="2013.2,-10100.93 2022.94,-10096.76 2012.73,-10093.95 2013.2,-10100.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().</title>
<g id="a_node108"><a xlink:title="fn GroupSendEndorsement_CallLinkParams_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;call_link_secret_params_serialized: &amp;[u8], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let call_link_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="1747.5,-8055 1388.5,-8055 1388.5,-8019 1747.5,-8019 1747.5,-8055"/>
<text text-anchor="middle" x="1568" y="-8033.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_CallLinkParams_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node369" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node369"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="2124.5,-7547 2049.5,-7547 2049.5,-7511 2124.5,-7511 2124.5,-7547"/>
<text text-anchor="middle" x="2087" y="-7525.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.47,-8055.03C1718.53,-8064.41 1810.77,-8064.42 1866,-8010 1896.08,-7980.36 1871.4,-7860.63 1886,-7821 1926.54,-7710.95 2017.81,-7602.68 2061.63,-7554.71"/>
<polygon fill="blue" stroke="blue" points="2064.28,-7557 2068.49,-7547.27 2059.13,-7552.25 2064.28,-7557"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node109"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="1709,-7677 1427,-7677 1427,-7641 1709,-7641 1709,-7677"/>
<text text-anchor="middle" x="1568" y="-7655.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node365" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node365"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="2162.5,-7023 2011.5,-7023 2011.5,-6987 2162.5,-6987 2162.5,-7023"/>
<text text-anchor="middle" x="2087" y="-7001.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.81,-7677.01C1713.96,-7687.95 1810.99,-7690.26 1866,-7632 1911.8,-7583.5 1841.27,-7081.48 1886,-7032 1914.27,-7000.73 1960.13,-6992.89 2000.82,-6993.36"/>
<polygon fill="blue" stroke="blue" points="2000.94,-6996.86 2011.04,-6993.65 2001.14,-6989.87 2000.94,-6996.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node110"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1829,-7947 1307,-7947 1307,-7911 1829,-7911 1829,-7947"/>
<text text-anchor="middle" x="1568" y="-7925.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node370" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node370"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="2180.5,-7493 1993.5,-7493 1993.5,-7457 2180.5,-7457 2180.5,-7493"/>
<text text-anchor="middle" x="2087" y="-7471.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.91,-7947C1714.83,-7957.61 1810.87,-7959.42 1866,-7902 1896.82,-7869.9 1855.89,-7534.76 1886,-7502 1910.44,-7475.41 1947.61,-7465.86 1983.31,-7463.93"/>
<polygon fill="blue" stroke="blue" points="1983.45,-7467.43 1993.33,-7463.58 1983.21,-7460.43 1983.45,-7467.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().</title>
<g id="a_node111"><a xlink:title="fn ServerSecretParams_SignDeterministic( &#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; [u8; SIGNATURE_LEN] { &#160;&#160;&#160;&#160;params.sign(*randomness, message) }">
<polygon fill="white" stroke="black" points="1711,-8811 1425,-8811 1425,-8775 1711,-8775 1711,-8811"/>
<text text-anchor="middle" x="1568" y="-8789.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_SignDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="node377" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<g id="a_node377"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, randomness: RandomnessBytes, message: &amp;[u8]) &#45;&gt; NotarySignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign&#39; , &#160;...">
<polygon fill="white" stroke="black" points="2114,-10158 2060,-10158 2060,-10122 2114,-10122 2114,-10158"/>
<text text-anchor="middle" x="2087" y="-10136.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8774.98C1713.12,-8763.7 1811.16,-8760.88 1866,-8820 1914.85,-8872.67 1838.3,-10059.28 1886,-10113 1926.36,-10158.46 2003.87,-10154.7 2049.64,-10147.56"/>
<polygon fill="blue" stroke="blue" points="2050.45,-10150.97 2059.72,-10145.85 2049.28,-10144.07 2050.45,-10150.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node112"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="1756.5,-7191 1379.5,-7191 1379.5,-7155 1756.5,-7155 1756.5,-7191"/>
<text text-anchor="middle" x="1568" y="-7169.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node354" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node354"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="2566,-5447 2512,-5447 2512,-5411 2566,-5411 2566,-5447"/>
<text text-anchor="middle" x="2539" y="-5425.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.37,-7191.02C1714.42,-7201.8 1810.96,-7203.87 1866,-7146 1903.78,-7106.28 1848.19,-6692.7 1886,-6653 1947.86,-6588.05 2226.81,-6682.57 2288,-6617 2325.57,-6576.74 2284.48,-5675.79 2308,-5626 2349.1,-5539 2448.98,-5475.71 2502.6,-5446.69"/>
<polygon fill="blue" stroke="blue" points="2504.54,-5449.62 2511.73,-5441.84 2501.26,-5443.44 2504.54,-5449.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node113"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1718.5,-7299 1417.5,-7299 1417.5,-7263 1718.5,-7263 1718.5,-7299"/>
<text text-anchor="middle" x="1568" y="-7277.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node351" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node351"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="2572,-5836 2506,-5836 2506,-5800 2572,-5800 2572,-5836"/>
<text text-anchor="middle" x="2539" y="-5814.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.41,-7299.05C1714.48,-7309.86 1811.03,-7311.94 1866,-7254 1906.18,-7211.65 1845.9,-6771.42 1886,-6729 1947.64,-6663.79 2226.8,-6756.63 2288,-6691 2319.08,-6657.67 2279.19,-5906.31 2308,-5871 2352.93,-5815.93 2442.55,-5811.15 2495.68,-5813.8"/>
<polygon fill="blue" stroke="blue" points="2495.6,-5817.3 2505.8,-5814.41 2496.03,-5810.31 2495.6,-5817.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node114"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="1719.5,-6975 1416.5,-6975 1416.5,-6939 1719.5,-6939 1719.5,-6975"/>
<text text-anchor="middle" x="1568" y="-6953.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node348" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node348"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="2115,-6218 2059,-6218 2059,-6182 2115,-6182 2115,-6218"/>
<text text-anchor="middle" x="2087" y="-6196.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.55,-6975.02C1713.76,-6986.05 1811.05,-6988.48 1866,-6930 1919.51,-6873.05 1833.74,-6285.1 1886,-6227 1926.32,-6182.17 2002.82,-6185.41 2048.62,-6192.35"/>
<polygon fill="blue" stroke="blue" points="2048.3,-6195.85 2058.74,-6194.02 2049.44,-6188.94 2048.3,-6195.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node115"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="1841,-8973 1295,-8973 1295,-8937 1841,-8937 1841,-8973"/>
<text text-anchor="middle" x="1568" y="-8951.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node386" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node386"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="2253.5,-10320 1920.5,-10320 1920.5,-10284 2253.5,-10284 2253.5,-10320"/>
<text text-anchor="middle" x="2087" y="-10298.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge430" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1594.53,-8973.09C1655.44,-9018 1808.51,-9141.63 1866,-9288 1886.05,-9339.05 1849.49,-10234.07 1886,-10275 1893.34,-10283.22 1901.89,-10289.83 1911.24,-10295.1"/>
<polygon fill="blue" stroke="blue" points="1909.95,-10298.37 1920.45,-10299.75 1913.1,-10292.12 1909.95,-10298.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().</title>
<g id="a_node116"><a xlink:title="fn ServerSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; ServerSecretParams { &#160;&#160;&#160;&#160;ServerSecretParams::generate(*randomness) }">
<polygon fill="white" stroke="black" points="1727.5,-8541 1408.5,-8541 1408.5,-8505 1727.5,-8505 1727.5,-8541"/>
<text text-anchor="middle" x="1568" y="-8519.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="node388" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<g id="a_node388"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2126.5,-9888 2047.5,-9888 2047.5,-9852 2126.5,-9852 2126.5,-9888"/>
<text text-anchor="middle" x="2087" y="-9866.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge441" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8504.98C1713.12,-8493.7 1811.16,-8490.88 1866,-8550 1914.85,-8602.67 1838.3,-9789.28 1886,-9843 1922.87,-9884.53 1990.76,-9884.98 2037.12,-9879.3"/>
<polygon fill="blue" stroke="blue" points="2037.81,-9882.74 2047.25,-9877.93 2036.87,-9875.81 2037.81,-9882.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().</title>
<g id="a_node117"><a xlink:title="fn CallLinkSecretParams_DeriveFromRootKey(root_key: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = CallLinkSecretParams::derive_from_root_key(root_key); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="1721,-6597 1415,-6597 1415,-6561 1721,-6561 1721,-6597"/>
<text text-anchor="middle" x="1568" y="-6575.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DeriveFromRootKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="node360" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<g id="a_node360"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_root_key(root_key: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20230419_CallLinkSecretParams_DeriveFromRootKey&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_key, &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2621,-5094 2457,-5094 2457,-5058 2621,-5058 2621,-5094"/>
<text text-anchor="middle" x="2539" y="-5072.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_root_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge449" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1650.83,-6597.02C1718.9,-6606.69 1812.94,-6606.69 1866,-6549 1910.12,-6501.03 1842.32,-5424.37 1886,-5376 2006.6,-5242.46 2162.7,-5457.14 2288,-5328 2322.96,-5291.97 2273.01,-5138.99 2308,-5103 2343.13,-5066.87 2398.99,-5059.65 2446.86,-5061.68"/>
<polygon fill="blue" stroke="blue" points="2446.76,-5065.18 2456.95,-5062.25 2447.16,-5058.19 2446.76,-5065.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node118"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="1858,-8595 1278,-8595 1278,-8559 1858,-8559 1858,-8595"/>
<text text-anchor="middle" x="1568" y="-8573.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node390" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node390"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="2273.5,-9942 1900.5,-9942 1900.5,-9906 2273.5,-9906 2273.5,-9942"/>
<text text-anchor="middle" x="2087" y="-9920.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge453" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8558.98C1713.12,-8547.7 1811.16,-8544.88 1866,-8604 1914.85,-8656.67 1838.3,-9843.28 1886,-9897 1888.02,-9899.27 1890.13,-9901.42 1892.32,-9903.45"/>
<polygon fill="blue" stroke="blue" points="1890.17,-9906.21 1900.09,-9909.92 1894.64,-9900.83 1890.17,-9906.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().</title>
<g id="a_node119"><a xlink:title="fn ProfileKey_GetCommitment( &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKey&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;ProfileKeyCommitment&gt; { &#160;&#160;&#160;&#160;profile_key.get_commitment(user_id).into() }">
<polygon fill="white" stroke="black" points="1670.5,-8217 1465.5,-8217 1465.5,-8181 1670.5,-8181 1670.5,-8217"/>
<text text-anchor="middle" x="1568" y="-8195.3" font-family="Helvetica,sans-Serif" font-size="14.00">ProfileKey_GetCommitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node376" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node376"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="2154,-9261 2020,-9261 2020,-9225 2154,-9225 2154,-9261"/>
<text text-anchor="middle" x="2087" y="-9239.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge458" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.5,-8180.96C1715.34,-8170.49 1810.91,-8168.9 1866,-8226 1894.12,-8255.15 1878.91,-8550.12 1886,-8590 1930.34,-8839.25 2039.85,-9126.99 2074.97,-9215.62"/>
<polygon fill="blue" stroke="blue" points="2071.74,-9216.97 2078.69,-9224.96 2078.24,-9214.38 2071.74,-9216.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node120"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="1730,-6813 1406,-6813 1406,-6777 1730,-6777 1730,-6813"/>
<text text-anchor="middle" x="1568" y="-6791.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node350" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node350"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="2573.5,-5674 2504.5,-5674 2504.5,-5638 2573.5,-5638 2573.5,-5674"/>
<text text-anchor="middle" x="2539" y="-5652.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge491" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.99,-6813C1713.3,-6824.18 1811.08,-6826.87 1866,-6768 1901.52,-6729.93 1850.08,-5868.69 1886,-5831 1947.78,-5766.17 2221.73,-5863.22 2288,-5803 2328.02,-5766.64 2268.86,-5720.3 2308,-5683 2357.42,-5635.91 2442.47,-5639.41 2494.14,-5647.1"/>
<polygon fill="blue" stroke="blue" points="2493.89,-5650.61 2504.32,-5648.74 2495.01,-5643.7 2493.89,-5650.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().</title>
<g id="a_node121"><a xlink:title="fn ServerSecretParams_VerifyProfileKeyCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1781.5,-8865 1354.5,-8865 1354.5,-8829 1781.5,-8829 1781.5,-8865"/>
<text text-anchor="middle" x="1568" y="-8843.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyProfileKeyCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="node391" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<g id="a_node391"><a xlink:title=" &#160;&#160;&#160;pub fn verify_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::AnyProfileKeyCredentialPresenta...">
<polygon fill="white" stroke="black" points="2239.5,-10212 1934.5,-10212 1934.5,-10176 2239.5,-10176 2239.5,-10212"/>
<text text-anchor="middle" x="2087" y="-10190.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge494" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8828.98C1713.12,-8817.7 1811.16,-8814.88 1866,-8874 1914.85,-8926.67 1838.3,-10113.28 1886,-10167 1896.69,-10179.04 1909.98,-10187.62 1924.59,-10193.61"/>
<polygon fill="blue" stroke="blue" points="1923.78,-10197.04 1934.38,-10197.18 1926.18,-10190.46 1923.78,-10197.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node122"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="1773,-8919 1363,-8919 1363,-8883 1773,-8883 1773,-8919"/>
<text text-anchor="middle" x="1568" y="-8897.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node383" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node383"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="2230,-10266 1944,-10266 1944,-10230 2230,-10230 2230,-10266"/>
<text text-anchor="middle" x="2087" y="-10244.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge499" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8882.98C1713.12,-8871.7 1811.16,-8868.88 1866,-8928 1914.85,-8980.67 1838.3,-10167.28 1886,-10221 1898.97,-10235.61 1915.79,-10245.14 1934.16,-10251.11"/>
<polygon fill="blue" stroke="blue" points="1933.31,-10254.5 1943.89,-10253.91 1935.25,-10247.78 1933.31,-10254.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node123"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="1749,-7407 1387,-7407 1387,-7371 1749,-7371 1749,-7407"/>
<text text-anchor="middle" x="1568" y="-7385.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node337" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node337"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2566,-6340 2512,-6340 2512,-6304 2566,-6304 2566,-6340"/>
<text text-anchor="middle" x="2539" y="-6318.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge503" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.1,-7407.02C1714.2,-7417.88 1810.99,-7420.07 1866,-7362 1907.83,-7317.85 1844.8,-6859.74 1886,-6815 2007.89,-6682.64 2165.36,-6898.67 2288,-6767 2319.69,-6732.97 2276.28,-6382.99 2308,-6349 2357.27,-6296.2 2450.64,-6304.2 2501.96,-6313.68"/>
<polygon fill="blue" stroke="blue" points="2501.45,-6317.14 2511.94,-6315.64 2502.8,-6310.28 2501.45,-6317.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node124"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="1707.5,-7623 1428.5,-7623 1428.5,-7587 1707.5,-7587 1707.5,-7623"/>
<text text-anchor="middle" x="1568" y="-7601.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node368" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node368"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="2160,-6969 2014,-6969 2014,-6933 2160,-6933 2160,-6969"/>
<text text-anchor="middle" x="2087" y="-6947.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge535" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.81,-7623.01C1713.96,-7633.95 1810.99,-7636.26 1866,-7578 1911.8,-7529.5 1841.27,-7027.48 1886,-6978 1914.98,-6945.94 1962.45,-6938.51 2003.88,-6939.41"/>
<polygon fill="blue" stroke="blue" points="2003.86,-6942.91 2013.99,-6939.79 2004.13,-6935.92 2003.86,-6942.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node125"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="1756,-6867 1380,-6867 1380,-6831 1756,-6831 1756,-6867"/>
<text text-anchor="middle" x="1568" y="-6845.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node353" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node353"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="2603,-5782 2475,-5782 2475,-5746 2603,-5746 2603,-5782"/>
<text text-anchor="middle" x="2539" y="-5760.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge560" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.99,-6867.01C1713.3,-6878.19 1811.09,-6880.88 1866,-6822 1902.04,-6783.35 1850.12,-5909.8 1886,-5871 1946.95,-5805.09 2214.07,-5881.92 2288,-5831 2304.37,-5819.73 2291.73,-5802.42 2308,-5791 2353.24,-5759.25 2416.22,-5753.81 2464.83,-5755.58"/>
<polygon fill="blue" stroke="blue" points="2464.83,-5759.09 2474.98,-5756.06 2465.16,-5752.09 2464.83,-5759.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().</title>
<g id="a_node126"><a xlink:title="fn GroupSendEndorsement_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;group_params: Serialized&lt;GroupSecretParams&gt;, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let endorsement = zkgroup::deserialize::&lt;GroupSendEndorsement&gt;(endorsement)...">
<polygon fill="white" stroke="black" points="1691.5,-8001 1444.5,-8001 1444.5,-7965 1691.5,-7965 1691.5,-8001"/>
<text text-anchor="middle" x="1568" y="-7979.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge570" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.27,-8001C1721.58,-8009.41 1810.87,-8008.1 1866,-7956 1910.08,-7914.34 1863.85,-7877.47 1886,-7821 1928.93,-7711.54 2019.42,-7602.58 2062.39,-7554.52"/>
<polygon fill="blue" stroke="blue" points="2065.01,-7556.84 2069.11,-7547.07 2059.81,-7552.15 2065.01,-7556.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node127"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1774.5,-8271 1361.5,-8271 1361.5,-8235 1774.5,-8235 1774.5,-8271"/>
<text text-anchor="middle" x="1568" y="-8249.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node389" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node389"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2178,-9618 1996,-9618 1996,-9582 2178,-9582 2178,-9618"/>
<text text-anchor="middle" x="2087" y="-9596.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge574" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8234.98C1713.12,-8223.7 1811.16,-8220.88 1866,-8280 1914.74,-8332.55 1838.81,-9516.05 1886,-9570 1910.46,-9597.96 1948.86,-9607.93 1985.51,-9610.01"/>
<polygon fill="blue" stroke="blue" points="1985.66,-9613.52 1995.78,-9610.4 1985.92,-9606.52 1985.66,-9613.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().</title>
<g id="a_node128"><a xlink:title="fn GroupSendDerivedKeyPair_ForExpiration( &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;server_params: &amp;ServerSecretParams, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;GroupSendDerivedKeyPair::for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exp...">
<polygon fill="white" stroke="black" points="1716.5,-7785 1419.5,-7785 1419.5,-7749 1716.5,-7749 1716.5,-7785"/>
<text text-anchor="middle" x="1568" y="-7763.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendDerivedKeyPair_ForExpiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="node373" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<g id="a_node373"><a xlink:title=" &#160;&#160;&#160;pub fn for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root: impl AsRef&lt;zkcredential::endorsements::ServerRootKeyPair&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: ReservedByte::de...">
<polygon fill="white" stroke="black" points="2143.5,-7331 2030.5,-7331 2030.5,-7295 2143.5,-7295 2143.5,-7331"/>
<text text-anchor="middle" x="2087" y="-7309.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge594" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.91,-7785C1714.83,-7795.61 1810.87,-7797.42 1866,-7740 1896.82,-7707.9 1855.89,-7372.76 1886,-7340 1919.1,-7303.98 1975.59,-7299.22 2020.11,-7302.34"/>
<polygon fill="blue" stroke="blue" points="2020.02,-7305.84 2030.28,-7303.2 2020.61,-7298.87 2020.02,-7305.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node129"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="1766,-7893 1370,-7893 1370,-7857 1766,-7857 1766,-7893"/>
<text text-anchor="middle" x="1568" y="-7871.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node372" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node372"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="2114,-7439 2060,-7439 2060,-7403 2114,-7403 2114,-7439"/>
<text text-anchor="middle" x="2087" y="-7417.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge617" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.91,-7893C1714.83,-7903.61 1810.87,-7905.42 1866,-7848 1896.82,-7815.9 1855.89,-7480.76 1886,-7448 1927.13,-7403.25 2004.37,-7406.75 2049.88,-7413.66"/>
<polygon fill="blue" stroke="blue" points="2049.47,-7417.14 2059.91,-7415.31 2050.61,-7410.23 2049.47,-7417.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node130"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="1736,-8379 1400,-8379 1400,-8343 1736,-8343 1736,-8379"/>
<text text-anchor="middle" x="1568" y="-8357.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node379" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node379"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="2184.5,-9726 1989.5,-9726 1989.5,-9690 2184.5,-9690 2184.5,-9726"/>
<text text-anchor="middle" x="2087" y="-9704.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge663" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8342.98C1713.12,-8331.7 1811.16,-8328.88 1866,-8388 1914.85,-8440.67 1838.3,-9627.28 1886,-9681 1909.18,-9707.11 1944.63,-9716.99 1979.27,-9719.31"/>
<polygon fill="blue" stroke="blue" points="1979.34,-9722.81 1989.5,-9719.78 1979.67,-9715.82 1979.34,-9722.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().</title>
<g id="a_node131"><a xlink:title="fn CreateCallLinkCredentialRequestContext_NewDeterministic( &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let context = CreateCallLinkCredentialRequestContext::new(room...">
<polygon fill="white" stroke="black" points="1780.5,-6759 1355.5,-6759 1355.5,-6723 1780.5,-6723 1780.5,-6759"/>
<text text-anchor="middle" x="1568" y="-6737.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_NewDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="node358" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<g id="a_node358"><a xlink:title=" &#160;&#160;&#160;pub fn new(room_id: &amp;[u8], randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;poksho::ShoHmacSha256::new(b&#39; 20230413_Signal_CreateCallLinkCredentialRequest&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.ab...">
<polygon fill="white" stroke="black" points="2566,-5285 2512,-5285 2512,-5249 2566,-5249 2566,-5285"/>
<text text-anchor="middle" x="2539" y="-5263.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge676" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.04,-6759.05C1713.39,-6770.27 1811.2,-6772.98 1866,-6714 1909.72,-6666.95 1846.94,-5608.99 1886,-5558 1999.07,-5410.37 2166.49,-5582.77 2288,-5442 2331.37,-5391.75 2260.66,-5340.52 2308,-5294 2359.24,-5243.65 2451.01,-5250.43 2501.76,-5259.12"/>
<polygon fill="blue" stroke="blue" points="2501.17,-5262.57 2511.64,-5260.93 2502.43,-5255.69 2501.17,-5262.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node132"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="1812,-8703 1324,-8703 1324,-8667 1812,-8667 1812,-8703"/>
<text text-anchor="middle" x="1568" y="-8681.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node387" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node387"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2223,-10050 1951,-10050 1951,-10014 2223,-10014 2223,-10050"/>
<text text-anchor="middle" x="2087" y="-10028.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge693" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8666.98C1713.12,-8655.7 1811.16,-8652.88 1866,-8712 1914.85,-8764.67 1838.3,-9951.28 1886,-10005 1900.57,-10021.42 1919.99,-10031.41 1941.02,-10037.15"/>
<polygon fill="blue" stroke="blue" points="1940.23,-10040.56 1950.78,-10039.5 1941.87,-10033.76 1940.23,-10040.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().</title>
<g id="a_node133"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_credential: Serialized&lt;Receipt...">
<polygon fill="white" stroke="black" points="1821,-8487 1315,-8487 1315,-8451 1821,-8451 1821,-8487"/>
<text text-anchor="middle" x="1568" y="-8465.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node381" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node381"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="2228,-9834 1946,-9834 1946,-9798 2228,-9798 2228,-9834"/>
<text text-anchor="middle" x="2087" y="-9812.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge696" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-8450.98C1713.12,-8439.7 1811.16,-8436.88 1866,-8496 1914.85,-8548.67 1838.3,-9735.28 1886,-9789 1899.43,-9804.13 1916.98,-9813.81 1936.1,-9819.72"/>
<polygon fill="blue" stroke="blue" points="1935.35,-9823.15 1945.92,-9822.41 1937.2,-9816.39 1935.35,-9823.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node134"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1728.5,-7029 1407.5,-7029 1407.5,-6993 1728.5,-6993 1728.5,-7029"/>
<text text-anchor="middle" x="1568" y="-7007.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node347" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node347"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="2121.5,-6272 2052.5,-6272 2052.5,-6236 2121.5,-6236 2121.5,-6272"/>
<text text-anchor="middle" x="2087" y="-6250.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge728" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.55,-7029.02C1713.76,-7040.05 1811.05,-7042.48 1866,-6984 1919.51,-6927.05 1833.74,-6339.1 1886,-6281 1924.56,-6238.13 1996.18,-6239.22 2042.43,-6245.47"/>
<polygon fill="blue" stroke="blue" points="2042.06,-6248.95 2052.47,-6246.95 2043.09,-6242.02 2042.06,-6248.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node135"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="1779.5,-6705 1356.5,-6705 1356.5,-6669 1779.5,-6669 1779.5,-6705"/>
<text text-anchor="middle" x="1568" y="-6683.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node355" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node355"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="2572,-5231 2506,-5231 2506,-5195 2572,-5195 2572,-5231"/>
<text text-anchor="middle" x="2539" y="-5209.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge758" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.72,-6705.01C1713.1,-6716.28 1811.13,-6719.1 1866,-6660 1912.05,-6610.4 1840.04,-5491.68 1886,-5442 1946.93,-5376.13 2223.7,-5466.58 2288,-5404 2340.62,-5352.79 2255.96,-5291.81 2308,-5240 2357.02,-5191.2 2444.02,-5195.8 2495.82,-5204.06"/>
<polygon fill="blue" stroke="blue" points="2495.24,-5207.51 2505.69,-5205.75 2496.42,-5200.61 2495.24,-5207.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().</title>
<g id="a_node136"><a xlink:title="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time:...">
<polygon fill="white" stroke="black" points="1804.5,-6921 1331.5,-6921 1331.5,-6885 1804.5,-6885 1804.5,-6921"/>
<text text-anchor="middle" x="1568" y="-6899.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node334" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node334"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="2151,-6135 2023,-6135 2023,-6099 2151,-6099 2151,-6135"/>
<text text-anchor="middle" x="2087" y="-6113.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge779" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.55,-6921.02C1713.76,-6932.05 1811.05,-6934.49 1866,-6876 1919.73,-6818.81 1837.27,-6231.51 1886,-6170 1915.7,-6132.52 1968.6,-6119.69 2012.53,-6116"/>
<polygon fill="blue" stroke="blue" points="2012.89,-6119.49 2022.62,-6115.3 2012.4,-6112.5 2012.89,-6119.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().</title>
<g id="a_node137"><a xlink:title="fn BackupAuthCredentialRequestContext_New(backup_key: &amp;[u8; 32], uuid: Uuid) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let backup_key: libsignal_account_keys::BackupKey = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;libsignal_account_keys::BackupKey(*backup_key)...">
<polygon fill="white" stroke="black" points="1727,-7461 1409,-7461 1409,-7425 1727,-7425 1727,-7461"/>
<text text-anchor="middle" x="1568" y="-7439.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="node349" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<g id="a_node349"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;const VERSION: u8&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_key: &amp;libsignal_account_keys::BackupKey&lt;VERSION&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// derive the backup&#45;id (blinded in the is...">
<polygon fill="white" stroke="black" points="2566,-6394 2512,-6394 2512,-6358 2566,-6358 2566,-6394"/>
<text text-anchor="middle" x="2539" y="-6372.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge783" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.11,-7461.03C1714.22,-7471.91 1811.02,-7474.1 1866,-7416 1909.02,-7370.54 1843.62,-6899.07 1886,-6853 2007.82,-6720.58 2165.21,-6936.53 2288,-6805 2318.29,-6772.55 2277.89,-6438.61 2308,-6406 2357.07,-6352.86 2450.51,-6359.52 2501.9,-6368.23"/>
<polygon fill="blue" stroke="blue" points="2501.43,-6371.7 2511.9,-6370.04 2502.68,-6364.81 2501.43,-6371.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node138"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="1704,-6651 1432,-6651 1432,-6615 1704,-6615 1704,-6651"/>
<text text-anchor="middle" x="1568" y="-6629.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node359" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node359"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="2588,-5148 2490,-5148 2490,-5112 2588,-5112 2588,-5148"/>
<text text-anchor="middle" x="2539" y="-5126.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge818" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.72,-6651.01C1713.09,-6662.27 1811.13,-6665.09 1866,-6606 1911.45,-6557.06 1840.64,-5453.02 1886,-5404 1946.94,-5338.14 2224.09,-5428.98 2288,-5366 2317.14,-5337.29 2280.82,-5213.58 2308,-5183 2350.49,-5135.19 2426.68,-5125.98 2479.67,-5126.07"/>
<polygon fill="blue" stroke="blue" points="2479.89,-5129.57 2489.94,-5126.21 2479.99,-5122.58 2479.89,-5129.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().</title>
<g id="a_node139"><a xlink:title="fn ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serialized&lt;Gr...">
<polygon fill="white" stroke="black" points="1838,-8163 1298,-8163 1298,-8127 1838,-8127 1838,-8163"/>
<text text-anchor="middle" x="1568" y="-8141.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="node327" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<g id="a_node327"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AnyAuthCredentialPresentat...">
<polygon fill="white" stroke="black" points="2121.5,-7923 2052.5,-7923 2052.5,-7887 2121.5,-7887 2121.5,-7923"/>
<text text-anchor="middle" x="2087" y="-7901.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="edge870" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1838.34,-8128.97C1847.81,-8125.74 1857.06,-8122.1 1866,-8118 1957.93,-8075.84 2034.72,-7978.72 2068.11,-7931.6"/>
<polygon fill="blue" stroke="blue" points="2071.16,-7933.34 2074.01,-7923.14 2065.42,-7929.34 2071.16,-7933.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node140"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="1612.5,-3362 1523.5,-3362 1523.5,-3326 1612.5,-3326 1612.5,-3362"/>
<text text-anchor="middle" x="1568" y="-3340.3" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="2162,-3386 2012,-3386 2012,-3350 2162,-3350 2162,-3386"/>
<text text-anchor="middle" x="2087" y="-3364.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1612.63,-3346.03C1698.45,-3350.01 1890.47,-3358.92 2001.79,-3364.09"/>
<polygon fill="blue" stroke="blue" points="2001.82,-3367.6 2011.97,-3364.56 2002.14,-3360.6 2001.82,-3367.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1612.58,-3343.46C1673.69,-3342.73 1788.31,-3341.46 1886,-3341 2064.66,-3340.15 2123.78,-3270.62 2288,-3341 2299.85,-3346.08 2296.47,-3356.24 2308,-3362 2356.42,-3386.19 2417.52,-3392.4 2464.57,-3392.86"/>
<polygon fill="blue" stroke="blue" points="2464.69,-3396.36 2474.69,-3392.87 2464.69,-3389.36 2464.69,-3396.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node141"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1152,-3362 1077,-3362 1077,-3326 1152,-3326 1152,-3362"/>
<text text-anchor="middle" x="1114.5" y="-3340.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1152.07,-3344C1231.49,-3344 1420.08,-3344 1513.15,-3344"/>
<polygon fill="blue" stroke="blue" points="1513.21,-3347.5 1523.21,-3344 1513.21,-3340.5 1513.21,-3347.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node142"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="2114,-1554 2060,-1554 2060,-1518 2114,-1518 2114,-1554"/>
<text text-anchor="middle" x="2087" y="-1532.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2114.03,-1534.54C2157.22,-1533.66 2243.36,-1538.81 2288,-1589 2526.93,-1857.62 2537.88,-3102.33 2538.06,-3306.6"/>
<polygon fill="blue" stroke="blue" points="2534.56,-3306.81 2538.06,-3316.81 2541.56,-3306.81 2534.56,-3306.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2114.08,-1537.76C2158.58,-1542.32 2248.2,-1558.67 2288,-1617 2315.32,-1657.04 2275.58,-3325.96 2308,-3362 2346.26,-3404.52 2413.03,-3408.12 2464.8,-3402.92"/>
<polygon fill="blue" stroke="blue" points="2465.4,-3406.38 2474.94,-3401.78 2464.61,-3399.42 2465.4,-3406.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="3156,-3373 2840,-3373 2840,-3337 3156,-3337 3156,-3373"/>
<text text-anchor="middle" x="2998" y="-3351.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node151"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="3509,-3530 3359,-3530 3359,-3494 3509,-3494 3509,-3530"/>
<text text-anchor="middle" x="3434" y="-3508.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3126.47,-3373.05C3150.55,-3378.04 3175.29,-3384.27 3198,-3392 3271.39,-3416.97 3350.43,-3461.36 3395.59,-3488.59"/>
<polygon fill="blue" stroke="blue" points="3393.8,-3491.59 3404.16,-3493.79 3397.43,-3485.61 3393.8,-3491.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2162.06,-3362.57C2242.25,-3356.69 2369.92,-3347.33 2453.86,-3341.17"/>
<polygon fill="blue" stroke="blue" points="2454.15,-3344.66 2463.87,-3340.44 2453.64,-3337.68 2454.15,-3344.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="3144.5,-3437 2851.5,-3437 2851.5,-3401 3144.5,-3401 3144.5,-3437"/>
<text text-anchor="middle" x="2998" y="-3415.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="3498,-3584 3370,-3584 3370,-3548 3498,-3548 3498,-3584"/>
<text text-anchor="middle" x="3434" y="-3562.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3109.54,-3437.05C3140.81,-3446.4 3173.07,-3460.55 3198,-3482 3219.4,-3500.41 3203.06,-3522.56 3226,-3539 3264.31,-3566.47 3317.13,-3572.99 3359.83,-3572.77"/>
<polygon fill="blue" stroke="blue" points="3359.95,-3576.26 3369.89,-3572.59 3359.83,-3569.26 3359.95,-3576.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge612" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2614.19,-3338.25C2672.37,-3340.79 2755.61,-3344.44 2829.61,-3347.67"/>
<polygon fill="blue" stroke="blue" points="2829.85,-3351.19 2839.99,-3348.13 2830.15,-3344.19 2829.85,-3351.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge675" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2603.06,-3393.14C2664.23,-3397.16 2759.49,-3403.41 2841.02,-3408.76"/>
<polygon fill="blue" stroke="blue" points="2841.19,-3412.28 2851.4,-3409.44 2841.65,-3405.29 2841.19,-3412.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node148"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="2169,-3442 2005,-3442 2005,-3406 2169,-3406 2169,-3442"/>
<text text-anchor="middle" x="2087" y="-3420.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge709" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2169.1,-3424.86C2344.05,-3426.46 2743.33,-3428.68 2770,-3416 2782.54,-3410.04 2778,-3398.98 2790,-3392 2802.5,-3384.73 2816.09,-3378.83 2830.13,-3374.04"/>
<polygon fill="blue" stroke="blue" points="2831.46,-3377.29 2839.92,-3370.9 2829.32,-3370.63 2831.46,-3377.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge708" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2169.22,-3427.2C2210.73,-3428.68 2262.05,-3430.27 2308,-3431 2513.31,-3434.27 2564.74,-3436.42 2770,-3431 2793.04,-3430.39 2817.39,-3429.44 2841.24,-3428.32"/>
<polygon fill="blue" stroke="blue" points="2841.6,-3431.81 2851.42,-3427.84 2841.27,-3424.82 2841.6,-3431.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge710" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2169.11,-3427.76C2207.91,-3425.87 2253.34,-3417.96 2288,-3395 2302.3,-3385.53 2293.57,-3371.27 2308,-3362 2350.77,-3334.5 2407.41,-3327.58 2453.79,-3327.62"/>
<polygon fill="blue" stroke="blue" points="2453.78,-3331.12 2463.82,-3327.74 2453.86,-3324.12 2453.78,-3331.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge711" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2169.23,-3417.68C2253.35,-3411.14 2383.61,-3401.01 2464.69,-3394.7"/>
<polygon fill="blue" stroke="blue" points="2465.11,-3398.18 2474.81,-3393.91 2464.57,-3391.2 2465.11,-3398.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node149"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="3055.5,-3584 2940.5,-3584 2940.5,-3548 3055.5,-3548 3055.5,-3584"/>
<text text-anchor="middle" x="2998" y="-3562.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3055.74,-3566C3133.68,-3566 3273.94,-3566 3359.73,-3566"/>
<polygon fill="blue" stroke="blue" points="3359.91,-3569.5 3369.91,-3566 3359.91,-3562.5 3359.91,-3569.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node150"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3089.5,-3530 2906.5,-3530 2906.5,-3494 3089.5,-3494 3089.5,-3530"/>
<text text-anchor="middle" x="2998" y="-3508.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3089.72,-3512C3166.02,-3512 3274.27,-3512 3348.7,-3512"/>
<polygon fill="blue" stroke="blue" points="3348.97,-3515.5 3358.97,-3512 3348.97,-3508.5 3348.97,-3515.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3089.72,-3523.29C3169.82,-3533.25 3285.12,-3547.6 3359.56,-3556.86"/>
<polygon fill="blue" stroke="blue" points="3359.42,-3560.37 3369.78,-3558.13 3360.29,-3553.43 3359.42,-3560.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge797" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M3509.1,-3499.74C3554.48,-3496.85 3609.83,-3502.5 3642,-3539 3715.04,-3621.9 3596.78,-11411.26 3670,-11494 3709,-11538.08 3780.78,-11538.21 3830.38,-11531.74"/>
<polygon fill="blue" stroke="blue" points="3830.9,-11535.2 3840.3,-11530.32 3829.91,-11528.27 3830.9,-11535.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge825" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M3498.42,-3575.19C3546.81,-3585.89 3610.37,-3608.73 3642,-3657 3701.66,-3748.04 3597.87,-11412.49 3670,-11494 3709,-11538.08 3780.78,-11538.21 3830.38,-11531.74"/>
<polygon fill="blue" stroke="blue" points="3830.9,-11535.2 3840.3,-11530.32 3829.91,-11528.27 3830.9,-11535.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<g id="a_node153"><a xlink:title="fn verify_tree_head_signature( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;head: &amp;SingleSignatureTreeHead, &#160;&#160;&#160;&#160;root: &amp;[u8; 32], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let raw = marshal_tree_head_t...">
<polygon fill="white" stroke="black" points="1669.5,-3719 1466.5,-3719 1466.5,-3683 1669.5,-3683 1669.5,-3719"/>
<text text-anchor="middle" x="1568" y="-3697.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_tree_head_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge674" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="blue" d="M1656.99,-3719.04C1771.62,-3742.54 1966.97,-3782.59 2048.51,-3799.31"/>
<polygon fill="blue" stroke="blue" points="2048.29,-3802.84 2058.79,-3801.42 2049.7,-3795.98 2048.29,-3802.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<g id="a_node154"><a xlink:title="fn verify_full_tree_head( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;fth: &amp;FullTreeHead, &#160;&#160;&#160;&#160;root: [u8; 32], &#160;&#160;&#160;&#160;last_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;&#160;last_distinguished_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1194,-3719 1035,-3719 1035,-3683 1194,-3683 1194,-3719"/>
<text text-anchor="middle" x="1114.5" y="-3697.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_full_tree_head</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="edge694" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1194.15,-3701C1266.59,-3701 1374.83,-3701 1456.06,-3701"/>
<polygon fill="blue" stroke="blue" points="1456.32,-3704.5 1466.32,-3701 1456.32,-3697.5 1456.32,-3704.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;fn valid_account_data() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::AccountData::test_data().try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(AccountData::from_proto_test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1189,-10075 1040,-10075 1040,-10039 1189,-10039 1189,-10075"/>
<text text-anchor="middle" x="1114.5" y="-10053.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(crate) fn from_proto_test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: FAKE_PROFILE_KEY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Some(UsernameData { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Use...">
<polygon fill="white" stroke="black" points="1649,-10075 1487,-10075 1487,-10039 1649,-10039 1649,-10075"/>
<text text-anchor="middle" x="1568" y="-10053.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_proto_test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1189.05,-10057C1267.56,-10057 1392.06,-10057 1476.53,-10057"/>
<polygon fill="blue" stroke="blue" points="1476.63,-10060.5 1486.63,-10057 1476.63,-10053.5 1476.63,-10060.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;fn try_from( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(username, username_link): (String, Option&lt;proto::account_data::UsernameLink&gt;), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;username)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1152,-10021 1077,-10021 1077,-9985 1152,-9985 1152,-10021"/>
<text text-anchor="middle" x="1114.5" y="-9999.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1152.34,-10001.48C1296.23,-9995.91 1814.99,-9979.49 1866,-10030 1900.46,-10064.12 1853.26,-10430.23 1886,-10466 1927.04,-10510.84 2004.31,-10507.3 2049.85,-10500.37"/>
<polygon fill="blue" stroke="blue" points="2050.59,-10503.79 2059.89,-10498.71 2049.45,-10496.89 2050.59,-10503.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge505" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1649.07,-10046.69C1717.46,-10042.83 1812.94,-10050.12 1866,-10110 1918.55,-10169.3 1832.2,-10407.83 1886,-10466 1927.27,-10510.63 2004.46,-10507.17 2049.92,-10500.3"/>
<polygon fill="blue" stroke="blue" points="2050.64,-10503.73 2059.94,-10498.66 2049.5,-10496.82 2050.64,-10503.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;fn gift_badge(modifier: impl FnOnce(&amp;mut proto::GiftBadge)) &#45;&gt; Result&lt;(), GiftBadgeError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut gift_badge = proto::GiftBadge::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut gift_badge); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;G...">
<polygon fill="white" stroke="black" points="665.5,-5670 576.5,-5670 576.5,-5634 665.5,-5634 665.5,-5670"/>
<text text-anchor="middle" x="621" y="-5648.3" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<g id="a_node160"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation: zkgroup::serialize(&amp;Self::test_data_presentation()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: proto::gift_badge::State:...">
<polygon fill="white" stroke="black" points="1154.5,-5670 1074.5,-5670 1074.5,-5634 1154.5,-5634 1154.5,-5670"/>
<text text-anchor="middle" x="1114.5" y="-5648.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M665.62,-5652C757.08,-5652 968.41,-5652 1064.43,-5652"/>
<polygon fill="blue" stroke="blue" points="1064.46,-5655.5 1074.46,-5652 1064.46,-5648.5 1064.46,-5655.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node159"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="1655,-5670 1481,-5670 1481,-5634 1655,-5634 1655,-5670"/>
<text text-anchor="middle" x="1568" y="-5648.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.29,-5640.73C1723.69,-5637.16 1815.83,-5645.39 1866,-5705 1901.56,-5747.25 1849.55,-9639.51 1886,-9681 1909.05,-9707.23 1944.46,-9717.13 1979.12,-9719.44"/>
<polygon fill="blue" stroke="blue" points="1979.2,-9722.95 1989.35,-9719.91 1979.52,-9715.96 1979.2,-9722.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.29,-5640.72C1723.69,-5637.16 1815.84,-5645.39 1866,-5705 1902.52,-5748.4 1848.57,-9746.38 1886,-9789 1899.35,-9804.2 1916.86,-9813.92 1935.96,-9819.85"/>
<polygon fill="blue" stroke="blue" points="1935.2,-9823.27 1945.77,-9822.54 1937.05,-9816.52 1935.2,-9823.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.29,-5640.73C1723.69,-5637.16 1815.83,-5645.39 1866,-5705 1901.08,-5746.68 1850.05,-9586.08 1886,-9627 1896.53,-9638.98 1909.64,-9647.56 1924.08,-9653.56"/>
<polygon fill="blue" stroke="blue" points="1923.15,-9656.95 1933.74,-9657.14 1925.58,-9650.38 1923.15,-9656.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.29,-5640.72C1723.69,-5637.16 1815.84,-5645.39 1866,-5705 1903,-5748.98 1848.07,-9799.82 1886,-9843 1922.65,-9884.73 1990.59,-9885.13 2037.02,-9879.39"/>
<polygon fill="blue" stroke="blue" points="2037.74,-9882.82 2047.17,-9878 2036.78,-9875.89 2037.74,-9882.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.29,-5640.73C1723.69,-5637.16 1815.83,-5645.39 1866,-5705 1900.57,-5746.07 1850.86,-9529.41 1886,-9570 1910.37,-9598.15 1948.86,-9608.12 1985.59,-9610.15"/>
<polygon fill="blue" stroke="blue" points="1985.78,-9613.66 1995.9,-9610.52 1986.03,-9606.67 1985.78,-9613.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge452" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1154.78,-5652C1224.61,-5652 1372.24,-5652 1470.54,-5652"/>
<polygon fill="blue" stroke="blue" points="1470.79,-5655.5 1480.79,-5652 1470.79,-5648.5 1470.79,-5655.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().</title>
<g id="a_node161"><a xlink:title=" &#160;&#160;&#160;fn valid_gift_badge() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::GiftBadge::test_data().try_into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GiftBadge::Valid { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential_presentation: proto::GiftBadg...">
<polygon fill="white" stroke="black" points="685.5,-5616 556.5,-5616 556.5,-5580 685.5,-5580 685.5,-5616"/>
<text text-anchor="middle" x="621" y="-5594.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge630" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M685.86,-5599.95C798.33,-5603.57 1039.05,-5612.16 1242,-5625 1318.97,-5629.87 1406.04,-5637.2 1470.67,-5643"/>
<polygon fill="blue" stroke="blue" points="1470.58,-5646.5 1480.85,-5643.91 1471.2,-5639.53 1470.58,-5646.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge629" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M685.54,-5601.65C751.92,-5605.83 859,-5613.6 951,-5625 989.16,-5629.73 1032.06,-5636.94 1064.19,-5642.72"/>
<polygon fill="blue" stroke="blue" points="1063.76,-5646.2 1074.23,-5644.54 1065.01,-5639.31 1063.76,-5646.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<g id="a_node162"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;ContactData, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profileKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1620.5,-9938 1515.5,-9938 1515.5,-9902 1620.5,-9902 1620.5,-9938"/>
<text text-anchor="middle" x="1568" y="-9916.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge573" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1620.71,-9911.88C1688.41,-9904.53 1805.57,-9903.73 1866,-9973 1902.04,-10014.31 1849.09,-10425.46 1886,-10466 1926.92,-10510.95 2004.23,-10507.37 2049.81,-10500.4"/>
<polygon fill="blue" stroke="blue" points="2050.57,-10503.82 2059.86,-10498.73 2049.42,-10496.92 2050.57,-10503.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;Destination&lt;R&gt;, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1167,-9938 1062,-9938 1062,-9902 1167,-9902 1167,-9938"/>
<text text-anchor="middle" x="1114.5" y="-9916.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="edge733" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1167.29,-9920C1251.04,-9920 1415.84,-9920 1505.45,-9920"/>
<polygon fill="blue" stroke="blue" points="1505.46,-9923.5 1515.46,-9920 1505.46,-9916.5 1505.46,-9923.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().</title>
<g id="a_node164"><a xlink:title=" &#160;&#160;&#160;fn can_serialize() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = Backup { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;meta: BackupMeta { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: 1, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_time: Timestamp::test_value(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;purpose: crate::...">
<polygon fill="white" stroke="black" points="1167,-10158 1062,-10158 1062,-10122 1167,-10122 1167,-10158"/>
<text text-anchor="middle" x="1114.5" y="-10136.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_serialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1167.32,-10129.74C1197.29,-10123.85 1235.75,-10116.38 1270,-10110 1339.36,-10097.08 1417.96,-10083.08 1476.87,-10072.72"/>
<polygon fill="blue" stroke="blue" points="1477.65,-10076.13 1486.89,-10070.96 1476.44,-10069.24 1477.65,-10076.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node165"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="1599,-5533 1537,-5533 1537,-5497 1599,-5497 1599,-5533"/>
<text text-anchor="middle" x="1568" y="-5511.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1599.4,-5509.42C1660.92,-5500.11 1799.9,-5489.45 1866,-5568 1902.78,-5611.71 1848.3,-9638.08 1886,-9681 1909.04,-9707.24 1944.46,-9717.14 1979.12,-9719.44"/>
<polygon fill="blue" stroke="blue" points="1979.2,-9722.95 1989.35,-9719.91 1979.52,-9715.96 1979.2,-9722.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1599.4,-5509.42C1660.92,-5500.11 1799.91,-5489.45 1866,-5568 1903.74,-5612.86 1847.31,-9744.95 1886,-9789 1899.35,-9804.2 1916.85,-9813.92 1935.96,-9819.85"/>
<polygon fill="blue" stroke="blue" points="1935.2,-9823.27 1945.77,-9822.54 1937.05,-9816.52 1935.2,-9823.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1599.4,-5509.43C1660.92,-5500.11 1799.9,-5489.45 1866,-5568 1902.3,-5611.13 1848.79,-9584.64 1886,-9627 1896.53,-9638.98 1909.64,-9647.56 1924.07,-9653.56"/>
<polygon fill="blue" stroke="blue" points="1923.15,-9656.95 1933.74,-9657.14 1925.58,-9650.39 1923.15,-9656.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1599.41,-5509.42C1660.92,-5500.11 1799.91,-5489.45 1866,-5568 1904.23,-5613.43 1846.82,-9798.39 1886,-9843 1922.65,-9884.73 1990.59,-9885.13 2037.02,-9879.39"/>
<polygon fill="blue" stroke="blue" points="2037.74,-9882.83 2047.17,-9878 2036.78,-9875.89 2037.74,-9882.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1599.4,-5509.43C1660.92,-5500.11 1799.9,-5489.46 1866,-5568 1901.79,-5610.53 1849.62,-9527.97 1886,-9570 1910.36,-9598.15 1948.86,-9608.13 1985.59,-9610.16"/>
<polygon fill="blue" stroke="blue" points="1985.77,-9613.67 1995.89,-9610.53 1986.03,-9606.67 1985.77,-9613.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node166"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="652,-5533 590,-5533 590,-5497 652,-5497 652,-5533"/>
<text text-anchor="middle" x="621" y="-5511.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chatId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authorId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dateSent: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expireStartDate: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiresInMs:...">
<polygon fill="white" stroke="black" points="1145.5,-5533 1083.5,-5533 1083.5,-5497 1145.5,-5497 1145.5,-5533"/>
<text text-anchor="middle" x="1114.5" y="-5511.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge681" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M652.01,-5515C736.58,-5515 976.98,-5515 1073.08,-5515"/>
<polygon fill="blue" stroke="blue" points="1073.26,-5518.5 1083.26,-5515 1073.26,-5511.5 1073.26,-5518.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge695" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1145.83,-5515C1224.86,-5515 1437.23,-5515 1526.54,-5515"/>
<polygon fill="blue" stroke="blue" points="1526.81,-5518.5 1536.81,-5515 1526.81,-5511.5 1526.81,-5518.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node168"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1595,-9855 1541,-9855 1541,-9819 1595,-9819 1595,-9855"/>
<text text-anchor="middle" x="1568" y="-9833.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge689" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1595.12,-9832.21C1653.98,-9823.09 1797.19,-9810.67 1866,-9890 1907.96,-9938.38 1843.03,-10418.52 1886,-10466 1926.79,-10511.07 2004.15,-10507.45 2049.77,-10500.44"/>
<polygon fill="blue" stroke="blue" points="2050.54,-10503.86 2059.83,-10498.76 2049.39,-10496.95 2050.54,-10503.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge688" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1595.42,-9832.27C1654.26,-9823.42 1796.36,-9811.75 1866,-9890 1914.99,-9945.05 1835.85,-10167.01 1886,-10221 1899.15,-10235.16 1915.91,-10244.47 1934.12,-10250.36"/>
<polygon fill="blue" stroke="blue" points="1933.18,-10253.73 1943.76,-10253.14 1935.12,-10247.01 1933.18,-10253.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge690" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1595.03,-9832.29C1653.69,-9823.35 1796.51,-9811.26 1866,-9890 1922.69,-9954.24 1827.96,-10211.98 1886,-10275 1893.37,-10283.01 1901.91,-10289.47 1911.2,-10294.64"/>
<polygon fill="blue" stroke="blue" points="1909.83,-10297.87 1920.34,-10299.22 1912.96,-10291.61 1909.83,-10297.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node169"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="1659,-9635 1477,-9635 1477,-9599 1659,-9599 1659,-9635"/>
<text text-anchor="middle" x="1568" y="-9613.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.51,-9635.04C1722.63,-9643.5 1812.91,-9641.82 1866,-9587 1911.09,-9540.44 1844.73,-9345.98 1886,-9296 1915.64,-9260.1 1966.53,-9246.96 2009.56,-9242.75"/>
<polygon fill="blue" stroke="blue" points="2010.07,-9246.22 2019.74,-9241.9 2009.49,-9239.24 2010.07,-9246.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.12,-9598.96C1714.24,-9588.07 1811.04,-9585.87 1866,-9644 1910.07,-9690.61 1842.95,-10173.44 1886,-10221 1899.06,-10235.43 1915.88,-10244.87 1934.2,-10250.81"/>
<polygon fill="blue" stroke="blue" points="1933.33,-10254.2 1943.91,-10253.6 1935.27,-10247.47 1933.33,-10254.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.83,-9598.97C1714,-9588.02 1811.04,-9585.7 1866,-9644 1914.12,-9695.04 1839.01,-10222.92 1886,-10275 1893.29,-10283.08 1901.76,-10289.6 1911.01,-10294.81"/>
<polygon fill="blue" stroke="blue" points="1909.61,-10298.03 1920.11,-10299.42 1912.77,-10291.78 1909.61,-10298.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.5,-9598.97C1715.33,-9588.5 1810.89,-9586.91 1866,-9644 1921.8,-9701.81 1831.47,-9945.99 1886,-10005 1900.73,-10020.94 1920.04,-10030.75 1940.85,-10036.45"/>
<polygon fill="blue" stroke="blue" points="1940.3,-10039.92 1950.84,-10038.87 1941.94,-10033.12 1940.3,-10039.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1650.88,-9598.99C1718.03,-9589.47 1810.73,-9589.25 1866,-9644 1897.58,-9675.28 1855.11,-9811.04 1886,-9843 1924.48,-9882.82 1991.68,-9883.76 2037.47,-9878.65"/>
<polygon fill="blue" stroke="blue" points="2037.98,-9882.12 2047.47,-9877.41 2037.11,-9875.17 2037.98,-9882.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node170"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="1671.5,-9689 1464.5,-9689 1464.5,-9653 1671.5,-9653 1671.5,-9689"/>
<text text-anchor="middle" x="1568" y="-9667.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge732" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1671.72,-9659.59C1737.49,-9658.5 1819.03,-9669.93 1866,-9724 1906.18,-9770.25 1844.85,-10229.61 1886,-10275 1893.31,-10283.07 1901.79,-10289.57 1911.06,-10294.78"/>
<polygon fill="blue" stroke="blue" points="1909.66,-10297.99 1920.16,-10299.38 1912.82,-10291.74 1909.66,-10297.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge731" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1671.63,-9661.65C1736.09,-9661.71 1816.16,-9673.66 1866,-9724 1903.73,-9762.11 1847.47,-9805.7 1886,-9843 1925.47,-9881.21 1991.61,-9882.75 2036.95,-9878.19"/>
<polygon fill="blue" stroke="blue" points="2037.6,-9881.64 2047.14,-9877.04 2036.81,-9874.69 2037.6,-9881.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node171"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="2131.5,-11701 2042.5,-11701 2042.5,-11665 2131.5,-11665 2131.5,-11701"/>
<text text-anchor="middle" x="2087" y="-11679.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node260"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="2576,-11838 2502,-11838 2502,-11802 2576,-11802 2576,-11838"/>
<text text-anchor="middle" x="2539" y="-11816.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2131.82,-11678.7C2174.96,-11676.67 2241.05,-11679.69 2288,-11710 2302.09,-11719.1 2294.85,-11731.59 2308,-11742 2362.32,-11785 2441.66,-11804.93 2491.53,-11813.7"/>
<polygon fill="blue" stroke="blue" points="2491.26,-11817.2 2501.7,-11815.4 2492.42,-11810.3 2491.26,-11817.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node268"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3025,-11838 2971,-11838 2971,-11802 3025,-11802 3025,-11838"/>
<text text-anchor="middle" x="2998" y="-11816.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2131.73,-11688.65C2172.27,-11693.95 2234.25,-11702.2 2288,-11710 2546.32,-11747.47 2856.8,-11797.3 2960.96,-11814.15"/>
<polygon fill="blue" stroke="blue" points="2960.52,-11817.63 2970.95,-11815.77 2961.64,-11810.72 2960.52,-11817.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node172"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="2134,-11755 2040,-11755 2040,-11719 2134,-11719 2134,-11755"/>
<text text-anchor="middle" x="2087" y="-11733.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node265"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="2566,-12020 2512,-12020 2512,-11984 2566,-11984 2566,-12020"/>
<text text-anchor="middle" x="2539" y="-11998.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2134.07,-11735.45C2180.29,-11736.6 2249.91,-11746.24 2288,-11790 2336.5,-11845.72 2257.92,-11900.7 2308,-11955 2357.5,-12008.68 2450.36,-12010.24 2501.65,-12006.35"/>
<polygon fill="blue" stroke="blue" points="2501.97,-12009.83 2511.63,-12005.48 2501.37,-12002.86 2501.97,-12009.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="1701,-11755 1435,-11755 1435,-11719 1701,-11719 1701,-11755"/>
<text text-anchor="middle" x="1568" y="-11733.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1701.13,-11737C1807.36,-11737 1951.34,-11737 2029.63,-11737"/>
<polygon fill="blue" stroke="blue" points="2029.76,-11740.5 2039.76,-11737 2029.76,-11733.5 2029.76,-11740.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node174"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="1699.5,-11701 1436.5,-11701 1436.5,-11665 1699.5,-11665 1699.5,-11701"/>
<text text-anchor="middle" x="1568" y="-11679.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge603" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1699.79,-11683C1807.3,-11683 1954.15,-11683 2032.16,-11683"/>
<polygon fill="blue" stroke="blue" points="2032.24,-11686.5 2042.24,-11683 2032.24,-11679.5 2032.24,-11686.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node175"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1603,-11618 1533,-11618 1533,-11582 1603,-11582 1603,-11618"/>
<text text-anchor="middle" x="1568" y="-11596.3" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.41,-11595.85C1663.99,-11590.54 1790.4,-11588.68 1866,-11653 1886.45,-11670.4 1865.19,-11693.04 1886,-11710 1925.85,-11742.48 1985.73,-11746.59 2029.58,-11744.19"/>
<polygon fill="blue" stroke="blue" points="2030.06,-11747.67 2039.8,-11743.5 2029.59,-11740.68 2030.06,-11747.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node176"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1600.5,-11564 1535.5,-11564 1535.5,-11528 1600.5,-11528 1600.5,-11564"/>
<text text-anchor="middle" x="1568" y="-11542.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge581" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1600.92,-11545.07C1656.09,-11544.29 1772.38,-11546.37 1866,-11573 1934.64,-11592.53 2007.41,-11633.43 2049.67,-11659.49"/>
<polygon fill="blue" stroke="blue" points="2047.88,-11662.49 2058.22,-11664.81 2051.58,-11656.55 2047.88,-11662.49"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().</title>
<g id="a_node177"><a xlink:title="pub fn scalar_from_slice_wide(bytes: &amp;[u8]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="3971.5,-11080 3798.5,-11080 3798.5,-11044 3971.5,-11044 3971.5,-11080"/>
<text text-anchor="middle" x="3885" y="-11058.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M3971.57,-11066.57C4014.01,-11072.69 4063.8,-11086.11 4100,-11115 4184.1,-11182.11 4222.71,-11312.09 4236.15,-11369.08"/>
<polygon fill="blue" stroke="blue" points="4232.74,-11369.87 4238.37,-11378.84 4239.57,-11368.31 4232.74,-11369.87"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node178"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="3025,-10894 2971,-10894 2971,-10858 3025,-10858 3025,-10894"/>
<text text-anchor="middle" x="2998" y="-10872.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node182"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="3462,-10977 3406,-10977 3406,-10941 3462,-10941 3462,-10977"/>
<text text-anchor="middle" x="3434" y="-10955.3" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3025.17,-10881.01C3099.15,-10895.15 3309.98,-10935.47 3395.89,-10951.9"/>
<polygon fill="blue" stroke="blue" points="3395.48,-10955.39 3405.96,-10953.83 3396.8,-10948.51 3395.48,-10955.39"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node179"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="3062,-10840 2934,-10840 2934,-10804 3062,-10804 3062,-10840"/>
<text text-anchor="middle" x="2998" y="-10818.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node181"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="3934,-10977 3836,-10977 3836,-10941 3934,-10941 3934,-10977"/>
<text text-anchor="middle" x="3885" y="-10955.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3062.24,-10830.18C3101.38,-10835.35 3152.65,-10842.29 3198,-10849 3431.04,-10883.49 3707.78,-10929.38 3825.9,-10949.2"/>
<polygon fill="blue" stroke="blue" points="3825.38,-10952.66 3835.82,-10950.86 3826.54,-10945.76 3825.38,-10952.66"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node180"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2596.5,-10840 2481.5,-10840 2481.5,-10804 2596.5,-10804 2596.5,-10840"/>
<text text-anchor="middle" x="2539" y="-10818.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge497" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M2596.95,-10814.08C2647.53,-10807.48 2723.52,-10798.58 2790,-10795 2935.37,-10787.17 3986.67,-10728.62 4100,-10820 4187.94,-10890.91 4229.34,-11262.76 4239.47,-11368.77"/>
<polygon fill="blue" stroke="blue" points="4236.01,-11369.37 4240.43,-11379 4242.98,-11368.72 4236.01,-11369.37"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge496" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2596.96,-10828.73C2692.33,-10840 2881.67,-10862.37 2960.86,-10871.73"/>
<polygon fill="blue" stroke="blue" points="2960.5,-10875.21 2970.84,-10872.91 2961.32,-10868.26 2960.5,-10875.21"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge495" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2596.96,-10822C2679.55,-10822 2832.62,-10822 2923.59,-10822"/>
<polygon fill="blue" stroke="blue" points="2923.82,-10825.5 2933.82,-10822 2923.82,-10818.5 2923.82,-10825.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M3934.26,-10954.3C3981.83,-10952.37 4053.89,-10957.1 4100,-10996 4216.24,-11094.07 4237.36,-11293.84 4241.17,-11368.23"/>
<polygon fill="blue" stroke="blue" points="4237.69,-11368.83 4241.63,-11378.67 4244.68,-11368.53 4237.69,-11368.83"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M3462.13,-10962.19C3505.87,-10967.31 3594.69,-10977.65 3670,-10986 3765.51,-10996.6 4023.68,-10973.6 4100,-11032 4210.2,-11116.33 4234.94,-11298.17 4240.45,-11368.46"/>
<polygon fill="blue" stroke="blue" points="4236.98,-11369.02 4241.17,-11378.75 4243.96,-11368.53 4236.98,-11369.02"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3462.08,-10959C3533.4,-10959 3727.69,-10959 3825.74,-10959"/>
<polygon fill="blue" stroke="blue" points="3825.78,-10962.5 3835.78,-10959 3825.78,-10955.5 3825.78,-10962.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node183"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="3090.5,-10977 2905.5,-10977 2905.5,-10941 3090.5,-10941 3090.5,-10977"/>
<text text-anchor="middle" x="2998" y="-10955.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge600" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M3090.73,-10945.59C3131.98,-10940.2 3181.33,-10934.65 3226,-10932 3613.76,-10909.02 3787.78,-10700.89 4100,-10932 4172.85,-10985.92 4223.4,-11276.59 4237.8,-11368.87"/>
<polygon fill="blue" stroke="blue" points="4234.36,-11369.52 4239.34,-11378.87 4241.28,-11368.45 4234.36,-11369.52"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge601" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3090.73,-10972.41C3131.98,-10977.8 3181.33,-10983.35 3226,-10986 3410.57,-10996.94 3457.4,-10996.27 3642,-10986 3705.05,-10982.49 3776.91,-10973.89 3825.84,-10967.33"/>
<polygon fill="blue" stroke="blue" points="3826.48,-10970.77 3835.92,-10965.96 3825.54,-10963.83 3826.48,-10970.77"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge602" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3090.51,-10959C3185.17,-10959 3328.38,-10959 3395.63,-10959"/>
<polygon fill="blue" stroke="blue" points="3395.75,-10962.5 3405.75,-10959 3395.75,-10955.5 3395.75,-10962.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node184"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="91,-106 16,-106 16,-70 91,-70 91,-106"/>
<text text-anchor="middle" x="53.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node186"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="648,-106 594,-106 594,-70 648,-70 648,-106"/>
<text text-anchor="middle" x="621" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M91.17,-88C193.52,-88 481.49,-88 583.56,-88"/>
<polygon fill="blue" stroke="blue" points="583.68,-91.5 593.68,-88 583.68,-84.5 583.68,-91.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node187"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="648,-52 594,-52 594,-16 648,-16 648,-52"/>
<text text-anchor="middle" x="621" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M91.26,-83.22C136.37,-77.46 215.22,-67.72 283,-61 392.32,-50.17 521.93,-40.74 583.73,-36.46"/>
<polygon fill="blue" stroke="blue" points="584.02,-39.94 593.75,-35.76 583.53,-32.96 584.02,-39.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node188"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="255,-189 127,-189 127,-153 255,-153 255,-189"/>
<text text-anchor="middle" x="191" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M83.9,-106.01C103.74,-118.16 130.12,-134.32 151.61,-147.49"/>
<polygon fill="blue" stroke="blue" points="149.83,-150.5 160.19,-152.74 153.49,-144.53 149.83,-150.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node185"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="707,-2807 535,-2807 535,-2771 707,-2771 707,-2807"/>
<text text-anchor="middle" x="621" y="-2785.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge816" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M707.18,-2792.51C775.25,-2797.7 872,-2810.49 951,-2842 1002.85,-2862.68 1054.72,-2902.18 1085.45,-2928.05"/>
<polygon fill="blue" stroke="blue" points="1083.29,-2930.81 1093.17,-2934.64 1087.83,-2925.49 1083.29,-2930.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge815" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M707.19,-2778.1C781.42,-2773.69 886.95,-2780.49 951,-2842 996.14,-2885.35 934.7,-2935.79 979,-2980 996.41,-2997.37 1021.65,-3005.12 1045.58,-3008.19"/>
<polygon fill="blue" stroke="blue" points="1045.42,-3011.69 1055.73,-3009.23 1046.14,-3004.72 1045.42,-3011.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.15,-82.51C711.62,-70.9 874.23,-51.74 951,-141 1003.88,-202.48 927.98,-2996.97 979,-3060 1002.13,-3088.57 1045.93,-3093.65 1077.27,-3093.15"/>
<polygon fill="blue" stroke="blue" points="1077.51,-3096.64 1087.38,-3092.79 1077.26,-3089.65 1077.51,-3096.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.15,-82.51C711.62,-70.9 874.24,-51.73 951,-141 1004.9,-203.68 926.31,-3053.3 979,-3117 1002.32,-3145.2 1046.09,-3149.27 1077.37,-3148.03"/>
<polygon fill="blue" stroke="blue" points="1077.67,-3151.51 1087.45,-3147.43 1077.26,-3144.53 1077.67,-3151.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.11,-82.55C711.48,-71.01 873.91,-52.02 951,-141 1011.65,-211 920.47,-1736.22 979,-1808 988.46,-1819.6 1001.33,-1827.32 1015.37,-1832.37"/>
<polygon fill="blue" stroke="blue" points="1014.67,-1835.82 1025.26,-1835.45 1016.75,-1829.13 1014.67,-1835.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node257"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="1201.5,-1773 1027.5,-1773 1027.5,-1737 1201.5,-1737 1201.5,-1773"/>
<text text-anchor="middle" x="1114.5" y="-1751.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.1,-82.55C711.47,-71.03 873.87,-52.05 951,-141 1008.77,-207.62 922.52,-1660.28 979,-1728 989.01,-1740 1002.73,-1747.63 1017.59,-1752.33"/>
<polygon fill="blue" stroke="blue" points="1016.93,-1755.77 1027.5,-1755.01 1018.76,-1749.02 1016.93,-1755.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge561" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.28,-26.04C711.32,-8.75 871.77,24.19 951,-61 1007.73,-122.01 926.59,-2995.24 979,-3060 1002.12,-3088.57 1045.93,-3093.66 1077.27,-3093.15"/>
<polygon fill="blue" stroke="blue" points="1077.51,-3096.65 1087.37,-3092.79 1077.26,-3089.65 1077.51,-3096.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge562" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.28,-26.04C711.32,-8.74 871.78,24.2 951,-61 1008.81,-123.17 924.9,-3051.58 979,-3117 1002.32,-3145.2 1046.09,-3149.28 1077.37,-3148.03"/>
<polygon fill="blue" stroke="blue" points="1077.67,-3151.52 1087.45,-3147.43 1077.26,-3144.53 1077.67,-3151.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge563" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.24,-26.07C711.2,-8.86 871.49,23.93 951,-61 1017.34,-131.86 917.69,-1732.75 979,-1808 988.45,-1819.6 1001.32,-1827.33 1015.37,-1832.38"/>
<polygon fill="blue" stroke="blue" points="1014.66,-1835.82 1025.25,-1835.46 1016.75,-1829.14 1014.66,-1835.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge564" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M648.24,-26.08C711.19,-8.87 871.46,23.9 951,-61 1014.33,-128.59 919.7,-1656.84 979,-1728 989.01,-1740.01 1002.72,-1747.63 1017.58,-1752.33"/>
<polygon fill="blue" stroke="blue" points="1016.92,-1755.78 1027.49,-1755.02 1018.75,-1749.02 1016.92,-1755.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node189"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="708,-189 534,-189 534,-153 708,-153 708,-189"/>
<text text-anchor="middle" x="621" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M255.15,-171C325.91,-171 441.44,-171 523.53,-171"/>
<polygon fill="blue" stroke="blue" points="523.62,-174.5 533.62,-171 523.62,-167.5 523.62,-174.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge705" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.01,-168.29C857.41,-165.19 1157.06,-166.64 1242,-224 1751.32,-567.94 1678.61,-872.69 1866,-1458 1874.98,-1486.05 1864.34,-1569.05 1886,-1589 1951.86,-1649.67 2222.35,-1556.1 2288,-1617 2418.24,-1737.83 2520.64,-3093.36 2536,-3306.79"/>
<polygon fill="blue" stroke="blue" points="2532.52,-3307.15 2536.73,-3316.87 2539.5,-3306.65 2532.52,-3307.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge704" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.16,-157.57C784.38,-151.13 892.35,-156.36 951,-224 1008.66,-290.49 923.35,-1739.81 979,-1808 988.46,-1819.6 1001.34,-1827.32 1015.38,-1832.36"/>
<polygon fill="blue" stroke="blue" points="1014.68,-1835.81 1025.27,-1835.44 1016.76,-1829.13 1014.68,-1835.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1157.97,-2934.98C1188.56,-2922.79 1231.12,-2907.43 1270,-2899 1345.1,-2882.72 1432.94,-2876.24 1493.51,-2873.67"/>
<polygon fill="blue" stroke="blue" points="1493.89,-2877.16 1503.75,-2873.27 1493.61,-2870.17 1493.89,-2877.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge582" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1173.01,-3009.39C1298.81,-3014.09 1607.85,-3022.78 1866,-3007 1930.93,-3003.03 2006.05,-2992.53 2049.58,-2985.85"/>
<polygon fill="blue" stroke="blue" points="2050.34,-2989.28 2059.68,-2984.29 2049.26,-2982.36 2050.34,-2989.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge454" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1206.29,-1978.04C1419.82,-1989.79 1960.51,-2046.86 2288,-2324 2659.74,-2638.58 2598.57,-2852.19 2770,-3308 2781.99,-3339.89 2764.88,-3358.98 2790,-3382 2804.74,-3395.5 2822.64,-3404.93 2841.67,-3411.39"/>
<polygon fill="blue" stroke="blue" points="2840.82,-3414.79 2851.41,-3414.42 2842.9,-3408.11 2840.82,-3414.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge530" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1201.39,-1907.63C1473.77,-1870.53 2326.37,-1796.02 2770,-2234 2932.14,-2394.08 2986,-3168.02 2995.42,-3326.58"/>
<polygon fill="blue" stroke="blue" points="2991.94,-3327.14 2996.02,-3336.92 2998.93,-3326.73 2991.94,-3327.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node194"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="735,-1966 507,-1966 507,-1930 735,-1930 735,-1966"/>
<text text-anchor="middle" x="621" y="-1944.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge589" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M735.07,-1954.21C818.79,-1958.81 931.86,-1965.02 1012.55,-1969.45"/>
<polygon fill="blue" stroke="blue" points="1012.55,-1972.96 1022.72,-1970.01 1012.93,-1965.97 1012.55,-1972.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge588" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M735.07,-1941.79C820.56,-1937.09 936.65,-1930.72 1017.62,-1926.27"/>
<polygon fill="blue" stroke="blue" points="1018.02,-1929.75 1027.81,-1925.71 1017.63,-1922.76 1018.02,-1929.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node195"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="1739,-2998 1397,-2998 1397,-2962 1739,-2962 1739,-2998"/>
<text text-anchor="middle" x="1568" y="-2976.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1739,-2980C1850.01,-2980 1985.78,-2980 2049.58,-2980"/>
<polygon fill="blue" stroke="blue" points="2049.91,-2983.5 2059.91,-2980 2049.91,-2976.5 2049.91,-2983.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2114.13,-2986.37C2154.16,-2997 2231.93,-3021.08 2288,-3060 2391.69,-3131.97 2482.88,-3254.51 2520.14,-3308.32"/>
<polygon fill="blue" stroke="blue" points="2517.31,-3310.39 2525.85,-3316.65 2523.08,-3306.43 2517.31,-3310.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node197"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="1684.5,-2944 1451.5,-2944 1451.5,-2908 1684.5,-2908 1684.5,-2944"/>
<text text-anchor="middle" x="1568" y="-2922.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1684.74,-2935.67C1739.7,-2940.48 1806.28,-2946.62 1866,-2953 1930.87,-2959.93 2006.29,-2969.52 2049.85,-2975.21"/>
<polygon fill="blue" stroke="blue" points="2049.58,-2978.7 2059.95,-2976.53 2050.49,-2971.76 2049.58,-2978.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge817" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1632.15,-2855.57C1773.68,-2822.99 2117.24,-2768.3 2288,-2953 2318.89,-2986.41 2276.94,-3328.75 2308,-3362 2346.92,-3403.66 2413.29,-3407.45 2464.76,-3402.55"/>
<polygon fill="blue" stroke="blue" points="2465.27,-3406.01 2474.84,-3401.46 2464.52,-3399.05 2465.27,-3406.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.54,-3212.45C1739.64,-3222.38 2234.13,-3261.23 2288,-3305 2308.84,-3321.93 2287.04,-3345.22 2308,-3362 2351.53,-3396.85 2415.4,-3401.86 2464.8,-3399.14"/>
<polygon fill="blue" stroke="blue" points="2465.05,-3402.63 2474.79,-3398.47 2464.58,-3395.65 2465.05,-3402.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node203"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="2122.5,-3224 2051.5,-3224 2051.5,-3188 2122.5,-3188 2122.5,-3224"/>
<text text-anchor="middle" x="2087" y="-3202.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.72,-3209.73C1694.69,-3209.03 1939.87,-3207.13 2041.22,-3206.35"/>
<polygon fill="blue" stroke="blue" points="2041.45,-3209.84 2051.43,-3206.27 2041.4,-3202.85 2041.45,-3209.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1202.55,-3243.9C1298.05,-3235.02 1447.61,-3221.11 1521.94,-3214.19"/>
<polygon fill="blue" stroke="blue" points="1522.71,-3217.64 1532.34,-3213.22 1522.06,-3210.67 1522.71,-3217.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node201"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="1205.5,-3216 1023.5,-3216 1023.5,-3180 1205.5,-3180 1205.5,-3216"/>
<text text-anchor="middle" x="1114.5" y="-3194.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge536" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1205.51,-3200.39C1301.14,-3202.93 1448.45,-3206.85 1522,-3208.8"/>
<polygon fill="blue" stroke="blue" points="1522.21,-3212.31 1532.3,-3209.08 1522.39,-3205.31 1522.21,-3212.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge599" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1141.84,-3085.06C1271.86,-3061.87 1856.38,-2971.46 2288,-3133 2387.34,-3170.18 2476.99,-3263.52 2516.57,-3309.12"/>
<polygon fill="blue" stroke="blue" points="2513.98,-3311.48 2523.15,-3316.79 2519.3,-3306.92 2513.98,-3311.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge753" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2122.89,-3204.57C2167.81,-3204.76 2245.18,-3212.33 2288,-3258 2320.19,-3292.34 2273.52,-3329.96 2308,-3362 2349.26,-3400.35 2414.24,-3404.81 2464.63,-3400.99"/>
<polygon fill="blue" stroke="blue" points="2465.17,-3404.45 2474.82,-3400.09 2464.55,-3397.48 2465.17,-3404.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge754" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1141.89,-3142.93C1294.37,-3137.03 2063.6,-3111.09 2288,-3179 2377.2,-3205.99 2466.04,-3273.56 2509.87,-3310.29"/>
<polygon fill="blue" stroke="blue" points="2507.62,-3312.98 2517.52,-3316.77 2512.15,-3307.64 2507.62,-3312.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge685" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1203.69,-1850.81C1431.42,-1889.18 2038.76,-2026.15 2288,-2423 2315.75,-2467.19 2272.91,-3323.38 2308,-3362 2346.4,-3404.26 2412.99,-3407.94 2464.67,-3402.84"/>
<polygon fill="blue" stroke="blue" points="2465.24,-3406.3 2474.79,-3401.71 2464.47,-3399.34 2465.24,-3406.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node206"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="2126.5,-1471 2047.5,-1471 2047.5,-1435 2126.5,-1435 2126.5,-1471"/>
<text text-anchor="middle" x="2087" y="-1449.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge741" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.86,-1451.43C2172.63,-1451.89 2247.56,-1460.24 2288,-1506 2537.69,-1788.51 2539.59,-3096.75 2538.26,-3306.57"/>
<polygon fill="blue" stroke="blue" points="2534.76,-3306.74 2538.19,-3316.77 2541.76,-3306.79 2534.76,-3306.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node207"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="725.5,-2890 516.5,-2890 516.5,-2854 725.5,-2854 725.5,-2890"/>
<text text-anchor="middle" x="621" y="-2868.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M725.51,-2874.17C790.76,-2877.09 876.46,-2883.78 951,-2899 987.96,-2906.54 1028.2,-2919.87 1059.39,-2931.4"/>
<polygon fill="blue" stroke="blue" points="1058.17,-2934.68 1068.76,-2934.91 1060.62,-2928.13 1058.17,-2934.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M718.01,-2853.97C789.52,-2846.18 885.69,-2848.32 951,-2899 981.09,-2922.35 950.31,-2954.94 979,-2980 997.28,-2995.97 1022.33,-3003.51 1045.86,-3006.79"/>
<polygon fill="blue" stroke="blue" points="1045.49,-3010.27 1055.83,-3007.95 1046.3,-3003.32 1045.49,-3010.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node208"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="709,-3430 533,-3430 533,-3394 709,-3394 709,-3430"/>
<text text-anchor="middle" x="621" y="-3408.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M709.31,-3417.11C795.3,-3420.07 918.39,-3418.04 951,-3385 1014.38,-3320.8 919.46,-3047.77 979,-2980 995.58,-2961.13 1021.33,-2953.23 1045.87,-2950.45"/>
<polygon fill="blue" stroke="blue" points="1046.26,-2953.93 1055.92,-2949.59 1045.66,-2946.96 1046.26,-2953.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M709.19,-3417C795.1,-3419.87 918.11,-3417.76 951,-3385 1002.36,-3333.85 935.67,-3118.11 979,-3060 995.03,-3038.51 1021.1,-3025.72 1046.04,-3018.12"/>
<polygon fill="blue" stroke="blue" points="1047.2,-3021.43 1055.88,-3015.36 1045.31,-3014.69 1047.2,-3021.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node209"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="731,-3376 511,-3376 511,-3340 731,-3340 731,-3376"/>
<text text-anchor="middle" x="621" y="-3354.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M731.42,-3363.65C815.05,-3365.38 920.94,-3361.12 951,-3331 1006.27,-3275.61 927.04,-3038.51 979,-2980 995.61,-2961.3 1021.23,-2953.39 1045.67,-2950.58"/>
<polygon fill="blue" stroke="blue" points="1046.03,-2954.06 1055.68,-2949.69 1045.41,-2947.09 1046.03,-2954.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.67,-3376.03C770.53,-3389.51 884.66,-3395.95 951,-3331 994.26,-3288.64 942.4,-3108.23 979,-3060 995.14,-3038.73 1021.09,-3025.99 1045.91,-3018.36"/>
<polygon fill="blue" stroke="blue" points="1047.05,-3021.67 1055.71,-3015.58 1045.14,-3014.94 1047.05,-3021.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node210"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="718,-3322 524,-3322 524,-3286 718,-3286 718,-3322"/>
<text text-anchor="middle" x="621" y="-3300.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M718.01,-3309.22C803.25,-3311.59 919.1,-3308.52 951,-3277 998.16,-3230.41 934.63,-3029.25 979,-2980 995.74,-2961.42 1021.39,-2953.54 1045.81,-2950.71"/>
<polygon fill="blue" stroke="blue" points="1046.16,-2954.19 1055.81,-2949.81 1045.54,-2947.22 1046.16,-2954.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M697.42,-3322.05C772.04,-3335 884.47,-3340.51 951,-3277 1021.34,-3209.85 919.23,-3136.71 979,-3060 995.41,-3038.94 1021.41,-3026.23 1046.19,-3018.57"/>
<polygon fill="blue" stroke="blue" points="1047.31,-3021.89 1055.97,-3015.78 1045.39,-3015.16 1047.31,-3021.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node211"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="764,-2944 478,-2944 478,-2908 764,-2908 764,-2944"/>
<text text-anchor="middle" x="621" y="-2922.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.16,-2933.81C856.71,-2938.89 973.26,-2945.3 1045.58,-2949.27"/>
<polygon fill="blue" stroke="blue" points="1045.74,-2952.78 1055.92,-2949.84 1046.12,-2945.79 1045.74,-2952.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.1,-2916.97C824.11,-2918.32 893.29,-2926.91 951,-2953 966.75,-2960.12 963.69,-2971.98 979,-2980 999.4,-2990.69 1023.57,-2997.15 1045.77,-3001.06"/>
<polygon fill="blue" stroke="blue" points="1045.37,-3004.54 1055.8,-3002.69 1046.49,-2997.63 1045.37,-3004.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.1,-2907.97C781.15,-2897.97 884.39,-2897.08 951,-2953 988.65,-2984.61 943.61,-3025.88 979,-3060 1004.96,-3085.03 1046.98,-3090.99 1077.14,-3091.65"/>
<polygon fill="blue" stroke="blue" points="1077.26,-3095.15 1087.27,-3091.69 1077.29,-3088.15 1077.26,-3095.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M700.38,-2907.95C774.56,-2895.88 884.24,-2891.82 951,-2953 1005.52,-3002.96 927.48,-3063.96 979,-3117 1004.16,-3142.9 1046.7,-3147.59 1077.2,-3147.11"/>
<polygon fill="blue" stroke="blue" points="1077.57,-3150.6 1087.44,-3146.75 1077.33,-3143.61 1077.57,-3150.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.03,-2932.47C840.94,-2932.58 925.38,-2926.04 951,-2899 989.53,-2858.33 946.83,-1936.87 979,-1891 988.37,-1877.64 1001.65,-1867.65 1016.26,-1860.18"/>
<polygon fill="blue" stroke="blue" points="1017.93,-1863.26 1025.5,-1855.84 1014.96,-1856.92 1017.93,-1863.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.05,-2932.49C840.97,-2932.61 925.41,-2926.07 951,-2899 992.65,-2854.94 944.24,-1857.68 979,-1808 988.74,-1794.08 1002.74,-1783.81 1018.06,-1776.24"/>
<polygon fill="blue" stroke="blue" points="1019.55,-1779.41 1027.21,-1772.09 1016.66,-1773.03 1019.55,-1779.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node212"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="681.5,-3214 560.5,-3214 560.5,-3178 681.5,-3178 681.5,-3214"/>
<text text-anchor="middle" x="621" y="-3192.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M681.79,-3210.95C755.28,-3225.41 879.06,-3236.39 951,-3169 1012.97,-3110.94 920.51,-3041.56 979,-2980 996.08,-2962.02 1021.52,-2954.2 1045.69,-2951.25"/>
<polygon fill="blue" stroke="blue" points="1046.32,-2954.71 1055.94,-2950.27 1045.65,-2947.74 1046.32,-2954.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M681.63,-3209.89C754.1,-3222.98 875.97,-3232.27 951,-3169 989.24,-3136.75 945.89,-3097.49 979,-3060 996.3,-3040.41 1021.79,-3027.98 1045.94,-3020.14"/>
<polygon fill="blue" stroke="blue" points="1047.26,-3023.4 1055.82,-3017.15 1045.23,-3016.7 1047.26,-3023.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node213"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="708.5,-3160 533.5,-3160 533.5,-3124 708.5,-3124 708.5,-3160"/>
<text text-anchor="middle" x="621" y="-3138.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.08,-3160.02C776.85,-3171.31 884.13,-3174.13 951,-3115 996.9,-3074.41 935.53,-3023.19 979,-2980 996.44,-2962.67 1021.7,-2954.92 1045.62,-2951.85"/>
<polygon fill="blue" stroke="blue" points="1046.18,-2955.32 1055.76,-2950.81 1045.46,-2948.35 1046.18,-2955.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.5,-3156.65C779.6,-3163.92 879.85,-3162.73 951,-3115 973.78,-3099.72 958.7,-3078.45 979,-3060 997.86,-3042.86 1022.91,-3030.99 1046.27,-3022.89"/>
<polygon fill="blue" stroke="blue" points="1047.41,-3026.2 1055.82,-3019.75 1045.22,-3019.55 1047.41,-3026.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node214"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="696,-3106 546,-3106 546,-3070 696,-3070 696,-3106"/>
<text text-anchor="middle" x="621" y="-3084.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge596" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M696.22,-3103.27C768.84,-3113.73 878.78,-3117.04 951,-3061 981.09,-3037.65 950.31,-3005.06 979,-2980 997.28,-2964.03 1022.33,-2956.49 1045.86,-2953.21"/>
<polygon fill="blue" stroke="blue" points="1046.3,-2956.68 1055.83,-2952.05 1045.49,-2949.73 1046.3,-2956.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge595" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M696.21,-3086.95C763.36,-3084.82 864.67,-3078.62 951,-3061 987.96,-3053.46 1028.2,-3040.13 1059.39,-3028.6"/>
<polygon fill="blue" stroke="blue" points="1060.62,-3031.87 1068.76,-3025.09 1058.17,-3025.32 1060.62,-3031.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node215"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="699,-3268 543,-3268 543,-3232 699,-3232 699,-3268"/>
<text text-anchor="middle" x="621" y="-3246.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge664" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M696.55,-3268.05C771.31,-3281.28 884.59,-3287.26 951,-3223 1029.12,-3147.4 905.4,-3060.01 979,-2980 995.94,-2961.59 1021.61,-2953.74 1046.01,-2950.89"/>
<polygon fill="blue" stroke="blue" points="1046.35,-2954.37 1056,-2949.98 1045.72,-2947.4 1046.35,-2954.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge665" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M699.31,-3267.87C773.5,-3280.06 883.89,-3284.43 951,-3223 1005.22,-3173.37 932.62,-3117.03 979,-3060 995.71,-3039.46 1021.48,-3026.85 1046.02,-3019.12"/>
<polygon fill="blue" stroke="blue" points="1047.08,-3022.45 1055.7,-3016.29 1045.12,-3015.73 1047.08,-3022.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().</title>
<g id="a_node216"><a xlink:title="fn group_no_send_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;let sender_address = ProtocolAddress::new(&#39; +14159999111&#39; .to_owned(), Device...">
<polygon fill="white" stroke="black" points="711,-3484 531,-3484 531,-3448 711,-3448 711,-3484"/>
<text text-anchor="middle" x="621" y="-3462.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_send_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge691" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M693.97,-3484.03C769.11,-3498.09 885.01,-3505.53 951,-3439 1010.47,-3379.04 928.93,-3128.01 979,-3060 994.89,-3038.41 1020.94,-3025.61 1045.9,-3018.02"/>
<polygon fill="blue" stroke="blue" points="1047.07,-3021.33 1055.76,-3015.27 1045.19,-3014.59 1047.07,-3021.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node217"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="703,-2998 539,-2998 539,-2962 703,-2962 703,-2998"/>
<text text-anchor="middle" x="621" y="-2976.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge736" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.16,-2975.54C798.86,-2970.28 956.17,-2961.64 1045.66,-2956.73"/>
<polygon fill="blue" stroke="blue" points="1045.91,-2960.22 1055.7,-2956.18 1045.52,-2953.23 1045.91,-2960.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge738" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.16,-2984.46C798.86,-2989.72 956.17,-2998.36 1045.66,-3003.27"/>
<polygon fill="blue" stroke="blue" points="1045.52,-3006.77 1055.7,-3003.82 1045.91,-2999.78 1045.52,-3006.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge739" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.03,-2966.18C774.26,-2958.49 877.7,-2958.62 951,-3007 973.24,-3021.67 957.83,-3043.83 979,-3060 1007.2,-3081.53 1047.86,-3088.18 1077.08,-3089.97"/>
<polygon fill="blue" stroke="blue" points="1077.14,-3093.48 1087.29,-3090.43 1077.45,-3086.48 1077.14,-3093.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge734" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.19,-2962.57C776.52,-2951.86 883.05,-2949.56 951,-3007 989.53,-3039.57 942.43,-3082.25 979,-3117 1005.02,-3141.73 1047.03,-3146.7 1077.18,-3146.6"/>
<polygon fill="blue" stroke="blue" points="1077.38,-3150.1 1087.3,-3146.38 1077.22,-3143.1 1077.38,-3150.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge735" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.28,-2985.15C789.68,-2988.65 918.31,-2987.56 951,-2953 991.56,-2910.12 945.15,-1939.35 979,-1891 988.36,-1877.64 1001.64,-1867.64 1016.24,-1860.17"/>
<polygon fill="blue" stroke="blue" points="1017.92,-1863.25 1025.48,-1855.83 1014.94,-1856.91 1017.92,-1863.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge737" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.29,-2985.16C789.7,-2988.67 918.34,-2987.59 951,-2953 994.68,-2906.73 942.55,-1860.16 979,-1808 988.73,-1794.07 1002.73,-1783.8 1018.05,-1776.23"/>
<polygon fill="blue" stroke="blue" points="1019.54,-1779.4 1027.2,-1772.08 1016.65,-1773.02 1019.54,-1779.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node218"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="852.5,-3052 389.5,-3052 389.5,-3016 852.5,-3016 852.5,-3052"/>
<text text-anchor="middle" x="621" y="-3030.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge802" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M852.76,-3035.24C886.68,-3029.72 920.45,-3020.81 951,-3007 966.75,-2999.88 963.69,-2988.02 979,-2980 999.4,-2969.31 1023.57,-2962.85 1045.77,-2958.94"/>
<polygon fill="blue" stroke="blue" points="1046.49,-2962.37 1055.8,-2957.31 1045.37,-2955.46 1046.49,-2962.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge801" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M852.64,-3021.33C923.11,-3017.46 995.24,-3013.5 1045.74,-3010.72"/>
<polygon fill="blue" stroke="blue" points="1046.07,-3014.21 1055.86,-3010.17 1045.68,-3007.22 1046.07,-3014.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge804" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M852.83,-3050.16C885.83,-3053.28 919.32,-3056.88 951,-3061 994.72,-3066.68 1044.58,-3076.01 1077.41,-3082.55"/>
<polygon fill="blue" stroke="blue" points="1076.95,-3086.02 1087.44,-3084.56 1078.33,-3079.16 1076.95,-3086.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge805" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M852.6,-3022.89C887.64,-3029.44 921.8,-3041.26 951,-3061 974.05,-3076.59 956.89,-3100.1 979,-3117 1007.14,-3138.51 1047.99,-3144.14 1077.27,-3145.08"/>
<polygon fill="blue" stroke="blue" points="1077.44,-3148.58 1087.49,-3145.24 1077.55,-3141.59 1077.44,-3148.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge800" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M852.79,-3036.85C897.46,-3032.49 935.31,-3023.61 951,-3007 993.59,-2961.92 943.46,-1941.83 979,-1891 988.35,-1877.63 1001.62,-1867.63 1016.23,-1860.16"/>
<polygon fill="blue" stroke="blue" points="1017.9,-1863.24 1025.47,-1855.82 1014.93,-1856.9 1017.9,-1863.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge803" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M852.81,-3036.87C897.48,-3032.51 935.32,-3023.63 951,-3007 996.72,-2958.53 940.86,-1862.64 979,-1808 988.73,-1794.06 1002.72,-1783.79 1018.04,-1776.22"/>
<polygon fill="blue" stroke="blue" points="1019.53,-1779.39 1027.19,-1772.07 1016.63,-1773.02 1019.53,-1779.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node219"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="844.5,-3837 397.5,-3837 397.5,-3801 844.5,-3801 844.5,-3837"/>
<text text-anchor="middle" x="621" y="-3815.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M844.55,-3822.4C892.68,-3818.34 934.23,-3809.46 951,-3792 1002.99,-3737.86 930.24,-3174.07 979,-3117 1002.7,-3089.26 1046.19,-3085.05 1077.31,-3086.15"/>
<polygon fill="blue" stroke="blue" points="1077.16,-3089.64 1087.34,-3086.69 1077.55,-3082.65 1077.16,-3089.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M844.5,-3822.36C892.64,-3818.3 934.2,-3809.43 951,-3792 998.93,-3742.27 934.04,-3223.43 979,-3171 1002.75,-3143.31 1046.23,-3139.09 1077.33,-3140.17"/>
<polygon fill="blue" stroke="blue" points="1077.18,-3143.66 1087.36,-3140.71 1077.56,-3136.67 1077.18,-3143.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M844.86,-3822.7C893,-3818.64 934.46,-3809.69 951,-3792 1023.14,-3714.85 918.92,-1977.87 979,-1891 988.28,-1877.58 1001.52,-1867.56 1016.11,-1860.08"/>
<polygon fill="blue" stroke="blue" points="1017.79,-1863.16 1025.35,-1855.74 1014.81,-1856.82 1017.79,-1863.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M844.87,-3822.7C893.01,-3818.65 934.47,-3809.69 951,-3792 1026.26,-3711.46 916.32,-1898.68 979,-1808 988.72,-1793.93 1002.8,-1783.6 1018.22,-1776.01"/>
<polygon fill="blue" stroke="blue" points="1019.75,-1779.16 1027.43,-1771.85 1016.87,-1772.78 1019.75,-1779.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node220"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="766,-3675 476,-3675 476,-3639 766,-3639 766,-3675"/>
<text text-anchor="middle" x="621" y="-3653.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M766.43,-3663.22C842.53,-3663.09 925.32,-3656.39 951,-3630 1030.62,-3548.17 904.27,-3203.31 979,-3117 1002.88,-3089.42 1046.34,-3085.18 1077.4,-3086.22"/>
<polygon fill="blue" stroke="blue" points="1077.24,-3089.72 1087.41,-3086.75 1077.61,-3082.73 1077.24,-3089.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M766.36,-3663.16C842.44,-3663.01 925.24,-3656.31 951,-3630 1022.5,-3556.99 911.86,-3248.04 979,-3171 1002.97,-3143.5 1046.41,-3139.24 1077.44,-3140.26"/>
<polygon fill="blue" stroke="blue" points="1077.27,-3143.75 1087.44,-3140.78 1077.64,-3136.76 1077.27,-3143.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M766.36,-3663.58C842.72,-3663.6 925.78,-3656.93 951,-3630 1017.04,-3559.47 923.98,-1970.43 979,-1891 988.29,-1877.59 1001.54,-1867.57 1016.13,-1860.09"/>
<polygon fill="blue" stroke="blue" points="1017.8,-1863.17 1025.36,-1855.75 1014.82,-1856.83 1017.8,-1863.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M766.37,-3663.59C842.73,-3663.61 925.79,-3656.94 951,-3630 1020.16,-3556.08 921.39,-1891.24 979,-1808 988.73,-1793.94 1002.81,-1783.61 1018.23,-1776.02"/>
<polygon fill="blue" stroke="blue" points="1019.77,-1779.17 1027.44,-1771.86 1016.89,-1772.79 1019.77,-1779.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node221"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="750,-3945 492,-3945 492,-3909 750,-3909 750,-3945"/>
<text text-anchor="middle" x="621" y="-3923.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.2,-3933.23C830.43,-3934.07 923.6,-3928.42 951,-3900 998.56,-3850.68 935.32,-3336.78 979,-3284 988.79,-3272.17 1002.09,-3264.25 1016.53,-3259.03"/>
<polygon fill="blue" stroke="blue" points="1017.69,-3262.34 1026.16,-3255.98 1015.57,-3255.67 1017.69,-3262.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.29,-3933.31C830.56,-3934.19 923.74,-3928.55 951,-3900 1011.12,-3837.04 922.64,-3183.35 979,-3117 1002.62,-3089.2 1046.13,-3085 1077.27,-3086.11"/>
<polygon fill="blue" stroke="blue" points="1077.13,-3089.61 1087.31,-3086.67 1077.52,-3082.62 1077.13,-3089.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.27,-3933.29C830.52,-3934.16 923.7,-3928.51 951,-3900 1007.06,-3841.45 926.44,-3232.71 979,-3171 1002.66,-3143.23 1046.16,-3139.02 1077.29,-3140.13"/>
<polygon fill="blue" stroke="blue" points="1077.15,-3143.62 1087.32,-3140.68 1077.53,-3136.64 1077.15,-3143.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.05,-3933.5C830.51,-3934.48 924,-3928.9 951,-3900 1027.2,-3818.44 915.54,-1982.83 979,-1891 988.28,-1877.58 1001.51,-1867.55 1016.1,-1860.07"/>
<polygon fill="blue" stroke="blue" points="1017.78,-1863.15 1025.34,-1855.73 1014.8,-1856.81 1017.78,-1863.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.06,-3933.5C830.52,-3934.49 924.01,-3928.9 951,-3900 990.66,-3857.52 945.97,-1855.82 979,-1808 988.72,-1793.93 1002.79,-1783.6 1018.21,-1776"/>
<polygon fill="blue" stroke="blue" points="1019.75,-1779.15 1027.42,-1771.84 1016.86,-1772.77 1019.75,-1779.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node222"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="860.5,-3891 381.5,-3891 381.5,-3855 860.5,-3855 860.5,-3891"/>
<text text-anchor="middle" x="621" y="-3869.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M860.54,-3874.87C901.75,-3870.27 936.14,-3861.52 951,-3846 1007.06,-3787.45 926.44,-3178.71 979,-3117 1002.66,-3089.23 1046.16,-3085.02 1077.29,-3086.13"/>
<polygon fill="blue" stroke="blue" points="1077.15,-3089.62 1087.32,-3086.68 1077.53,-3082.64 1077.15,-3089.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M860.51,-3874.84C901.71,-3870.24 936.11,-3861.5 951,-3846 1002.99,-3791.86 930.24,-3228.07 979,-3171 1002.7,-3143.26 1046.19,-3139.05 1077.31,-3140.15"/>
<polygon fill="blue" stroke="blue" points="1077.16,-3143.64 1087.34,-3140.69 1077.55,-3136.65 1077.16,-3143.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M860.82,-3875.14C902.01,-3870.52 936.33,-3861.7 951,-3846 1025.17,-3766.64 917.23,-1980.35 979,-1891 988.28,-1877.58 1001.52,-1867.56 1016.11,-1860.07"/>
<polygon fill="blue" stroke="blue" points="1017.78,-1863.15 1025.34,-1855.73 1014.8,-1856.82 1017.78,-1863.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M860.83,-3875.15C902.02,-3870.53 936.33,-3861.71 951,-3846 989.65,-3804.63 946.82,-1854.58 979,-1808 988.72,-1793.93 1002.79,-1783.6 1018.21,-1776.01"/>
<polygon fill="blue" stroke="blue" points="1019.75,-1779.15 1027.42,-1771.85 1016.87,-1772.77 1019.75,-1779.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node223"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="685,-3621 557,-3621 557,-3585 685,-3585 685,-3621"/>
<text text-anchor="middle" x="621" y="-3599.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M685.08,-3607.16C770.2,-3611.26 915.31,-3612.44 951,-3576 1022.5,-3502.99 911.86,-3194.04 979,-3117 1002.97,-3089.5 1046.41,-3085.24 1077.44,-3086.26"/>
<polygon fill="blue" stroke="blue" points="1077.27,-3089.75 1087.44,-3086.78 1077.64,-3082.76 1077.27,-3089.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M685.32,-3607.39C770.72,-3611.76 916.17,-3613.26 951,-3576 1025.32,-3496.48 901.49,-1693.41 979,-1617 1014.09,-1582.41 1830.91,-1582.4 1866,-1617 1894.01,-1644.62 1869.39,-2997.34 1886,-3033 1918.48,-3102.74 1994.13,-3155.3 2042.52,-3183.3"/>
<polygon fill="blue" stroke="blue" points="2040.8,-3186.34 2051.22,-3188.24 2044.25,-3180.26 2040.8,-3186.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node224"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="695.5,-3999 546.5,-3999 546.5,-3963 695.5,-3963 695.5,-3999"/>
<text text-anchor="middle" x="621" y="-3977.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge433" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.88,-3985.75C782.06,-3989.51 917.1,-3989.28 951,-3954 1002.62,-3900.27 931.6,-3341.49 979,-3284 988.83,-3272.07 1002.23,-3264.12 1016.77,-3258.9"/>
<polygon fill="blue" stroke="blue" points="1017.98,-3262.19 1026.47,-3255.85 1015.88,-3255.51 1017.98,-3262.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge436" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.55,-3985.78C781.76,-3989.61 917.2,-3989.48 951,-3954 1015.18,-3886.63 918.84,-3187.99 979,-3117 1002.59,-3089.17 1046.11,-3084.98 1077.26,-3086.1"/>
<polygon fill="blue" stroke="blue" points="1077.12,-3089.6 1087.3,-3086.66 1077.51,-3082.61 1077.12,-3089.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge437" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.53,-3985.77C781.73,-3989.58 917.16,-3989.44 951,-3954 1011.12,-3891.04 922.64,-3237.35 979,-3171 1002.62,-3143.2 1046.13,-3139 1077.27,-3140.11"/>
<polygon fill="blue" stroke="blue" points="1077.13,-3143.61 1087.31,-3140.67 1077.52,-3136.62 1077.13,-3143.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge435" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.66,-3985.89C782,-3989.83 917.56,-3989.81 951,-3954 990.12,-3912.11 946.43,-1938.15 979,-1891 988.27,-1877.58 1001.51,-1867.55 1016.1,-1860.07"/>
<polygon fill="blue" stroke="blue" points="1017.77,-1863.15 1025.33,-1855.73 1014.8,-1856.81 1017.77,-1863.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge434" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.67,-3985.89C782,-3989.83 917.56,-3989.82 951,-3954 991.68,-3910.42 945.13,-1857.06 979,-1808 988.71,-1793.93 1002.78,-1783.59 1018.2,-1776"/>
<polygon fill="blue" stroke="blue" points="1019.74,-1779.15 1027.41,-1771.84 1016.86,-1772.77 1019.74,-1779.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node225"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="686.5,-4053 555.5,-4053 555.5,-4017 686.5,-4017 686.5,-4053"/>
<text text-anchor="middle" x="621" y="-4031.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge514" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M686.6,-4051.91C761.69,-4067.24 883.85,-4078 951,-4008 1004.42,-3952.31 927,-3371.02 979,-3314 1018.73,-3270.44 1183.9,-3289.02 1242,-3279 1342.69,-3261.64 1459.64,-3235.27 1522.14,-3220.67"/>
<polygon fill="blue" stroke="blue" points="1523.13,-3224.03 1532.06,-3218.34 1521.53,-3217.22 1523.13,-3224.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge512" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M686.71,-4052.02C761.9,-4067.44 884.16,-4078.3 951,-4008 1019.25,-3936.22 915.04,-3192.63 979,-3117 1002.56,-3089.14 1046.08,-3084.96 1077.24,-3086.09"/>
<polygon fill="blue" stroke="blue" points="1077.11,-3089.59 1087.29,-3086.65 1077.5,-3082.6 1077.11,-3089.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge513" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M686.69,-4051.99C761.85,-4067.4 884.09,-4078.23 951,-4008 1015.18,-3940.63 918.84,-3241.99 979,-3171 1002.59,-3143.17 1046.11,-3138.98 1077.26,-3140.1"/>
<polygon fill="blue" stroke="blue" points="1077.12,-3143.6 1087.3,-3140.66 1077.51,-3136.61 1077.12,-3143.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node226"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="715.5,-3567 526.5,-3567 526.5,-3531 715.5,-3531 715.5,-3567"/>
<text text-anchor="middle" x="621" y="-3545.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge724" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M698.31,-3567.05C773.64,-3579.87 886.61,-3584.79 951,-3519 1013.64,-3455.01 919.88,-3184.26 979,-3117 1003.09,-3089.6 1046.51,-3085.32 1077.5,-3086.31"/>
<polygon fill="blue" stroke="blue" points="1077.32,-3089.8 1087.48,-3086.82 1077.68,-3082.81 1077.32,-3089.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge725" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M715.78,-3553.78C801.73,-3555.89 920.16,-3552.29 951,-3519 1023.95,-3440.25 907.6,-1667.15 979,-1587 1022.38,-1538.3 1204.92,-1553.23 1270,-1549 1534.33,-1531.81 1677.44,-1362.96 1866,-1549 1895.35,-1577.95 1868.61,-2995.62 1886,-3033 1918.46,-3102.75 1994.12,-3155.31 2042.51,-3183.3"/>
<polygon fill="blue" stroke="blue" points="2040.79,-3186.35 2051.22,-3188.24 2044.25,-3180.26 2040.79,-3186.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node227"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="867.5,-3729 374.5,-3729 374.5,-3693 867.5,-3693 867.5,-3729"/>
<text text-anchor="middle" x="621" y="-3707.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge764" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M867.76,-3711.88C905.69,-3707.08 936.95,-3698.52 951,-3684 994.87,-3638.68 937.84,-3164.79 979,-3117 1002.81,-3089.36 1046.28,-3085.13 1077.36,-3086.19"/>
<polygon fill="blue" stroke="blue" points="1077.21,-3089.69 1087.38,-3086.73 1077.58,-3082.7 1077.21,-3089.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge766" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M867.7,-3711.82C905.63,-3707.03 936.91,-3698.48 951,-3684 1030.62,-3602.17 904.27,-3257.31 979,-3171 1002.88,-3143.42 1046.34,-3139.18 1077.4,-3140.22"/>
<polygon fill="blue" stroke="blue" points="1077.24,-3143.72 1087.41,-3140.75 1077.61,-3136.73 1077.24,-3143.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge765" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M867.74,-3712.3C905.82,-3707.49 937.15,-3698.8 951,-3684 1019.07,-3611.26 922.3,-1972.91 979,-1891 988.29,-1877.59 1001.53,-1867.57 1016.12,-1860.08"/>
<polygon fill="blue" stroke="blue" points="1017.8,-1863.16 1025.36,-1855.74 1014.82,-1856.83 1017.8,-1863.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge767" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M867.75,-3712.31C905.83,-3707.49 937.15,-3698.81 951,-3684 1022.2,-3607.87 919.7,-1893.72 979,-1808 988.73,-1793.94 1002.8,-1783.61 1018.22,-1776.02"/>
<polygon fill="blue" stroke="blue" points="1019.76,-1779.16 1027.44,-1771.86 1016.88,-1772.78 1019.76,-1779.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node228"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="748,-3783 494,-3783 494,-3747 748,-3747 748,-3783"/>
<text text-anchor="middle" x="621" y="-3761.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge772" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M748.1,-3771.28C828.85,-3772.28 923.48,-3766.79 951,-3738 1009.24,-3677.08 924.4,-3044.2 979,-2980 995.34,-2960.79 1021.18,-2952.85 1045.87,-2950.15"/>
<polygon fill="blue" stroke="blue" points="1046.3,-2953.62 1055.97,-2949.31 1045.72,-2946.65 1046.3,-2953.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge777" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M748.06,-3771.24C828.79,-3772.22 923.41,-3766.73 951,-3738 1003.22,-3683.61 935.29,-3121.44 979,-3060 994.61,-3038.06 1020.75,-3025.21 1045.85,-3017.67"/>
<polygon fill="blue" stroke="blue" points="1047.06,-3020.97 1055.77,-3014.94 1045.2,-3014.22 1047.06,-3020.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge775" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M748.03,-3771.21C828.74,-3772.17 923.36,-3766.68 951,-3738 998.93,-3688.27 934.04,-3169.43 979,-3117 1002.75,-3089.31 1046.23,-3085.09 1077.33,-3086.17"/>
<polygon fill="blue" stroke="blue" points="1077.18,-3089.66 1087.36,-3086.71 1077.56,-3082.67 1077.18,-3089.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge774" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M748.42,-3771.17C829.02,-3772.1 923.35,-3766.57 951,-3738 994.87,-3692.68 937.84,-3218.79 979,-3171 1002.81,-3143.36 1046.28,-3139.13 1077.36,-3140.19"/>
<polygon fill="blue" stroke="blue" points="1077.21,-3143.69 1087.38,-3140.73 1077.58,-3136.7 1077.21,-3143.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge773" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M748.3,-3771.46C829.13,-3772.55 923.79,-3767.09 951,-3738 1021.1,-3663.05 920.61,-1975.39 979,-1891 988.28,-1877.58 1001.53,-1867.56 1016.12,-1860.08"/>
<polygon fill="blue" stroke="blue" points="1017.79,-1863.16 1025.35,-1855.74 1014.81,-1856.82 1017.79,-1863.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge776" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M748.3,-3771.47C829.14,-3772.56 923.8,-3767.1 951,-3738 1024.23,-3659.66 918.01,-1896.2 979,-1808 988.72,-1793.94 1002.8,-1783.6 1018.22,-1776.01"/>
<polygon fill="blue" stroke="blue" points="1019.76,-1779.16 1027.43,-1771.85 1016.88,-1772.78 1019.76,-1779.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node229"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="840.5,-272 401.5,-272 401.5,-236 840.5,-236 840.5,-272"/>
<text text-anchor="middle" x="621" y="-250.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.26,-235.94C766.89,-220.87 885.9,-211.63 951,-281 1009.06,-342.87 925.33,-1742.28 979,-1808 988.47,-1819.59 1001.34,-1827.31 1015.39,-1832.36"/>
<polygon fill="blue" stroke="blue" points="1014.69,-1835.8 1025.28,-1835.44 1016.77,-1829.12 1014.69,-1835.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node258"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="1646,-1719 1490,-1719 1490,-1683 1646,-1683 1646,-1719"/>
<text text-anchor="middle" x="1568" y="-1697.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M840.88,-247.45C879.12,-253.05 917.38,-263.37 951,-281 1131.67,-375.75 1170.74,-444.84 1242,-636 1262.15,-690.05 1230.53,-1631.93 1270,-1674 1322.23,-1729.67 1412.81,-1730.17 1480.24,-1720.59"/>
<polygon fill="blue" stroke="blue" points="1481.07,-1724 1490.43,-1719.04 1480.02,-1717.08 1481.07,-1724"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node259"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="1642.5,-1665 1493.5,-1665 1493.5,-1629 1642.5,-1629 1642.5,-1665"/>
<text text-anchor="middle" x="1568" y="-1643.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.92,-235.99C978.76,-226.37 1184.42,-226.42 1242,-284 1287.54,-329.54 1256.87,-799.94 1270,-863 1334.44,-1172.59 1503.42,-1521.39 1553.09,-1619.85"/>
<polygon fill="blue" stroke="blue" points="1550,-1621.5 1557.64,-1628.84 1556.24,-1618.34 1550,-1621.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node230"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="818.5,-596 423.5,-596 423.5,-560 818.5,-560 818.5,-596"/>
<text text-anchor="middle" x="621" y="-574.3" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M818.6,-572.68C877.38,-575.56 931.44,-584.26 951,-605 996.87,-653.64 936.59,-1756.33 979,-1808 988.5,-1819.57 1001.38,-1827.28 1015.44,-1832.32"/>
<polygon fill="blue" stroke="blue" points="1014.74,-1835.76 1025.33,-1835.39 1016.82,-1829.08 1014.74,-1835.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M697.14,-559.94C771.81,-546.89 884.52,-541.22 951,-605 1024.03,-675.07 908.83,-758.06 979,-831 1061.11,-916.36 1163.74,-785.1 1242,-874 1300.77,-940.76 1208.88,-1609.38 1270,-1674 1322.28,-1729.28 1412.41,-1729.99 1479.7,-1720.57"/>
<polygon fill="blue" stroke="blue" points="1480.51,-1723.98 1489.88,-1719.04 1479.47,-1717.06 1480.51,-1723.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M818.68,-574.95C863.37,-579.46 909.78,-588.46 951,-605 1105.54,-667.02 1143.05,-707.07 1242,-841 1438.97,-1107.58 1537.22,-1510.18 1561.13,-1619.04"/>
<polygon fill="blue" stroke="blue" points="1557.73,-1619.89 1563.27,-1628.92 1564.57,-1618.4 1557.73,-1619.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node231"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="722.5,-1082 519.5,-1082 519.5,-1046 722.5,-1046 722.5,-1082"/>
<text text-anchor="middle" x="621" y="-1060.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node246"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="1141.5,-919 1087.5,-919 1087.5,-883 1141.5,-883 1141.5,-919"/>
<text text-anchor="middle" x="1114.5" y="-897.3" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.83,-1071.25C789.9,-1072.4 878.63,-1066.7 951,-1037 1009.99,-1012.8 1063.58,-959.03 1092.05,-926.82"/>
<polygon fill="blue" stroke="blue" points="1094.82,-928.98 1098.74,-919.13 1089.54,-924.38 1094.82,-928.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<g id="a_node254"><a xlink:title=" &#160;&#160;&#160;pub fn with_signed_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_signed_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1194,-1719 1035,-1719 1035,-1683 1194,-1683 1194,-1719"/>
<text text-anchor="middle" x="1114.5" y="-1697.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.88,-1058.32C807.87,-1055.96 920.38,-1059.32 951,-1091 996.07,-1137.63 936.71,-1624.83 979,-1674 990.79,-1687.71 1007.43,-1695.66 1024.99,-1700.07"/>
<polygon fill="blue" stroke="blue" points="1024.3,-1703.5 1034.81,-1702.16 1025.76,-1696.66 1024.3,-1703.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<g id="a_node255"><a xlink:title=" &#160;&#160;&#160;pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_kyber_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1190.5,-1665 1038.5,-1665 1038.5,-1629 1190.5,-1629 1190.5,-1665"/>
<text text-anchor="middle" x="1114.5" y="-1643.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.78,-1058.42C807.7,-1056.12 920.17,-1059.52 951,-1091 986.67,-1127.42 954.51,-1504.28 979,-1549 997.43,-1582.64 1032.92,-1607.75 1062.81,-1624.12"/>
<polygon fill="blue" stroke="blue" points="1061.41,-1627.34 1071.89,-1628.92 1064.69,-1621.15 1061.41,-1627.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node232"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="756.5,-1028 485.5,-1028 485.5,-992 756.5,-992 756.5,-1028"/>
<text text-anchor="middle" x="621" y="-1006.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.53,-1010.59C816.94,-1007.91 888.53,-1000.6 951,-983 997.65,-969.86 1046.72,-943.03 1078.58,-923.64"/>
<polygon fill="blue" stroke="blue" points="1080.82,-926.36 1087.49,-918.13 1077.14,-920.41 1080.82,-926.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.8,-1003.7C835.48,-1003.24 924.37,-1009.34 951,-1037 1000.14,-1088.04 932.91,-1620.19 979,-1674 990.77,-1687.74 1007.39,-1695.7 1024.95,-1700.1"/>
<polygon fill="blue" stroke="blue" points="1024.26,-1703.54 1034.77,-1702.2 1025.72,-1696.69 1024.26,-1703.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.7,-1003.8C835.33,-1003.37 924.22,-1009.48 951,-1037 990.73,-1077.83 951.79,-1498.94 979,-1549 997.32,-1582.7 1032.81,-1607.81 1062.74,-1624.16"/>
<polygon fill="blue" stroke="blue" points="1061.35,-1627.39 1071.82,-1628.96 1064.61,-1621.2 1061.35,-1627.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node233"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="701,-542 541,-542 541,-506 701,-506 701,-542"/>
<text text-anchor="middle" x="621" y="-520.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.36,-505.99C770.26,-492.43 884.67,-485.84 951,-551 995.61,-594.82 943.93,-779.22 979,-831 1001.84,-864.73 1046.22,-883.26 1077.75,-892.64"/>
<polygon fill="blue" stroke="blue" points="1076.91,-896.04 1087.49,-895.37 1078.8,-889.3 1076.91,-896.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M696.55,-505.95C771.3,-492.73 884.58,-486.75 951,-551 1028.82,-626.28 903.53,-715.36 979,-793 1061.32,-877.68 1163.22,-743.01 1242,-831 1304.52,-900.82 1205.66,-1605.85 1270,-1674 1322.32,-1729.41 1412.66,-1730.03 1480,-1720.54"/>
<polygon fill="blue" stroke="blue" points="1480.82,-1723.96 1490.19,-1719.01 1479.78,-1717.04 1480.82,-1723.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M701.07,-523.76C851.78,-525.13 1171.46,-537.48 1242,-616 1278.92,-657.09 1257,-809.31 1270,-863 1344.4,-1170.35 1506.44,-1520.71 1553.77,-1619.69"/>
<polygon fill="blue" stroke="blue" points="1550.63,-1621.23 1558.11,-1628.74 1556.94,-1618.21 1550.63,-1621.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node234"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="721,-974 521,-974 521,-938 721,-938 721,-974"/>
<text text-anchor="middle" x="621" y="-952.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M721.22,-950.16C786.63,-945.74 874.11,-938.76 951,-929 994.69,-923.45 1044.56,-914.46 1077.4,-908.17"/>
<polygon fill="blue" stroke="blue" points="1078.28,-911.56 1087.43,-906.23 1076.95,-904.69 1078.28,-911.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M721.28,-950.31C806.5,-947.82 920.3,-951 951,-983 1004.2,-1038.45 929.11,-1615.56 979,-1674 990.74,-1687.76 1007.35,-1695.73 1024.91,-1700.13"/>
<polygon fill="blue" stroke="blue" points="1024.23,-1703.57 1034.74,-1702.23 1025.69,-1696.72 1024.23,-1703.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M721.21,-950.38C806.38,-947.93 920.16,-951.14 951,-983 994.8,-1028.24 949.07,-1493.6 979,-1549 997.23,-1582.75 1032.73,-1607.85 1062.68,-1624.2"/>
<polygon fill="blue" stroke="blue" points="1061.29,-1627.42 1071.77,-1628.99 1064.55,-1621.23 1061.29,-1627.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node235"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="733,-1406 509,-1406 509,-1370 733,-1370 733,-1406"/>
<text text-anchor="middle" x="621" y="-1384.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M733.18,-1382.25C816.58,-1380.57 921.27,-1384.95 951,-1415 1012.58,-1477.24 921.85,-1741.67 979,-1808 988.71,-1819.27 1001.63,-1826.83 1015.63,-1831.82"/>
<polygon fill="blue" stroke="blue" points="1014.89,-1835.26 1025.47,-1834.89 1016.97,-1828.57 1014.89,-1835.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.95,-1369.98C770.77,-1356.58 884.61,-1350.3 951,-1415 992.46,-1455.4 939.96,-1631.26 979,-1674 990.95,-1687.08 1007.31,-1694.84 1024.52,-1699.27"/>
<polygon fill="blue" stroke="blue" points="1024.2,-1702.78 1034.72,-1701.5 1025.7,-1695.94 1024.2,-1702.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.06,-1370C776.82,-1358.73 884.09,-1355.92 951,-1415 996.61,-1455.27 945.99,-1497.89 979,-1549 1000.17,-1581.77 1036.43,-1607.24 1065.97,-1623.98"/>
<polygon fill="blue" stroke="blue" points="1064.45,-1627.14 1074.89,-1628.9 1067.82,-1621.01 1064.45,-1627.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node236"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="714.5,-704 527.5,-704 527.5,-668 714.5,-668 714.5,-704"/>
<text text-anchor="middle" x="621" y="-682.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M700.97,-667.96C775.06,-656.07 884.19,-652.3 951,-713 1003.14,-760.37 930.6,-817.82 979,-869 1004,-895.44 1046.57,-901.79 1077.13,-902.57"/>
<polygon fill="blue" stroke="blue" points="1077.36,-906.07 1087.38,-902.63 1077.41,-899.07 1077.36,-906.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node237"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="836.5,-1352 405.5,-1352 405.5,-1316 836.5,-1316 836.5,-1352"/>
<text text-anchor="middle" x="621" y="-1330.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M836.56,-1330.24C887.94,-1333.98 933.14,-1342.79 951,-1361 1020.69,-1432.05 914.35,-1732.32 979,-1808 988.66,-1819.31 1001.56,-1826.89 1015.55,-1831.9"/>
<polygon fill="blue" stroke="blue" points="1014.8,-1835.33 1025.39,-1834.96 1016.88,-1828.64 1014.8,-1835.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M836.68,-1330.57C887.88,-1334.34 932.95,-1343.08 951,-1361 1000.56,-1410.2 932.38,-1622.01 979,-1674 990.9,-1687.27 1007.33,-1695.09 1024.62,-1699.51"/>
<polygon fill="blue" stroke="blue" points="1024.37,-1703.03 1034.88,-1701.73 1025.85,-1696.19 1024.37,-1703.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M698.56,-1315.99C772.98,-1303.42 884.27,-1298.53 951,-1361 1012.67,-1418.73 935.24,-1476.74 979,-1549 999.07,-1582.15 1035.03,-1607.46 1064.72,-1624.05"/>
<polygon fill="blue" stroke="blue" points="1063.25,-1627.24 1073.71,-1628.92 1066.58,-1621.08 1063.25,-1627.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node238"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="951,-1298 291,-1298 291,-1262 951,-1262 951,-1298"/>
<text text-anchor="middle" x="621" y="-1276.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M938.87,-1298.04C943.72,-1300.74 947.8,-1303.72 951,-1307 1028.81,-1386.87 906.86,-1722.97 979,-1808 988.62,-1819.34 1001.5,-1826.94 1015.48,-1831.95"/>
<polygon fill="blue" stroke="blue" points="1014.73,-1835.38 1025.32,-1835.02 1016.81,-1828.7 1014.73,-1835.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M938.78,-1298.12C943.65,-1300.8 947.77,-1303.75 951,-1307 1008.67,-1365 924.8,-1612.75 979,-1674 990.81,-1687.34 1007.2,-1695.19 1024.49,-1699.62"/>
<polygon fill="blue" stroke="blue" points="1024.23,-1703.15 1034.75,-1701.85 1025.72,-1696.31 1024.23,-1703.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M696.55,-1261.95C771.3,-1248.73 884.58,-1242.75 951,-1307 989.91,-1344.64 951.72,-1502.24 979,-1549 998.46,-1582.36 1034.27,-1607.6 1064.05,-1624.1"/>
<polygon fill="blue" stroke="blue" points="1062.61,-1627.3 1073.07,-1628.95 1065.91,-1621.13 1062.61,-1627.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node239"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="744.5,-650 497.5,-650 497.5,-614 744.5,-614 744.5,-650"/>
<text text-anchor="middle" x="621" y="-628.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge442" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M697.71,-613.95C772.29,-601.09 884.44,-595.73 951,-659 1019.25,-723.87 915.87,-799.14 979,-869 1003.47,-896.08 1046.33,-902.28 1077.1,-902.85"/>
<polygon fill="blue" stroke="blue" points="1077.43,-906.35 1087.42,-902.84 1077.42,-899.35 1077.43,-906.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node240"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="690.5,-488 551.5,-488 551.5,-452 690.5,-452 690.5,-488"/>
<text text-anchor="middle" x="621" y="-466.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge478" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M690.72,-465.75C776.28,-462.08 915.53,-461.96 951,-497 998.01,-543.43 947.66,-734.84 979,-793 1001.24,-834.27 1046.58,-865.45 1078.44,-883.45"/>
<polygon fill="blue" stroke="blue" points="1077,-886.65 1087.45,-888.39 1080.37,-880.51 1077,-886.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge479" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M690.81,-452.92C765.46,-438.92 883.06,-430.82 951,-497 1033.62,-577.48 898.9,-672.01 979,-755 1061.02,-839.98 1163.28,-704.96 1242,-793 1307.28,-866.01 1202.82,-1602.74 1270,-1674 1322.28,-1729.45 1412.63,-1730.06 1479.98,-1720.56"/>
<polygon fill="blue" stroke="blue" points="1480.8,-1723.98 1490.17,-1719.03 1479.76,-1717.06 1480.8,-1723.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge477" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M690.55,-466.61C835.89,-461.05 1167.76,-457.37 1242,-535 1292.56,-587.87 1253.78,-791.67 1270,-863 1340.13,-1171.36 1505.15,-1521.01 1553.48,-1619.76"/>
<polygon fill="blue" stroke="blue" points="1550.36,-1621.35 1557.91,-1628.78 1556.64,-1618.26 1550.36,-1621.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node241"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="767,-920 475,-920 475,-884 767,-884 767,-920"/>
<text text-anchor="middle" x="621" y="-898.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge483" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.14,-901.7C874.41,-901.49 1012.6,-901.21 1077.2,-901.07"/>
<polygon fill="blue" stroke="blue" points="1077.29,-904.57 1087.29,-901.05 1077.28,-897.57 1077.29,-904.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge484" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.04,-895.62C843.07,-895.72 925.6,-902.44 951,-929 1008.26,-988.86 925.31,-1610.92 979,-1674 990.72,-1687.77 1007.32,-1695.75 1024.88,-1700.16"/>
<polygon fill="blue" stroke="blue" points="1024.2,-1703.59 1034.71,-1702.26 1025.66,-1696.75 1024.2,-1703.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge482" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.41,-895.69C843.3,-895.84 925.55,-902.59 951,-929 998.86,-978.65 946.36,-1488.26 979,-1549 997.1,-1582.67 1032.42,-1607.72 1062.32,-1624.06"/>
<polygon fill="blue" stroke="blue" points="1060.92,-1627.28 1071.4,-1628.85 1064.19,-1621.09 1060.92,-1627.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node242"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="769.5,-866 472.5,-866 472.5,-830 769.5,-830 769.5,-866"/>
<text text-anchor="middle" x="621" y="-844.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge488" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.64,-857.69C826.44,-862.05 891.83,-867.85 951,-875 994.64,-880.27 1044.52,-888.6 1077.37,-894.4"/>
<polygon fill="blue" stroke="blue" points="1076.95,-897.88 1087.41,-896.19 1078.18,-890.99 1076.95,-897.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge487" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.74,-841.6C845.03,-841.85 925.93,-848.72 951,-875 1012.33,-939.27 921.51,-1606.28 979,-1674 990.7,-1687.79 1007.3,-1695.77 1024.85,-1700.18"/>
<polygon fill="blue" stroke="blue" points="1024.17,-1703.61 1034.68,-1702.28 1025.63,-1696.77 1024.17,-1703.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge489" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.67,-841.67C844.94,-841.93 925.84,-848.8 951,-875 1002.92,-929.06 943.64,-1482.91 979,-1549 997.04,-1582.71 1032.36,-1607.75 1062.28,-1624.08"/>
<polygon fill="blue" stroke="blue" points="1060.89,-1627.3 1071.37,-1628.87 1064.15,-1621.11 1060.89,-1627.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node243"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="765,-434 477,-434 477,-398 765,-398 765,-434"/>
<text text-anchor="middle" x="621" y="-412.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge511" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M765.43,-409.46C842.01,-409.4 925.63,-416.02 951,-443 1002.96,-498.25 930.96,-1749.31 979,-1808 988.48,-1819.58 1001.36,-1827.3 1015.41,-1832.34"/>
<polygon fill="blue" stroke="blue" points="1014.71,-1835.79 1025.3,-1835.42 1016.79,-1829.1 1014.71,-1835.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge510" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.68,-397.96C770.55,-384.47 884.69,-378.02 951,-443 994.56,-485.68 936.86,-671.92 979,-716 1060.66,-801.42 1163.46,-666.71 1242,-755 1309.9,-831.33 1199.97,-1599.62 1270,-1674 1322.24,-1729.49 1412.6,-1730.09 1479.96,-1720.58"/>
<polygon fill="blue" stroke="blue" points="1480.78,-1724 1490.15,-1719.05 1479.74,-1717.08 1480.78,-1724"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge509" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M765.17,-406.71C927.4,-399.6 1177.67,-400.11 1242,-465 1273.21,-496.48 1260.49,-819.7 1270,-863 1337.83,-1171.87 1504.45,-1521.17 1553.32,-1619.8"/>
<polygon fill="blue" stroke="blue" points="1550.21,-1621.41 1557.8,-1628.81 1556.48,-1618.3 1550.21,-1621.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node244"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="791.5,-812 450.5,-812 450.5,-776 791.5,-776 791.5,-812"/>
<text text-anchor="middle" x="621" y="-790.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge526" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.51,-778.05C845.95,-780.42 904.21,-791.52 951,-821 971.89,-834.17 959.16,-854.29 979,-869 1007.59,-890.2 1048.19,-897.58 1077.29,-900.03"/>
<polygon fill="blue" stroke="blue" points="1077.23,-903.54 1087.45,-900.73 1077.71,-896.55 1077.23,-903.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge525" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.69,-787.85C860.17,-789.33 928.38,-797.24 951,-821 1016.39,-889.68 917.71,-1601.64 979,-1674 990.69,-1687.8 1007.28,-1695.79 1024.83,-1700.2"/>
<polygon fill="blue" stroke="blue" points="1024.15,-1703.63 1034.66,-1702.3 1025.61,-1696.79 1024.15,-1703.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge527" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.63,-787.91C860.1,-789.4 928.31,-797.3 951,-821 1006.98,-879.47 940.92,-1477.57 979,-1549 996.98,-1582.73 1032.31,-1607.78 1062.24,-1624.1"/>
<polygon fill="blue" stroke="blue" points="1060.85,-1627.32 1071.33,-1628.89 1064.11,-1621.13 1060.85,-1627.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node245"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="731,-380 511,-380 511,-344 731,-344 731,-380"/>
<text text-anchor="middle" x="621" y="-358.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge555" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M731.37,-356.4C814.98,-354.69 920.86,-358.96 951,-389 1002.66,-440.48 953.51,-647.67 979,-716 1002.9,-780.07 1055.5,-841.65 1087.38,-875.1"/>
<polygon fill="blue" stroke="blue" points="1085.15,-877.83 1094.62,-882.59 1090.19,-872.97 1085.15,-877.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge557" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.4,-343.96C770.33,-330.36 884.76,-323.75 951,-389 996.81,-434.13 934.69,-630.4 979,-677 1060.43,-762.63 1163.52,-627.66 1242,-716 1312.73,-795.61 1197.05,-1596.42 1270,-1674 1322.29,-1729.61 1412.86,-1730.12 1480.27,-1720.55"/>
<polygon fill="blue" stroke="blue" points="1481.1,-1723.97 1490.46,-1719.01 1480.05,-1717.05 1481.1,-1723.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge556" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M731.08,-352.6C889.75,-341.54 1172.87,-332.61 1242,-402 1278.22,-438.35 1259.23,-812.83 1270,-863 1336.35,-1172.19 1504,-1521.26 1553.22,-1619.82"/>
<polygon fill="blue" stroke="blue" points="1550.12,-1621.45 1557.73,-1628.82 1556.38,-1618.31 1550.12,-1621.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge622" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1109.29,-919.27C1086.35,-1000.84 994.16,-1340.25 965,-1626 961.1,-1664.25 946.58,-1765.26 965,-1799 975.48,-1818.19 994.44,-1829.12 1015.42,-1835.09"/>
<polygon fill="blue" stroke="blue" points="1014.63,-1838.5 1025.18,-1837.5 1016.31,-1831.71 1014.63,-1838.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge624" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1117.81,-919.07C1132.21,-1030.47 1211.03,-1621 1270,-1674 1325.95,-1724.28 1414.06,-1726.19 1479.8,-1718.43"/>
<polygon fill="blue" stroke="blue" points="1480.26,-1721.9 1489.74,-1717.16 1479.38,-1714.96 1480.26,-1721.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge623" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1126.44,-919.07C1186.75,-1018.72 1478.61,-1500.95 1550.82,-1620.26"/>
<polygon fill="blue" stroke="blue" points="1547.83,-1622.09 1556.01,-1628.83 1553.82,-1618.47 1547.83,-1622.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node247"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="759.5,-1244 482.5,-1244 482.5,-1208 759.5,-1208 759.5,-1244"/>
<text text-anchor="middle" x="621" y="-1222.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge653" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.82,-1219.75C837.7,-1219.48 924.63,-1225.78 951,-1253 993.97,-1297.34 939.18,-1760.81 979,-1808 988.59,-1819.37 1001.45,-1826.98 1015.43,-1832"/>
<polygon fill="blue" stroke="blue" points="1014.67,-1835.43 1025.26,-1835.07 1016.76,-1828.74 1014.67,-1835.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge654" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.67,-1219.9C837.49,-1219.69 924.41,-1226 951,-1253 1016.79,-1319.81 917.21,-1603.48 979,-1674 990.74,-1687.4 1007.11,-1695.28 1024.4,-1699.71"/>
<polygon fill="blue" stroke="blue" points="1024.14,-1703.23 1034.65,-1701.94 1025.62,-1696.39 1024.14,-1703.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge652" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.85,-1220.16C837.46,-1220.07 924.09,-1226.42 951,-1253 998.01,-1299.43 946.3,-1491.59 979,-1549 998.05,-1582.45 1033.69,-1607.62 1063.51,-1624.08"/>
<polygon fill="blue" stroke="blue" points="1062.08,-1627.28 1072.55,-1628.9 1065.37,-1621.1 1062.08,-1627.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node248"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="735,-758 507,-758 507,-722 735,-722 735,-758"/>
<text text-anchor="middle" x="621" y="-736.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge699" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M709.38,-721.97C782.23,-712.29 884.5,-711.85 951,-767 987.19,-797.01 945.19,-836.33 979,-869 1005.02,-894.14 1047.02,-900.77 1077.17,-901.97"/>
<polygon fill="blue" stroke="blue" points="1077.22,-905.47 1087.3,-902.19 1077.37,-898.47 1077.22,-905.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge698" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M735.21,-733.89C818.52,-732.12 922.08,-736.57 951,-767 1020.45,-840.09 913.91,-1597 979,-1674 990.74,-1687.89 1007.44,-1695.89 1025.1,-1700.29"/>
<polygon fill="blue" stroke="blue" points="1024.48,-1703.74 1034.99,-1702.38 1025.93,-1696.89 1024.48,-1703.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge697" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M735.17,-733.93C818.45,-732.19 922.01,-736.64 951,-767 1011.05,-829.88 938.2,-1472.22 979,-1549 996.94,-1582.76 1032.26,-1607.8 1062.21,-1624.12"/>
<polygon fill="blue" stroke="blue" points="1060.83,-1627.34 1071.31,-1628.9 1064.08,-1621.15 1060.83,-1627.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node249"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="842,-326 400,-326 400,-290 842,-290 842,-326"/>
<text text-anchor="middle" x="621" y="-304.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge722" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M842.37,-304.92C891.23,-308.91 933.68,-317.67 951,-335 1004.91,-388.93 955.65,-604.41 979,-677 1004.22,-755.41 1061.33,-835.29 1092.41,-875.1"/>
<polygon fill="blue" stroke="blue" points="1089.68,-877.29 1098.62,-882.97 1095.17,-872.95 1089.68,-877.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge721" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M842.24,-305.05C891.1,-309.04 933.58,-317.77 951,-335 998.76,-382.24 932.99,-587.05 979,-636 1060.02,-722.2 1163.81,-588.23 1242,-677 1315.25,-760.16 1194.13,-1593.22 1270,-1674 1322.26,-1729.64 1412.83,-1730.15 1480.25,-1720.57"/>
<polygon fill="blue" stroke="blue" points="1481.09,-1723.99 1490.45,-1719.02 1480.03,-1717.06 1481.09,-1723.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge720" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M842.28,-290.32C997.5,-283.19 1187.1,-287.04 1242,-342 1282.97,-383.02 1258.03,-806.28 1270,-863 1335.27,-1172.42 1503.68,-1521.33 1553.14,-1619.84"/>
<polygon fill="blue" stroke="blue" points="1550.05,-1621.48 1557.68,-1628.83 1556.3,-1618.33 1550.05,-1621.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node250"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="730,-1190 512,-1190 512,-1154 730,-1154 730,-1190"/>
<text text-anchor="middle" x="621" y="-1168.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge743" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M730.25,-1186.04C798.12,-1189.54 884.96,-1183.92 951,-1145 1035.68,-1095.09 1085.08,-981.62 1104.23,-928.89"/>
<polygon fill="blue" stroke="blue" points="1107.63,-929.79 1107.66,-919.2 1101.03,-927.46 1107.63,-929.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge742" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M730.32,-1166.21C814.24,-1164.31 921.11,-1168.41 951,-1199 1024.9,-1274.62 909.61,-1594.21 979,-1674 990.87,-1687.65 1007.53,-1695.57 1025.1,-1699.97"/>
<polygon fill="blue" stroke="blue" points="1024.42,-1703.41 1034.93,-1702.07 1025.87,-1696.56 1024.42,-1703.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge744" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M730.15,-1166.38C813.98,-1164.58 920.79,-1168.73 951,-1199 1006.12,-1254.23 940.88,-1480.92 979,-1549 997.81,-1582.58 1033.46,-1607.75 1063.34,-1624.17"/>
<polygon fill="blue" stroke="blue" points="1061.93,-1627.38 1072.4,-1628.98 1065.21,-1621.2 1061.93,-1627.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node251"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="802,-1514 440,-1514 440,-1478 802,-1478 802,-1514"/>
<text text-anchor="middle" x="621" y="-1492.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge770" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M636.85,-1514.26C682.01,-1568.46 824.06,-1729.52 979,-1808 990.4,-1813.77 1002.89,-1818.44 1015.52,-1822.22"/>
<polygon fill="blue" stroke="blue" points="1014.62,-1825.6 1025.2,-1824.93 1016.52,-1818.86 1014.62,-1825.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge769" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M651.39,-1514.04C710.98,-1549.85 851.25,-1630.2 979,-1674 993.51,-1678.97 1009.23,-1683.15 1024.63,-1686.63"/>
<polygon fill="blue" stroke="blue" points="1024.18,-1690.11 1034.69,-1688.8 1025.66,-1683.27 1024.18,-1690.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge771" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M680.8,-1514.06C772.19,-1542.14 947.89,-1596.12 1044.92,-1625.93"/>
<polygon fill="blue" stroke="blue" points="1044.05,-1629.32 1054.63,-1628.92 1046.1,-1622.63 1044.05,-1629.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node252"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="751.5,-1460 490.5,-1460 490.5,-1424 751.5,-1424 751.5,-1460"/>
<text text-anchor="middle" x="621" y="-1438.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge820" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M751.62,-1436.09C831.3,-1435.49 923.28,-1441.3 951,-1469 1004.46,-1522.44 929.34,-1751.02 979,-1808 988.71,-1819.14 1001.56,-1826.65 1015.47,-1831.63"/>
<polygon fill="blue" stroke="blue" points="1014.65,-1835.04 1025.24,-1834.69 1016.75,-1828.36 1014.65,-1835.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge821" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M697.67,-1424C772.21,-1411.17 884.33,-1405.83 951,-1469 1017.75,-1532.25 916.04,-1606.98 979,-1674 991.13,-1686.91 1007.57,-1694.6 1024.79,-1699.01"/>
<polygon fill="blue" stroke="blue" points="1024.48,-1702.53 1034.99,-1701.24 1025.97,-1695.69 1024.48,-1702.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge822" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M718.69,-1423.96C790.1,-1416.31 885.82,-1418.62 951,-1469 980.81,-1492.04 956.54,-1518.76 979,-1549 1002.65,-1580.84 1039.62,-1606.72 1068.82,-1623.87"/>
<polygon fill="blue" stroke="blue" points="1067.19,-1626.97 1077.61,-1628.91 1070.68,-1620.9 1067.19,-1626.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node253"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="740.5,-1136 501.5,-1136 501.5,-1100 740.5,-1100 740.5,-1136"/>
<text text-anchor="middle" x="621" y="-1114.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge853" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M740.61,-1129.61C806,-1130.92 886.7,-1123.87 951,-1091 1022.65,-1054.37 1075.75,-971.15 1099.59,-928.03"/>
<polygon fill="blue" stroke="blue" points="1102.67,-929.68 1104.36,-919.22 1096.52,-926.34 1102.67,-929.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge852" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M740.6,-1111.96C822.79,-1110.61 922.4,-1115.56 951,-1145 992.01,-1187.22 940.51,-1629.47 979,-1674 990.83,-1687.68 1007.47,-1695.62 1025.04,-1700.03"/>
<polygon fill="blue" stroke="blue" points="1024.35,-1703.46 1034.86,-1702.12 1025.81,-1696.61 1024.35,-1703.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge851" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M740.89,-1112.09C822.93,-1110.83 922.21,-1115.84 951,-1145 1014.23,-1209.04 935.45,-1470.25 979,-1549 997.56,-1582.57 1033.05,-1607.68 1062.91,-1624.07"/>
<polygon fill="blue" stroke="blue" points="1061.5,-1627.28 1071.97,-1628.88 1064.78,-1621.1 1061.5,-1627.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1194.15,-1701C1273.82,-1701 1396.79,-1701 1479.5,-1701"/>
<polygon fill="blue" stroke="blue" points="1479.63,-1704.5 1489.63,-1701 1479.63,-1697.5 1479.63,-1704.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1190.56,-1647C1271.28,-1647 1399.31,-1647 1483.25,-1647"/>
<polygon fill="blue" stroke="blue" points="1483.26,-1650.5 1493.26,-1647 1483.26,-1643.5 1483.26,-1650.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node256"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="2114,-1719 2060,-1719 2060,-1683 2114,-1683 2114,-1719"/>
<text text-anchor="middle" x="2087" y="-1697.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge439" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2099.17,-1719.13C2132.85,-1774.6 2234.39,-1947.74 2288,-2104 2447.69,-2569.44 2520.1,-3170.73 2535.02,-3306.8"/>
<polygon fill="blue" stroke="blue" points="2531.55,-3307.26 2536.11,-3316.82 2538.51,-3306.5 2531.55,-3307.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge455" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1201.79,-1749.89C1216.67,-1745.52 1230.89,-1738.64 1242,-1728 1277.82,-1693.71 1230.78,-1650.35 1270,-1620 1479.49,-1457.89 1601.65,-1603.16 1866,-1620 1960.35,-1626.01 2220.41,-1607.89 2288,-1674 2532.37,-1913.03 2538.83,-3107.3 2538.18,-3306.73"/>
<polygon fill="blue" stroke="blue" points="2534.68,-3306.95 2538.14,-3316.97 2541.68,-3306.98 2534.68,-3306.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge575" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.12,-1701C1759.38,-1701 1966.29,-1701 2049.71,-1701"/>
<polygon fill="blue" stroke="blue" points="2049.95,-1704.5 2059.95,-1701 2049.95,-1697.5 2049.95,-1704.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge814" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1642.6,-1653.04C1702.74,-1658.14 1789.93,-1665.88 1866,-1674 1930.87,-1680.93 2006.29,-1690.52 2049.85,-1696.21"/>
<polygon fill="blue" stroke="blue" points="2049.58,-1699.7 2059.95,-1697.53 2050.49,-1692.76 2049.58,-1699.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M2549.68,-11801.92C2578.94,-11748.86 2671.77,-11591.78 2790,-11504 2957.26,-11379.83 3021.35,-11370.91 3226,-11332 3407.64,-11297.47 3503.11,-11209.96 3642,-11332 3714.72,-11395.9 3601.43,-11479.67 3670,-11548 3716.09,-11593.93 3798.19,-11589.95 3846.2,-11582.65"/>
<polygon fill="blue" stroke="blue" points="3846.88,-11586.09 3856.18,-11581.01 3845.75,-11579.18 3846.88,-11586.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M2543.31,-11801.63C2557.52,-11728.57 2620.49,-11456.64 2790,-11334 2866.95,-11278.33 3570.88,-11202.05 3642,-11265 3718.78,-11332.96 3597.64,-11421.36 3670,-11494 3711.2,-11535.36 3781.59,-11536.36 3830.34,-11530.81"/>
<polygon fill="blue" stroke="blue" points="3830.91,-11534.27 3840.39,-11529.54 3830.03,-11527.32 3830.91,-11534.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<g id="a_node262"><a xlink:title="fn random_scalar&lt;R: Rng + CryptoRng&gt;(r: &amp;mut R) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;r.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="3493.5,-11929 3374.5,-11929 3374.5,-11893 3493.5,-11893 3493.5,-11929"/>
<text text-anchor="middle" x="3434" y="-11907.3" font-family="Helvetica,sans-Serif" font-size="14.00">random_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2576.21,-11813.56C2625.53,-11806.94 2714.07,-11803.01 2770,-11847 2790.12,-11862.82 2769.11,-11886.22 2790,-11901 2813.1,-11917.35 3203.11,-11914.07 3364.22,-11912"/>
<polygon fill="blue" stroke="blue" points="3364.54,-11915.5 3374.5,-11911.87 3364.45,-11908.5 3364.54,-11915.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node266"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3073,-11892 2923,-11892 2923,-11856 3073,-11856 3073,-11892"/>
<text text-anchor="middle" x="2998" y="-11870.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2576.25,-11824.24C2621.57,-11829.54 2701.53,-11838.91 2770,-11847 2817.25,-11852.58 2870.03,-11858.86 2912.8,-11863.95"/>
<polygon fill="blue" stroke="blue" points="2912.54,-11867.45 2922.88,-11865.16 2913.37,-11860.5 2912.54,-11867.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node261"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="2158.5,-11964 2015.5,-11964 2015.5,-11928 2158.5,-11928 2158.5,-11964"/>
<text text-anchor="middle" x="2087" y="-11942.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2120,-11927.82C2161.81,-11904.96 2237.96,-11866.37 2308,-11847 2370.14,-11829.81 2444.69,-11823.56 2491.71,-11821.29"/>
<polygon fill="blue" stroke="blue" points="2492.05,-11824.78 2501.89,-11820.84 2491.74,-11817.79 2492.05,-11824.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2158.81,-11954.81C2256,-11966.91 2427.16,-11988.21 2501.66,-11997.48"/>
<polygon fill="blue" stroke="blue" points="2501.57,-12000.99 2511.93,-11998.76 2502.43,-11994.05 2501.57,-12000.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node267"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2576,-11946 2502,-11946 2502,-11910 2576,-11910 2576,-11946"/>
<text text-anchor="middle" x="2539" y="-11924.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2158.81,-11943.17C2251.9,-11939.44 2412.85,-11933.01 2491.72,-11929.85"/>
<polygon fill="blue" stroke="blue" points="2491.98,-11933.34 2501.83,-11929.45 2491.7,-11926.35 2491.98,-11933.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2158.82,-11949.63C2201.93,-11951.66 2258.12,-11953.98 2308,-11955 2359.32,-11956.05 2730.54,-11987.83 2770,-11955 2807.53,-11923.78 2754.57,-11880.58 2790,-11847 2835.63,-11803.74 2914.48,-11806.72 2960.57,-11813.13"/>
<polygon fill="blue" stroke="blue" points="2960.3,-11816.62 2970.71,-11814.67 2961.35,-11809.7 2960.3,-11816.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M3493.88,-11909.08C3620.3,-11901.92 3920.72,-11868.21 4100,-11710 4129.54,-11683.93 4119.81,-11664.92 4136,-11629 4169.42,-11554.84 4209.46,-11467.66 4229.41,-11424.32"/>
<polygon fill="blue" stroke="blue" points="4232.69,-11425.57 4233.69,-11415.02 4226.33,-11422.64 4232.69,-11425.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<g id="a_node263"><a xlink:title="fn scalars_summing_to&lt;R: Rng + CryptoRng&gt;(n: NonZeroUsize, s: &amp;Scalar, rng: &amp;mut R) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut v: Vec&lt;Scalar&gt; = repeat_with(|| random_scalar(rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.take(n.get() &#45; 1) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3077,-11966 2919,-11966 2919,-11930 3077,-11930 3077,-11966"/>
<text text-anchor="middle" x="2998" y="-11944.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3077.09,-11941.34C3158.84,-11934.37 3285.95,-11923.54 3364.09,-11916.87"/>
<polygon fill="blue" stroke="blue" points="3364.64,-11920.34 3374.31,-11916 3364.05,-11913.37 3364.64,-11920.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().</title>
<g id="a_node264"><a xlink:title=" &#160;&#160;&#160;fn scalars_summing_to_works() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(n in 1usize..10)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut seed = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.try_fill_bytes(&amp;mut seed...">
<polygon fill="white" stroke="black" points="2642,-11892 2436,-11892 2436,-11856 2642,-11856 2642,-11892"/>
<text text-anchor="middle" x="2539" y="-11870.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to_works</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge451" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M2642.12,-11889.05C2687.56,-11889.69 2737.93,-11881 2770,-11847 2822.38,-11791.45 2745.23,-11565.84 2790,-11504 2912.16,-11335.27 3021.35,-11370.91 3226,-11332 3607.61,-11259.45 3720.47,-11249.26 4100,-11332 4137.01,-11340.07 4175.92,-11358.69 4203.63,-11373.94"/>
<polygon fill="blue" stroke="blue" points="4202.14,-11377.12 4212.57,-11378.96 4205.57,-11371.02 4202.14,-11377.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge450" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2642.16,-11874.55C2683.1,-11877.67 2729.96,-11885 2770,-11901 2780.32,-11905.12 2779.76,-11911.69 2790,-11916 2827.23,-11931.67 2871.12,-11939.77 2908.88,-11943.91"/>
<polygon fill="blue" stroke="blue" points="2908.55,-11947.4 2918.85,-11944.93 2909.26,-11940.43 2908.55,-11947.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge523" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.22,-12003.02C2655.38,-12006.06 2954.79,-12012.62 3198,-11975 3257.49,-11965.8 3323.5,-11947.04 3370.37,-11932.19"/>
<polygon fill="blue" stroke="blue" points="3371.61,-11935.47 3380.07,-11929.09 3369.48,-11928.8 3371.61,-11935.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge521" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.21,-11998.9C2631.35,-11991.21 2802.91,-11970.93 2908.83,-11958.42"/>
<polygon fill="blue" stroke="blue" points="2909.35,-11961.88 2918.87,-11957.23 2908.53,-11954.93 2909.35,-11961.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge522" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.29,-12006.14C2612.64,-12011.89 2709.68,-12016.89 2770,-11970 2788.57,-11955.56 2772.06,-11936.21 2790,-11921 2823.89,-11892.27 2871.77,-11880.17 2912.94,-11875.42"/>
<polygon fill="blue" stroke="blue" points="2913.39,-11878.89 2922.98,-11874.39 2912.67,-11871.93 2913.39,-11878.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge647" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M3073.04,-11884.73C3115.63,-11886.43 3166.74,-11880.06 3198,-11847 3252.07,-11789.83 3171.78,-11551.03 3226,-11494 3258.66,-11459.64 3312,-11453.35 3356.34,-11455.41"/>
<polygon fill="blue" stroke="blue" points="3356.33,-11458.91 3366.53,-11456.03 3356.76,-11451.92 3356.33,-11458.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge794" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M2576.07,-11935.56C2626.45,-11943.82 2717.6,-11950.04 2770,-11901 2805.64,-11867.64 2763.4,-11833.93 2790,-11793 2918.06,-11596 3006.55,-11577.96 3226,-11494 3267.41,-11478.16 3316.52,-11471.29 3356.51,-11468.44"/>
<polygon fill="blue" stroke="blue" points="3356.98,-11471.91 3366.74,-11467.78 3356.54,-11464.93 3356.98,-11471.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge845" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3025.26,-11822.46C3063.51,-11826.28 3136.67,-11834.54 3198,-11847 3255.06,-11858.59 3318.73,-11876.23 3365.39,-11890.06"/>
<polygon fill="blue" stroke="blue" points="3364.5,-11893.44 3375.08,-11892.95 3366.5,-11886.73 3364.5,-11893.44"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node269"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="1632,-5396 1504,-5396 1504,-5360 1632,-5360 1632,-5396"/>
<text text-anchor="middle" x="1568" y="-5374.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1632.09,-5362.12C1700.6,-5349.08 1808.01,-5341.75 1866,-5405 1913.5,-5456.81 1839.64,-10413.17 1886,-10466 1926.09,-10511.69 2003.7,-10507.85 2049.56,-10500.63"/>
<polygon fill="blue" stroke="blue" points="2050.39,-10504.04 2059.66,-10498.91 2049.22,-10497.14 2050.39,-10504.04"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1632.09,-5362.12C1700.6,-5349.08 1808,-5341.75 1866,-5405 1912.46,-5455.67 1841.03,-10303 1886,-10355 1925.95,-10401.2 2003.95,-10398.47 2049.85,-10391.97"/>
<polygon fill="blue" stroke="blue" points="2050.61,-10395.39 2059.95,-10390.4 2049.54,-10388.47 2050.61,-10395.39"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node270"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1186,-5396 1043,-5396 1043,-5360 1186,-5360 1186,-5396"/>
<text text-anchor="middle" x="1114.5" y="-5374.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1186.05,-5378C1269.82,-5378 1408.86,-5378 1493.78,-5378"/>
<polygon fill="blue" stroke="blue" points="1493.86,-5381.5 1503.86,-5378 1493.86,-5374.5 1493.86,-5381.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node272"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="1631,-5450 1505,-5450 1505,-5414 1631,-5414 1631,-5450"/>
<text text-anchor="middle" x="1568" y="-5428.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1186.07,-5391.59C1212.35,-5396.32 1242.47,-5401.35 1270,-5405 1346.42,-5415.13 1434.41,-5422.61 1494.66,-5427.1"/>
<polygon fill="blue" stroke="blue" points="1494.6,-5430.6 1504.83,-5427.85 1495.11,-5423.62 1494.6,-5430.6"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1186.31,-5362.98C1212.48,-5358.13 1242.47,-5353.39 1270,-5351 1335.97,-5345.28 1819.08,-5304.27 1866,-5351 1916.33,-5401.14 1839.14,-10412.6 1886,-10466 1926.09,-10511.69 2003.7,-10507.85 2049.56,-10500.63"/>
<polygon fill="blue" stroke="blue" points="2050.39,-10504.04 2059.66,-10498.91 2049.22,-10497.14 2050.39,-10504.04"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1150.9,-5359.89C1181.52,-5345.31 1227.43,-5325.97 1270,-5318 1335.09,-5305.8 1819.08,-5271.27 1866,-5318 1916.13,-5367.93 1839.33,-10358.82 1886,-10412 1920.27,-10451.05 1981.94,-10453.92 2027.77,-10449.42"/>
<polygon fill="blue" stroke="blue" points="2028.33,-10452.88 2037.88,-10448.29 2027.55,-10445.93 2028.33,-10452.88"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1135.61,-5359.84C1163.42,-5336.06 1216.31,-5295.59 1270,-5280 1333.59,-5261.53 1819.08,-5233.27 1866,-5280 1915.94,-5329.74 1839.9,-10301.68 1886,-10355 1925.95,-10401.2 2003.95,-10398.47 2049.85,-10391.97"/>
<polygon fill="blue" stroke="blue" points="2050.61,-10395.39 2059.95,-10390.4 2049.53,-10388.47 2050.61,-10395.39"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node271"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="658.5,-5396 583.5,-5396 583.5,-5360 658.5,-5360 658.5,-5396"/>
<text text-anchor="middle" x="621" y="-5374.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge528" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M658.54,-5378C737.21,-5378 924.21,-5378 1032.39,-5378"/>
<polygon fill="blue" stroke="blue" points="1032.61,-5381.5 1042.61,-5378 1032.61,-5374.5 1032.61,-5381.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge712" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1631.01,-5422.52C1700.14,-5415.89 1809.63,-5417.95 1866,-5485 1910.52,-5537.95 1840.37,-10414 1886,-10466 1926.09,-10511.69 2003.7,-10507.85 2049.56,-10500.63"/>
<polygon fill="blue" stroke="blue" points="2050.4,-10504.04 2059.66,-10498.91 2049.22,-10497.14 2050.4,-10504.04"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().</title>
<g id="a_node273"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_should_produce_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(&amp;nickname, discriminator).u...">
<polygon fill="white" stroke="black" points="3146.5,-10720 2849.5,-10720 2849.5,-10684 3146.5,-10684 3146.5,-10720"/>
<text text-anchor="middle" x="2998" y="-10698.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_should_produce_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="node287" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<g id="a_node287"><a xlink:title="fn username_sha_scalar(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Scalar, UsernameError&gt; { &#160;&#160;&#160;&#160;let mut hash = Sha512::new(); &#160;&#160;&#160;&#160;hash.update(nickname.as_bytes()); &#160;&#160;&#160;&#160;hash.update([0x00]); &#160;&#160;&#160;&#160;hash....">
<polygon fill="white" stroke="black" points="3516.5,-10720 3351.5,-10720 3351.5,-10684 3516.5,-10684 3516.5,-10720"/>
<text text-anchor="middle" x="3434" y="-10698.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_sha_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3146.54,-10702C3210.97,-10702 3284.53,-10702 3340.97,-10702"/>
<polygon fill="blue" stroke="blue" points="3341.31,-10705.5 3351.31,-10702 3341.31,-10698.5 3341.31,-10705.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().</title>
<g id="a_node274"><a xlink:title=" &#160;&#160;&#160;fn invalid_discriminators() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (discriminator, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::DiscriminatorCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; 0&#39; , UsernameError::DiscriminatorCannot...">
<polygon fill="white" stroke="black" points="1652,-10673 1484,-10673 1484,-10637 1652,-10637 1652,-10673"/>
<text text-anchor="middle" x="1568" y="-10651.3" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_discriminators</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1652.21,-10668.95C1716.59,-10675.04 1804.8,-10672.58 1866,-10628 1884.35,-10614.63 1870.05,-10597.15 1886,-10581 1931.66,-10534.78 2005.74,-10511.02 2049.78,-10500.35"/>
<polygon fill="blue" stroke="blue" points="2050.81,-10503.7 2059.76,-10498.03 2049.23,-10496.88 2050.81,-10503.7"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1652.06,-10647.45C1758.43,-10637.78 1939.83,-10621.29 2030.69,-10613.03"/>
<polygon fill="blue" stroke="blue" points="2031.15,-10616.5 2040.79,-10612.11 2030.51,-10609.53 2031.15,-10616.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().</title>
<g id="a_node275"><a xlink:title=" &#160;&#160;&#160;fn no_discriminator() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::new(&#39; no_discriminator&#39; ).expect_err(&#39; not a valid username&#39; ), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UsernameError::MissingSeparator &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1634,-10565 1502,-10565 1502,-10529 1634,-10529 1634,-10565"/>
<text text-anchor="middle" x="1568" y="-10543.3" font-family="Helvetica,sans-Serif" font-size="14.00">no_discriminator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1634.24,-10541.66C1694.45,-10536.6 1786.33,-10528.51 1866,-10520 1930.87,-10513.07 2006.29,-10503.48 2049.85,-10497.79"/>
<polygon fill="blue" stroke="blue" points="2050.49,-10501.24 2059.95,-10496.47 2049.58,-10494.3 2050.49,-10501.24"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="node286" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<g id="a_node286"><a xlink:title=" &#160;&#160;&#160;fn from_parts_without_soft_limit( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;validate_prefix(nickname)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let discriminator = valida...">
<polygon fill="white" stroke="black" points="2648.5,-10626 2429.5,-10626 2429.5,-10590 2648.5,-10590 2648.5,-10626"/>
<text text-anchor="middle" x="2539" y="-10604.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts_without_soft_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2114.14,-10499.68C2179.83,-10516.47 2353.96,-10560.97 2457.45,-10587.41"/>
<polygon fill="blue" stroke="blue" points="2456.68,-10590.83 2467.24,-10589.92 2458.42,-10584.05 2456.68,-10590.83"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node277"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1713.5,-10457 1422.5,-10457 1422.5,-10421 1713.5,-10421 1713.5,-10457"/>
<text text-anchor="middle" x="1568" y="-10435.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1713.73,-10451.24C1762.17,-10455.58 1816.45,-10460.71 1866,-10466 1930.87,-10472.93 2006.29,-10482.52 2049.85,-10488.21"/>
<polygon fill="blue" stroke="blue" points="2049.58,-10491.7 2059.95,-10489.53 2050.49,-10484.76 2049.58,-10491.7"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1713.7,-10439C1817.55,-10439 1952.02,-10439 2027.65,-10439"/>
<polygon fill="blue" stroke="blue" points="2027.92,-10442.5 2037.92,-10439 2027.92,-10435.5 2027.92,-10442.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1713.73,-10426.76C1762.17,-10422.42 1816.45,-10417.29 1866,-10412 1930.87,-10405.07 2006.29,-10395.48 2049.85,-10389.79"/>
<polygon fill="blue" stroke="blue" points="2050.49,-10393.24 2059.95,-10388.47 2049.58,-10386.3 2050.49,-10393.24"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().</title>
<g id="a_node278"><a xlink:title=" &#160;&#160;&#160;fn invalid_nicknames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (nickname, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::NicknameCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; ab🦀d&#39; , UsernameError::BadNicknameCharacter), &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1640,-10619 1496,-10619 1496,-10583 1640,-10583 1640,-10619"/>
<text text-anchor="middle" x="1568" y="-10597.3" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_nicknames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge481" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1640.02,-10599.75C1700.7,-10597.46 1789.99,-10591.14 1866,-10574 1933.37,-10558.81 2008.07,-10528.18 2050.8,-10509.24"/>
<polygon fill="blue" stroke="blue" points="2052.23,-10512.44 2059.93,-10505.16 2049.37,-10506.05 2052.23,-10512.44"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge480" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1640.07,-10601.96C1744.25,-10603.37 1936.25,-10605.97 2030.65,-10607.25"/>
<polygon fill="blue" stroke="blue" points="2030.8,-10610.75 2040.84,-10607.39 2030.89,-10603.75 2030.8,-10610.75"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node279"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="1695,-10403 1441,-10403 1441,-10367 1695,-10367 1695,-10403"/>
<text text-anchor="middle" x="1568" y="-10381.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge517" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1695.16,-10367.64C1752.58,-10366.49 1818.21,-10375.41 1866,-10412 1886.32,-10427.56 1866.02,-10450 1886,-10466 1932.62,-10503.33 2005.82,-10502.92 2049.54,-10498.48"/>
<polygon fill="blue" stroke="blue" points="2050.18,-10501.92 2059.72,-10497.31 2049.39,-10494.97 2050.18,-10501.92"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge516" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1695.18,-10395.59C1748,-10400.25 1810.01,-10406.02 1866,-10412 1921.02,-10417.88 1983.65,-10425.67 2027.97,-10431.37"/>
<polygon fill="blue" stroke="blue" points="2027.62,-10434.86 2037.98,-10432.67 2028.51,-10427.91 2027.62,-10434.86"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge518" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1695.14,-10385C1811.43,-10385 1976.66,-10385 2049.31,-10385"/>
<polygon fill="blue" stroke="blue" points="2049.75,-10388.5 2059.75,-10385 2049.75,-10381.5 2049.75,-10388.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().</title>
<g id="a_node280"><a xlink:title=" &#160;&#160;&#160;fn nicknames_exceeding_soft_limits() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39; 42&#39; , NicknameLimits::default()).expect(&#39; valid&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39;...">
<polygon fill="white" stroke="black" points="1691,-10727 1445,-10727 1445,-10691 1691,-10691 1691,-10727"/>
<text text-anchor="middle" x="1568" y="-10705.3" font-family="Helvetica,sans-Serif" font-size="14.00">nicknames_exceeding_soft_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge598" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1691.34,-10704.33C1745.32,-10700.61 1809.26,-10693.95 1866,-10682 1924.41,-10669.7 1988.89,-10646.86 2032.85,-10629.79"/>
<polygon fill="blue" stroke="blue" points="2034.15,-10633.04 2042.18,-10626.13 2031.6,-10626.52 2034.15,-10633.04"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge620" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.21,-10608C2199.44,-10608 2325.16,-10608 2418.99,-10608"/>
<polygon fill="blue" stroke="blue" points="2419.12,-10611.5 2429.12,-10608 2419.12,-10604.5 2419.12,-10611.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge628" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2136.19,-10434.29C2336.59,-10417.03 3117.99,-10373.05 3642,-10675 3753.12,-10739.03 3837.1,-10873.88 3869.47,-10931.71"/>
<polygon fill="blue" stroke="blue" points="3866.49,-10933.57 3874.39,-10940.63 3872.62,-10930.19 3866.49,-10933.57"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge729" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2114.17,-10385.98C2266.8,-10392.22 3040.79,-10431.64 3198,-10594 3250.66,-10648.38 3190.53,-10695.13 3226,-10762 3267.03,-10839.36 3349.89,-10903.7 3397.39,-10936.19"/>
<polygon fill="blue" stroke="blue" points="3395.58,-10939.19 3405.83,-10941.89 3399.5,-10933.39 3395.58,-10939.19"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="node284" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<g id="a_node284"><a xlink:title="fn make_scalars(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Vec&lt;Scalar&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Ok(vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(nickname, discriminator)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname_scalar(nickname)?, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3053,-10639 2943,-10639 2943,-10603 3053,-10603 3053,-10639"/>
<text text-anchor="middle" x="2998" y="-10617.3" font-family="Helvetica,sans-Serif" font-size="14.00">make_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge759" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3053.09,-10631.09C3125.18,-10644.55 3253.81,-10668.56 3341.22,-10684.87"/>
<polygon fill="blue" stroke="blue" points="3340.67,-10688.33 3351.14,-10686.72 3341.95,-10681.45 3340.67,-10688.33"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node285" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node285"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="1634.5,-10511 1501.5,-10511 1501.5,-10475 1634.5,-10475 1634.5,-10511"/>
<text text-anchor="middle" x="1568" y="-10489.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge827" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1634.74,-10493C1745.05,-10493 1963.76,-10493 2049.92,-10493"/>
<polygon fill="blue" stroke="blue" points="2049.99,-10496.5 2059.99,-10493 2049.99,-10489.5 2049.99,-10496.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="edge854" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2648.59,-10611.09C2737.09,-10613.61 2859.06,-10617.08 2932.73,-10619.17"/>
<polygon fill="blue" stroke="blue" points="2932.7,-10622.67 2942.8,-10619.46 2932.9,-10615.68 2932.7,-10622.67"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge855" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M3460.33,-10720.01C3506.39,-10754.46 3602.75,-10834.71 3642,-10929 3666.15,-10987.03 3627.28,-11447.9 3670,-11494 3709.8,-11536.95 3780.83,-11537.5 3830.08,-11531.43"/>
<polygon fill="blue" stroke="blue" points="3830.81,-11534.86 3840.24,-11530.05 3829.86,-11527.93 3830.81,-11534.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="node288" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<g id="a_node288"><a xlink:title="fn key_derivation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;let mut info_sho = poksho::ShoHmacSha256::new(b&#39; ExampleEndorsements&#39; ); &#160;&#160;&#160;&#160;info_sho....">
<polygon fill="white" stroke="black" points="2597.5,-4717 2480.5,-4717 2480.5,-4681 2597.5,-4681 2597.5,-4717"/>
<text text-anchor="middle" x="2539" y="-4695.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="node299" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<g id="a_node299"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKCredential_Endorsements_ServerRootKeyPair_generate_20240207&#39; ,...">
<polygon fill="white" stroke="black" points="3037.5,-7792 2958.5,-7792 2958.5,-7756 3037.5,-7756 3037.5,-7792"/>
<text text-anchor="middle" x="2998" y="-7770.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2597.7,-4686.89C2650.93,-4679.47 2727.89,-4678.98 2770,-4726 2825.98,-4788.52 2734.42,-7684.12 2790,-7747 2828.46,-7790.51 2899.88,-7790.13 2947.92,-7783.76"/>
<polygon fill="blue" stroke="blue" points="2948.71,-7787.18 2958.1,-7782.27 2947.7,-7780.25 2948.71,-7787.18"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node305" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node305"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="3043.5,-7684 2952.5,-7684 2952.5,-7648 3043.5,-7648 3043.5,-7684"/>
<text text-anchor="middle" x="2998" y="-7662.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2597.69,-4686.9C2650.92,-4679.48 2727.89,-4678.98 2770,-4726 2823.99,-4786.28 2736.4,-7578.38 2790,-7639 2826.9,-7680.74 2894.12,-7682.09 2941.95,-7676.5"/>
<polygon fill="blue" stroke="blue" points="2942.68,-7679.94 2952.14,-7675.17 2941.77,-7672.99 2942.68,-7679.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="node307" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<g id="a_node307"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.derive_key_from_tag_scalar(&amp;t) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3043.5,-7630 2952.5,-7630 2952.5,-7594 3043.5,-7594 3043.5,-7630"/>
<text text-anchor="middle" x="2998" y="-7608.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2597.68,-4686.91C2650.9,-4679.5 2727.86,-4679 2770,-4726 2793.13,-4751.79 2781.53,-7186.41 2790,-7220 2827.65,-7369.37 2932.97,-7524.8 2977.12,-7585.5"/>
<polygon fill="blue" stroke="blue" points="2974.44,-7587.76 2983.18,-7593.76 2980.09,-7583.62 2974.44,-7587.76"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node289" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node289"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="2611,-4771 2467,-4771 2467,-4735 2611,-4735 2611,-4771"/>
<text text-anchor="middle" x="2539" y="-4749.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M2611.12,-4750.36C2663.22,-4752.59 2731.34,-4764.98 2770,-4810 2801.83,-4847.08 2759.87,-4990.52 2790,-5029 2916.42,-5190.47 3029.64,-5120.85 3226,-5180 3408.79,-5235.06 3524.69,-5136.39 3642,-5287 3695.44,-5355.6 3612.34,-11482.9 3670,-11548 3713.46,-11597.07 3797.55,-11591.66 3846.38,-11583.33"/>
<polygon fill="blue" stroke="blue" points="3847.03,-11586.77 3856.23,-11581.52 3845.77,-11579.88 3847.03,-11586.77"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2561.71,-4771.09C2610.36,-4813.2 2727.19,-4923.61 2770,-5046 2782.39,-5081.41 2765.14,-7718.9 2790,-7747 2828.48,-7790.5 2899.89,-7790.12 2947.93,-7783.75"/>
<polygon fill="blue" stroke="blue" points="2948.72,-7787.17 2958.11,-7782.27 2947.71,-7780.25 2948.72,-7787.17"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node301" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node301"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="3025,-7846 2971,-7846 2971,-7810 3025,-7810 3025,-7846"/>
<text text-anchor="middle" x="2998" y="-7824.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2561.71,-4771.08C2610.36,-4813.2 2727.2,-4923.61 2770,-5046 2782.63,-5082.12 2764.65,-7772.34 2790,-7801 2832.08,-7848.57 2913.55,-7843.67 2960.76,-7835.84"/>
<polygon fill="blue" stroke="blue" points="2961.63,-7839.24 2970.86,-7834.03 2960.4,-7832.35 2961.63,-7839.24"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node302" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node302"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="3031,-7738 2965,-7738 2965,-7702 3031,-7702 3031,-7738"/>
<text text-anchor="middle" x="2998" y="-7716.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2561.71,-4771.09C2610.35,-4813.21 2727.18,-4923.61 2770,-5046 2782.14,-5080.7 2765.64,-7665.47 2790,-7693 2830.38,-7738.64 2907.03,-7735.97 2954.88,-7728.77"/>
<polygon fill="blue" stroke="blue" points="2955.61,-7732.19 2964.92,-7727.12 2954.48,-7725.28 2955.61,-7732.19"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="node303" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<g id="a_node303"><a xlink:title=" &#160;&#160;&#160;pub fn from_blinding_scalar(scalar: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_inv: scalar.invert(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3078,-7900 2918,-7900 2918,-7864 3078,-7864 3078,-7900"/>
<text text-anchor="middle" x="2998" y="-7878.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_blinding_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2561.71,-4771.08C2610.36,-4813.2 2727.21,-4923.6 2770,-5046 2782.88,-5082.83 2764.15,-7825.77 2790,-7855 2818.73,-7887.49 2865.82,-7895.5 2907.84,-7894.83"/>
<polygon fill="blue" stroke="blue" points="2907.96,-7898.32 2917.84,-7894.5 2907.73,-7891.33 2907.96,-7898.32"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2561.7,-4771.09C2610.35,-4813.21 2727.17,-4923.62 2770,-5046 2781.9,-5079.99 2766.13,-7612.03 2790,-7639 2826.92,-7680.72 2894.14,-7682.07 2941.96,-7676.49"/>
<polygon fill="blue" stroke="blue" points="2942.68,-7679.93 2952.15,-7675.17 2941.78,-7672.99 2942.68,-7679.93"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2561.69,-4771.09C2610.31,-4813.22 2727.08,-4923.65 2770,-5046 2809.98,-5159.97 2760.41,-7102.9 2790,-7220 2827.74,-7369.35 2933.01,-7524.79 2977.13,-7585.5"/>
<polygon fill="blue" stroke="blue" points="2974.45,-7587.76 2983.19,-7593.76 2980.1,-7583.62 2974.45,-7587.76"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="node320" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<g id="a_node320"><a xlink:title=" &#160;&#160;&#160;fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) &#160;&#160;...">
<polygon fill="white" stroke="black" points="3928.5,-7710 3841.5,-7710 3841.5,-7674 3928.5,-7674 3928.5,-7710"/>
<text text-anchor="middle" x="3885" y="-7688.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2611.15,-4750.59C2663.09,-4752.96 2730.98,-4765.42 2770,-4810 2823.3,-4870.9 2733.17,-4933.38 2790,-4991 2798.37,-4999.49 3633.97,-5088.19 3642,-5097 3675.95,-5134.26 3666.05,-5953.74 3670,-6004 3723.2,-6680.51 3853.24,-7502.13 3879.38,-7663.68"/>
<polygon fill="blue" stroke="blue" points="3875.96,-7664.45 3881.01,-7673.76 3882.87,-7663.33 3875.96,-7664.45"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node290" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node290"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2124.5,-4719 2049.5,-4719 2049.5,-4683 2124.5,-4683 2124.5,-4719"/>
<text text-anchor="middle" x="2087" y="-4697.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2124.83,-4700.84C2200.37,-4700.5 2373.85,-4699.73 2470.27,-4699.3"/>
<polygon fill="blue" stroke="blue" points="2470.5,-4702.8 2480.49,-4699.26 2470.47,-4695.8 2470.5,-4702.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2124.83,-4705.26C2196.9,-4713.58 2358.11,-4732.21 2456.5,-4743.58"/>
<polygon fill="blue" stroke="blue" points="2456.37,-4747.09 2466.71,-4744.76 2457.17,-4740.14 2456.37,-4747.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="node291" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<g id="a_node291"><a xlink:title="fn attribute_key_inversion(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let key_pair = KeyPair::&lt;ExampleDomain&gt;::derive_from(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; KeyPair...">
<polygon fill="white" stroke="black" points="3087,-4956 2909,-4956 2909,-4920 3087,-4920 3087,-4956"/>
<text text-anchor="middle" x="2998" y="-4934.3" font-family="Helvetica,sans-Serif" font-size="14.00">attribute_key_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2124.71,-4683.84C2237.86,-4633.79 2584.72,-4501.88 2770,-4672 2808.44,-4707.3 2754.37,-4867.86 2790,-4906 2817.29,-4935.21 2859.31,-4945.24 2898.38,-4947.17"/>
<polygon fill="blue" stroke="blue" points="2898.66,-4950.68 2908.77,-4947.5 2898.88,-4943.68 2898.66,-4950.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="node292" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<g id="a_node292"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a1 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a2 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_scalars(a1, a2) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3483.5,-5010 3384.5,-5010 3384.5,-4974 3483.5,-4974 3483.5,-5010"/>
<text text-anchor="middle" x="3434" y="-4988.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3087.09,-4948.96C3172.75,-4959.62 3300.45,-4975.51 3374.36,-4984.7"/>
<polygon fill="blue" stroke="blue" points="3374.07,-4988.19 3384.42,-4985.96 3374.93,-4981.25 3374.07,-4988.19"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="node293" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<g id="a_node293"><a xlink:title=" &#160;&#160;&#160;pub fn inverse_of&lt;D2: Domain&gt;(other: &amp;KeyPair&lt;D2&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_ne!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D2::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; You must provide a new domain for an inverse key&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="3478,-4956 3390,-4956 3390,-4920 3478,-4920 3478,-4956"/>
<text text-anchor="middle" x="3434" y="-4934.3" font-family="Helvetica,sans-Serif" font-size="14.00">inverse_of</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3087.09,-4938C3174.82,-4938 3306.65,-4938 3379.62,-4938"/>
<polygon fill="blue" stroke="blue" points="3379.95,-4941.5 3389.95,-4938 3379.94,-4934.5 3379.95,-4941.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3483.55,-4994.62C3532.44,-5000.13 3605.69,-5016.84 3642,-5067 3672.54,-5109.19 3665.94,-5952.08 3670,-6004 3722.87,-6680.54 3853.17,-7502.13 3879.37,-7663.68"/>
<polygon fill="blue" stroke="blue" points="3875.95,-7664.45 3881.01,-7673.76 3882.86,-7663.33 3875.95,-7664.45"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M3478.15,-4929.06C3526.08,-4921.95 3601.97,-4919.6 3642,-4965 3702.47,-5033.58 3609.38,-11479.55 3670,-11548 3713.46,-11597.07 3797.54,-11591.66 3846.37,-11583.33"/>
<polygon fill="blue" stroke="blue" points="3847.03,-11586.77 3856.23,-11581.53 3845.77,-11579.88 3847.03,-11586.77"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="node294" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<g id="a_node294"><a xlink:title=" &#160;&#160;&#160;fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ShoHmacSha256::new(b&#39; Signal_ZKCredential_CredentialPrivateKey_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_an...">
<polygon fill="white" stroke="black" points="4282.5,-7939 4203.5,-7939 4203.5,-7903 4282.5,-7903 4282.5,-7939"/>
<text text-anchor="middle" x="4243" y="-7917.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge656" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4213.76,-7902.84C4149.89,-7861.75 3994.31,-7761.67 3922.92,-7715.75"/>
<polygon fill="blue" stroke="blue" points="3924.54,-7712.63 3914.23,-7710.16 3920.75,-7718.51 3924.54,-7712.63"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair(). -->
<g id="node295" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().</title>
<g id="a_node295"><a xlink:title=" &#160;&#160;&#160;fn round_trip_key_pair() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = CredentialKeyPair::generate([0x42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let deserialized: Cr...">
<polygon fill="white" stroke="black" points="3510,-7993 3358,-7993 3358,-7957 3510,-7957 3510,-7993"/>
<text text-anchor="middle" x="3434" y="-7971.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="node297" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<g id="a_node297"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CredentialPrivateKey::generate(randomness).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3924.5,-7939 3845.5,-7939 3845.5,-7903 3924.5,-7903 3924.5,-7939"/>
<text text-anchor="middle" x="3885" y="-7917.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge726" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3510.15,-7965.96C3602.61,-7954.84 3756.93,-7936.28 3835.23,-7926.87"/>
<polygon fill="blue" stroke="blue" points="3835.8,-7930.32 3845.31,-7925.65 3834.96,-7923.37 3835.8,-7930.32"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node296" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node296"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="3494.5,-7939 3373.5,-7939 3373.5,-7903 3494.5,-7903 3494.5,-7939"/>
<text text-anchor="middle" x="3434" y="-7917.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge756" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3494.88,-7920.01C3537.52,-7917.37 3595.31,-7909.75 3642,-7889 3734.97,-7847.67 3821.78,-7760.95 3861.43,-7717.69"/>
<polygon fill="blue" stroke="blue" points="3864.15,-7719.9 3868.27,-7710.14 3858.96,-7715.2 3864.15,-7719.9"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="edge865" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3924.78,-7921C3990.05,-7921 4121.71,-7921 4193.18,-7921"/>
<polygon fill="blue" stroke="blue" points="4193.27,-7924.5 4203.27,-7921 4193.27,-7917.5 4193.27,-7924.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node298" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node298"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="2583,-7846 2495,-7846 2495,-7810 2583,-7810 2583,-7846"/>
<text text-anchor="middle" x="2539" y="-7824.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2583.24,-7822.94C2629.47,-7817.53 2704.92,-7808.69 2770,-7801 2831.56,-7793.73 2902.5,-7785.28 2948.46,-7779.8"/>
<polygon fill="blue" stroke="blue" points="2948.93,-7783.26 2958.44,-7778.6 2948.1,-7776.31 2948.93,-7783.26"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2583.41,-7828C2673.05,-7828 2877.23,-7828 2960.56,-7828"/>
<polygon fill="blue" stroke="blue" points="2960.8,-7831.5 2970.8,-7828 2960.8,-7824.5 2960.8,-7831.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2583.13,-7835.32C2633.47,-7841.32 2716.59,-7843.01 2770,-7801 2790.12,-7785.18 2769.99,-7762.95 2790,-7747 2836.67,-7709.8 2908.95,-7709.29 2954.58,-7713.66"/>
<polygon fill="blue" stroke="blue" points="2954.42,-7717.16 2964.74,-7714.75 2955.17,-7710.2 2954.42,-7717.16"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2583.24,-7833.06C2629.47,-7838.47 2704.92,-7847.31 2770,-7855 2815.42,-7860.37 2865.95,-7866.37 2907.79,-7871.36"/>
<polygon fill="blue" stroke="blue" points="2907.61,-7874.86 2917.95,-7872.57 2908.43,-7867.91 2907.61,-7874.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2583.08,-7836.65C2634.55,-7844.26 2719.95,-7847.84 2770,-7801 2805.64,-7767.64 2754.57,-7726.58 2790,-7693 2829.98,-7655.1 2895.46,-7652.69 2942.07,-7656.98"/>
<polygon fill="blue" stroke="blue" points="2941.99,-7660.49 2952.3,-7658.06 2942.72,-7653.53 2941.99,-7660.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2583.1,-7837.08C2635,-7845.23 2721.24,-7849.47 2770,-7801 2821.45,-7749.86 2738.88,-7690.47 2790,-7639 2829.02,-7599.71 2895.2,-7597.7 2942.22,-7602.47"/>
<polygon fill="blue" stroke="blue" points="2941.91,-7605.96 2952.24,-7603.62 2942.7,-7599 2941.91,-7605.96"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2583.02,-7819.01C2634.83,-7810.94 2720.99,-7806.79 2770,-7855 2817.64,-7901.85 2739.71,-7960.01 2790,-8004 2858.24,-8063.69 3126.59,-8059.87 3198,-8004 3238.75,-7972.12 3186.83,-7924.8 3226,-7891 3296.32,-7830.33 3554.4,-7881.85 3642,-7851 3728.2,-7820.65 3814,-7753.23 3856.51,-7716.69"/>
<polygon fill="blue" stroke="blue" points="3858.92,-7719.23 3864.18,-7710.03 3854.33,-7713.94 3858.92,-7719.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge504" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3037.51,-7769C3082.63,-7763.24 3159.66,-7753.72 3226,-7747 3450.79,-7724.24 3719.48,-7703.93 3831.23,-7695.78"/>
<polygon fill="blue" stroke="blue" points="3831.51,-7699.27 3841.23,-7695.05 3831,-7692.29 3831.51,-7699.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="node300" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<g id="a_node300"><a xlink:title=" &#160;&#160;&#160;pub fn for_first_point_of_attribute&lt;D&gt;(key_pair: &amp;crate::attributes::KeyPair&lt;D&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_blinding_scalar(key_pair.a1) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2639,-7900 2439,-7900 2439,-7864 2639,-7864 2639,-7900"/>
<text text-anchor="middle" x="2539" y="-7878.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_first_point_of_attribute</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge551" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.16,-7882C2719.05,-7882 2830.4,-7882 2907.58,-7882"/>
<polygon fill="blue" stroke="blue" points="2907.76,-7885.5 2917.76,-7882 2907.76,-7878.5 2907.76,-7885.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge558" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3025.18,-7822.17C3068.57,-7814.24 3154.87,-7806.1 3198,-7855 3251.42,-7915.56 3193.82,-10687.94 3226,-10762 3261.27,-10843.17 3347.91,-10906.88 3397.19,-10938.04"/>
<polygon fill="blue" stroke="blue" points="3395.6,-10941.17 3405.94,-10943.48 3399.29,-10935.23 3395.6,-10941.17"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge583" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3031.16,-7713.56C3075.53,-7706.73 3154.9,-7702.34 3198,-7747 3241.58,-7792.15 3197.3,-7972.19 3226,-8028 3338.48,-8246.74 3530.1,-8173.96 3642,-8393 3884.59,-8867.84 3885.23,-10682.58 3884.17,-10930.81"/>
<polygon fill="blue" stroke="blue" points="3880.67,-10930.81 3884.12,-10940.83 3887.67,-10930.84 3880.67,-10930.81"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge631" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M3022.61,-7900.04C3064.87,-7933.68 3153.18,-8010.37 3198,-8096 3225.01,-8147.59 3193.39,-8175.75 3226,-8224 3351.23,-8409.26 3536.5,-8309.84 3642,-8507 3681.85,-8581.48 3613.84,-11484.9 3670,-11548 3713.58,-11596.97 3797.62,-11591.59 3846.41,-11583.3"/>
<polygon fill="blue" stroke="blue" points="3847.05,-11586.74 3856.26,-11581.5 3845.79,-11579.85 3847.05,-11586.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node304" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node304"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="2610.5,-7684 2467.5,-7684 2467.5,-7648 2610.5,-7648 2610.5,-7684"/>
<text text-anchor="middle" x="2539" y="-7662.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge659" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2610.57,-7656.23C2660.19,-7653.32 2725.44,-7657.95 2770,-7693 2790.12,-7708.82 2769.99,-7731.05 2790,-7747 2834.53,-7782.49 2902.37,-7784.59 2948.14,-7780.91"/>
<polygon fill="blue" stroke="blue" points="2948.49,-7784.39 2958.12,-7779.99 2947.84,-7777.42 2948.49,-7784.39"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge658" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2610.61,-7654.15C2661.41,-7649.91 2728.1,-7653.78 2770,-7693 2805.64,-7726.36 2754.57,-7767.42 2790,-7801 2835.63,-7844.26 2914.48,-7841.28 2960.57,-7834.87"/>
<polygon fill="blue" stroke="blue" points="2961.35,-7838.3 2970.71,-7833.33 2960.3,-7831.38 2961.35,-7838.3"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge661" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2610.72,-7674.27C2656.21,-7679.6 2716.6,-7686.69 2770,-7693 2834.35,-7700.6 2908.96,-7709.49 2954.56,-7714.93"/>
<polygon fill="blue" stroke="blue" points="2954.33,-7718.43 2964.67,-7716.14 2955.16,-7711.48 2954.33,-7718.43"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge657" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2610.65,-7666C2701.96,-7666 2859.01,-7666 2941.96,-7666"/>
<polygon fill="blue" stroke="blue" points="2942.19,-7669.5 2952.19,-7666 2942.19,-7662.5 2942.19,-7669.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge660" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2610.65,-7657.65C2702.05,-7646.85 2859.33,-7628.27 2942.21,-7618.47"/>
<polygon fill="blue" stroke="blue" points="2942.67,-7621.94 2952.19,-7617.3 2941.85,-7614.99 2942.67,-7621.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge662" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2610.6,-7653.16C2662.08,-7648.21 2729.64,-7651.64 2770,-7693 2803.67,-7727.5 2754.38,-7876.52 2790,-7909 2823.5,-7939.54 3162.59,-7937.31 3198,-7909 3242.13,-7873.72 3183.74,-7822.5 3226,-7785 3295.51,-7723.31 3550.15,-7756.2 3642,-7742 3707.71,-7731.84 3782.55,-7715.66 3831.38,-7704.47"/>
<polygon fill="blue" stroke="blue" points="3832.44,-7707.82 3841.4,-7702.16 3830.87,-7701 3832.44,-7707.82"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge668" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M3043.63,-7657.73C3089.32,-7652.11 3158.98,-7651.92 3198,-7693 3249.45,-7747.17 3183.15,-7966.81 3226,-8028 3342.8,-8194.8 3531.53,-8048.94 3642,-8220 3692.15,-8297.66 3608.57,-11478.92 3670,-11548 3713.56,-11596.98 3797.61,-11591.6 3846.4,-11583.3"/>
<polygon fill="blue" stroke="blue" points="3847.05,-11586.74 3856.26,-11581.51 3845.79,-11579.86 3847.05,-11586.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge667" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3043.8,-7667.32C3192.76,-7671.69 3671.08,-7685.74 3831.21,-7690.45"/>
<polygon fill="blue" stroke="blue" points="3831.19,-7693.95 3841.29,-7690.75 3831.4,-7686.95 3831.19,-7693.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node306" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node306"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="2589.5,-7792 2488.5,-7792 2488.5,-7756 2589.5,-7756 2589.5,-7792"/>
<text text-anchor="middle" x="2539" y="-7770.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge713" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.78,-7774C2678.03,-7774 2860.85,-7774 2948.32,-7774"/>
<polygon fill="blue" stroke="blue" points="2948.5,-7777.5 2958.5,-7774 2948.5,-7770.5 2948.5,-7777.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge717" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.8,-7779.82C2636.39,-7785.28 2707.91,-7793.66 2770,-7801 2837.32,-7808.96 2915.86,-7818.31 2960.68,-7823.66"/>
<polygon fill="blue" stroke="blue" points="2960.44,-7827.16 2970.79,-7824.87 2961.27,-7820.21 2960.44,-7827.16"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge715" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.8,-7768.18C2636.39,-7762.72 2707.91,-7754.34 2770,-7747 2834.35,-7739.4 2908.96,-7730.51 2954.56,-7725.07"/>
<polygon fill="blue" stroke="blue" points="2955.16,-7728.52 2964.67,-7723.86 2954.33,-7721.57 2955.16,-7728.52"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge718" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.55,-7765.96C2640.3,-7760.62 2718.81,-7760.73 2770,-7801 2790.12,-7816.82 2769.99,-7839.05 2790,-7855 2822.72,-7881.08 2868.04,-7889.13 2907.93,-7890.1"/>
<polygon fill="blue" stroke="blue" points="2907.91,-7893.6 2917.95,-7890.21 2907.98,-7886.6 2907.91,-7893.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge719" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.55,-7782.04C2640.3,-7787.38 2718.81,-7787.27 2770,-7747 2790.12,-7731.18 2769.99,-7708.95 2790,-7693 2832.69,-7658.98 2896.79,-7655.64 2942.34,-7658.66"/>
<polygon fill="blue" stroke="blue" points="2942.1,-7662.15 2952.34,-7659.45 2942.64,-7655.18 2942.1,-7662.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge716" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.59,-7783.56C2641.5,-7790.47 2722,-7791.92 2770,-7747 2805.64,-7713.64 2754.57,-7672.58 2790,-7639 2829.98,-7601.1 2895.46,-7598.69 2942.07,-7602.98"/>
<polygon fill="blue" stroke="blue" points="2941.99,-7606.49 2952.3,-7604.06 2942.72,-7599.53 2941.99,-7606.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge714" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.68,-7763.91C2642.07,-7756.44 2723.34,-7754.41 2770,-7801 2823.21,-7854.13 2733.77,-7919.07 2790,-7969 2857.79,-8029.2 3126.29,-8024.49 3198,-7969 3237.22,-7938.65 3188.55,-7893.5 3226,-7861 3296.26,-7800.02 3552.84,-7840.58 3642,-7814 3719.36,-7790.94 3801.72,-7743.99 3847.63,-7715.54"/>
<polygon fill="blue" stroke="blue" points="3849.7,-7718.37 3856.32,-7710.1 3845.98,-7712.44 3849.7,-7718.37"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge757" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3043.84,-7615.72C3148.58,-7624.45 3417.46,-7647.09 3642,-7668 3707.15,-7674.07 3782.11,-7681.58 3831.12,-7686.57"/>
<polygon fill="blue" stroke="blue" points="3830.87,-7690.06 3841.17,-7687.6 3831.58,-7683.1 3830.87,-7690.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node308" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node308"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="2637,-7738 2441,-7738 2441,-7702 2637,-7702 2637,-7738"/>
<text text-anchor="middle" x="2539" y="-7716.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge835" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2637.09,-7731.36C2678.1,-7736.17 2726.38,-7741.85 2770,-7747 2831.56,-7754.27 2902.5,-7762.72 2948.46,-7768.2"/>
<polygon fill="blue" stroke="blue" points="2948.1,-7771.69 2958.44,-7769.4 2948.93,-7764.74 2948.1,-7771.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge829" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2637.09,-7709.52C2681.81,-7709.78 2733.03,-7717.92 2770,-7747 2790.12,-7762.82 2769.99,-7785.05 2790,-7801 2838.8,-7839.9 2915.61,-7838.68 2960.66,-7833.72"/>
<polygon fill="blue" stroke="blue" points="2961.36,-7837.16 2970.86,-7832.47 2960.51,-7830.21 2961.36,-7837.16"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge834" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2637.2,-7720C2735.61,-7720 2883.22,-7720 2954.92,-7720"/>
<polygon fill="blue" stroke="blue" points="2954.93,-7723.5 2964.93,-7720 2954.93,-7716.5 2954.93,-7723.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge830" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2637.1,-7706.83C2682.91,-7706.18 2735.07,-7714.31 2770,-7747 2805.64,-7780.36 2754.57,-7821.42 2790,-7855 2820.85,-7884.25 2866.9,-7892.36 2907.73,-7892.57"/>
<polygon fill="blue" stroke="blue" points="2908.03,-7896.06 2917.99,-7892.46 2907.95,-7889.06 2908.03,-7896.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge831" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2637.09,-7708.64C2678.1,-7703.83 2726.38,-7698.15 2770,-7693 2828.81,-7686.05 2896.18,-7678.03 2942.16,-7672.55"/>
<polygon fill="blue" stroke="blue" points="2942.69,-7676.01 2952.21,-7671.35 2941.86,-7669.06 2942.69,-7676.01"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge832" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2637.09,-7730.48C2681.81,-7730.22 2733.03,-7722.08 2770,-7693 2790.12,-7677.18 2769.99,-7654.95 2790,-7639 2832.69,-7604.98 2896.79,-7601.64 2942.34,-7604.66"/>
<polygon fill="blue" stroke="blue" points="2942.1,-7608.15 2952.34,-7605.45 2942.64,-7601.18 2942.1,-7608.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge833" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2637.03,-7705.73C2683.4,-7704.63 2736.06,-7712.71 2770,-7747 2799.4,-7776.7 2758.92,-7906.06 2790,-7934 2857.43,-7994.61 3126.48,-7989.72 3198,-7934 3238.14,-7902.73 3187.65,-7856.43 3226,-7823 3296.11,-7761.89 3551.31,-7797.66 3642,-7777 3709.57,-7761.61 3784.42,-7733.52 3832.73,-7713.86"/>
<polygon fill="blue" stroke="blue" points="3834.1,-7717.08 3842.02,-7710.04 3831.44,-7710.6 3834.1,-7717.08"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node309" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node309"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="3026,-6099 2970,-6099 2970,-6063 3026,-6063 3026,-6099"/>
<text text-anchor="middle" x="2998" y="-6077.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3026.13,-6075.07C3069.7,-6067.33 3154.77,-6059.9 3198,-6108 3234.78,-6148.92 3212.08,-7044.77 3226,-7098 3326.66,-7483.06 3531.66,-7508.61 3642,-7891 3731.12,-8199.85 3866.54,-10639.26 3882.46,-10930.58"/>
<polygon fill="blue" stroke="blue" points="3878.97,-10930.95 3883.01,-10940.75 3885.96,-10930.57 3878.97,-10930.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node310" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node310"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="3025,-6153 2971,-6153 2971,-6117 3025,-6117 3025,-6153"/>
<text text-anchor="middle" x="2998" y="-6131.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3025.31,-6132.96C3069.3,-6131.19 3156.99,-6134.97 3198,-6188 3236.87,-6238.25 3200.79,-10703.69 3226,-10762 3261.13,-10843.23 3347.82,-10906.92 3397.15,-10938.06"/>
<polygon fill="blue" stroke="blue" points="3395.56,-10941.2 3405.91,-10943.49 3399.26,-10935.25 3395.56,-10941.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3025.22,-6133.03C3069.07,-6131.37 3156.56,-6135.3 3198,-6188 3241.21,-6242.95 3210.98,-7377.73 3226,-7446 3265.78,-7626.77 3375.34,-7823.81 3416.81,-7894.19"/>
<polygon fill="blue" stroke="blue" points="3413.86,-7896.07 3421.97,-7902.89 3419.88,-7892.5 3413.86,-7896.07"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node311" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node311"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="3025,-5969 2971,-5969 2971,-5933 3025,-5933 3025,-5969"/>
<text text-anchor="middle" x="2998" y="-5947.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3025.19,-5955.28C3069.84,-5964.13 3159.56,-5989.08 3198,-6051 3267.02,-6162.18 3174.07,-10641.88 3226,-10762 3261.12,-10843.24 3347.81,-10906.92 3397.15,-10938.06"/>
<polygon fill="blue" stroke="blue" points="3395.56,-10941.2 3405.9,-10943.5 3399.25,-10935.25 3395.56,-10941.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3025.06,-5955.36C3069.5,-5964.34 3158.92,-5989.48 3198,-6051 3229.2,-6100.12 3218.08,-7040.35 3226,-7098 3269.73,-7416.21 3389.1,-7789.31 3423.57,-7893.03"/>
<polygon fill="blue" stroke="blue" points="3420.33,-7894.38 3426.81,-7902.75 3426.97,-7892.16 3420.33,-7894.38"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3025.13,-5958.2C3066.54,-5970.8 3147.71,-6000.4 3198,-6051 3702.02,-6558.07 3855.48,-7490.25 3880.21,-7663.79"/>
<polygon fill="blue" stroke="blue" points="3876.77,-7664.48 3881.63,-7673.9 3883.71,-7663.51 3876.77,-7664.48"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="node312" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<g id="a_node312"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BlindingPrivateKey::generate(sho).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3473.5,-5807 3394.5,-5807 3394.5,-5771 3473.5,-5771 3473.5,-5807"/>
<text text-anchor="middle" x="3434" y="-5785.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="node313" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<g id="a_node313"><a xlink:title=" &#160;&#160;&#160;fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y: sho.get_scalar(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3924.5,-5888 3845.5,-5888 3845.5,-5852 3924.5,-5852 3924.5,-5888"/>
<text text-anchor="middle" x="3885" y="-5866.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3473.67,-5795.98C3555.39,-5810.72 3745.51,-5845.02 3835.34,-5861.22"/>
<polygon fill="blue" stroke="blue" points="3834.8,-5864.68 3845.26,-5863.01 3836.04,-5857.79 3834.8,-5864.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge649" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3885,-5888.24C3885,-6480.13 3885,-7072.02 3885,-7663.92"/>
<polygon fill="blue" stroke="blue" points="3881.5,-7663.94 3885,-7673.94 3888.5,-7663.94 3881.5,-7663.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node314" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node314"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="3026,-5915 2970,-5915 2970,-5879 3026,-5879 3026,-5915"/>
<text text-anchor="middle" x="2998" y="-5893.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge655" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3026.34,-5891.14C3069.82,-5883.6 3154.27,-5876.59 3198,-5924 3236.93,-5966.2 3208.54,-6385.3 3226,-6440 3331.21,-6769.6 3540.77,-6767.15 3642,-7098 3672.25,-7196.86 3664.68,-7924.76 3670,-8028 3732.04,-9231.83 3861.84,-10710.08 3881.49,-10930.88"/>
<polygon fill="blue" stroke="blue" points="3878.01,-10931.33 3882.39,-10940.98 3884.98,-10930.71 3878.01,-10931.33"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair(). -->
<g id="node315" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().</title>
<g id="a_node315"><a xlink:title="fn round_trip_key_pair() { &#160;&#160;&#160;&#160;let key_pair = BlindingKeyPair::generate(&amp;mut poksho::ShoSha256::new(b&#39; test&#39; )); &#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;let deserialized: Blin...">
<polygon fill="white" stroke="black" points="3074,-5807 2922,-5807 2922,-5771 3074,-5771 3074,-5807"/>
<text text-anchor="middle" x="2998" y="-5785.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge819" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3074.1,-5789C3163.08,-5789 3308.74,-5789 3384.22,-5789"/>
<polygon fill="blue" stroke="blue" points="3384.39,-5792.5 3394.39,-5789 3384.39,-5785.5 3384.39,-5792.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="node316" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<g id="a_node316"><a xlink:title=" &#160;&#160;&#160;pub fn blind( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn RevealedAttribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedPoint&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This is technically something you can do with just th...">
<polygon fill="white" stroke="black" points="3461,-5969 3407,-5969 3407,-5933 3461,-5933 3461,-5969"/>
<text text-anchor="middle" x="3434" y="-5947.3" font-family="Helvetica,sans-Serif" font-size="14.00">blind</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge823" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3461.06,-5958.39C3506.11,-5972.63 3597.94,-6008.42 3642,-6074 3827.09,-6349.5 3875.92,-7470.51 3883.03,-7663.61"/>
<polygon fill="blue" stroke="blue" points="3879.53,-7663.93 3883.39,-7673.79 3886.53,-7663.67 3879.53,-7663.93"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="node317" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<g id="a_node317"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn Attribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedAttribute&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The points in a regular verifiably encrypted attribute ...">
<polygon fill="white" stroke="black" points="3033,-5861 2963,-5861 2963,-5825 3033,-5825 3033,-5861"/>
<text text-anchor="middle" x="2998" y="-5839.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge836" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3033.18,-5845.58C3073.12,-5849.06 3141.01,-5856.45 3198,-5870 3270.36,-5887.2 3351.81,-5917.96 3397.3,-5936.22"/>
<polygon fill="blue" stroke="blue" points="3396.14,-5939.52 3406.72,-5940.03 3398.76,-5933.03 3396.14,-5939.52"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node318" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node318"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3026,-5602 2970,-5602 2970,-5566 3026,-5566 3026,-5602"/>
<text text-anchor="middle" x="2998" y="-5580.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3026.25,-5578.22C3069.6,-5570.81 3153.87,-5563.96 3198,-5611 3257.91,-5674.85 3190.58,-5923.93 3226,-6004 3334.36,-6248.93 3540.23,-6192.26 3642,-6440 3675.53,-6521.62 3666.01,-7939.85 3670,-8028 3724.54,-9232.19 3860.68,-10710.14 3881.35,-10930.89"/>
<polygon fill="blue" stroke="blue" points="3877.88,-10931.36 3882.3,-10940.99 3884.85,-10930.7 3877.88,-10931.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node319" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node319"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="3032.5,-5656 2963.5,-5656 2963.5,-5620 3032.5,-5620 3032.5,-5656"/>
<text text-anchor="middle" x="2998" y="-5634.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge586" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3032.5,-5647.16C3079.26,-5661.95 3162.35,-5696.01 3198,-5759 3266.45,-5879.95 3170.87,-10634.43 3226,-10762 3261.11,-10843.24 3347.81,-10906.92 3397.14,-10938.06"/>
<polygon fill="blue" stroke="blue" points="3395.56,-10941.2 3405.9,-10943.5 3399.25,-10935.25 3395.56,-10941.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge587" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3032.62,-5632.22C3139.93,-5615.88 3476.82,-5581.44 3642,-5759 3679.32,-5799.12 3663.44,-5949.59 3670,-6004 3751.2,-6677.72 3858.99,-7501.56 3880.27,-7663.59"/>
<polygon fill="blue" stroke="blue" points="3876.82,-7664.24 3881.59,-7673.7 3883.76,-7663.33 3876.82,-7664.24"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge506" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M3918,-7710.24C3967.51,-7740.49 4060.99,-7806.19 4100,-7891 4253.85,-8225.5 4243.76,-11054.98 4242.16,-11368.76"/>
<polygon fill="blue" stroke="blue" points="4238.66,-11368.84 4242.11,-11378.85 4245.66,-11368.87 4238.66,-11368.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="node321" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<g id="a_node321"><a xlink:title="fn bench_server_param_serialization(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;&#160;let serialized_secret_params = zkgroup::seri...">
<polygon fill="white" stroke="black" points="1694,-9772 1442,-9772 1442,-9736 1694,-9736 1694,-9772"/>
<text text-anchor="middle" x="1568" y="-9750.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_server_param_serialization</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1694.33,-9752.57C1751.22,-9757.56 1816.66,-9771.77 1866,-9807 1880.9,-9817.64 1870.88,-9832.68 1886,-9843 1930.61,-9873.45 1994.01,-9877.02 2037.39,-9875.04"/>
<polygon fill="blue" stroke="blue" points="2037.64,-9878.53 2047.42,-9874.47 2037.24,-9871.54 2037.64,-9878.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node322" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node322"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1152,-9772 1077,-9772 1077,-9736 1152,-9736 1152,-9772"/>
<text text-anchor="middle" x="1114.5" y="-9750.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="edge533" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1152.07,-9754C1212.29,-9754 1335.27,-9754 1431.79,-9754"/>
<polygon fill="blue" stroke="blue" points="1431.93,-9757.5 1441.93,-9754 1431.93,-9750.5 1431.93,-9757.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node323" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node323"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="1682,-5861 1454,-5861 1454,-5825 1682,-5825 1682,-5861"/>
<text text-anchor="middle" x="1568" y="-5839.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge531" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1115.58,-9735.84C1116.82,-9456.73 1134.81,-6051.04 1270,-5896 1312.23,-5847.57 1382.18,-5833.39 1443.59,-5831.75"/>
<polygon fill="blue" stroke="blue" points="1443.82,-5835.24 1453.76,-5831.59 1443.71,-5828.24 1443.82,-5835.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node324" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node324"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="1713,-5807 1423,-5807 1423,-5771 1713,-5771 1713,-5807"/>
<text text-anchor="middle" x="1568" y="-5785.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge532" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1115.53,-9735.87C1116.04,-9453.62 1125.33,-5968.32 1270,-5816 1322.32,-5760.92 1412.22,-5760.11 1479.44,-5769.45"/>
<polygon fill="blue" stroke="blue" points="1479.2,-5772.95 1489.61,-5770.96 1480.23,-5766.03 1479.2,-5772.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node325" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node325"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="1676,-5753 1460,-5753 1460,-5717 1676,-5717 1676,-5753"/>
<text text-anchor="middle" x="1568" y="-5731.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge534" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1115.52,-9735.62C1115.89,-9449.5 1123.39,-5916.44 1270,-5762 1322.3,-5706.91 1412.21,-5706.1 1479.43,-5715.44"/>
<polygon fill="blue" stroke="blue" points="1479.19,-5718.94 1489.6,-5716.96 1480.22,-5712.02 1479.19,-5718.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1682.27,-5831.24C1746.2,-5831.39 1821.89,-5844.3 1866,-5896 1905.02,-5941.74 1846.02,-6933.1 1886,-6978 1914.2,-7009.67 1960.43,-7017.43 2001.35,-7016.81"/>
<polygon fill="blue" stroke="blue" points="2001.46,-7020.31 2011.35,-7016.49 2001.24,-7013.31 2001.46,-7020.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-5861.03C1713.13,-5872.31 1811.17,-5875.13 1866,-5816 1916.13,-5761.93 1833.47,-4540.74 1886,-4489 1946.26,-4429.64 2760.55,-4514.93 2770,-4525 2803.2,-4560.36 2782.59,-6223.07 2790,-6271 2830.41,-6532.25 2948.14,-6832.43 2985.49,-6923.45"/>
<polygon fill="blue" stroke="blue" points="2982.29,-6924.88 2989.34,-6932.79 2988.76,-6922.21 2982.29,-6924.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1682.04,-5831.43C1745.89,-5831.66 1821.58,-5844.57 1866,-5896 1889.72,-5923.47 1877.16,-6513.8 1886,-6549 1924.2,-6701.04 2025.81,-6862.29 2067.63,-6924.45"/>
<polygon fill="blue" stroke="blue" points="2064.84,-6926.58 2073.35,-6932.89 2070.63,-6922.65 2064.84,-6926.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1682.11,-5831.06C1746.19,-5831.1 1822.09,-5843.96 1866,-5896 1890.13,-5924.6 1880.32,-8553.02 1886,-8590 1924.37,-8839.95 2037.63,-9126.67 2074.36,-9215.4"/>
<polygon fill="blue" stroke="blue" points="2071.18,-9216.87 2078.25,-9224.76 2077.64,-9214.18 2071.18,-9216.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node382" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node382"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="2723.5,-9618 2354.5,-9618 2354.5,-9582 2723.5,-9582 2723.5,-9618"/>
<text text-anchor="middle" x="2539" y="-9596.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.04,-5861.05C1713.39,-5872.27 1811.19,-5874.98 1866,-5816 1909.39,-5769.32 1840.54,-4713.67 1886,-4669 2013.43,-4543.77 2161.41,-4542.92 2288,-4669 2336.23,-4717.03 2262.98,-9518.94 2308,-9570 2318.43,-9581.83 2331.06,-9590.74 2344.96,-9597.36"/>
<polygon fill="blue" stroke="blue" points="2343.7,-9600.62 2354.27,-9601.38 2346.47,-9594.2 2343.7,-9600.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1682.16,-5831.01C1746.26,-5831.04 1822.17,-5843.9 1866,-5896 1904.67,-5941.97 1846.36,-10175.86 1886,-10221 1898.94,-10235.74 1915.79,-10245.32 1934.22,-10251.3"/>
<polygon fill="blue" stroke="blue" points="1933.41,-10254.71 1943.99,-10254.11 1935.34,-10247.98 1933.41,-10254.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1682.16,-5831.01C1746.26,-5831.04 1822.17,-5843.89 1866,-5896 1905.15,-5942.54 1845.87,-10229.3 1886,-10275 1893.27,-10283.28 1901.77,-10289.93 1911.1,-10295.23"/>
<polygon fill="blue" stroke="blue" points="1909.77,-10298.49 1920.27,-10299.91 1912.95,-10292.25 1909.77,-10298.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1682.16,-5831.02C1746.26,-5831.05 1822.16,-5843.9 1866,-5896 1902.75,-5939.67 1848.34,-9962.12 1886,-10005 1900.54,-10021.55 1920,-10031.6 1941.08,-10037.34"/>
<polygon fill="blue" stroke="blue" points="1940.34,-10040.76 1950.88,-10039.69 1941.97,-10033.96 1940.34,-10040.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1682.15,-5831.02C1746.25,-5831.05 1822.15,-5843.91 1866,-5896 1901.3,-5937.94 1849.82,-9801.82 1886,-9843 1922.66,-9884.72 1990.6,-9885.13 2037.03,-9879.39"/>
<polygon fill="blue" stroke="blue" points="2037.74,-9882.82 2047.17,-9877.99 2036.79,-9875.89 2037.74,-9882.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1682.16,-5831.02C1746.25,-5831.05 1822.16,-5843.9 1866,-5896 1901.78,-5938.52 1849.32,-9855.25 1886,-9897 1888.06,-9899.34 1890.22,-9901.56 1892.47,-9903.65"/>
<polygon fill="blue" stroke="blue" points="1890.51,-9906.58 1900.44,-9910.28 1894.99,-9901.2 1890.51,-9906.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-5807.02C1713.12,-5818.3 1811.16,-5821.13 1866,-5762 1915.04,-5709.12 1834.61,-4514.6 1886,-4464 1928.54,-4422.11 2742.35,-4448.91 2770,-4477 2787.48,-4494.76 2786.19,-6246.37 2790,-6271 2830.37,-6532.25 2948.12,-6832.43 2985.48,-6923.45"/>
<polygon fill="blue" stroke="blue" points="2982.29,-6924.88 2989.34,-6932.79 2988.76,-6922.21 2982.29,-6924.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.45,-5770.99C1712.88,-5759.64 1811.17,-5756.69 1866,-5816 1896.78,-5849.29 1855.95,-7414.05 1886,-7448 1910.04,-7475.16 1947.34,-7484.77 1983.24,-7486.58"/>
<polygon fill="blue" stroke="blue" points="1983.22,-7490.08 1993.32,-7486.9 1983.43,-7483.09 1983.22,-7490.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.77,-5770.95C1713.17,-5759.65 1811.23,-5756.81 1866,-5816 1923.51,-5878.15 1829.86,-7276.61 1886,-7340 1910.26,-7367.39 1948.01,-7376.93 1984.21,-7378.62"/>
<polygon fill="blue" stroke="blue" points="1984.27,-7382.12 1994.36,-7378.9 1984.46,-7375.12 1984.27,-7382.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.45,-5771C1712.87,-5759.65 1811.16,-5756.7 1866,-5816 1895.77,-5848.18 1856.94,-7361.18 1886,-7394 1926.29,-7439.51 2003.82,-7435.74 2049.62,-7428.58"/>
<polygon fill="blue" stroke="blue" points="2050.44,-7431.99 2059.71,-7426.86 2049.26,-7425.09 2050.44,-7431.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.76,-5770.95C1713.16,-5759.66 1811.22,-5756.83 1866,-5816 1921.49,-5875.93 1831.83,-7224.87 1886,-7286 1918.55,-7322.74 1975.37,-7327.35 2020.14,-7324"/>
<polygon fill="blue" stroke="blue" points="2020.72,-7327.46 2030.37,-7323.08 2020.1,-7320.49 2020.72,-7327.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node374" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node374"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="2238,-7277 1936,-7277 1936,-7241 2238,-7241 2238,-7277"/>
<text text-anchor="middle" x="2087" y="-7255.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.75,-5770.96C1713.15,-5759.67 1811.2,-5756.84 1866,-5816 1919.01,-5873.23 1835.97,-7160.15 1886,-7220 1897,-7233.16 1911.01,-7242.73 1926.49,-7249.61"/>
<polygon fill="blue" stroke="blue" points="1925.18,-7252.85 1935.76,-7253.35 1927.8,-7246.36 1925.18,-7252.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.22,-5770.96C1712.73,-5759.49 1811.3,-5756.4 1866,-5816 1903.82,-5857.21 1849.09,-9800.98 1886,-9843 1922.65,-9884.73 1990.59,-9885.13 2037.03,-9879.39"/>
<polygon fill="blue" stroke="blue" points="2037.74,-9882.82 2047.17,-9878 2036.78,-9875.89 2037.74,-9882.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node329" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node329"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="2120,-6081 2054,-6081 2054,-6045 2120,-6045 2120,-6081"/>
<text text-anchor="middle" x="2087" y="-6059.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge634" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1648.92,-5716.95C1716.49,-5706.87 1810.85,-5705.86 1866,-5762 1908.78,-5805.55 1844.17,-5991.53 1886,-6036 1925.83,-6078.36 1998.07,-6077.14 2043.96,-6071.05"/>
<polygon fill="blue" stroke="blue" points="2044.5,-6074.51 2053.89,-6069.6 2043.49,-6067.58 2044.5,-6074.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="node331" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<g id="a_node331"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentialWithPniZkcPr...">
<polygon fill="white" stroke="black" points="2121.5,-5973 2052.5,-5973 2052.5,-5937 2121.5,-5937 2121.5,-5973"/>
<text text-anchor="middle" x="2087" y="-5951.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge638" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1652.62,-5716.99C1719.43,-5707.93 1810.75,-5708.34 1866,-5762 1919.31,-5813.77 1833.83,-5875.08 1886,-5928 1926.16,-5968.74 1996.45,-5968.5 2042.1,-5962.97"/>
<polygon fill="blue" stroke="blue" points="2042.85,-5966.4 2052.3,-5961.6 2041.92,-5959.47 2042.85,-5966.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge635" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.75,-5716.99C1715.52,-5706.62 1810.83,-5705.16 1866,-5762 1916.86,-5814.4 1836.29,-6036.51 1886,-6090 1917.46,-6123.86 1969.61,-6129.99 2012.77,-6127.98"/>
<polygon fill="blue" stroke="blue" points="2013.2,-6131.46 2022.96,-6127.35 2012.76,-6124.48 2013.2,-6131.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node335" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node335"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="2115,-5919 2059,-5919 2059,-5883 2115,-5883 2115,-5919"/>
<text text-anchor="middle" x="2087" y="-5897.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge639" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1676.23,-5720.29C1736.91,-5717.6 1811.34,-5724.3 1866,-5762 1882.69,-5773.51 1871.68,-5788.65 1886,-5803 1932.38,-5849.46 2005.2,-5877.4 2049,-5890.95"/>
<polygon fill="blue" stroke="blue" points="2048.1,-5894.33 2058.68,-5893.85 2050.11,-5887.63 2048.1,-5894.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge633" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1650.85,-5753.04C1718.93,-5762.71 1812.97,-5762.73 1866,-5705 1913.62,-5653.15 1835.83,-4487.38 1886,-4438 1919.44,-4405.09 2731.9,-4401.24 2770,-4439 2788.07,-4456.91 2786.12,-6245.85 2790,-6271 2830.34,-6532.26 2948.12,-6832.43 2985.48,-6923.45"/>
<polygon fill="blue" stroke="blue" points="2982.29,-6924.88 2989.34,-6932.79 2988.76,-6922.21 2982.29,-6924.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge637" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.26,-5717C1713.52,-5705.9 1811.05,-5703.34 1866,-5762 1895.9,-5793.92 1875.45,-6506.55 1886,-6549 1923.8,-6701.14 2025.64,-6862.33 2067.57,-6924.46"/>
<polygon fill="blue" stroke="blue" points="2064.79,-6926.6 2073.31,-6932.9 2070.58,-6922.66 2064.79,-6926.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge636" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.22,-5716.96C1712.73,-5705.49 1811.3,-5702.4 1866,-5762 1904.32,-5803.76 1848.59,-9800.41 1886,-9843 1922.65,-9884.73 1990.59,-9885.13 2037.02,-9879.39"/>
<polygon fill="blue" stroke="blue" points="2037.74,-9882.82 2047.17,-9878 2036.78,-9875.89 2037.74,-9882.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2066,-7832.79C2020.63,-7791.88 1914.46,-7687.28 1876,-7573 1869.47,-7553.6 1867.67,-6117.7 1876,-6099 1902.28,-6040 1990.13,-6044.52 2043.83,-6053.5"/>
<polygon fill="blue" stroke="blue" points="2043.31,-6056.96 2053.77,-6055.28 2044.54,-6050.07 2043.31,-6056.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2052.49,-7912.96C2000.12,-7922.78 1903.74,-7931.29 1876,-7869 1865.39,-7845.17 1865.39,-6014.83 1876,-5991 1902.06,-5932.48 1988.71,-5936.45 2042.52,-5945.28"/>
<polygon fill="blue" stroke="blue" points="2042.04,-5948.75 2052.49,-5947.04 2043.25,-5941.86 2042.04,-5948.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node328" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node328"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="2171,-6027 2003,-6027 2003,-5991 2171,-5991 2171,-6027"/>
<text text-anchor="middle" x="2087" y="-6005.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2171.26,-6017.89C2211.06,-6017.56 2256.72,-6009.83 2288,-5982 2314.74,-5958.21 2280.53,-5926.93 2308,-5904 2387.02,-5838.04 2698,-5944.55 2770,-5871 2801.13,-5839.2 2757.76,-5501.67 2790,-5471 2824.3,-5438.38 3608.32,-5437.74 3642,-5471 3686.94,-5515.39 3642.67,-7688.05 3670,-7745 3704.75,-7817.41 3785.21,-7870.24 3836.97,-7898.22"/>
<polygon fill="blue" stroke="blue" points="3835.49,-7901.4 3845.96,-7902.99 3838.77,-7895.22 3835.49,-7901.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node330" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node330"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="2602,-6003 2476,-6003 2476,-5967 2602,-5967 2602,-6003"/>
<text text-anchor="middle" x="2539" y="-5981.3" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2171.06,-6004.57C2255.57,-6000.06 2385.23,-5993.15 2465.65,-5988.86"/>
<polygon fill="blue" stroke="blue" points="2465.89,-5992.35 2475.69,-5988.32 2465.52,-5985.36 2465.89,-5992.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node332" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node332"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="2595.5,-5949 2482.5,-5949 2482.5,-5913 2595.5,-5913 2595.5,-5949"/>
<text text-anchor="middle" x="2539" y="-5927.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2171.09,-6011.2C2208.8,-6008.93 2252.74,-6001.5 2288,-5982 2300.15,-5975.28 2295.79,-5964.61 2308,-5958 2358.33,-5930.74 2423.82,-5925.45 2472.03,-5926.12"/>
<polygon fill="blue" stroke="blue" points="2471.97,-5929.62 2482.05,-5926.35 2472.13,-5922.62 2471.97,-5929.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node333" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node333"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2631.5,-6135 2446.5,-6135 2446.5,-6099 2631.5,-6099 2631.5,-6135"/>
<text text-anchor="middle" x="2539" y="-6113.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2171.06,-6001.54C2210.33,-6002.34 2255.59,-6010.05 2288,-6036 2307.98,-6052 2287.88,-6074.18 2308,-6090 2343.69,-6118.07 2392.67,-6126.63 2436.25,-6127.43"/>
<polygon fill="blue" stroke="blue" points="2436.31,-6130.93 2446.33,-6127.48 2436.34,-6123.93 2436.31,-6130.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node336" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node336"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="2600.5,-6081 2477.5,-6081 2477.5,-6045 2600.5,-6045 2600.5,-6081"/>
<text text-anchor="middle" x="2539" y="-6059.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2171.06,-6018.97C2256.18,-6029.18 2387.1,-6044.89 2467.38,-6054.53"/>
<polygon fill="blue" stroke="blue" points="2467.05,-6058.01 2477.4,-6055.73 2467.89,-6051.06 2467.05,-6058.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2171.14,-5997.45C2212.29,-5996.72 2259.19,-6004.31 2288,-6036 2326.37,-6078.21 2292.27,-6494.17 2308,-6549 2352.57,-6704.39 2468.99,-6863.64 2516.91,-6924.86"/>
<polygon fill="blue" stroke="blue" points="2514.27,-6927.15 2523.21,-6932.84 2519.76,-6922.82 2514.27,-6927.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2120,-6063C2191.95,-6063 2367.92,-6063 2467.08,-6063"/>
<polygon fill="blue" stroke="blue" points="2467.31,-6066.5 2477.31,-6063 2467.31,-6059.5 2467.31,-6066.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2602.1,-5997.09C2654.55,-6003.36 2727.71,-6002.11 2770,-5958 2811.18,-5915.05 2751.79,-5736.61 2790,-5691 2829.62,-5643.72 2905.12,-5635.5 2953.16,-5635.54"/>
<polygon fill="blue" stroke="blue" points="2953.22,-5639.05 2963.27,-5635.68 2953.31,-5632.05 2953.22,-5639.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2121.82,-5957.25C2194.57,-5962.1 2367.28,-5973.62 2465.82,-5980.19"/>
<polygon fill="blue" stroke="blue" points="2465.79,-5983.69 2476,-5980.87 2466.25,-5976.71 2465.79,-5983.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge515" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2595.7,-5940.94C2648.62,-5946.85 2726.4,-5945.71 2770,-5899 2813.77,-5852.1 2746.03,-5657.71 2790,-5611 2833.07,-5565.25 2912.76,-5569.08 2959.7,-5576.33"/>
<polygon fill="blue" stroke="blue" points="2959.32,-5579.81 2969.76,-5578.01 2960.47,-5572.91 2959.32,-5579.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge554" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2631.66,-6120.61C2732.53,-6124.58 2889.73,-6130.77 2960.41,-6133.56"/>
<polygon fill="blue" stroke="blue" points="2960.46,-6137.06 2970.59,-6133.96 2960.73,-6130.07 2960.46,-6137.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge593" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2151.04,-6117C2224.92,-6117 2348.34,-6117 2435.92,-6117"/>
<polygon fill="blue" stroke="blue" points="2436.15,-6120.5 2446.15,-6117 2436.15,-6113.5 2436.15,-6120.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge677" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2115.14,-5902.81C2184.85,-5907.46 2371.8,-5919.92 2472.16,-5926.61"/>
<polygon fill="blue" stroke="blue" points="2471.98,-5930.11 2482.19,-5927.28 2472.44,-5923.12 2471.98,-5930.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge723" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2600.69,-6065.39C2696.57,-6069.17 2880.33,-6076.4 2959.35,-6079.52"/>
<polygon fill="blue" stroke="blue" points="2959.66,-6083.03 2969.79,-6079.93 2959.93,-6076.04 2959.66,-6083.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.26,-6328.27C2614.35,-6338.02 2716.52,-6350.39 2770,-6295 2807.79,-6255.86 2759.22,-6095.86 2790,-6051 2829.75,-5993.05 2912.75,-5967.51 2960.7,-5957.21"/>
<polygon fill="blue" stroke="blue" points="2961.55,-5960.61 2970.65,-5955.18 2960.16,-5953.75 2961.55,-5960.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node338" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node338"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="2245.5,-6326 1928.5,-6326 1928.5,-6290 2245.5,-6290 2245.5,-6326"/>
<text text-anchor="middle" x="2087" y="-6304.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2245.7,-6312.91C2337.81,-6315.77 2446.5,-6319.15 2501.77,-6320.87"/>
<polygon fill="blue" stroke="blue" points="2501.67,-6324.37 2511.77,-6321.18 2501.89,-6317.37 2501.67,-6324.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2245.7,-6293.98C2334.67,-6286.07 2439.09,-6276.79 2495.92,-6271.74"/>
<polygon fill="blue" stroke="blue" points="2496.31,-6275.22 2505.96,-6270.85 2495.69,-6268.25 2496.31,-6275.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="node346" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<g id="a_node346"><a xlink:title=" &#160;&#160;&#160;fn server_secret_params() &#45;&gt; GenericServerSecretParams { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GenericServerSecretParams::generate(SERVER_SECRET_RAND) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2623.5,-6451 2454.5,-6451 2454.5,-6415 2623.5,-6415 2623.5,-6451"/>
<text text-anchor="middle" x="2539" y="-6429.3" font-family="Helvetica,sans-Serif" font-size="14.00">server_secret_params</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2245.77,-6311.33C2261.17,-6316.74 2275.64,-6324.39 2288,-6335 2311.9,-6355.52 2284.05,-6382.53 2308,-6403 2344.93,-6434.56 2398.12,-6443.04 2444.05,-6443.18"/>
<polygon fill="blue" stroke="blue" points="2444.37,-6446.68 2454.34,-6443.08 2444.3,-6439.68 2444.37,-6446.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2245.68,-6322.02C2260.22,-6325.47 2274.54,-6329.74 2288,-6335 2298.11,-6338.95 2297.86,-6345.14 2308,-6349 2373.01,-6373.75 2455.21,-6377.38 2501.66,-6377.13"/>
<polygon fill="blue" stroke="blue" points="2501.89,-6380.63 2511.84,-6377.01 2501.8,-6373.63 2501.89,-6380.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node339" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node339"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="1676,-6337 1460,-6337 1460,-6301 1676,-6301 1676,-6337"/>
<text text-anchor="middle" x="1568" y="-6315.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node343" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node343"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="2164,-6454 2010,-6454 2010,-6418 2164,-6418 2164,-6454"/>
<text text-anchor="middle" x="2087" y="-6432.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1676.34,-6304.59C1737.8,-6302.22 1812.99,-6309.97 1866,-6351 1885.91,-6366.41 1866.49,-6388.08 1886,-6404 1917.39,-6429.61 1961.03,-6438.65 1999.54,-6440.85"/>
<polygon fill="blue" stroke="blue" points="1999.59,-6444.35 2009.73,-6441.28 1999.89,-6437.36 1999.59,-6444.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1676.03,-6301.34C1739.13,-6297.31 1816.13,-6304.48 1866,-6351 1902.97,-6385.49 1847.23,-6430.54 1886,-6463 1920.25,-6491.67 2243.41,-6465.67 2288,-6463 2339.83,-6459.9 2397.39,-6453.22 2444.2,-6446.95"/>
<polygon fill="blue" stroke="blue" points="2444.88,-6450.39 2454.32,-6445.57 2443.94,-6443.45 2444.88,-6450.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1676.24,-6305.71C1732.7,-6298.69 1803.1,-6289.92 1866,-6282 1927.18,-6274.3 1997.92,-6265.27 2042.31,-6259.6"/>
<polygon fill="blue" stroke="blue" points="2042.98,-6263.04 2052.46,-6258.3 2042.1,-6256.09 2042.98,-6263.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1676.35,-6331.55C1738,-6332.92 1813.38,-6323.94 1866,-6282 1886.34,-6265.79 1865.74,-6243.32 1886,-6227 1932.23,-6189.76 2004.86,-6189.99 2048.71,-6194.4"/>
<polygon fill="blue" stroke="blue" points="2048.34,-6197.88 2058.67,-6195.52 2049.12,-6190.92 2048.34,-6197.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2572.37,-6274.73C2622.79,-6283.11 2719.53,-6290.36 2770,-6236 2817.27,-6185.08 2742.51,-5974.71 2790,-5924 2832.95,-5878.13 2912.68,-5882.01 2959.66,-5889.29"/>
<polygon fill="blue" stroke="blue" points="2959.29,-5892.78 2969.73,-5890.98 2960.45,-5885.87 2959.29,-5892.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node341" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node341"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="1701,-6452 1435,-6452 1435,-6416 1701,-6416 1701,-6452"/>
<text text-anchor="middle" x="1568" y="-6430.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1701.13,-6434.51C1794.95,-6434.87 1918.22,-6435.35 1999.67,-6435.67"/>
<polygon fill="blue" stroke="blue" points="1999.87,-6439.17 2009.89,-6435.71 1999.9,-6432.17 1999.87,-6439.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1637.97,-6452.06C1701.78,-6467.78 1799.55,-6489.36 1886,-6498 2063.78,-6515.77 2110.78,-6520.66 2288,-6498 2352.85,-6489.71 2424.91,-6469.78 2474.94,-6454.16"/>
<polygon fill="blue" stroke="blue" points="2476.16,-6457.45 2484.65,-6451.1 2474.06,-6450.77 2476.16,-6457.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1663.07,-6452.01C1728.37,-6458.72 1812.85,-6454.92 1866,-6405 1906.69,-6366.78 1846.02,-6319.96 1886,-6281 1926.85,-6241.18 1996.64,-6241.09 2042.03,-6246.3"/>
<polygon fill="blue" stroke="blue" points="2041.81,-6249.8 2052.17,-6247.6 2042.7,-6242.86 2041.81,-6249.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1657.23,-6452.03C1723.71,-6460.05 1812.31,-6457.91 1866,-6405 1922.7,-6349.12 1830.34,-6283.92 1886,-6227 1928.04,-6184.01 2003.61,-6186.53 2048.85,-6192.86"/>
<polygon fill="blue" stroke="blue" points="2048.43,-6196.33 2058.84,-6194.38 2049.48,-6189.41 2048.43,-6196.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node342" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node342"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2204,-6380 1970,-6380 1970,-6344 2204,-6344 2204,-6380"/>
<text text-anchor="middle" x="2087" y="-6358.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2204.18,-6351.67C2302.61,-6342.92 2437.63,-6330.92 2501.58,-6325.24"/>
<polygon fill="blue" stroke="blue" points="2501.93,-6328.72 2511.58,-6324.35 2501.31,-6321.75 2501.93,-6328.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2204.07,-6365.14C2233.59,-6361.12 2263.77,-6352.32 2288,-6335 2304.17,-6323.44 2291.73,-6306.42 2308,-6295 2363.61,-6255.97 2446.02,-6256.7 2495.62,-6261.71"/>
<polygon fill="blue" stroke="blue" points="2495.35,-6265.2 2505.68,-6262.83 2496.13,-6258.24 2495.35,-6265.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2204.19,-6375.27C2231.97,-6379.9 2261.3,-6386.01 2288,-6394 2297.34,-6396.79 2298.62,-6400.34 2308,-6403 2351.94,-6415.46 2402.08,-6422.76 2444.31,-6427.04"/>
<polygon fill="blue" stroke="blue" points="2444.02,-6430.53 2454.31,-6428.01 2444.7,-6423.56 2444.02,-6430.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2204.18,-6365.61C2302.61,-6368.68 2437.63,-6372.88 2501.58,-6374.87"/>
<polygon fill="blue" stroke="blue" points="2501.48,-6378.37 2511.58,-6375.18 2501.69,-6371.37 2501.48,-6378.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2164.04,-6433.4C2204.52,-6428.5 2253.02,-6416.65 2288,-6389 2303.59,-6376.67 2291.73,-6360.42 2308,-6349 2365.94,-6308.33 2452.99,-6310.83 2501.69,-6316.36"/>
<polygon fill="blue" stroke="blue" points="2501.41,-6319.85 2511.76,-6317.61 2502.27,-6312.91 2501.41,-6319.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2164.05,-6436.97C2206.06,-6433.37 2256.06,-6421.62 2288,-6389 2317.88,-6358.48 2276.43,-6323.77 2308,-6295 2358.88,-6248.64 2444.57,-6252.21 2495.76,-6259.66"/>
<polygon fill="blue" stroke="blue" points="2495.4,-6263.15 2505.83,-6261.25 2496.49,-6256.24 2495.4,-6263.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2164.08,-6435.49C2241.31,-6434.98 2361.02,-6434.18 2444.1,-6433.63"/>
<polygon fill="blue" stroke="blue" points="2444.33,-6437.12 2454.3,-6433.56 2444.28,-6430.12 2444.33,-6437.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2164.09,-6425.51C2206.45,-6419.7 2260.14,-6412.38 2308,-6406 2376.51,-6396.86 2456.54,-6386.49 2501.84,-6380.65"/>
<polygon fill="blue" stroke="blue" points="2502.31,-6384.12 2511.78,-6379.37 2501.41,-6377.18 2502.31,-6384.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node344" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node344"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="1705.5,-6396 1430.5,-6396 1430.5,-6360 1705.5,-6360 1705.5,-6396"/>
<text text-anchor="middle" x="1568" y="-6374.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge459" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1705.5,-6390.36C1755.97,-6395.18 1813.63,-6400.99 1866,-6407 1910.19,-6412.07 1959.28,-6418.46 1999.85,-6423.96"/>
<polygon fill="blue" stroke="blue" points="1999.59,-6427.46 2009.97,-6425.34 2000.53,-6420.52 1999.59,-6427.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge460" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1694,-6359.99C1752.35,-6358.54 1819.12,-6367.77 1866,-6407 1891.14,-6428.04 1859.86,-6458.21 1886,-6478 1921.61,-6504.96 2243.51,-6481.97 2288,-6478 2341.72,-6473.2 2401.17,-6462.72 2448.62,-6453.08"/>
<polygon fill="blue" stroke="blue" points="2449.46,-6456.48 2458.55,-6451.03 2448.05,-6449.62 2449.46,-6456.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge462" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1705.68,-6394.07C1760.97,-6393.32 1822,-6382.3 1866,-6346 1889.31,-6326.76 1862.95,-6300.55 1886,-6281 1929.26,-6244.32 1997.79,-6243.23 2042.33,-6247.39"/>
<polygon fill="blue" stroke="blue" points="2041.96,-6250.87 2052.27,-6248.45 2042.7,-6243.91 2041.96,-6250.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge461" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1678.73,-6396C1741.41,-6399.74 1817.03,-6392.15 1866,-6346 1905.03,-6309.22 1847.47,-6264.3 1886,-6227 1929.09,-6185.28 2003.97,-6187.28 2048.86,-6193.19"/>
<polygon fill="blue" stroke="blue" points="2048.38,-6196.65 2058.78,-6194.62 2049.38,-6189.73 2048.38,-6196.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node345" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node345"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="1709,-6273 1427,-6273 1427,-6237 1709,-6237 1709,-6273"/>
<text text-anchor="middle" x="1568" y="-6251.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge473" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1709.29,-6239.02C1764.69,-6240.47 1824.81,-6252.93 1866,-6292 1902.69,-6326.8 1849.92,-6368.57 1886,-6404 1915.43,-6432.9 1959.87,-6442.03 1999.4,-6443.45"/>
<polygon fill="blue" stroke="blue" points="1999.52,-6446.95 2009.59,-6443.65 1999.66,-6439.95 1999.52,-6446.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge475" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1709.17,-6239.58C1764.37,-6241.16 1824.39,-6253.57 1866,-6292 1898.34,-6321.87 1852.58,-6360.35 1886,-6389 1919.96,-6418.1 2243.4,-6405.75 2288,-6409 2339.76,-6412.77 2397.42,-6418.22 2444.32,-6422.98"/>
<polygon fill="blue" stroke="blue" points="2444.16,-6426.48 2454.46,-6424.01 2444.87,-6419.51 2444.16,-6426.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge474" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1709.25,-6254.73C1820.69,-6254.51 1969.5,-6254.23 2042.24,-6254.08"/>
<polygon fill="blue" stroke="blue" points="2042.42,-6257.58 2052.41,-6254.06 2042.4,-6250.58 2042.42,-6257.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge476" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1709.25,-6240.08C1824.16,-6227.86 1978.8,-6211.4 2048.81,-6203.96"/>
<polygon fill="blue" stroke="blue" points="2049.33,-6207.42 2058.91,-6202.88 2048.59,-6200.46 2049.33,-6207.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge591" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2623.54,-6433.07C2668.52,-6430.44 2724.05,-6422.8 2770,-6403 2856.85,-6365.59 2937.34,-6284.87 2974.85,-6243.53"/>
<polygon fill="blue" stroke="blue" points="2977.49,-6245.83 2981.56,-6236.05 2972.28,-6241.16 2977.49,-6245.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge616" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2121.66,-6251.84C2257.5,-6243.05 2758.63,-6209.86 2770,-6198 2809.01,-6157.3 2754.56,-5734.84 2790,-5691 2828.89,-5642.89 2904.95,-5634.97 2953.25,-5635.29"/>
<polygon fill="blue" stroke="blue" points="2953.35,-5638.79 2963.41,-5635.48 2953.48,-5631.8 2953.35,-5638.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge755" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2115.37,-6199.82C2239.75,-6198.88 2746.58,-6193.61 2770,-6170 2813.77,-6125.87 2748.16,-5656.96 2790,-5611 2832.41,-5564.4 2912.68,-5568.64 2959.84,-5576.16"/>
<polygon fill="blue" stroke="blue" points="2959.49,-5579.65 2969.93,-5577.9 2960.68,-5572.76 2959.49,-5579.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge780" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.24,-6379.91C2611.68,-6385.25 2706.25,-6389.99 2770,-6349 2784.43,-6339.73 2775.54,-6325.22 2790,-6316 2866.9,-6266.94 3134.45,-6336.44 3198,-6271 3251.89,-6215.5 3186.44,-5990.48 3226,-5924 3261.68,-5864.02 3335.59,-5825.76 3384.74,-5805.84"/>
<polygon fill="blue" stroke="blue" points="3386.2,-5809.02 3394.22,-5802.09 3383.63,-5802.51 3386.2,-5809.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge781" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.02,-6381.17C2659.6,-6398.31 2984.88,-6445.16 3198,-6316 3330.39,-6235.77 3401.62,-6049.32 3424.6,-5978.74"/>
<polygon fill="blue" stroke="blue" points="3427.94,-5979.79 3427.65,-5969.2 3421.27,-5977.66 3427.94,-5979.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge486" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2573.6,-5654.68C2654.9,-5651.47 2862.17,-5643.31 2953.11,-5639.73"/>
<polygon fill="blue" stroke="blue" points="2953.49,-5643.22 2963.35,-5639.33 2953.22,-5636.22 2953.49,-5643.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge559" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2572.03,-5814.89C2622.43,-5811.95 2719.69,-5814.57 2770,-5871 2822.98,-5930.42 2734.89,-5991.55 2790,-6049 2833.65,-6094.5 2913.13,-6093.04 2959.88,-6087.37"/>
<polygon fill="blue" stroke="blue" points="2960.45,-6090.82 2969.9,-6086.03 2959.52,-6083.89 2960.45,-6090.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge752" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.16,-5715.58C2614.43,-5723.59 2712.29,-5732.44 2770,-5683 2795.22,-5661.39 2764.92,-5632.77 2790,-5611 2836.98,-5570.23 2914.01,-5571.99 2959.68,-5577.58"/>
<polygon fill="blue" stroke="blue" points="2959.37,-5581.07 2969.75,-5578.94 2960.31,-5574.13 2959.37,-5581.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge761" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2603,-5751.69C2655.49,-5745.45 2728.17,-5746.86 2770,-5791 2818.55,-5842.24 2741.78,-6056.45 2790,-6108 2833.27,-6154.26 2913.95,-6149.94 2960.78,-6142.54"/>
<polygon fill="blue" stroke="blue" points="2961.53,-6145.96 2970.8,-6140.83 2960.35,-6139.06 2961.53,-6145.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.11,-5425.98C2614.9,-5421.97 2719.5,-5421.4 2770,-5482 2801.47,-5519.77 2756.74,-5887.8 2790,-5924 2832.86,-5970.64 2913.68,-5966.18 2960.66,-5958.66"/>
<polygon fill="blue" stroke="blue" points="2961.45,-5962.07 2970.7,-5956.92 2960.25,-5955.17 2961.45,-5962.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge429" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2572.06,-5205.36C2622.51,-5195.46 2719.83,-5185.36 2770,-5240 2817.37,-5291.58 2742.96,-5818.11 2790,-5870 2832.32,-5916.68 2912.62,-5912.41 2959.81,-5904.86"/>
<polygon fill="blue" stroke="blue" points="2960.66,-5908.27 2969.91,-5903.12 2959.46,-5901.37 2960.66,-5908.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge692" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.32,-5314.58C2615.74,-5305 2716.53,-5293.45 2770,-5348 2802.19,-5380.85 2758.25,-5520.72 2790,-5554 2833.46,-5599.56 2913.01,-5597.17 2959.82,-5590.88"/>
<polygon fill="blue" stroke="blue" points="2960.47,-5594.32 2969.85,-5589.4 2959.45,-5587.39 2960.47,-5594.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge751" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2573.71,-5367.36C2624.16,-5358.12 2718.82,-5349.71 2770,-5402 2802.64,-5435.34 2757.58,-5577.45 2790,-5611 2831.65,-5654.1 2905.86,-5652.78 2953.19,-5646.45"/>
<polygon fill="blue" stroke="blue" points="2953.77,-5649.9 2963.15,-5644.99 2952.75,-5642.98 2953.77,-5649.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge762" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.16,-5260.55C2614.55,-5250.35 2717.86,-5237.08 2770,-5294 2821.36,-5350.07 2735.46,-5925.03 2790,-5978 2855.04,-6041.17 3120.53,-6025.1 3198,-5978 3221.1,-5963.96 3207.86,-5944.04 3226,-5924 3271.52,-5873.71 3339.77,-5834.04 3385.31,-5811.06"/>
<polygon fill="blue" stroke="blue" points="3386.99,-5814.14 3394.39,-5806.55 3383.87,-5807.87 3386.99,-5814.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge763" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.17,-5260.54C2614.57,-5250.33 2717.9,-5237.04 2770,-5294 2823.87,-5352.89 2732.79,-5956.36 2790,-6012 2855,-6075.21 3108.06,-6023.48 3198,-6012 3270.11,-6002.79 3351.71,-5978.31 3397.29,-5963.31"/>
<polygon fill="blue" stroke="blue" points="3398.61,-5966.56 3407,-5960.08 3396.4,-5959.92 3398.61,-5966.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node429" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node429"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="3469,-5389 3399,-5389 3399,-5353 3469,-5353 3469,-5389"/>
<text text-anchor="middle" x="3434" y="-5367.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2588.21,-5126.07C2641.3,-5124.67 2725.09,-5131.64 2770,-5183 2801.59,-5219.12 2754.53,-5365.68 2790,-5398 2877.14,-5477.41 3257.57,-5407.55 3388.52,-5380.56"/>
<polygon fill="blue" stroke="blue" points="3389.52,-5383.92 3398.6,-5378.46 3388.1,-5377.07 3389.52,-5383.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge615" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2621.22,-5068.36C2799,-5051.64 3219.1,-5012.12 3374.16,-4997.53"/>
<polygon fill="blue" stroke="blue" points="3374.8,-5000.99 3384.43,-4996.57 3374.14,-4994.02 3374.8,-5000.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3003.51,-6236.19C3037.16,-6369.25 3259.11,-7202.56 3670,-7745 3719.66,-7810.56 3798.45,-7867.06 3845.3,-7897.35"/>
<polygon fill="blue" stroke="blue" points="3843.63,-7900.44 3853.95,-7902.88 3847.4,-7894.54 3843.63,-7900.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1(). -->
<g id="node362" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().</title>
<g id="a_node362"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec1() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="2168.5,-7185 2005.5,-7185 2005.5,-7149 2168.5,-7149 2168.5,-7185"/>
<text text-anchor="middle" x="2087" y="-7163.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2168.79,-7165.46C2206.22,-7162.42 2250.58,-7155.41 2288,-7140 2382.01,-7101.27 2471.98,-7018.38 2513.72,-6976.43"/>
<polygon fill="blue" stroke="blue" points="2516.42,-6978.68 2520.94,-6969.1 2511.43,-6973.77 2516.42,-6978.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2(). -->
<g id="node363" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().</title>
<g id="a_node363"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="2168.5,-7131 2005.5,-7131 2005.5,-7095 2168.5,-7095 2168.5,-7131"/>
<text text-anchor="middle" x="2087" y="-7109.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2168.8,-7108.75C2205.82,-7105.13 2249.85,-7098.42 2288,-7086 2370.18,-7059.25 2456.97,-7005.88 2503.57,-6974.86"/>
<polygon fill="blue" stroke="blue" points="2505.72,-6977.63 2512.07,-6969.15 2501.82,-6971.82 2505.72,-6977.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding(). -->
<g id="node364" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().</title>
<g id="a_node364"><a xlink:title=" &#160;&#160;&#160;fn test_encrypt_with_padding() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext = b&#39; secret team&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected...">
<polygon fill="white" stroke="black" points="2188.5,-7077 1985.5,-7077 1985.5,-7041 2188.5,-7041 2188.5,-7077"/>
<text text-anchor="middle" x="2087" y="-7055.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_encrypt_with_padding</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.58,-7048.99C2220.58,-7044.86 2255.97,-7039.29 2288,-7032 2359.53,-7015.72 2439.82,-6987.94 2489.66,-6969.53"/>
<polygon fill="blue" stroke="blue" points="2491.05,-6972.74 2499.2,-6965.97 2488.61,-6966.18 2491.05,-6972.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node406" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node406"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="3469,-5519 3399,-5519 3399,-5483 3469,-5483 3469,-5519"/>
<text text-anchor="middle" x="3434" y="-5497.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2162.71,-7012.53C2203.77,-7012.67 2253.26,-7005.81 2288,-6978 2307.98,-6962 2292.15,-6944.09 2308,-6924 2461.01,-6730.07 2651.06,-6831.51 2770,-6615 2792.9,-6573.31 2757.64,-5793.86 2790,-5759 2851.98,-5692.23 3114.92,-5756.38 3198,-5719 3294.99,-5675.36 3378.13,-5575.39 3414.05,-5527.51"/>
<polygon fill="blue" stroke="blue" points="3417.06,-5529.32 3420.2,-5519.2 3411.44,-5525.16 3417.06,-5529.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge537" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3006.27,-6932.75C3036.94,-6854.75 3155.99,-6541.14 3198,-6271 3208.02,-6206.53 3191.2,-5152.19 3226,-5097 3258.68,-5045.18 3325.54,-5017.88 3374.47,-5004.25"/>
<polygon fill="blue" stroke="blue" points="3375.55,-5007.58 3384.31,-5001.62 3373.74,-5000.82 3375.55,-5007.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge682" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2578.57,-6951C2647.74,-6951 2795,-6951 2895.02,-6951"/>
<polygon fill="blue" stroke="blue" points="2895.16,-6954.5 2905.16,-6951 2895.16,-6947.5 2895.16,-6954.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge868" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2155.77,-6932.84C2201.09,-6916.94 2257.76,-6889 2288,-6843 2315.94,-6800.5 2273.03,-6651.93 2308,-6615 2450.62,-6464.4 2632.22,-6704.05 2770,-6549 2800.64,-6514.52 2758.12,-5752.33 2790,-5719 2852.82,-5653.33 3131.9,-5753.37 3198,-5691 3269.69,-5623.36 3168.43,-5551.01 3226,-5471 3264.74,-5417.16 3340.41,-5391.08 3388.74,-5379.41"/>
<polygon fill="blue" stroke="blue" points="3389.66,-5382.79 3398.62,-5377.13 3388.08,-5375.97 3389.66,-5382.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2101.08,-7547.15C2133.68,-7592.6 2220.77,-7715.21 2288,-7821 2297.4,-7835.8 2293.32,-7845.42 2308,-7855 2343.16,-7877.93 2387.89,-7886.65 2428.54,-7888.93"/>
<polygon fill="blue" stroke="blue" points="2428.64,-7892.44 2438.78,-7889.38 2428.95,-7885.45 2428.64,-7892.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.55,-7462.66C2346.9,-7442.73 2686.87,-7412.98 2770,-7490 2803.25,-7520.81 2758.46,-7660.45 2790,-7693 2832.18,-7736.53 2907.58,-7734.71 2954.81,-7728.21"/>
<polygon fill="blue" stroke="blue" points="2955.35,-7731.67 2964.72,-7726.72 2954.31,-7724.75 2955.35,-7731.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="node375" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<g id="a_node375"><a xlink:title=" &#160;&#160;&#160;fn derive_public_signing_key_from_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorsements::ServerRootPublicKey&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;zkcredent...">
<polygon fill="white" stroke="black" points="2695.5,-7535 2382.5,-7535 2382.5,-7499 2695.5,-7499 2695.5,-7535"/>
<text text-anchor="middle" x="2539" y="-7513.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_public_signing_key_from_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.69,-7483.65C2235.77,-7488.79 2307.24,-7495.46 2371.78,-7501.49"/>
<polygon fill="blue" stroke="blue" points="2371.79,-7505 2382.07,-7502.45 2372.44,-7498.03 2371.79,-7505"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2179.74,-7358.8C2346.42,-7346.09 2689.25,-7330.77 2770,-7411 2814.56,-7455.28 2746.9,-7647.29 2790,-7693 2831.69,-7737.22 2907.59,-7735.09 2954.98,-7728.36"/>
<polygon fill="blue" stroke="blue" points="2955.59,-7731.81 2964.93,-7726.82 2954.52,-7724.89 2955.59,-7731.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2179.68,-7373.11C2214.17,-7377.03 2253.39,-7383.46 2288,-7394 2367.55,-7418.23 2453,-7465.39 2500.55,-7493.75"/>
<polygon fill="blue" stroke="blue" points="2498.89,-7496.84 2509.26,-7498.99 2502.5,-7490.84 2498.89,-7496.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge524" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2114.1,-7419.4C2227.74,-7413.06 2677.8,-7394.36 2770,-7490 2818.07,-7539.86 2742.66,-7750.45 2790,-7801 2833.3,-7847.23 2913.96,-7842.92 2960.79,-7835.53"/>
<polygon fill="blue" stroke="blue" points="2961.53,-7838.96 2970.8,-7833.82 2960.36,-7832.06 2961.53,-7838.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge683" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2143.75,-7306.55C2290.52,-7290.9 2682.3,-7258.23 2770,-7344 2816.98,-7389.94 2745,-7591.12 2790,-7639 2828.04,-7679.47 2894.72,-7681.16 2942.12,-7676"/>
<polygon fill="blue" stroke="blue" points="2942.72,-7679.45 2952.22,-7674.77 2941.87,-7672.51 2942.72,-7679.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge707" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2238.24,-7256.24C2416.96,-7256.49 2700,-7269.17 2770,-7344 2823.07,-7400.73 2737.1,-7636.12 2790,-7693 2831.39,-7737.5 2907.38,-7735.29 2954.88,-7728.46"/>
<polygon fill="blue" stroke="blue" points="2955.51,-7731.91 2964.85,-7726.9 2954.43,-7724.99 2955.51,-7731.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge706" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2238.09,-7269C2255.38,-7273.13 2272.39,-7278.65 2288,-7286 2391.36,-7334.66 2481.17,-7441.56 2518.96,-7490.99"/>
<polygon fill="blue" stroke="blue" points="2516.17,-7493.1 2524.99,-7498.97 2521.76,-7488.88 2516.17,-7493.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge760" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2626.76,-7535.04C2719.55,-7554.32 2863.85,-7584.32 2942.08,-7600.58"/>
<polygon fill="blue" stroke="blue" points="2941.71,-7604.08 2952.21,-7602.69 2943.13,-7597.23 2941.71,-7604.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="node400" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<g id="a_node400"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CommitmentWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let commitment_system = SystemParams::get_hardcoded...">
<polygon fill="white" stroke="black" points="2566,-9344 2512,-9344 2512,-9308 2566,-9308 2566,-9344"/>
<text text-anchor="middle" x="2539" y="-9322.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2154.03,-9260.86C2197.52,-9272.13 2255.85,-9286.35 2308,-9296 2376.14,-9308.61 2456.61,-9317.83 2502.03,-9322.51"/>
<polygon fill="blue" stroke="blue" points="2501.69,-9325.99 2511.99,-9323.52 2502.39,-9319.03 2501.69,-9325.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node422" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node422"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2566,-9535 2512,-9535 2512,-9499 2566,-9499 2566,-9535"/>
<text text-anchor="middle" x="2539" y="-9513.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2114.16,-10145.75C2157.55,-10153.57 2243.98,-10161.53 2288,-10113 2328.56,-10068.28 2269.54,-9616.54 2308,-9570 2355.01,-9513.11 2449.7,-9510.03 2501.73,-9513.21"/>
<polygon fill="blue" stroke="blue" points="2501.61,-9516.71 2511.84,-9513.94 2502.12,-9509.73 2501.61,-9516.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node423" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node423"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="2567,-9481 2511,-9481 2511,-9445 2567,-9445 2567,-9481"/>
<text text-anchor="middle" x="2539" y="-9459.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2151.32,-10096.61C2196.31,-10100.18 2254.49,-10096.01 2288,-10059 2330.46,-10012.11 2265.13,-9536.52 2308,-9490 2356.55,-9437.31 2448.98,-9444.89 2500.65,-9454.37"/>
<polygon fill="blue" stroke="blue" points="2500.24,-9457.86 2510.73,-9456.34 2501.58,-9450.99 2500.24,-9457.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node412" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node412"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="2567,-8883 2511,-8883 2511,-8847 2567,-8847 2567,-8883"/>
<text text-anchor="middle" x="2539" y="-8861.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2184.62,-9719.65C2222.28,-9718.59 2262.45,-9709.5 2288,-9681 2346.54,-9615.71 2248.89,-8956.78 2308,-8892 2356.3,-8839.07 2448.82,-8846.75 2500.58,-8856.3"/>
<polygon fill="blue" stroke="blue" points="2500.19,-8859.79 2510.67,-8858.29 2501.54,-8852.92 2500.19,-8859.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node409" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node409"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="2567,-8937 2511,-8937 2511,-8901 2567,-8901 2567,-8937"/>
<text text-anchor="middle" x="2539" y="-8915.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2226.15,-9768.7C2249.73,-9763.33 2271.8,-9753.06 2288,-9735 2346.54,-9669.71 2248.89,-9010.78 2308,-8946 2356.3,-8893.07 2448.82,-8900.75 2500.58,-8910.3"/>
<polygon fill="blue" stroke="blue" points="2500.19,-8913.79 2510.67,-8912.29 2501.54,-8906.92 2500.19,-8913.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node414" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node414"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="2566,-9045 2512,-9045 2512,-9009 2566,-9009 2566,-9045"/>
<text text-anchor="middle" x="2539" y="-9023.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2228.17,-9822.2C2250.98,-9816.71 2272.25,-9806.53 2288,-9789 2342.6,-9728.23 2252.88,-9114.3 2308,-9054 2356.73,-9000.7 2450.31,-9008.9 2501.81,-9018.54"/>
<polygon fill="blue" stroke="blue" points="2501.34,-9022.02 2511.83,-9020.54 2502.7,-9015.15 2501.34,-9022.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node411" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node411"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="2567,-8775 2511,-8775 2511,-8739 2567,-8739 2567,-8775"/>
<text text-anchor="middle" x="2539" y="-8753.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2354.28,-9608.91C2329.62,-9600.61 2309.04,-9585.78 2298,-9561 2289.32,-9541.51 2289.32,-8812.49 2298,-8793 2329.81,-8721.58 2441.29,-8734.52 2500.83,-8747.23"/>
<polygon fill="blue" stroke="blue" points="2500.1,-8750.66 2510.62,-8749.42 2501.62,-8743.82 2500.1,-8750.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node410" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node410"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="2567,-8991 2511,-8991 2511,-8955 2567,-8955 2567,-8991"/>
<text text-anchor="middle" x="2539" y="-8969.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2230.1,-10253.9C2252.22,-10248.3 2272.76,-10238.15 2288,-10221 2333.06,-10170.29 2262.5,-9050.32 2308,-9000 2356.06,-8946.85 2448.68,-8954.62 2500.52,-8964.24"/>
<polygon fill="blue" stroke="blue" points="2500.13,-8967.74 2510.62,-8966.24 2501.49,-8960.87 2500.13,-8967.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1955.29,-9991.06C1921.07,-9986.66 1889.91,-9973.23 1876,-9942 1864.68,-9916.59 1864.68,-5962.41 1876,-5937 1903.07,-5876.21 1995.5,-5882.85 2048.62,-5892.33"/>
<polygon fill="blue" stroke="blue" points="2048.21,-5895.81 2058.68,-5894.24 2049.51,-5888.94 2048.21,-5895.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="node418" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node418"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2578.5,-8692 2499.5,-8692 2499.5,-8656 2578.5,-8656 2578.5,-8692"/>
<text text-anchor="middle" x="2539" y="-8670.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2240.03,-9656.94C2258.3,-9650.98 2275.04,-9641.5 2288,-9627 2321.33,-9589.71 2276.43,-8765.79 2308,-8727 2351.05,-8674.12 2435.31,-8667.59 2489.02,-8669.5"/>
<polygon fill="blue" stroke="blue" points="2489.18,-8673.01 2499.34,-8669.98 2489.51,-8666.02 2489.18,-8673.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node419" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node419"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = credentials::convert_to_point_M2_recei...">
<polygon fill="white" stroke="black" points="2574,-8638 2504,-8638 2504,-8602 2574,-8602 2574,-8638"/>
<text text-anchor="middle" x="2539" y="-8616.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2240.05,-9656.96C2258.32,-9651 2275.05,-9641.51 2288,-9627 2324.25,-9586.37 2271.39,-8687.32 2308,-8647 2354.11,-8596.21 2440.93,-8601.13 2493.71,-8610.06"/>
<polygon fill="blue" stroke="blue" points="2493.32,-8613.55 2503.79,-8611.88 2494.57,-8606.66 2493.32,-8613.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2253.53,-10299.73C2266.5,-10293.88 2278.31,-10285.84 2288,-10275 2321.18,-10237.88 2276.56,-9417.61 2308,-9379 2354.59,-9321.77 2449.46,-9318.83 2501.62,-9322.12"/>
<polygon fill="blue" stroke="blue" points="2501.53,-9325.62 2511.76,-9322.87 2502.05,-9318.64 2501.53,-9325.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="node403" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node403"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2578.5,-8555 2499.5,-8555 2499.5,-8519 2578.5,-8519 2578.5,-8555"/>
<text text-anchor="middle" x="2539" y="-8533.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2253.65,-10299.84C2266.6,-10293.96 2278.37,-10285.89 2288,-10275 2319.01,-10239.94 2278.64,-8626.45 2308,-8590 2350.86,-8536.79 2435.47,-8530.41 2489.26,-8532.43"/>
<polygon fill="blue" stroke="blue" points="2489.1,-8535.93 2499.25,-8532.92 2489.44,-8528.94 2489.1,-8535.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node405" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node405"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_struct: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let r1 = sho.get_scalar(); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2574,-8501 2504,-8501 2504,-8465 2574,-8465 2574,-8501"/>
<text text-anchor="middle" x="2539" y="-8479.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2253.65,-10299.84C2266.6,-10293.96 2278.37,-10285.89 2288,-10275 2320.48,-10238.27 2275.21,-8546.45 2308,-8510 2353.88,-8459 2440.77,-8463.99 2493.63,-8472.99"/>
<polygon fill="blue" stroke="blue" points="2493.26,-8476.48 2503.72,-8474.83 2494.51,-8469.59 2493.26,-8476.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node417" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node417"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="2566,-9261 2512,-9261 2512,-9225 2566,-9225 2566,-9261"/>
<text text-anchor="middle" x="2539" y="-9239.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2253.55,-10299.75C2266.52,-10293.89 2278.32,-10285.85 2288,-10275 2324.22,-10234.41 2273.69,-9338.22 2308,-9296 2354.54,-9238.73 2449.42,-9235.81 2501.6,-9239.11"/>
<polygon fill="blue" stroke="blue" points="2501.52,-9242.61 2511.75,-9239.87 2502.04,-9235.63 2501.52,-9242.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="node398" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<g id="a_node398"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid: uid_struct::UidStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile...">
<polygon fill="white" stroke="black" points="2708,-8418 2370,-8418 2370,-8382 2708,-8382 2708,-8418"/>
<text text-anchor="middle" x="2539" y="-8396.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2223.01,-10039.58C2247.82,-10034.43 2271.16,-10024.02 2288,-10005 2345.17,-9940.44 2253.87,-8520.13 2308,-8453 2321.94,-8435.71 2340.29,-8423.37 2360.55,-8414.65"/>
<polygon fill="blue" stroke="blue" points="2361.99,-8417.84 2369.99,-8410.89 2359.4,-8411.34 2361.99,-8417.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node415" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node415"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="2566,-9099 2512,-9099 2512,-9063 2566,-9063 2566,-9099"/>
<text text-anchor="middle" x="2539" y="-9077.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2223.13,-10039.41C2247.85,-10034.24 2271.13,-10023.87 2288,-10005 2321.22,-9967.84 2274.46,-9144.87 2308,-9108 2356.6,-9054.58 2450.23,-9062.83 2501.78,-9072.51"/>
<polygon fill="blue" stroke="blue" points="2501.31,-9075.99 2511.8,-9074.51 2502.68,-9069.12 2501.31,-9075.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node416" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node416"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="2567,-9207 2511,-9207 2511,-9171 2567,-9171 2567,-9207"/>
<text text-anchor="middle" x="2539" y="-9185.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2223.08,-10039.37C2247.81,-10034.21 2271.1,-10023.85 2288,-10005 2346.54,-9939.71 2248.89,-9280.78 2308,-9216 2356.3,-9163.07 2448.82,-9170.75 2500.58,-9180.3"/>
<polygon fill="blue" stroke="blue" points="2500.19,-9183.79 2510.67,-9182.29 2501.54,-9176.92 2500.19,-9183.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge472" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.78,-9877.95C2172.85,-9884.87 2248.43,-9887.75 2288,-9843 2320.15,-9806.64 2274.6,-8131.21 2308,-8096 2376.2,-8024.12 3099.18,-8046.28 3198,-8039 3395.48,-8024.45 3448.05,-8041.93 3642,-8002 3711.02,-7987.79 3787.68,-7959.97 3835.85,-7940.94"/>
<polygon fill="blue" stroke="blue" points="3837.4,-7944.09 3845.39,-7937.14 3834.81,-7937.59 3837.4,-7944.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge471" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.8,-9877.97C2172.89,-9884.9 2248.48,-9887.8 2288,-9843 2328.5,-9797.09 2264.51,-7682.1 2308,-7639 2380.92,-7566.73 2691.07,-7573.35 2770,-7639 2807.53,-7670.22 2754.57,-7713.42 2790,-7747 2831.69,-7786.52 2901.12,-7787.45 2947.94,-7782.43"/>
<polygon fill="blue" stroke="blue" points="2948.65,-7785.87 2958.16,-7781.2 2947.81,-7778.92 2948.65,-7785.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="node395" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<g id="a_node395"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(S::NUM_ATTRS &gt;= 1, &#39; at least one attribute required&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S::NUM_ATTRS &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; mo...">
<polygon fill="white" stroke="black" points="2578.5,-8364 2499.5,-8364 2499.5,-8328 2578.5,-8328 2578.5,-8364"/>
<text text-anchor="middle" x="2539" y="-8342.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge470" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.77,-9877.94C2172.82,-9884.84 2248.38,-9887.71 2288,-9843 2342.17,-9781.87 2253.3,-8433.66 2308,-8373 2352.77,-8323.35 2436.42,-8326.81 2489.55,-8335.33"/>
<polygon fill="blue" stroke="blue" points="2488.98,-8338.78 2499.42,-8337.03 2490.16,-8331.88 2488.98,-8338.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="node424" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<g id="a_node424"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signing_key = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = signing_key * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2578.5,-9427 2499.5,-9427 2499.5,-9391 2578.5,-9391 2578.5,-9427"/>
<text text-anchor="middle" x="2539" y="-9405.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge469" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.5,-9877.7C2172.29,-9884.37 2247.59,-9887 2288,-9843 2318.62,-9809.65 2277.09,-9469.08 2308,-9436 2353.42,-9387.39 2436.22,-9390.34 2489.09,-9398.51"/>
<polygon fill="blue" stroke="blue" points="2488.81,-9402.01 2499.25,-9400.19 2489.96,-9395.1 2488.81,-9402.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="node396" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<g id="a_node396"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: receipt_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expi...">
<polygon fill="white" stroke="black" points="2662.5,-8310 2415.5,-8310 2415.5,-8274 2662.5,-8274 2662.5,-8310"/>
<text text-anchor="middle" x="2539" y="-8288.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge501" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2178.21,-9610.39C2217.79,-9609.64 2261.23,-9600.58 2288,-9570 2333.78,-9517.69 2261.39,-8370.57 2308,-8319 2332.52,-8291.87 2368.65,-8280.61 2405.04,-8277.37"/>
<polygon fill="blue" stroke="blue" points="2405.57,-8280.84 2415.3,-8276.66 2405.08,-8273.86 2405.57,-8280.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node408" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node408"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="2566,-8829 2512,-8829 2512,-8793 2566,-8793 2566,-8829"/>
<text text-anchor="middle" x="2539" y="-8807.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge502" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2178.06,-9610.25C2217.6,-9609.48 2261.06,-9600.43 2288,-9570 2341.93,-9509.08 2253.1,-8898.05 2308,-8838 2356.73,-8784.7 2450.31,-8792.9 2501.81,-8802.54"/>
<polygon fill="blue" stroke="blue" points="2501.34,-8806.02 2511.83,-8804.54 2502.7,-8799.15 2501.34,-8806.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node413" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node413"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="2566,-9153 2512,-9153 2512,-9117 2566,-9117 2566,-9153"/>
<text text-anchor="middle" x="2539" y="-9131.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge625" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2273.83,-9909.85C2278.92,-9906.09 2283.67,-9901.82 2288,-9897 2342.6,-9836.23 2252.88,-9222.3 2308,-9162 2356.73,-9108.7 2450.31,-9116.9 2501.81,-9126.54"/>
<polygon fill="blue" stroke="blue" points="2501.34,-9130.02 2511.83,-9128.54 2502.7,-9123.15 2501.34,-9130.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge867" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2239.62,-10190.53C2257.03,-10185.35 2273.65,-10177.79 2288,-10167 2472.84,-10027.98 2523.54,-9722.58 2535.04,-9628.29"/>
<polygon fill="blue" stroke="blue" points="2538.54,-9628.44 2536.23,-9618.11 2531.59,-9627.63 2538.54,-9628.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main(). -->
<g id="node392" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().</title>
<g id="a_node392"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;let mut randomness = [0u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut randomness); &#160;&#160;&#160;&#160;&#160;let secret_params = GenericServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1595,-6135 1541,-6135 1541,-6099 1595,-6099 1595,-6135"/>
<text text-anchor="middle" x="1568" y="-6113.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge572" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1595.29,-6124.23C1653.87,-6138.54 1795.48,-6162.96 1866,-6087 1894.7,-6056.09 1865.63,-5364.94 1886,-5328 2085.17,-4966.89 2475.85,-4756.96 2770,-5046 2815.26,-5090.47 2748.05,-6140.39 2790,-6188 2828.46,-6231.66 2899.88,-6232.42 2947.92,-6226.87"/>
<polygon fill="blue" stroke="blue" points="2948.63,-6230.31 2958.1,-6225.57 2947.74,-6223.37 2948.63,-6230.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge571" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1595.29,-6112.07C1654.49,-6102.66 1798.36,-6089.67 1866,-6170 1898.86,-6209.02 1852.32,-9804.68 1886,-9843 1922.66,-9884.72 1990.6,-9885.12 2037.03,-9879.38"/>
<polygon fill="blue" stroke="blue" points="2037.74,-9882.82 2047.17,-9877.99 2036.79,-9875.88 2037.74,-9882.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="node393" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<g id="a_node393"><a xlink:title=" &#160;&#160;&#160;pub fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3477.5,-8555 3390.5,-8555 3390.5,-8519 3477.5,-8519 3477.5,-8555"/>
<text text-anchor="middle" x="3434" y="-8533.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge456" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M3456.05,-8555.27C3498.23,-8593.11 3593.24,-8684.67 3642,-8782 4046.56,-9589.57 3899.66,-9881.26 4100,-10762 4153.33,-10996.46 4216.14,-11280.01 4235.8,-11368.94"/>
<polygon fill="blue" stroke="blue" points="4232.41,-11369.79 4237.98,-11378.8 4239.24,-11368.28 4232.41,-11369.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node394" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node394"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3058.5,-8418 2937.5,-8418 2937.5,-8382 3058.5,-8382 3058.5,-8418"/>
<text text-anchor="middle" x="2998" y="-8396.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3056.18,-8418.05C3141.01,-8444.83 3298.94,-8494.68 3380.79,-8520.52"/>
<polygon fill="blue" stroke="blue" points="3379.8,-8523.88 3390.39,-8523.55 3381.91,-8517.2 3379.8,-8523.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2578.61,-8342.35C2712.04,-8330.1 3148.25,-8293.26 3198,-8330 3232.04,-8355.14 3199.42,-8388.08 3226,-8421 3266.11,-8470.67 3333.52,-8502.72 3380.47,-8520.27"/>
<polygon fill="blue" stroke="blue" points="3379.57,-8523.67 3390.16,-8523.8 3381.96,-8517.09 3379.57,-8523.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.52,-8278.41C2829.9,-8262.63 3118.41,-8246.22 3198,-8310 3237.7,-8341.81 3195.07,-8380.61 3226,-8421 3265.02,-8471.95 3333.19,-8503.84 3380.59,-8521.01"/>
<polygon fill="blue" stroke="blue" points="3379.49,-8524.33 3390.08,-8524.35 3381.81,-8517.72 3379.49,-8524.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.64,-8301.21C2697.61,-8305.23 2735.55,-8310.94 2770,-8319 2832,-8333.5 2900.5,-8359.39 2945.87,-8377.99"/>
<polygon fill="blue" stroke="blue" points="2944.61,-8381.26 2955.19,-8381.85 2947.28,-8374.79 2944.61,-8381.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="node420" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<g id="a_node420"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1_from(receipt_expiration_time: Timestamp, receipt_level: ReceiptLevel) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[0u8; std::mem::size_of::&lt;Timestamp&gt;() + std::mem::size_of::&lt;Re...">
<polygon fill="white" stroke="black" points="3054,-8227 2942,-8227 2942,-8191 3054,-8191 3054,-8227"/>
<text text-anchor="middle" x="2998" y="-8205.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.7,-8278.3C2697.49,-8273.79 2735.33,-8268.29 2770,-8262 2824.97,-8252.02 2886.67,-8237.39 2931.86,-8226.03"/>
<polygon fill="blue" stroke="blue" points="2932.98,-8229.36 2941.81,-8223.51 2931.26,-8222.57 2932.98,-8229.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node397" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node397"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="2126.5,-8418 2047.5,-8418 2047.5,-8382 2126.5,-8382 2126.5,-8418"/>
<text text-anchor="middle" x="2087" y="-8396.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge465" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.54,-8395.21C2170.46,-8389.76 2244.39,-8380.64 2308,-8373 2370.53,-8365.49 2442.66,-8357.06 2489.22,-8351.65"/>
<polygon fill="blue" stroke="blue" points="2489.8,-8355.11 2499.33,-8350.48 2489,-8348.15 2489.8,-8355.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge468" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.76,-8400C2178.59,-8400 2273.92,-8400 2359.76,-8400"/>
<polygon fill="blue" stroke="blue" points="2359.91,-8403.5 2369.91,-8400 2359.91,-8396.5 2359.91,-8403.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge464" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.55,-8399.94C2170.97,-8401.95 2243.56,-8411.91 2288,-8453 2307.71,-8471.23 2287.04,-8493.22 2308,-8510 2359.09,-8550.9 2438.21,-8550.7 2489.05,-8545.14"/>
<polygon fill="blue" stroke="blue" points="2489.62,-8548.59 2499.13,-8543.92 2488.79,-8541.64 2489.62,-8548.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge466" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.68,-8410.64C2170.41,-8422.37 2243.87,-8441.13 2308,-8453 2372.24,-8464.89 2447.42,-8473.76 2493.89,-8478.66"/>
<polygon fill="blue" stroke="blue" points="2493.61,-8482.15 2503.92,-8479.7 2494.33,-8475.19 2493.61,-8482.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge463" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.79,-8397.8C2173.24,-8397.54 2249.56,-8405.09 2288,-8453 2322.31,-8495.76 2270.74,-8905.78 2308,-8946 2356.7,-8998.56 2449.06,-8991.03 2500.69,-8981.59"/>
<polygon fill="blue" stroke="blue" points="2501.61,-8984.98 2510.76,-8979.64 2500.27,-8978.11 2501.61,-8984.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge467" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.85,-8397.76C2173.35,-8397.44 2249.74,-8404.95 2288,-8453 2329.62,-8505.27 2262.77,-9004.82 2308,-9054 2356.89,-9107.15 2450.41,-9099.01 2501.85,-9089.42"/>
<polygon fill="blue" stroke="blue" points="2502.73,-9092.81 2511.86,-9087.43 2501.37,-9085.95 2502.73,-9092.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge567" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.91,-8381.99C2717.17,-8378.26 2754.91,-8374.89 2790,-8373 2971.07,-8363.25 3040.76,-8282.68 3198,-8373 3219.42,-8385.3 3208.39,-8403.69 3226,-8421 3270.85,-8465.08 3335.81,-8497.83 3380.95,-8517.1"/>
<polygon fill="blue" stroke="blue" points="3379.69,-8520.37 3390.27,-8521 3382.4,-8513.91 3379.69,-8520.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge565" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2708.22,-8400C2783.85,-8400 2868.97,-8400 2927.08,-8400"/>
<polygon fill="blue" stroke="blue" points="2927.25,-8403.5 2937.25,-8400 2927.25,-8396.5 2927.25,-8403.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="node427" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<g id="a_node427"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m_from(timestamp: Timestamp) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20220524_Timestamp_Calc_m&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;timestamp.to_be_bytes(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3049.5,-8144 2946.5,-8144 2946.5,-8108 3049.5,-8108 3049.5,-8144"/>
<text text-anchor="middle" x="2998" y="-8122.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge566" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2708.24,-8406.96C2731.43,-8400.79 2753.06,-8390.18 2770,-8373 2800.43,-8342.14 2761.7,-8211.83 2790,-8179 2825.77,-8137.51 2889.14,-8126.25 2936.38,-8124.15"/>
<polygon fill="blue" stroke="blue" points="2936.62,-8127.64 2946.5,-8123.83 2936.39,-8120.65 2936.62,-8127.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="node399" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<g id="a_node399"><a xlink:title="pub(crate) fn convert_to_points_receipt_struct( &#160;&#160;&#160;&#160;receipt: receipt_struct::ReceiptStruct, ) &#45;&gt; Vec&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let m1 = receipt.calc_m1(); &#160;...">
<polygon fill="white" stroke="black" points="2207,-8364 1967,-8364 1967,-8328 2207,-8328 2207,-8364"/>
<text text-anchor="middle" x="2087" y="-8342.3" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_points_receipt_struct</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="node421" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<g id="a_node421"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m1_from(self.receipt_expiration_time, self.receipt_level) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2575.5,-8227 2502.5,-8227 2502.5,-8191 2575.5,-8191 2575.5,-8227"/>
<text text-anchor="middle" x="2539" y="-8205.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="edge799" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2129.98,-8327.98C2173.81,-8309.63 2244.84,-8281.24 2308,-8262 2371,-8242.82 2445.54,-8226.83 2492.31,-8217.59"/>
<polygon fill="blue" stroke="blue" points="2492.99,-8221.02 2502.14,-8215.67 2491.65,-8214.15 2492.99,-8221.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="node402" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<g id="a_node402"><a xlink:title=" &#160;&#160;&#160;pub fn calc_j3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY_LEN].co...">
<polygon fill="white" stroke="black" points="3029.5,-9344 2966.5,-9344 2966.5,-9308 3029.5,-9308 3029.5,-9344"/>
<text text-anchor="middle" x="2998" y="-9322.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_j3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="edge539" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.21,-9326C2642.46,-9326 2864.55,-9326 2956.45,-9326"/>
<polygon fill="blue" stroke="blue" points="2956.48,-9329.5 2966.48,-9326 2956.48,-9322.5 2956.48,-9329.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node401" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node401"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="2155.5,-9344 2018.5,-9344 2018.5,-9308 2155.5,-9308 2155.5,-9344"/>
<text text-anchor="middle" x="2087" y="-9322.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge590" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2155.86,-9326C2252.27,-9326 2425.58,-9326 2501.12,-9326"/>
<polygon fill="blue" stroke="blue" points="2501.54,-9329.5 2511.54,-9326 2501.54,-9322.5 2501.54,-9329.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge778" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3022.31,-9307.97C3062.93,-9275.51 3147.17,-9203.37 3198,-9126 3326.67,-8930.15 3403.83,-8652.81 3426.19,-8564.87"/>
<polygon fill="blue" stroke="blue" points="3429.6,-8565.66 3428.64,-8555.1 3422.81,-8563.95 3429.6,-8565.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2578.66,-8537C2721.07,-8537 3216.63,-8537 3380.18,-8537"/>
<polygon fill="blue" stroke="blue" points="3380.46,-8540.5 3390.46,-8537 3380.46,-8533.5 3380.46,-8540.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node404" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node404"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2173,-8555 2001,-8555 2001,-8519 2173,-8519 2173,-8555"/>
<text text-anchor="middle" x="2087" y="-8533.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2093.75,-8555.19C2118.46,-8633.51 2217.45,-8949.98 2288,-9213 2297.83,-9249.65 2279.78,-9270.64 2308,-9296 2361.27,-9343.87 2451.53,-9339.7 2501.68,-9332.7"/>
<polygon fill="blue" stroke="blue" points="2502.38,-9336.14 2511.74,-9331.18 2501.33,-9329.22 2502.38,-9336.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2173.17,-8537C2266.62,-8537 2413.39,-8537 2489.14,-8537"/>
<polygon fill="blue" stroke="blue" points="2489.34,-8540.5 2499.34,-8537 2489.34,-8533.5 2489.34,-8540.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2173.13,-8526.45C2213.93,-8521.42 2263.49,-8515.34 2308,-8510 2372.57,-8502.25 2447.38,-8493.51 2493.7,-8488.13"/>
<polygon fill="blue" stroke="blue" points="2494.17,-8491.6 2503.7,-8486.97 2493.37,-8484.65 2494.17,-8491.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge846" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2574.19,-8485.07C2710.29,-8493.3 3214.22,-8523.77 3379.85,-8533.79"/>
<polygon fill="blue" stroke="blue" points="3380.07,-8537.31 3390.27,-8534.42 3380.5,-8530.32 3380.07,-8537.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M3457.24,-5519.1C3502.52,-5557.55 3604.32,-5652.64 3642,-5759 3668.85,-5834.79 3616.68,-11487.82 3670,-11548 3713.47,-11597.06 3797.55,-11591.65 3846.38,-11583.33"/>
<polygon fill="blue" stroke="blue" points="3847.03,-11586.76 3856.24,-11581.52 3845.77,-11579.88 3847.03,-11586.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node407" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node407"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="3100.5,-5519 2895.5,-5519 2895.5,-5483 3100.5,-5483 3100.5,-5519"/>
<text text-anchor="middle" x="2998" y="-5497.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3100.67,-5484.71C3136.99,-5473.66 3174.66,-5455.12 3198,-5424 3241.76,-5365.65 3185.22,-5157.46 3226,-5097 3260.05,-5046.52 3326.01,-5019.05 3374.36,-5005.02"/>
<polygon fill="blue" stroke="blue" points="3375.39,-5008.36 3384.08,-5002.3 3373.51,-5001.62 3375.39,-5008.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3100.75,-5501C3191.84,-5501 3321.09,-5501 3388.38,-5501"/>
<polygon fill="blue" stroke="blue" points="3388.63,-5504.5 3398.63,-5501 3388.63,-5497.5 3388.63,-5504.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.24,-8809.04C2669.52,-8802.97 3049.69,-8796.44 3198,-9014 3252.71,-9094.25 3187.01,-10673.05 3226,-10762 3261.53,-10843.06 3348.06,-10906.81 3397.26,-10938.01"/>
<polygon fill="blue" stroke="blue" points="3395.66,-10941.14 3405.99,-10943.46 3399.36,-10935.2 3395.66,-10941.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.11,-8817.41C2614.43,-8827.53 2717.6,-8840.69 2770,-8784 2809.4,-8741.38 2753.54,-8307.16 2790,-8262 2823.43,-8220.59 2884.41,-8208.95 2931.56,-8206.71"/>
<polygon fill="blue" stroke="blue" points="2931.82,-8210.21 2941.69,-8206.37 2931.58,-8203.21 2931.82,-8210.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.17,-8916.46C2722.12,-8902.6 3492.54,-8842.63 3642,-9005 3673.17,-9038.86 3664.91,-9787.26 3670,-9833 3719.23,-10275.46 3845.86,-10804.56 3877,-10930.93"/>
<polygon fill="blue" stroke="blue" points="3873.68,-10932.07 3879.48,-10940.94 3880.47,-10930.39 3873.68,-10932.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2510.75,-8925.65C2461.97,-8935.73 2360,-8948.24 2308,-8892 2268.82,-8849.63 2326.81,-8415.71 2288,-8373 2269.64,-8352.79 2243.92,-8342.38 2217.03,-8337.68"/>
<polygon fill="blue" stroke="blue" points="2217.49,-8334.21 2207.08,-8336.2 2216.46,-8341.14 2217.49,-8334.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.42,-8969.65C2714.43,-8953.42 3411.07,-8898.95 3642,-9291 3672.61,-9342.96 3662.8,-9773.13 3670,-9833 3723.17,-10275 3846.85,-10804.45 3877.19,-10930.9"/>
<polygon fill="blue" stroke="blue" points="3873.86,-10932.02 3879.6,-10940.92 3880.66,-10930.38 3873.86,-10932.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.32,-8979.71C2616.21,-8989.89 2718.36,-9002.56 2770,-8946 2827.48,-8883.04 2736.85,-8245.66 2790,-8179 2824.26,-8136.03 2888.18,-8125.05 2935.96,-8123.41"/>
<polygon fill="blue" stroke="blue" points="2936.28,-8126.91 2946.2,-8123.2 2936.13,-8119.91 2936.28,-8126.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.08,-8754.53C2721.58,-8741.11 3489.87,-8683.13 3642,-8843 3679.93,-8882.86 3664.07,-9778.3 3670,-9833 3718.01,-10275.59 3845.55,-10804.6 3876.94,-10930.93"/>
<polygon fill="blue" stroke="blue" points="3873.62,-10932.08 3879.44,-10940.94 3880.42,-10930.39 3873.62,-10932.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.32,-8763.25C2616.2,-8772.63 2718.34,-8783.71 2770,-8727 2811.03,-8681.96 2751.77,-8226.44 2790,-8179 2824.48,-8136.21 2888.37,-8125.2 2936.08,-8123.51"/>
<polygon fill="blue" stroke="blue" points="2936.39,-8127 2946.31,-8123.28 2936.23,-8120.01 2936.39,-8127"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge492" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.24,-8863.57C2729.44,-8855.33 3563.74,-8816.95 3642,-8895 3678.91,-8931.82 3664.34,-9781.17 3670,-9833 3718.35,-10275.55 3845.64,-10804.59 3876.96,-10930.93"/>
<polygon fill="blue" stroke="blue" points="3873.64,-10932.08 3879.45,-10940.94 3880.43,-10930.39 3873.64,-10932.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge493" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2510.77,-8871.62C2462.03,-8881.67 2360.12,-8894.12 2308,-8838 2272.81,-8800.11 2322.86,-8411.2 2288,-8373 2269.59,-8352.83 2243.86,-8342.44 2216.97,-8337.74"/>
<polygon fill="blue" stroke="blue" points="2217.42,-8334.27 2207.02,-8336.26 2216.39,-8341.2 2217.42,-8334.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge520" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.32,-9137.31C2609.17,-9141.24 2696.6,-9150 2770,-9162 2773,-9162.49 3196.06,-9249.66 3198,-9252 3251.47,-9316.65 3192.22,-10685.2 3226,-10762 3261.54,-10842.8 3347.67,-10906.45 3396.9,-10937.75"/>
<polygon fill="blue" stroke="blue" points="3395.31,-10940.89 3405.64,-10943.22 3399.02,-10934.95 3395.31,-10940.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge519" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.17,-9135.03C2609.53,-9134.39 2698.59,-9130.2 2770,-9108 2975.42,-9044.15 3037.61,-9025.34 3198,-8882 3306.48,-8785.05 3389.34,-8627.99 3420.05,-8564.72"/>
<polygon fill="blue" stroke="blue" points="3423.35,-8565.92 3424.53,-8555.39 3417.04,-8562.89 3423.35,-8565.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge680" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.04,-9025.29C2677.34,-9018.59 3111.42,-8998.9 3198,-9093 3260.79,-9161.24 3188.74,-10677.08 3226,-10762 3261.56,-10843.05 3348.08,-10906.8 3397.27,-10938.01"/>
<polygon fill="blue" stroke="blue" points="3395.66,-10941.13 3406,-10943.45 3399.37,-10935.19 3395.66,-10941.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge679" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.15,-9028C2609.87,-9028.8 2699.91,-9026.64 2770,-9000 3049.69,-8893.69 3323.2,-8643.49 3406.97,-8562.67"/>
<polygon fill="blue" stroke="blue" points="3409.74,-8564.86 3414.48,-8555.38 3404.87,-8559.83 3409.74,-8564.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge687" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.26,-9082.39C2683.5,-9088.87 3155.14,-9117.8 3198,-9166 3256.93,-9232.27 3190.34,-10680.81 3226,-10762 3261.5,-10842.82 3347.64,-10906.46 3396.89,-10937.76"/>
<polygon fill="blue" stroke="blue" points="3395.3,-10940.89 3405.63,-10943.22 3399.01,-10934.96 3395.3,-10940.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge686" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.2,-9087.49C2614.65,-9097.73 2718.04,-9111.09 2770,-9054 2802.73,-9018.04 2759.75,-8217.07 2790,-8179 2824.19,-8135.98 2888.12,-8125 2935.93,-8123.39"/>
<polygon fill="blue" stroke="blue" points="2936.25,-8126.88 2946.17,-8123.17 2936.1,-8119.88 2936.25,-8126.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge826" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.08,-9187.98C2677.96,-9184.33 3096.19,-9175.92 3198,-9252 3793.76,-9697.22 3873.29,-10744.85 3882.8,-10930.6"/>
<polygon fill="blue" stroke="blue" points="3879.31,-10930.84 3883.29,-10940.66 3886.3,-10930.5 3879.31,-10930.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge838" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.04,-9244.13C2685.45,-9249.42 3175.94,-9272.55 3198,-9296 3253.81,-9355.34 3193.18,-10687.44 3226,-10762 3261.56,-10842.79 3347.68,-10906.44 3396.91,-10937.75"/>
<polygon fill="blue" stroke="blue" points="3395.31,-10940.88 3405.65,-10943.22 3399.02,-10934.95 3395.31,-10940.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2578.68,-8669.62C2624.4,-8664.4 2702.77,-8655.34 2770,-8647 2960.38,-8623.37 3009.19,-8624.97 3198,-8591 3261.27,-8579.62 3333.2,-8562.46 3380.63,-8550.55"/>
<polygon fill="blue" stroke="blue" points="3381.53,-8553.93 3390.37,-8548.09 3379.82,-8547.15 3381.53,-8553.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2574.19,-8616.82C2710.29,-8604.17 3214.22,-8557.33 3379.85,-8541.94"/>
<polygon fill="blue" stroke="blue" points="3380.63,-8545.38 3390.27,-8540.97 3379.99,-8538.41 3380.63,-8545.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3054,-8208.38C3099.24,-8211 3161.62,-8222.35 3198,-8262 3246.51,-8314.87 3184.47,-8362.48 3226,-8421 3263.36,-8473.65 3332.54,-8505.31 3380.59,-8521.94"/>
<polygon fill="blue" stroke="blue" points="3379.61,-8525.31 3390.21,-8525.17 3381.84,-8518.67 3379.61,-8525.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge672" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2575.86,-8209C2652.68,-8209 2834.07,-8209 2931.85,-8209"/>
<polygon fill="blue" stroke="blue" points="2931.9,-8212.5 2941.9,-8209 2931.9,-8205.5 2931.9,-8212.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2566.28,-9513.84C2615.34,-9509.6 2720.4,-9508.66 2770,-9570 2814.68,-9625.26 2742.7,-10795.97 2790,-10849 2832.28,-10896.4 2913.68,-10891.55 2960.82,-10883.78"/>
<polygon fill="blue" stroke="blue" points="2961.67,-10887.19 2970.9,-10881.99 2960.44,-10880.3 2961.67,-10887.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2567.38,-9456.24C2616.36,-9445.97 2718.65,-9433.17 2770,-9490 2817.39,-9542.44 2747.1,-10705.83 2790,-10762 2820.89,-10802.45 2877.39,-10816.85 2923.57,-10821.47"/>
<polygon fill="blue" stroke="blue" points="2923.29,-10824.96 2933.55,-10822.33 2923.89,-10817.98 2923.29,-10824.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2578.7,-9412.91C2704.93,-9424.82 3102.03,-9455.36 3198,-9379 3331.99,-9272.39 3412.35,-8699.59 3429.52,-8565.22"/>
<polygon fill="blue" stroke="blue" points="3433,-8565.65 3430.78,-8555.29 3426.05,-8564.77 3433,-8565.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node425" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node425"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="2144.5,-9481 2029.5,-9481 2029.5,-9445 2144.5,-9445 2144.5,-9481"/>
<text text-anchor="middle" x="2087" y="-9459.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2144.51,-9470.02C2188.94,-9475.52 2252.41,-9483.33 2308,-9490 2376.51,-9498.23 2456.54,-9507.56 2501.85,-9512.82"/>
<polygon fill="blue" stroke="blue" points="2501.44,-9516.29 2511.78,-9513.97 2502.25,-9509.34 2501.44,-9516.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2144.54,-9463C2237.76,-9463 2421.27,-9463 2500.31,-9463"/>
<polygon fill="blue" stroke="blue" points="2500.75,-9466.5 2510.75,-9463 2500.75,-9459.5 2500.75,-9466.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2144.51,-9455.98C2188.94,-9450.48 2252.41,-9442.67 2308,-9436 2370.53,-9428.49 2442.66,-9420.06 2489.22,-9414.65"/>
<polygon fill="blue" stroke="blue" points="2489.8,-9418.11 2499.33,-9413.48 2489,-9411.15 2489.8,-9418.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m(). -->
<g id="node426" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().</title>
<g id="a_node426"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m_from(self.timestamp) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2571,-8144 2507,-8144 2507,-8108 2571,-8108 2571,-8144"/>
<text text-anchor="middle" x="2539" y="-8122.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2571.05,-8126C2645.95,-8126 2837.61,-8126 2936.28,-8126"/>
<polygon fill="blue" stroke="blue" points="2936.4,-8129.5 2946.4,-8126 2936.4,-8122.5 2936.4,-8129.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge485" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3049.67,-8124.63C3095.61,-8126.36 3161.52,-8136.81 3198,-8179 3268.81,-8260.91 3165.98,-8330.89 3226,-8421 3262,-8475.05 3332.16,-8506.52 3380.75,-8522.72"/>
<polygon fill="blue" stroke="blue" points="3379.88,-8526.12 3390.47,-8525.86 3382.03,-8519.46 3379.88,-8526.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node428" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node428"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3074,-5389 2922,-5389 2922,-5353 3074,-5353 3074,-5389"/>
<text text-anchor="middle" x="2998" y="-5367.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3074.11,-5381.4C3116.26,-5382.76 3166.55,-5376.15 3198,-5344 3236.63,-5304.51 3194.48,-5142.37 3226,-5097 3260.73,-5047 3326.57,-5019.44 3374.7,-5005.26"/>
<polygon fill="blue" stroke="blue" points="3375.72,-5008.61 3384.38,-5002.51 3373.81,-5001.87 3375.72,-5008.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3074.1,-5371C3164.75,-5371 3314.22,-5371 3388.39,-5371"/>
<polygon fill="blue" stroke="blue" points="3388.77,-5374.5 3398.77,-5371 3388.77,-5367.5 3388.77,-5374.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M3469.17,-5376.22C3517.39,-5385.62 3603.78,-5410.4 3642,-5471 3687.03,-5542.39 3614.03,-11484.82 3670,-11548 3713.47,-11597.07 3797.55,-11591.66 3846.38,-11583.33"/>
<polygon fill="blue" stroke="blue" points="3847.03,-11586.77 3856.23,-11581.52 3845.77,-11579.88 3847.03,-11586.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node430" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node430"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="3074,-5335 2922,-5335 2922,-5299 3074,-5299 3074,-5335"/>
<text text-anchor="middle" x="2998" y="-5313.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge569" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3014.27,-5298.87C3048.8,-5258.67 3136.86,-5160.58 3226,-5097 3274.29,-5062.56 3335.49,-5033.01 3378.78,-5014.11"/>
<polygon fill="blue" stroke="blue" points="3380.22,-5017.3 3388.01,-5010.13 3377.44,-5010.88 3380.22,-5017.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge568" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3074.1,-5326.34C3164.93,-5337.65 3314.83,-5356.3 3388.84,-5365.51"/>
<polygon fill="blue" stroke="blue" points="3388.41,-5368.98 3398.77,-5366.74 3389.28,-5362.03 3388.41,-5368.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node431" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node431"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="2604.5,-4014 2473.5,-4014 2473.5,-3978 2604.5,-3978 2604.5,-4014"/>
<text text-anchor="middle" x="2539" y="-3992.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2604.61,-3983.26C2657.17,-3977.03 2729.1,-3978.68 2770,-4023 2811.17,-4067.61 2752.15,-4521.54 2790,-4569 2907.02,-4715.75 3076.58,-4534.87 3198,-4678 3239.45,-4726.87 3181.43,-4918.96 3226,-4965 3263.46,-5003.69 3327.17,-5006.56 3374.05,-5002.16"/>
<polygon fill="blue" stroke="blue" points="3374.5,-5005.63 3384.07,-5001.09 3373.76,-4998.67 3374.5,-5005.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2604.5,-3983.35C2657,-3977.18 2728.9,-3978.87 2770,-4023 2803.13,-4058.57 2762.94,-4419.62 2790,-4460 2901.35,-4626.17 3040.11,-4527.18 3198,-4650 3297.91,-4727.72 3382.68,-4855.42 3416.86,-4910.88"/>
<polygon fill="blue" stroke="blue" points="3414.08,-4913.05 3422.27,-4919.76 3420.05,-4909.4 3414.08,-4913.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node432" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node432"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="2638.5,-4176 2439.5,-4176 2439.5,-4140 2638.5,-4140 2638.5,-4176"/>
<text text-anchor="middle" x="2539" y="-4154.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.67,-4142.71C2685.16,-4141.44 2737.44,-4149.67 2770,-4185 2812.87,-4231.52 2748.49,-4706.26 2790,-4754 2910.81,-4892.96 3066.24,-4697.38 3198,-4826 3243.09,-4870.02 3179.93,-4922 3226,-4965 3265.04,-5001.44 3327.72,-5004.87 3373.89,-5001.23"/>
<polygon fill="blue" stroke="blue" points="3374.43,-5004.69 3384.07,-5000.29 3373.79,-4997.72 3374.43,-5004.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.61,-4143.03C2684.94,-4141.88 2737.1,-4150.13 2770,-4185 2822.09,-4240.22 2737.21,-4471.45 2790,-4526 2823.06,-4560.15 3609.8,-4569.03 3642,-4604 3701.1,-4668.19 3632.38,-7666.27 3670,-7745 3704.53,-7817.27 3784.67,-7869.98 3836.48,-7898.01"/>
<polygon fill="blue" stroke="blue" points="3835.02,-7901.19 3845.49,-7902.79 3838.3,-7895.01 3835.02,-7901.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.74,-4142.39C2685.39,-4141 2737.8,-4149.21 2770,-4185 2802.31,-4220.91 2757.92,-5887.88 2790,-5924 2832.18,-5971.48 2913.61,-5966.61 2960.79,-5958.81"/>
<polygon fill="blue" stroke="blue" points="2961.65,-5962.21 2970.88,-5957.01 2960.42,-5955.32 2961.65,-5962.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.6,-4142.51C2685.23,-4141.15 2737.64,-4149.35 2770,-4185 2806.83,-4225.57 2753.18,-5130.43 2790,-5171 2912.71,-5306.2 3071.09,-5087.74 3198,-5219 3249.93,-5272.71 3196.72,-5485.27 3226,-5554 3264.88,-5645.26 3353.48,-5725.8 3401.18,-5764.55"/>
<polygon fill="blue" stroke="blue" points="3399.04,-5767.32 3409.03,-5770.85 3403.42,-5761.86 3399.04,-5767.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.73,-4142.4C2685.39,-4141 2737.79,-4149.22 2770,-4185 2801.32,-4219.79 2758.91,-5835.01 2790,-5870 2831.85,-5917.1 2912.33,-5912.68 2959.66,-5904.99"/>
<polygon fill="blue" stroke="blue" points="2960.56,-5908.39 2969.8,-5903.21 2959.35,-5901.49 2960.56,-5908.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.72,-4142.4C2685.38,-4141.01 2737.78,-4149.22 2770,-4185 2800.32,-4218.67 2759.9,-5782.14 2790,-5816 2829.93,-5860.92 2904.99,-5858.97 2952.91,-5852.03"/>
<polygon fill="blue" stroke="blue" points="2953.67,-5855.45 2963,-5850.44 2952.57,-5848.54 2953.67,-5855.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.69,-4142.43C2685.33,-4141.05 2737.74,-4149.26 2770,-4185 2820.97,-4241.46 2739.8,-5496.85 2790,-5554 2831.66,-5601.43 2912.2,-5598.28 2959.6,-5591.37"/>
<polygon fill="blue" stroke="blue" points="2960.43,-5594.78 2969.76,-5589.76 2959.33,-5587.87 2960.43,-5594.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.7,-4142.42C2685.35,-4141.04 2737.75,-4149.25 2770,-4185 2823.07,-4243.83 2737.31,-5551.83 2790,-5611 2830.08,-5656.01 2905.44,-5653.94 2953.33,-5646.96"/>
<polygon fill="blue" stroke="blue" points="2954.07,-5650.38 2963.4,-5645.36 2952.98,-5643.47 2954.07,-5650.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node433" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node433"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2726.5,-4338 2351.5,-4338 2351.5,-4302 2726.5,-4302 2726.5,-4338"/>
<text text-anchor="middle" x="2539" y="-4316.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge445" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2723.91,-4338.12C2741.51,-4346.53 2757.44,-4357.86 2770,-4373 2805.14,-4415.37 2752.21,-4827.98 2790,-4868 2852.55,-4934.24 3123.12,-4856.11 3198,-4908 3221.2,-4924.08 3203.06,-4948.56 3226,-4965 3268.77,-4995.66 3329.61,-5000.22 3374.26,-4998.43"/>
<polygon fill="blue" stroke="blue" points="3374.58,-5001.92 3384.39,-4997.91 3374.22,-4994.93 3374.58,-5001.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge448" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2657.14,-4338.01C2699.07,-4350.45 2742.67,-4371.47 2770,-4407 2823.12,-4476.05 2736.3,-4533.39 2790,-4602 3037.99,-4918.84 3408.9,-4580.05 3642,-4908 3687.66,-4972.24 3635.99,-7673.91 3670,-7745 3704.56,-7817.25 3784.69,-7869.97 3836.5,-7898"/>
<polygon fill="blue" stroke="blue" points="3835.03,-7901.18 3845.5,-7902.78 3838.31,-7895 3835.03,-7901.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge447" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2724.88,-4338.04C2742.19,-4346.49 2757.79,-4357.84 2770,-4373 2826.86,-4443.56 2737.83,-5929.91 2790,-6004 2828.66,-6058.91 2911.32,-6074.73 2959.67,-6079.24"/>
<polygon fill="blue" stroke="blue" points="2959.48,-6082.74 2969.73,-6080.06 2960.05,-6075.76 2959.48,-6082.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge443" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2724.89,-4338.03C2742.2,-4346.48 2757.79,-4357.84 2770,-4373 2800.23,-4410.54 2757.99,-6071.97 2790,-6108 2832.18,-6155.48 2913.61,-6150.61 2960.79,-6142.81"/>
<polygon fill="blue" stroke="blue" points="2961.65,-6146.21 2970.88,-6141.01 2960.42,-6139.32 2961.65,-6146.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge444" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2724.81,-4338.1C2742.13,-4346.53 2757.75,-4357.87 2770,-4373 2811.29,-4424 2746.64,-5504.75 2790,-5554 2831.72,-5601.38 2912.24,-5598.25 2959.62,-5591.35"/>
<polygon fill="blue" stroke="blue" points="2960.44,-5594.77 2969.77,-5589.74 2959.35,-5587.85 2960.44,-5594.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge446" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2724.82,-4338.09C2742.14,-4346.53 2757.76,-4357.87 2770,-4373 2813.27,-4426.48 2744.2,-5559.68 2790,-5611 2830.13,-5655.97 2905.47,-5653.91 2953.35,-5646.94"/>
<polygon fill="blue" stroke="blue" points="2954.09,-5650.37 2963.42,-5645.35 2952.99,-5643.45 2954.09,-5650.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node434" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node434"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="2607.5,-4284 2470.5,-4284 2470.5,-4248 2607.5,-4248 2607.5,-4284"/>
<text text-anchor="middle" x="2539" y="-4262.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge543" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2607.51,-4252.93C2659.78,-4247.11 2729.84,-4249.51 2770,-4293 2810.51,-4336.87 2748.97,-4786.62 2790,-4830 2852.57,-4896.15 3127.85,-4809.94 3198,-4868 3232.57,-4896.61 3191.96,-4935.76 3226,-4965 3266.38,-4999.69 3328.57,-5003.46 3374.25,-5000.37"/>
<polygon fill="blue" stroke="blue" points="3374.63,-5003.85 3384.32,-4999.56 3374.07,-4996.88 3374.63,-5003.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge542" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2607.62,-4253.27C2659.59,-4247.76 2729.19,-4250.39 2770,-4293 2811.77,-4336.61 2747.71,-4520.89 2790,-4564 2853.77,-4629 3108.8,-4583.71 3198,-4602 3401.09,-4643.64 3519.15,-4578.01 3642,-4745 3691.38,-4812.13 3634.06,-7669.81 3670,-7745 3704.54,-7817.26 3784.68,-7869.98 3836.49,-7898"/>
<polygon fill="blue" stroke="blue" points="3835.02,-7901.19 3845.5,-7902.78 3838.31,-7895.01 3835.02,-7901.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge545" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2607.55,-4252.69C2660.02,-4246.67 2730.33,-4248.92 2770,-4293 2801.8,-4328.33 2762.65,-5965.13 2790,-6004 2828.65,-6058.92 2911.31,-6074.74 2959.66,-6079.25"/>
<polygon fill="blue" stroke="blue" points="2959.47,-6082.74 2969.72,-6080.07 2960.04,-6075.76 2959.47,-6082.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge541" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2607.55,-4252.68C2660.03,-4246.66 2730.34,-4248.91 2770,-4293 2803.72,-4330.49 2756.53,-6070.3 2790,-6108 2832.17,-6155.49 2913.61,-6150.62 2960.79,-6142.81"/>
<polygon fill="blue" stroke="blue" points="2961.65,-6146.22 2970.88,-6141.01 2960.42,-6139.32 2961.65,-6146.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge546" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2607.76,-4252.7C2660.18,-4246.75 2730.3,-4249.08 2770,-4293 2816.98,-4344.98 2743.73,-5501.39 2790,-5554 2831.69,-5601.41 2912.22,-5598.26 2959.61,-5591.36"/>
<polygon fill="blue" stroke="blue" points="2960.44,-5594.77 2969.77,-5589.75 2959.34,-5587.86 2960.44,-5594.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge544" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2607.5,-4252.72C2659.95,-4246.73 2730.25,-4248.99 2770,-4293 2819.08,-4347.35 2741.27,-5556.34 2790,-5611 2830.11,-5655.99 2905.46,-5653.92 2953.34,-5646.95"/>
<polygon fill="blue" stroke="blue" points="2954.08,-5650.37 2963.41,-5645.35 2952.98,-5643.46 2954.08,-5650.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node435" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node435"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2576,-4230 2502,-4230 2502,-4194 2576,-4194 2576,-4230"/>
<text text-anchor="middle" x="2539" y="-4208.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge642" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2576.05,-4203.76C2627.26,-4194.41 2720.37,-4186.6 2770,-4239 2818.84,-4290.57 2748.63,-4500.27 2790,-4558 3028.46,-4890.75 3412.54,-4568.98 3642,-4908 3666.29,-4943.89 3668.23,-7984.7 3670,-8028 3719.32,-9232.42 3859.88,-10710.17 3881.26,-10930.89"/>
<polygon fill="blue" stroke="blue" points="3877.79,-10931.37 3882.24,-10940.99 3884.76,-10930.7 3877.79,-10931.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge641" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2576.35,-4203.47C2627.94,-4193.78 2721.5,-4185.56 2770,-4239 2807.64,-4280.48 2751.97,-5205.88 2790,-5247 2851.86,-5313.88 3136.63,-5219.67 3198,-5287 3249.22,-5343.2 3195.85,-10692.19 3226,-10762 3261.09,-10843.25 3347.79,-10906.93 3397.14,-10938.07"/>
<polygon fill="blue" stroke="blue" points="3395.55,-10941.2 3405.9,-10943.5 3399.24,-10935.25 3395.55,-10941.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge643" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2576.41,-4203.42C2628.07,-4193.67 2721.72,-4185.36 2770,-4239 2801.32,-4273.79 2758.91,-5889.01 2790,-5924 2832.19,-5971.48 2913.62,-5966.61 2960.8,-5958.81"/>
<polygon fill="blue" stroke="blue" points="2961.65,-5962.21 2970.88,-5957.01 2960.42,-5955.32 2961.65,-5962.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge640" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2576.4,-4203.43C2628.06,-4193.67 2721.71,-4185.37 2770,-4239 2800.32,-4272.67 2759.9,-5836.14 2790,-5870 2831.86,-5917.09 2912.33,-5912.67 2959.67,-5904.99"/>
<polygon fill="blue" stroke="blue" points="2960.56,-5908.39 2969.81,-5903.21 2959.35,-5901.49 2960.56,-5908.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge646" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2576.34,-4203.48C2627.93,-4193.8 2721.48,-4185.57 2770,-4239 2806.24,-4278.9 2753.77,-5169.09 2790,-5209 2912.73,-5344.18 3073.29,-5123.64 3198,-5257 3240.48,-5302.42 3195.02,-5762.08 3226,-5816 3263.99,-5882.13 3349.02,-5921.51 3397.45,-5939.41"/>
<polygon fill="blue" stroke="blue" points="3396.32,-5942.72 3406.92,-5942.8 3398.69,-5936.13 3396.32,-5942.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge645" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2576.38,-4203.44C2628.01,-4193.72 2721.63,-4185.44 2770,-4239 2818.97,-4293.22 2741.77,-5499.12 2790,-5554 2831.68,-5601.42 2912.21,-5598.27 2959.61,-5591.36"/>
<polygon fill="blue" stroke="blue" points="2960.43,-5594.78 2969.76,-5589.75 2959.34,-5587.86 2960.43,-5594.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge644" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2576.39,-4203.44C2628.02,-4193.71 2721.65,-4185.43 2770,-4239 2821.08,-4295.59 2739.29,-5554.09 2790,-5611 2830.09,-5656 2905.45,-5653.93 2953.33,-5646.95"/>
<polygon fill="blue" stroke="blue" points="2954.08,-5650.38 2963.41,-5645.35 2952.98,-5643.46 2954.08,-5650.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential(). -->
<g id="node436" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().</title>
<g id="a_node436"><a xlink:title="fn test_room_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; RoomCredential&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair = Blindin...">
<polygon fill="white" stroke="black" points="2619,-4068 2459,-4068 2459,-4032 2619,-4032 2619,-4068"/>
<text text-anchor="middle" x="2539" y="-4046.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_room_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge670" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2619.03,-4035.98C2669.57,-4031.94 2732.47,-4036.96 2770,-4077 2799.14,-4108.09 2760.11,-4429.62 2790,-4460 2821.87,-4492.39 3152.67,-4484.81 3198,-4488 3296.68,-4494.94 3574.3,-4447.87 3642,-4520 3703.31,-4585.32 3631.39,-7664.16 3670,-7745 3704.52,-7817.27 3784.66,-7869.98 3836.48,-7898.01"/>
<polygon fill="blue" stroke="blue" points="3835.02,-7901.19 3845.49,-7902.79 3838.3,-7895.01 3835.02,-7901.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge669" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2619.15,-4035.64C2669.91,-4031.4 2733.01,-4036.32 2770,-4077 2804.17,-4114.58 2754.93,-4954.26 2790,-4991 2852.75,-5056.74 3134.26,-4954.22 3198,-5019 3239.75,-5061.43 3203.52,-5498.88 3226,-5554 3263.46,-5645.85 3352.66,-5726.14 3400.83,-5764.7"/>
<polygon fill="blue" stroke="blue" points="3398.74,-5767.51 3408.76,-5770.96 3403.08,-5762.02 3398.74,-5767.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node437" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node437"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="2762,-4122 2316,-4122 2316,-4086 2762,-4086 2762,-4122"/>
<text text-anchor="middle" x="2539" y="-4100.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge813" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2760.97,-4122.31C2764.12,-4125 2767.14,-4127.9 2770,-4131 2811.24,-4175.7 2750.28,-4631.94 2790,-4678 2910.45,-4817.69 3071.02,-4620.21 3198,-4754 3263.12,-4822.62 3159.03,-4898.18 3226,-4965 3264.12,-5003.04 3327.73,-5006.01 3374.4,-5001.82"/>
<polygon fill="blue" stroke="blue" points="3374.79,-5005.29 3384.38,-5000.79 3374.07,-4998.33 3374.79,-5005.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge812" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2760.44,-4122C2763.77,-4124.79 2766.97,-4127.78 2770,-4131 2824.45,-4188.87 2734.65,-4430.99 2790,-4488 2856.19,-4556.17 3577.44,-4491.29 3642,-4561 3702.1,-4625.89 3631.87,-7665.19 3670,-7745 3704.52,-7817.27 3784.67,-7869.98 3836.48,-7898.01"/>
<polygon fill="blue" stroke="blue" points="3835.02,-7901.19 3845.49,-7902.79 3838.3,-7895.01 3835.02,-7901.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge807" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2761.08,-4122.21C2764.2,-4124.93 2767.18,-4127.86 2770,-4131 2803.31,-4168.03 2756.93,-5886.76 2790,-5924 2832.17,-5971.49 2913.61,-5966.61 2960.79,-5958.81"/>
<polygon fill="blue" stroke="blue" points="2961.65,-5962.21 2970.88,-5957.01 2960.42,-5955.32 2961.65,-5962.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge806" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2761.03,-4122.25C2764.16,-4124.97 2767.16,-4127.88 2770,-4131 2803.21,-4167.5 2761.39,-4978.79 2790,-5019 2902.17,-5176.68 3081.88,-5016.2 3198,-5171 3249.21,-5239.27 3192.96,-5475.32 3226,-5554 3264.4,-5645.46 3353.21,-5725.91 3401.07,-5764.6"/>
<polygon fill="blue" stroke="blue" points="3398.94,-5767.38 3408.94,-5770.89 3403.31,-5761.91 3398.94,-5767.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge810" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2761.08,-4122.21C2764.2,-4124.94 2767.18,-4127.86 2770,-4131 2802.31,-4166.91 2757.92,-5833.88 2790,-5870 2831.84,-5917.11 2912.32,-5912.68 2959.66,-5905"/>
<polygon fill="blue" stroke="blue" points="2960.56,-5908.39 2969.8,-5903.22 2959.35,-5901.5 2960.56,-5908.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge809" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2761.08,-4122.21C2764.2,-4124.94 2767.18,-4127.86 2770,-4131 2801.32,-4165.79 2758.91,-5781.01 2790,-5816 2829.92,-5860.93 2904.98,-5858.98 2952.91,-5852.03"/>
<polygon fill="blue" stroke="blue" points="2953.66,-5855.46 2962.99,-5850.44 2952.57,-5848.54 2953.66,-5855.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge811" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2761.07,-4122.22C2764.19,-4124.94 2767.17,-4127.87 2770,-4131 2822.96,-4189.7 2737.84,-5494.58 2790,-5554 2831.65,-5601.44 2912.2,-5598.28 2959.6,-5591.37"/>
<polygon fill="blue" stroke="blue" points="2960.43,-5594.78 2969.76,-5589.76 2959.33,-5587.87 2960.43,-5594.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge808" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2761.07,-4122.22C2764.19,-4124.94 2767.17,-4127.86 2770,-4131 2825.06,-4192.07 2735.33,-5549.58 2790,-5611 2830.07,-5656.02 2905.43,-5653.94 2953.32,-5646.96"/>
<polygon fill="blue" stroke="blue" points="2954.07,-5650.39 2963.4,-5645.36 2952.97,-5643.47 2954.07,-5650.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node438" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node438"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="1701.5,-5207 1434.5,-5207 1434.5,-5171 1701.5,-5171 1701.5,-5207"/>
<text text-anchor="middle" x="1568" y="-5185.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge842" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1657,-5207.03C1723.82,-5215.13 1812.96,-5212.96 1866,-5159 1903.36,-5120.99 1846.77,-4956.08 1886,-4920 1951.75,-4859.52 2224.37,-4857.29 2288,-4920 2342.41,-4973.63 2256.81,-6238.29 2308,-6295 2356.39,-6348.61 2450.11,-6340.28 2501.72,-6330.54"/>
<polygon fill="blue" stroke="blue" points="2502.64,-6333.92 2511.76,-6328.53 2501.27,-6327.06 2502.64,-6333.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge841" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.8,-5207.03C1722.86,-5215.42 1812.91,-5213.63 1866,-5159 1909.01,-5114.74 1840.82,-4924.04 1886,-4882 1951.4,-4821.15 2224.34,-4819.32 2288,-4882 2338.99,-4932.21 2268.08,-6110.6 2308,-6170 2350.31,-6232.95 2442.02,-6255.62 2495.98,-6263.67"/>
<polygon fill="blue" stroke="blue" points="2495.53,-6267.14 2505.92,-6265.05 2496.49,-6260.21 2495.53,-6267.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge840" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1701.76,-5177.72C1761,-5180.41 1826.27,-5195.52 1866,-5242 1901.56,-5283.61 1849.56,-6186.16 1886,-6227 1924.38,-6270.02 1996.06,-6268.89 2042.37,-6262.59"/>
<polygon fill="blue" stroke="blue" points="2043.04,-6266.03 2052.41,-6261.09 2042,-6259.11 2043.04,-6266.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge839" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1701.73,-5177.75C1760.97,-5180.43 1826.24,-5195.54 1866,-5242 1899.53,-5281.18 1851.93,-6131.29 1886,-6170 1926.03,-6215.48 2002.96,-6213.28 2048.87,-6207.01"/>
<polygon fill="blue" stroke="blue" points="2049.62,-6210.44 2058.99,-6205.49 2048.59,-6203.51 2049.62,-6210.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge843" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1701.54,-5171.26C1867.74,-5157.39 2147.82,-5163.44 2288,-5334 2323.81,-5377.57 2270.1,-6307.23 2308,-6349 2356.53,-6402.49 2450.19,-6394.21 2501.76,-6384.51"/>
<polygon fill="blue" stroke="blue" points="2502.67,-6387.89 2511.79,-6382.5 2501.3,-6381.03 2502.67,-6387.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge844" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654.59,-5207.01C1721.88,-5215.68 1812.84,-5214.29 1866,-5159 1916.15,-5106.84 1833.29,-4883.57 1886,-4834 1918.54,-4803.4 2243.46,-4830.69 2288,-4834 2504,-4850.04 2627.33,-4743.02 2770,-4906 2816.92,-4959.6 2742.97,-6134.51 2790,-6188 2828.42,-6231.7 2899.85,-6232.45 2947.91,-6226.89"/>
<polygon fill="blue" stroke="blue" points="2948.61,-6230.33 2958.09,-6225.58 2947.72,-6223.39 2948.61,-6230.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node439" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node439"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="2279,-5660 1895,-5660 1895,-5624 2279,-5624 2279,-5660"/>
<text text-anchor="middle" x="2087" y="-5638.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2277.06,-5623.88C2280.88,-5621.18 2284.54,-5618.22 2288,-5615 2319.61,-5585.63 2280.18,-5552.98 2308,-5520 2357.61,-5461.2 2450.43,-5440.13 2501.68,-5432.78"/>
<polygon fill="blue" stroke="blue" points="2502.21,-5436.24 2511.65,-5431.45 2501.28,-5429.3 2502.21,-5436.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2278.56,-5623.93C2281.87,-5621.19 2285.03,-5618.22 2288,-5615 2344.57,-5553.65 2250.9,-5300.85 2308,-5240 2355.46,-5189.43 2443.39,-5194.75 2495.7,-5203.6"/>
<polygon fill="blue" stroke="blue" points="2495.2,-5207.07 2505.67,-5205.4 2496.45,-5200.18 2495.2,-5207.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2278.52,-5623.89C2281.85,-5621.16 2285.02,-5618.21 2288,-5615 2336.69,-5562.68 2258.86,-5345.9 2308,-5294 2357.52,-5241.7 2450.38,-5249.38 2501.66,-5258.7"/>
<polygon fill="blue" stroke="blue" points="2501.15,-5262.17 2511.64,-5260.63 2502.48,-5255.29 2501.15,-5262.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2274.97,-5623.82C2279.49,-5621.15 2283.84,-5618.22 2288,-5615 2306.6,-5600.6 2288.48,-5579.12 2308,-5566 2393.22,-5508.74 2696.25,-5494.58 2770,-5566 2819.67,-5614.1 2743.91,-6136.45 2790,-6188 2828.78,-6231.38 2900.12,-6232.21 2948.06,-6226.76"/>
<polygon fill="blue" stroke="blue" points="2948.73,-6230.2 2958.21,-6225.47 2947.85,-6223.25 2948.73,-6230.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node440" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node440"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="2165,-5714 2009,-5714 2009,-5678 2165,-5678 2165,-5714"/>
<text text-anchor="middle" x="2087" y="-5692.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2165.1,-5689.15C2259.97,-5680.71 2417.82,-5666.68 2494.09,-5659.9"/>
<polygon fill="blue" stroke="blue" points="2494.64,-5663.37 2504.3,-5659 2494.02,-5656.4 2494.64,-5663.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2165.41,-5687.56C2206.31,-5687.36 2254.77,-5694.47 2288,-5723 2311.9,-5743.52 2283.92,-5770.69 2308,-5791 2360.47,-5835.26 2445.26,-5832.49 2495.91,-5825.74"/>
<polygon fill="blue" stroke="blue" points="2496.48,-5829.19 2505.88,-5824.3 2495.48,-5822.27 2496.48,-5829.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2165.1,-5698.4C2262.77,-5701.44 2427.19,-5706.55 2500.62,-5708.84"/>
<polygon fill="blue" stroke="blue" points="2500.67,-5712.34 2510.78,-5709.15 2500.89,-5705.34 2500.67,-5712.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2165.16,-5697.89C2203.22,-5700.93 2249.16,-5707.83 2288,-5723 2298.11,-5726.95 2297.86,-5733.14 2308,-5737 2357.95,-5756.02 2418.05,-5762.57 2464.29,-5764.47"/>
<polygon fill="blue" stroke="blue" points="2464.41,-5767.97 2474.53,-5764.82 2464.66,-5760.98 2464.41,-5767.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2165.35,-5707.36C2207.8,-5708.9 2257.8,-5702.15 2288,-5669 2324.4,-5629.05 2273.48,-5224.59 2308,-5183 2349.06,-5133.53 2426.17,-5124.79 2479.73,-5125.44"/>
<polygon fill="blue" stroke="blue" points="2479.7,-5128.94 2489.78,-5125.67 2479.86,-5121.94 2479.7,-5128.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2165.42,-5707.43C2207.89,-5708.99 2257.89,-5702.24 2288,-5669 2330.24,-5622.36 2265.35,-5149.27 2308,-5103 2342.28,-5065.81 2398.41,-5058.65 2446.64,-5060.99"/>
<polygon fill="blue" stroke="blue" points="2446.6,-5064.49 2456.8,-5061.62 2447.03,-5057.51 2446.6,-5064.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2165.13,-5704.68C2206.19,-5705.01 2254.91,-5697.95 2288,-5669 2313.32,-5646.85 2281.25,-5616.4 2308,-5596 2348.81,-5564.86 2733.09,-5560.32 2770,-5596 2817.32,-5641.75 2746.09,-6138.97 2790,-6188 2828.82,-6231.35 2900.14,-6232.18 2948.07,-6226.74"/>
<polygon fill="blue" stroke="blue" points="2948.74,-6230.19 2958.22,-6225.46 2947.86,-6223.24 2948.74,-6230.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node441" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node441"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="2280,-5768 1894,-5768 1894,-5732 2280,-5732 2280,-5768"/>
<text text-anchor="middle" x="2087" y="-5746.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2177.15,-5768.03C2217.07,-5775.73 2264.79,-5784.44 2308,-5791 2373.27,-5800.9 2449.44,-5809.21 2495.67,-5813.89"/>
<polygon fill="blue" stroke="blue" points="2495.61,-5817.41 2505.91,-5814.92 2496.31,-5810.44 2495.61,-5817.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2280.15,-5755.98C2345.52,-5758.01 2414.67,-5760.16 2464.88,-5761.73"/>
<polygon fill="blue" stroke="blue" points="2464.88,-5765.23 2474.99,-5762.04 2465.1,-5758.23 2464.88,-5765.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2277.08,-5731.9C2280.89,-5729.19 2284.54,-5726.23 2288,-5723 2320.18,-5692.97 2273.88,-5653.81 2308,-5626 2347.79,-5593.57 2733.06,-5590.35 2770,-5626 2814.96,-5669.39 2748.27,-6141.49 2790,-6188 2828.86,-6231.31 2900.17,-6232.16 2948.09,-6226.73"/>
<polygon fill="blue" stroke="blue" points="2948.75,-6230.17 2958.24,-6225.45 2947.88,-6223.23 2948.75,-6230.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node442" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node442"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="2228.5,-5606 1945.5,-5606 1945.5,-5570 2228.5,-5570 2228.5,-5606"/>
<text text-anchor="middle" x="2087" y="-5584.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge788" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2119.83,-5569.86C2161.78,-5546.63 2238.4,-5506.44 2308,-5482 2374.71,-5458.57 2455.99,-5442.65 2501.89,-5434.75"/>
<polygon fill="blue" stroke="blue" points="2502.67,-5438.17 2511.94,-5433.06 2501.5,-5431.27 2502.67,-5438.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge786" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2130.79,-5569.93C2178.11,-5547.46 2252.36,-5504.32 2288,-5442 2310.39,-5402.84 2276.39,-5272.18 2308,-5240 2356.59,-5190.52 2444.13,-5195.46 2496.06,-5203.95"/>
<polygon fill="blue" stroke="blue" points="2495.5,-5207.4 2505.95,-5205.68 2496.71,-5200.51 2495.5,-5207.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge787" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2152.96,-5569.92C2198.16,-5553.85 2255.87,-5525.67 2288,-5480 2322.14,-5431.47 2265.35,-5389.25 2308,-5348 2359.37,-5298.32 2450.29,-5304.61 2501.07,-5313.1"/>
<polygon fill="blue" stroke="blue" points="2500.51,-5316.56 2510.97,-5314.87 2501.74,-5309.67 2500.51,-5316.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge789" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2148.79,-5569.95C2193.69,-5553.55 2252.89,-5524.93 2288,-5480 2310.04,-5451.8 2281.05,-5425.55 2308,-5402 2359.26,-5357.19 2443.34,-5359.85 2494.39,-5366.78"/>
<polygon fill="blue" stroke="blue" points="2494.05,-5370.27 2504.45,-5368.26 2495.07,-5363.34 2494.05,-5370.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge790" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2154.52,-5569.99C2199.87,-5554.06 2257.09,-5526.03 2288,-5480 2311.18,-5445.49 2278.75,-5323.54 2308,-5294 2358.68,-5242.82 2451.07,-5250.05 2501.97,-5259"/>
<polygon fill="blue" stroke="blue" points="2501.4,-5262.46 2511.87,-5260.86 2502.69,-5255.58 2501.4,-5262.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge784" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2119.32,-5569.83C2165.4,-5541.18 2250.09,-5480.78 2288,-5404 2309.83,-5359.78 2275.59,-5220.16 2308,-5183 2350.05,-5134.8 2426.33,-5125.67 2479.46,-5125.89"/>
<polygon fill="blue" stroke="blue" points="2479.71,-5129.4 2489.77,-5126.05 2479.82,-5122.4 2479.71,-5129.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge791" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2112.59,-5569.95C2156.86,-5535.83 2249,-5457.08 2288,-5366 2311.07,-5312.12 2267.41,-5145.29 2308,-5103 2342.89,-5066.65 2398.75,-5059.42 2446.68,-5061.51"/>
<polygon fill="blue" stroke="blue" points="2446.59,-5065.01 2456.78,-5062.09 2447,-5058.02 2446.59,-5065.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge785" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2127.92,-5569.93C2171.22,-5551.39 2242.91,-5523.79 2308,-5513 2358.64,-5504.61 2733.17,-5477.24 2770,-5513 2823.84,-5565.26 2740.06,-6132 2790,-6188 2828.73,-6231.43 2900.08,-6232.24 2948.04,-6226.78"/>
<polygon fill="blue" stroke="blue" points="2948.71,-6230.22 2958.19,-6225.49 2947.83,-6223.27 2948.71,-6230.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node443" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node443"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="1669.5,-5998 1466.5,-5998 1466.5,-5962 1669.5,-5962 1669.5,-5998"/>
<text text-anchor="middle" x="1568" y="-5976.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.95,-5998.04C1714.89,-6008.67 1810.95,-6010.5 1866,-5953 1898.54,-5919.01 1851.95,-5562.48 1886,-5530 2015.29,-5406.68 2160.43,-5404.91 2288,-5530 2308.21,-5549.82 2300.46,-6521.71 2308,-6549 2351.06,-6704.81 2468.34,-6863.83 2516.71,-6924.92"/>
<polygon fill="blue" stroke="blue" points="2514.09,-6927.24 2523.06,-6932.88 2519.56,-6922.88 2514.09,-6927.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-5961.97C1713.13,-5950.69 1811.18,-5947.86 1866,-6007 1916.35,-6061.31 1836.84,-7284.6 1886,-7340 1910.29,-7367.37 1948.04,-7376.9 1984.23,-7378.59"/>
<polygon fill="blue" stroke="blue" points="1984.29,-7382.1 1994.39,-7378.87 1984.49,-7375.1 1984.29,-7382.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.75,-5961.97C1713.14,-5950.68 1811.19,-5947.85 1866,-6007 1918.38,-6063.53 1834.87,-7336.34 1886,-7394 1926.33,-7439.48 2003.85,-7435.72 2049.63,-7428.57"/>
<polygon fill="blue" stroke="blue" points="2050.44,-7431.98 2059.72,-7426.86 2049.27,-7425.08 2050.44,-7431.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.73,-5961.98C1713.11,-5950.7 1811.16,-5947.88 1866,-6007 1914.33,-6059.1 1838.82,-7232.86 1886,-7286 1918.59,-7322.7 1975.4,-7327.32 2020.17,-7323.98"/>
<polygon fill="blue" stroke="blue" points="2020.74,-7327.44 2030.39,-7323.07 2020.12,-7320.47 2020.74,-7327.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.22,-5961.96C1712.72,-5950.5 1811.29,-5947.41 1866,-6007 1902.03,-6046.25 1850.83,-9802.98 1886,-9843 1922.66,-9884.72 1990.6,-9885.13 2037.03,-9879.39"/>
<polygon fill="blue" stroke="blue" points="2037.74,-9882.82 2047.17,-9877.99 2036.79,-9875.89 2037.74,-9882.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node444" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node444"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="1696.5,-5944 1439.5,-5944 1439.5,-5908 1696.5,-5908 1696.5,-5944"/>
<text text-anchor="middle" x="1568" y="-5922.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge578" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.16,-5944.04C1720.77,-5953.11 1812.9,-5952.25 1866,-5896 1901.42,-5858.48 1848.73,-5467.69 1886,-5432 2015.03,-5308.41 2160.54,-5306.8 2288,-5432 2310.14,-5453.75 2299.76,-6519.08 2308,-6549 2350.93,-6704.85 2468.28,-6863.84 2516.69,-6924.92"/>
<polygon fill="blue" stroke="blue" points="2514.07,-6927.25 2523.05,-6932.88 2519.54,-6922.88 2514.07,-6927.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge577" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.75,-5907.97C1713.14,-5896.68 1811.19,-5893.85 1866,-5953 1918.38,-6009.53 1834.87,-7282.34 1886,-7340 1910.28,-7367.38 1948.03,-7376.91 1984.22,-7378.6"/>
<polygon fill="blue" stroke="blue" points="1984.29,-7382.1 1994.38,-7378.88 1984.48,-7375.11 1984.29,-7382.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge579" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.76,-5907.96C1713.15,-5896.67 1811.21,-5893.83 1866,-5953 1920.4,-6011.74 1832.89,-7334.09 1886,-7394 1926.32,-7439.49 2003.84,-7435.72 2049.63,-7428.57"/>
<polygon fill="blue" stroke="blue" points="2050.44,-7431.98 2059.72,-7426.86 2049.27,-7425.08 2050.44,-7431.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge580" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.74,-5907.97C1713.13,-5896.69 1811.18,-5893.86 1866,-5953 1916.35,-6007.31 1836.84,-7230.6 1886,-7286 1918.58,-7322.71 1975.39,-7327.33 2020.16,-7323.99"/>
<polygon fill="blue" stroke="blue" points="2020.74,-7327.45 2030.39,-7323.07 2020.11,-7320.48 2020.74,-7327.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge576" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.22,-5907.96C1712.73,-5896.5 1811.29,-5893.4 1866,-5953 1902.54,-5992.8 1850.34,-9802.41 1886,-9843 1922.66,-9884.72 1990.6,-9885.13 2037.03,-9879.39"/>
<polygon fill="blue" stroke="blue" points="2037.74,-9882.82 2047.17,-9877.99 2036.79,-9875.89 2037.74,-9882.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node445" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node445"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="1639,-6052 1497,-6052 1497,-6016 1639,-6016 1639,-6052"/>
<text text-anchor="middle" x="1568" y="-6030.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge862" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.16,-6050.79C1707.39,-6062.5 1808.88,-6066.82 1866,-6007 1900.49,-5970.88 1849.91,-5592.52 1886,-5558 1918.28,-5527.13 2256.1,-5526.74 2288,-5558 2327.33,-5596.54 2293.32,-6495.93 2308,-6549 2351.11,-6704.8 2468.36,-6863.82 2516.71,-6924.92"/>
<polygon fill="blue" stroke="blue" points="2514.09,-6927.24 2523.06,-6932.88 2519.56,-6922.88 2514.09,-6927.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge861" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.11,-6023.9C1708.33,-6018.35 1811.49,-6022.83 1866,-6087 1916.9,-6146.92 1833.84,-7443.17 1886,-7502 1923.38,-7544.17 1992.74,-7544.01 2039.13,-7538.06"/>
<polygon fill="blue" stroke="blue" points="2039.83,-7541.5 2049.24,-7536.63 2038.85,-7534.57 2039.83,-7541.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge859" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.11,-6023.91C1708.32,-6018.36 1811.47,-6022.85 1866,-6087 1914.97,-6144.62 1835.82,-7391.43 1886,-7448 1910.07,-7475.13 1947.38,-7484.74 1983.28,-7486.55"/>
<polygon fill="blue" stroke="blue" points="1983.25,-7490.05 1993.35,-7486.87 1983.47,-7483.06 1983.25,-7490.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge863" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.09,-6023.92C1708.29,-6018.39 1811.43,-6022.88 1866,-6087 1911.12,-6140.02 1839.77,-7287.95 1886,-7340 1910.3,-7367.36 1948.06,-7376.89 1984.25,-7378.58"/>
<polygon fill="blue" stroke="blue" points="1984.31,-7382.08 1994.4,-7378.86 1984.5,-7375.09 1984.31,-7382.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge858" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.1,-6023.91C1708.3,-6018.37 1811.45,-6022.86 1866,-6087 1913.05,-6142.32 1837.79,-7339.69 1886,-7394 1926.35,-7439.46 2003.86,-7435.7 2049.64,-7428.56"/>
<polygon fill="blue" stroke="blue" points="2050.45,-7431.97 2059.72,-7426.85 2049.28,-7425.07 2050.45,-7431.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge860" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.08,-6023.93C1708.27,-6018.4 1811.41,-6022.9 1866,-6087 1909.19,-6137.72 1841.74,-7236.21 1886,-7286 1918.61,-7322.68 1975.42,-7327.31 2020.18,-7323.97"/>
<polygon fill="blue" stroke="blue" points="2020.75,-7327.43 2030.4,-7323.06 2020.13,-7320.46 2020.75,-7327.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge864" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.23,-6023.8C1708.54,-6018.17 1811.77,-6022.59 1866,-6087 1899.6,-6126.91 1851.56,-9803.81 1886,-9843 1922.66,-9884.72 1990.6,-9885.13 2037.03,-9879.39"/>
<polygon fill="blue" stroke="blue" points="2037.74,-9882.82 2047.17,-9877.99 2036.79,-9875.89 2037.74,-9882.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node446" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node446"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="1665,-9390 1471,-9390 1471,-9354 1665,-9354 1665,-9390"/>
<text text-anchor="middle" x="1568" y="-9368.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.21,-9390.03C1712.7,-9401.48 1811.26,-9404.57 1866,-9345 1896.59,-9311.71 1856.14,-6123.95 1886,-6090 1924.51,-6046.22 1997.46,-6047.95 2043.81,-6054.52"/>
<polygon fill="blue" stroke="blue" points="2043.43,-6058 2053.84,-6056.08 2044.5,-6051.08 2043.43,-6058"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.21,-9390.03C1712.71,-9401.48 1811.27,-9404.57 1866,-9345 1897.6,-9310.6 1855.16,-6017.08 1886,-5982 1924.07,-5938.7 1995.84,-5939.91 2042.25,-5946.3"/>
<polygon fill="blue" stroke="blue" points="2041.91,-5949.79 2052.32,-5947.82 2042.95,-5942.87 2041.91,-5949.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.2,-9390.03C1712.7,-9401.48 1811.26,-9404.57 1866,-9345 1895.84,-9312.53 1859,-6204.86 1886,-6170 1915.39,-6132.06 1968.57,-6119.29 2012.71,-6115.74"/>
<polygon fill="blue" stroke="blue" points="2013.09,-6119.22 2022.84,-6115.08 2012.63,-6112.24 2013.09,-6119.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.21,-9390.03C1712.71,-9401.49 1811.27,-9404.58 1866,-9345 1898.11,-9310.05 1854.66,-5963.64 1886,-5928 1925.92,-5882.6 2002.9,-5886.13 2048.83,-5893.26"/>
<polygon fill="blue" stroke="blue" points="2048.53,-5896.76 2058.97,-5894.97 2049.69,-5889.86 2048.53,-5896.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.23,-9390.05C1712.75,-9401.52 1811.32,-9404.62 1866,-9345 1910.52,-9296.46 1839.44,-4649.58 1886,-4603 1904.73,-4584.26 2753.27,-4584.47 2770,-4601 2803,-4633.61 2782.9,-6225.15 2790,-6271 2830.48,-6532.24 2948.16,-6832.42 2985.49,-6923.45"/>
<polygon fill="blue" stroke="blue" points="2982.3,-6924.88 2989.35,-6932.79 2988.77,-6922.21 2982.3,-6924.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.1,-9353.98C1714.21,-9343.11 1811,-9340.92 1866,-9399 1908.2,-9443.56 1844.78,-9905.53 1886,-9951 1901.75,-9968.38 1922.94,-9978.51 1945.64,-9984"/>
<polygon fill="blue" stroke="blue" points="1944.95,-9987.43 1955.46,-9986.08 1946.4,-9980.59 1944.95,-9987.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.64,-9353.99C1714.63,-9343.29 1810.92,-9341.35 1866,-9399 1900.11,-9434.71 1852.67,-9806.56 1886,-9843 1923.48,-9883.98 1991.23,-9884.57 2037.39,-9879.07"/>
<polygon fill="blue" stroke="blue" points="2038.01,-9882.51 2047.47,-9877.73 2037.09,-9875.57 2038.01,-9882.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node447" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node447"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="1687.5,-9498 1448.5,-9498 1448.5,-9462 1687.5,-9462 1687.5,-9498"/>
<text text-anchor="middle" x="1568" y="-9476.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.18,-9498C1712.65,-9509.44 1811.2,-9512.51 1866,-9453 1911.56,-9403.53 1841.53,-7082.45 1886,-7032 1914.04,-7000.19 1960.26,-6992.42 2001.21,-6993.07"/>
<polygon fill="blue" stroke="blue" points="2001.11,-6996.57 2011.22,-6993.4 2001.34,-6989.58 2001.11,-6996.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.23,-9498.05C1712.75,-9509.52 1811.32,-9512.62 1866,-9453 1910.91,-9404.03 1838.92,-4715.89 1886,-4669 1920.8,-4634.35 2735.06,-4634.49 2770,-4669 2801.66,-4700.27 2783.17,-6227.02 2790,-6271 2830.55,-6532.23 2948.18,-6832.42 2985.5,-6923.45"/>
<polygon fill="blue" stroke="blue" points="2982.3,-6924.88 2989.35,-6932.79 2988.77,-6922.21 2982.3,-6924.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.18,-9498.01C1712.66,-9509.44 1811.21,-9512.52 1866,-9453 1912.57,-9402.42 1840.54,-7029.58 1886,-6978 1914.57,-6945.58 1962.03,-6938.13 2003.55,-6939.12"/>
<polygon fill="blue" stroke="blue" points="2003.55,-6942.62 2013.68,-6939.52 2003.83,-6935.63 2003.55,-6942.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.53,-9498.04C1720.2,-9506.91 1810.85,-9506.2 1866,-9453 1916.63,-9404.17 1839.66,-9348.92 1886,-9296 1916.56,-9261.1 1967.19,-9247.92 2009.86,-9243.44"/>
<polygon fill="blue" stroke="blue" points="2010.31,-9246.91 2019.95,-9242.52 2009.67,-9239.94 2010.31,-9246.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.56,-9461.98C1713.77,-9450.95 1811.06,-9448.5 1866,-9507 1920.33,-9564.85 1832.94,-10161.98 1886,-10221 1899.02,-10235.48 1915.8,-10244.94 1934.11,-10250.89"/>
<polygon fill="blue" stroke="blue" points="1933.24,-10254.28 1943.81,-10253.68 1935.18,-10247.55 1933.24,-10254.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.58,-9461.95C1713.82,-9450.9 1811.12,-9448.45 1866,-9507 1924.38,-9569.28 1828.99,-10211.47 1886,-10275 1893.27,-10283.1 1901.72,-10289.64 1910.96,-10294.86"/>
<polygon fill="blue" stroke="blue" points="1909.55,-10298.07 1920.05,-10299.48 1912.72,-10291.83 1909.55,-10298.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.38,-9461.97C1714.43,-9451.19 1810.97,-9449.12 1866,-9507 1904.16,-9547.13 1848.73,-9964.04 1886,-10005 1900.72,-10021.18 1920.16,-10031.07 1941.14,-10036.78"/>
<polygon fill="blue" stroke="blue" points="1940.34,-10040.19 1950.88,-10039.12 1941.97,-10033.38 1940.34,-10040.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.77,-9461.97C1715.55,-9451.58 1810.87,-9450.12 1866,-9507 1918.06,-9560.71 1835.12,-9788.17 1886,-9843 1923.67,-9883.59 1991.05,-9884.35 2037.11,-9878.99"/>
<polygon fill="blue" stroke="blue" points="2037.7,-9882.45 2047.17,-9877.69 2036.8,-9875.51 2037.7,-9882.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.22,-9461.96C1715.11,-9451.41 1810.92,-9449.71 1866,-9507 1896.07,-9538.28 1856.62,-9865.07 1886,-9897 1888.06,-9899.24 1890.21,-9901.35 1892.43,-9903.35"/>
<polygon fill="blue" stroke="blue" points="1890.34,-9906.16 1900.32,-9909.72 1894.74,-9900.71 1890.34,-9906.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.85,-9461.95C1714.03,-9450.99 1811.08,-9448.66 1866,-9507 1916.29,-9560.42 1836.89,-10112.5 1886,-10167 1896.68,-10178.85 1909.88,-10187.34 1924.38,-10193.29"/>
<polygon fill="blue" stroke="blue" points="1923.49,-10196.69 1934.08,-10196.84 1925.89,-10190.11 1923.49,-10196.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs(). -->
<g id="node448" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().</title>
<g id="a_node448"><a xlink:title="fn test_server_sigs() { &#160;&#160;&#160;&#160;let server_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.ge...">
<polygon fill="white" stroke="black" points="1632,-9552 1504,-9552 1504,-9516 1632,-9516 1632,-9552"/>
<text text-anchor="middle" x="1568" y="-9530.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_sigs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1632.15,-9524.73C1700.99,-9518.6 1808.92,-9521.41 1866,-9587 1904.39,-9631.12 1846.68,-10069.7 1886,-10113 1926.87,-10158 2004.19,-10154.41 2049.8,-10147.42"/>
<polygon fill="blue" stroke="blue" points="2050.56,-10150.84 2059.84,-10145.74 2049.4,-10143.93 2050.56,-10150.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1632.1,-9524.77C1700.89,-9518.68 1808.78,-9521.53 1866,-9587 1900.54,-9626.52 1850.63,-10020.22 1886,-10059 1917.15,-10093.15 1969.31,-10099.27 2012.55,-10097.19"/>
<polygon fill="blue" stroke="blue" points="2013,-10100.67 2022.76,-10096.54 2012.56,-10093.68 2013,-10100.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1632.29,-9525.1C1700.72,-9519.43 1807.8,-9522.76 1866,-9587 1904.31,-9629.29 1846.8,-9801.53 1886,-9843 1924.04,-9883.24 1991.34,-9884.09 2037.27,-9878.84"/>
<polygon fill="blue" stroke="blue" points="2037.83,-9882.3 2047.31,-9877.56 2036.94,-9875.35 2037.83,-9882.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption(). -->
<g id="node449" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().</title>
<g id="a_node449"><a xlink:title="fn test_blob_encryption() { &#160;&#160;&#160;&#160;let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1); &#160;&#160;&#160;&#160;let group_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::groups::GroupSecretParams::derive_from_m...">
<polygon fill="white" stroke="black" points="1648.5,-9336 1487.5,-9336 1487.5,-9300 1648.5,-9300 1648.5,-9336"/>
<text text-anchor="middle" x="1568" y="-9314.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_blob_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1597.4,-9299.83C1660.28,-9257.67 1810.12,-9146.2 1866,-9008 1889.33,-8950.3 1841.89,-4570.91 1886,-4527 1945.95,-4467.31 2760.18,-4552.54 2770,-4563 2802.48,-4597.59 2782.74,-6224.11 2790,-6271 2830.45,-6532.24 2948.15,-6832.43 2985.49,-6923.45"/>
<polygon fill="blue" stroke="blue" points="2982.3,-6924.88 2989.34,-6932.79 2988.77,-6922.21 2982.3,-6924.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify(). -->
<g id="node450" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().</title>
<g id="a_node450"><a xlink:title="fn test_profile_key_credential_presentation_v1_does_not_verify() { &#160;&#160;&#160;&#160;// Originally from test_integration_profile. &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(z...">
<polygon fill="white" stroke="black" points="1783.5,-9444 1352.5,-9444 1352.5,-9408 1783.5,-9408 1783.5,-9444"/>
<text text-anchor="middle" x="1568" y="-9422.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_presentation_v1_does_not_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.23,-9444.05C1712.75,-9455.52 1811.32,-9458.62 1866,-9399 1910.67,-9350.3 1839.28,-4687.74 1886,-4641 1904.72,-4622.27 2753.27,-4622.48 2770,-4639 2802.25,-4670.86 2783.05,-6226.2 2790,-6271 2830.52,-6532.23 2948.17,-6832.42 2985.5,-6923.45"/>
<polygon fill="blue" stroke="blue" points="2982.3,-6924.88 2989.35,-6932.79 2988.77,-6922.21 2982.3,-6924.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.22,-9407.96C1715.11,-9397.41 1810.92,-9395.71 1866,-9453 1896.07,-9484.28 1856.62,-9811.07 1886,-9843 1923.5,-9883.75 1990.93,-9884.47 2037.03,-9879.06"/>
<polygon fill="blue" stroke="blue" points="2037.65,-9882.51 2047.11,-9877.74 2036.74,-9875.57 2037.65,-9882.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.56,-9407.98C1713.77,-9396.95 1811.06,-9394.5 1866,-9453 1920.33,-9510.85 1832.94,-10107.98 1886,-10167 1896.66,-10178.86 1909.86,-10187.36 1924.35,-10193.31"/>
<polygon fill="blue" stroke="blue" points="1923.46,-10196.71 1934.05,-10196.87 1925.87,-10190.14 1923.46,-10196.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node451" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node451"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="1654,-5070 1482,-5070 1482,-5034 1654,-5034 1654,-5070"/>
<text text-anchor="middle" x="1568" y="-5048.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge604" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654.21,-5040.45C1825.45,-5019.37 2202.3,-4984.42 2288,-5072 2319.54,-5104.23 2277.92,-8285.4 2308,-8319 2352.59,-8368.82 2436.29,-8365.31 2489.48,-8356.73"/>
<polygon fill="blue" stroke="blue" points="2490.11,-8360.17 2499.37,-8355.02 2488.92,-8353.28 2490.11,-8360.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge605" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1609.21,-5033.87C1731.25,-4981.88 2100.46,-4847.62 2288,-5034 2319.8,-5065.6 2278.31,-8228.4 2308,-8262 2332.31,-8289.52 2368.48,-8301.24 2404.98,-8304.92"/>
<polygon fill="blue" stroke="blue" points="2405.02,-8308.44 2415.27,-8305.76 2405.59,-8301.46 2405.02,-8308.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge609" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654.09,-5036.78C1718.87,-5030.16 1806.71,-5032.53 1866,-5079 1887.46,-5095.82 1864.8,-5119.85 1886,-5137 2025.95,-5250.18 2168.3,-5051.58 2288,-5186 2321.23,-5223.32 2274.68,-8746.75 2308,-8784 2356.15,-8837.83 2449.96,-8829.41 2501.66,-8819.6"/>
<polygon fill="blue" stroke="blue" points="2502.6,-8822.98 2511.71,-8817.57 2501.22,-8816.12 2502.6,-8822.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge606" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654.24,-5034.14C1720.64,-5025.6 1810.56,-5026.66 1866,-5079 1909.78,-5120.34 1842.85,-5171 1886,-5213 2014.97,-5338.55 2168.31,-5127.58 2288,-5262 2321.53,-5299.65 2274.39,-8854.42 2308,-8892 2355.89,-8945.55 2448.99,-8937.5 2500.84,-8927.75"/>
<polygon fill="blue" stroke="blue" points="2501.83,-8931.12 2510.95,-8925.73 2500.46,-8924.26 2501.83,-8931.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge607" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654.12,-5034.93C1719.99,-5026.98 1809.28,-5028.44 1866,-5079 1898.53,-5108 1853.91,-5145.51 1886,-5175 2018.51,-5296.81 2168.3,-5089.58 2288,-5224 2321.38,-5261.49 2274.54,-8800.59 2308,-8838 2355.89,-8891.55 2448.99,-8883.5 2500.85,-8873.75"/>
<polygon fill="blue" stroke="blue" points="2501.83,-8877.12 2510.95,-8871.73 2500.46,-8870.26 2501.83,-8877.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge611" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1652.34,-5033.98C1719.22,-5024.83 1810.77,-5025.14 1866,-5079 1893.55,-5105.87 1866.97,-5217.55 1886,-5251 1997.15,-5446.41 2187.75,-5356.78 2288,-5558 2309.32,-5600.79 2276.12,-8964.37 2308,-9000 2356.15,-9053.82 2449.97,-9045.41 2501.66,-9035.6"/>
<polygon fill="blue" stroke="blue" points="2502.6,-9038.98 2511.71,-9033.57 2501.22,-9032.11 2502.6,-9038.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge610" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654.04,-5045.24C1715.56,-5043.72 1799.26,-5048.78 1866,-5079 1877.17,-5084.06 1874.92,-5092.76 1886,-5098 1967.38,-5136.49 2228.21,-5080.7 2288,-5148 2320.28,-5184.33 2275.6,-8610.78 2308,-8647 2352.57,-8696.83 2436.28,-8693.31 2489.48,-8684.73"/>
<polygon fill="blue" stroke="blue" points="2490.11,-8688.18 2499.36,-8683.03 2488.91,-8681.28 2490.11,-8688.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge608" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654.1,-5052.56C1835.18,-5054.63 2245.65,-5064.36 2288,-5110 2320.88,-5145.43 2276.01,-8553.77 2308,-8590 2353.48,-8641.5 2440.51,-8637.68 2493.5,-8629.4"/>
<polygon fill="blue" stroke="blue" points="2494.33,-8632.81 2503.62,-8627.7 2493.18,-8625.9 2494.33,-8632.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node452" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node452"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="1603.5,-5124 1532.5,-5124 1532.5,-5088 1603.5,-5088 1603.5,-5124"/>
<text text-anchor="middle" x="1568" y="-5102.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge746" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.76,-5099.78C1667.27,-5090.66 1801.44,-5082.24 1866,-5159 1906.43,-5207.06 1844.56,-9633.8 1886,-9681 1909.04,-9707.24 1944.45,-9717.14 1979.11,-9719.45"/>
<polygon fill="blue" stroke="blue" points="1979.19,-9722.96 1989.34,-9719.92 1979.51,-9715.96 1979.19,-9722.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge750" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.77,-5099.78C1667.27,-5090.66 1801.44,-5082.24 1866,-5159 1906.91,-5207.64 1844.07,-9687.24 1886,-9735 1899.81,-9750.73 1918.06,-9760.58 1937.93,-9766.46"/>
<polygon fill="blue" stroke="blue" points="1937.24,-9769.89 1947.8,-9769.03 1939,-9763.12 1937.24,-9769.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge747" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.77,-5099.78C1667.27,-5090.66 1801.44,-5082.24 1866,-5159 1907.39,-5208.21 1843.58,-9740.67 1886,-9789 1899.35,-9804.2 1916.85,-9813.92 1935.95,-9819.86"/>
<polygon fill="blue" stroke="blue" points="1935.19,-9823.28 1945.76,-9822.55 1937.04,-9816.53 1935.19,-9823.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge748" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.76,-5099.78C1667.27,-5090.66 1801.43,-5082.24 1866,-5159 1905.95,-5206.49 1845.06,-9580.37 1886,-9627 1896.52,-9638.99 1909.63,-9647.56 1924.07,-9653.57"/>
<polygon fill="blue" stroke="blue" points="1923.14,-9656.95 1933.73,-9657.15 1925.57,-9650.39 1923.14,-9656.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge745" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.77,-5099.78C1667.28,-5090.66 1801.44,-5082.24 1866,-5159 1907.87,-5208.79 1843.08,-9794.11 1886,-9843 1922.64,-9884.74 1990.58,-9885.14 2037.02,-9879.39"/>
<polygon fill="blue" stroke="blue" points="2037.73,-9882.83 2047.16,-9878 2036.78,-9875.89 2037.73,-9882.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge749" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.76,-5099.78C1667.27,-5090.66 1801.43,-5082.24 1866,-5159 1905.44,-5205.88 1845.92,-9523.67 1886,-9570 1910.36,-9598.15 1948.85,-9608.13 1985.59,-9610.16"/>
<polygon fill="blue" stroke="blue" points="1985.77,-9613.67 1995.89,-9610.53 1986.02,-9606.68 1985.77,-9613.67"/>
</g>
</g>
</svg>
