digraph CallGraph {
  node [shape=box, style=filled, fillcolor=lightblue];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/read5_mod_100k()." [label="read5_mod_100k\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." [label="test_optional_one_time_prekey\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey()." [label="process_prekey\n(src/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl()." [label="sealed_sender_multi_recipient_encrypt_impl\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#FfiBindingError#" [label="FfiBindingError\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_encrypt()." [label="aes_256_ctr_encrypt\n(src/crypto.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store()." [label="test_in_memory_protocol_store\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." [label="group_basic_ratchet\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore][Default]default()." [label="default\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/get_or_create_message_key()." [label="get_or_create_message_key\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message()." [label="process_sender_key_distribution_message\n(src/group_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<Public>`][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]generate()." [label="generate\n(src/kem/kyber768.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_test_v2()." [label="fingerprint_test_v2\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/advance()." [label="advance\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]from_session_structure()." [label="from_session_structure\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionStructure][`From<SessionState>`]from()." [label="from\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionRecord]deserialize()." [label="deserialize\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize()." [label="test_sender_key_message_serialize_deserialize\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/calculate_chunk_size()." [label="calculate_chunk_size\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle][`TryFrom<PreKeyBundleContent>`]try_from()." [label="try_from\n(src/state/bundle.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new()." [label="new\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." [label="session_encrypt_result\n(benches/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new()." [label="new\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/when_sender_chain_key_iteration_overflows()." [label="when_sender_chain_key_iteration_overflows\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyKind#key_length()." [label="key_length\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/simple_test()." [label="simple_test\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent()." [label="when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Exactly#" [label="Exactly\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." [label="benches\n(benches/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." [label="test_simultaneous_initiate_lost_message\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#SenderKeyMessage#" [label="SenderKeyMessage\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[KyberPreKey]new()." [label="new\n(src/state/bundle.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage]compute_mac()." [label="compute_mac\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." [label="group_sealed_sender_multiple_devices\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_decrypt()." [label="session_encrypt_decrypt\n(benches/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize()." [label="deserialize\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/prekey/impl#[PreKeyRecord]deserialize()." [label="deserialize\n(src/state/prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/Parameters#encapsulate()." [label="encapsulate\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_encodings()." [label="fingerprint_encodings\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers()." [label="fingerprint_matching_identifiers\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#" [label="Default\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/decrypt()." [label="decrypt\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber768#" [label="Kyber768\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." [label="test_simultaneous_initiate_with_lossage\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content()." [label="extract_decryption_error_message_from_serialized_content\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Next#" [label="Next\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/EncryptionError#BadKeyOrIv#" [label="BadKeyOrIv\n(src/crypto.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<Secret>`][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/incremental_macs_are_valid()." [label="incremental_macs_are_valid\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new()." [label="new\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session_record()." [label="initialize_alice_session_record\n(src/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." [label="test_sealed_sender_multi_recipient_redundant_empty_devices\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_identity_key_from()." [label="test_identity_key_from\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key()." [label="random_public_key\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." [label="test_unacknowledged_sessions_eventually_expire\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 Command#Decapsulate#" [label="Decapsulate\n(examples/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]new()." [label="new\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key()." [label="chain_key\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/derive_keys_with_label()." [label="derive_keys_with_label\n(src/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSignedPreKeyId#" [label="InvalidSignedPreKeyId\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [label="run\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 KeyType#Kyber#" [label="Kyber\n(examples/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Implicit#" [label="Implicit\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]new()." [label="new\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." [label="test_basic_simultaneous_initiate\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore]new()." [label="new\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[u32][`From<ContentHint>`]from()." [label="from\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From<CiphertextMessageType>`]from()." [label="from\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate()." [label="generate\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#FingerprintParsingError#" [label="FingerprintParsingError\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState][`From<SessionStructure>`]from()." [label="from\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [label="new\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc()." [label="sealed_sender_encrypt_from_usmc\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemIdentityKeyStore]new()." [label="new\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." [label="test_sender_key_in_sealed_sender\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionStructure][`From<&SessionState>`]from()." [label="from\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." [label="test_revoked_server_cert\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#" [label="Sending\n(src/storage/traits.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters<'a>`]new()." [label="new\n(src/ratchet/params.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage]new()." [label="new\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_kyber768_keypair()." [label="test_kyber768_keypair\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/total_digest_size()." [label="total_digest_size\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[ChainKey]new()." [label="new\n(src/ratchet/keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." [label="test_alternate_identity_signing\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKeyType#" [label="BadKeyType\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication()." [label="test_agreement_and_authentication\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_prekey()." [label="message_decrypt_prekey\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/CurrentOrPrevious#Current#" [label="Current\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new()." [label="new\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 impl#[`libsignal_protocol::kem::KeyType`][`From<KeyType>`]from()." [label="from\n(examples/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [label="create_pre_key_bundle\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 Command#Encapsulate#" [label="Encapsulate\n(examples/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderChainKey]new()." [label="new\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new()." [label="new\n(src/ratchet/params.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new()." [label="new\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#" [label="Kyber1024\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." [label="group_no_recv_session\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/CurrentOrPrevious#Previous#" [label="Previous\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." [label="test_chain_jump_over_limit_with_self\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[`kem::KeyPair`][KeyPairSerde]from_public_and_private()." [label="from_public_and_private\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Ciphertext<'a>`]deserialize()." [label="deserialize\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." [label="test_basic_prekey\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidArgument#" [label="InvalidArgument\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#" [label="SenderKey\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 run_interaction()." [label="run_interaction\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Seed#" [label="Seed\n(src/ratchet/keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." [label="test_zero_is_a_valid_prekey_id\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/final_result_should_be_equal_to_non_incremental_hmac()." [label="final_result_should_be_equal_to_non_incremental_hmac\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 bench_kem()." [label="bench_kem\n(benches/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore]new()." [label="new\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_kyber1024_kem()." [label="test_kyber1024_kem\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt()." [label="message_decrypt\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication()." [label="test_agreement_and_authentication\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new()." [label="new\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/total_digest_size_is_never_too_big()." [label="total_digest_size_is_never_too_big\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 run_session_interaction()." [label="run_session_interaction\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]decapsulate()." [label="decapsulate\n(src/kem/kyber1024.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#" [label="PreKey\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/produce_and_validate()." [label="produce_and_validate\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message()." [label="create_sender_key_distribution_message\n(src/group_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." [label="test_decryption_error_message\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [label="sealed_sender_decrypt\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnknownSealedSenderVersion#" [label="UnknownSealedSenderVersion\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Random#" [label="Random\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_state()." [label="decrypt_message_with_state\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate()." [label="calculate\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Keys#" [label="Keys\n(src/ratchet/keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced()." [label="when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/impl#[SignalProtocolError][`From<CurveError>`]from()." [label="from\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore][Default]default()." [label="default\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data()." [label="when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original()." [label="for_original\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." [label="test_sealed_sender_multi_recipient\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [label="new\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderMessageKey]new()." [label="new\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." [label="test_bad_signed_pre_key_signature\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SignalProtocolError][`From<InvalidSessionError>`]from()." [label="from\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/Parameters#decapsulate()." [label="decapsulate\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_test_v1()." [label="fingerprint_test_v1\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session()." [label="initialize_bob_session\n(src/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_alice()." [label="test_ratcheting_session_as_alice\n(tests/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]new()." [label="new\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]deserialize()." [label="deserialize\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." [label="ratchet_forward\n(benches/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor()." [label="apply_agreement_xor\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." [label="ratchet_forward_result\n(benches/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[IdChoice][`From<u32>`]from()." [label="from\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord][GenericSignedPreKey]from_storage()." [label="from_storage\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundleContent][`From<PreKeyBundle>`]from()." [label="from\n(src/state/bundle.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state()." [label="add_single_state\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_send_session()." [label="group_no_send_session\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 is_session_id_equal()." [label="is_session_id_equal\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new()." [label="new\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_bob()." [label="test_ratcheting_session_as_bob\n(tests/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize()." [label="deserialize\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private()." [label="from_public_and_private\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [label="group_decrypt\n(src/group_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore]new()." [label="new\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionRecord]new_fresh()." [label="new_fresh\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/DecryptionError#BadKeyOrIv#" [label="BadKeyOrIv\n(src/crypto.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#SignalMessage#" [label="SignalMessage\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair()." [label="test_serialize_identity_key_pair\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`From<KeyPair>`]from()." [label="from\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidState#" [label="InvalidState\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#" [label="CiphertextMessageTooShort\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/KeyPairSerde#from_public_and_private()." [label="from_public_and_private\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/extract_single_ssv2_received_message()." [label="extract_single_ssv2_received_message\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 parse_empty_multi_recipient_sealed_sender()." [label="parse_empty_multi_recipient_sealed_sender\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionRecord]new()." [label="new\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier#" [label="NoKeyTypeIdentifier\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 init_logger()." [label="init_logger\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_mismatching_versions()." [label="fingerprint_mismatching_versions\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#" [label="LegacyCiphertextVersion\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidKyberPreKeyId#" [label="InvalidKyberPreKeyId\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext()." [label="test_decryption_error_message_for_plaintext\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." [label="test_chain_jump_over_limit\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt()." [label="aes256_ctr_hmacsha256_encrypt\n(src/crypto.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/test/aes_ctr_test()." [label="aes_ctr_test\n(src/crypto.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/zip3()." [label="zip3\n(src/state/bundle.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." [label="message_encrypt\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/assert_signal_message_equals()." [label="assert_signal_message_equals\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." [label="generate\n(src/state/kyber_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore][Default]default()." [label="default\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidRegistrationId#" [label="InvalidRegistrationId\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]generate()." [label="generate\n(src/kem/kyber1024.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#" [label="InvalidSealedSenderMessage\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKEMCiphertextLength#" [label="BadKEMCiphertextLength\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[DisplayableFingerprint]new()." [label="new\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[PublicKey][KeySerde]deserialize()." [label="deserialize\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected()." [label="when_exceed_maximum_states_then_oldest_is_ejected\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber()." [label="test_alice_and_bob_agree_on_chain_keys_with_kyber\n(tests/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record()." [label="decrypt_message_with_record\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag()." [label="compute_authentication_tag\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeys]derive_keys()." [label="derive_keys\n(src/ratchet/keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`KeyMaterial<T>`]new()." [label="new\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#WrongKEMKeyType#" [label="WrongKEMKeyType\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." [label="test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate()." [label="calculate\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey][`From<PublicKey>`]from()." [label="from\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[`kem::Key<kem::Public>`][KeySerde]deserialize()." [label="deserialize\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#" [label="Plaintext\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[Public][KeyKind]key_length()." [label="key_length\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet()." [label="ratchet\n(benches/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/create_decryption_failure_log()." [label="create_decryption_failure_log\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/impl#[SignalProtocolError]for_application_callback()." [label="for_application_callback\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize()." [label="deserialize\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_dyn_parameters_consts()." [label="test_dyn_parameters_consts\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage]new()." [label="new\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]encapsulate()." [label="encapsulate\n(src/kem/kyber768.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]decode()." [label="decode\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKEMKeyLength#" [label="BadKEMKeyLength\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]new()." [label="new\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion#" [label="UnrecognizedMessageVersion\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/get_sender_key()." [label="get_sender_key\n(src/group_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_decrypt()." [label="aes_256_ctr_decrypt\n(src/crypto.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#" [label="PreKeySignalMessage\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." [label="test_sealed_sender\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." [label="from_store\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore]new()." [label="new\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize()." [label="deserialize\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]get_fingerprint()." [label="get_fingerprint\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKeyLength#" [label="BadKeyLength\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure#" [label="InvalidSessionStructure\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_signal()." [label="message_decrypt_signal\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyState]new()." [label="new\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [label="new\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Unknown#" [label="Unknown\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." [label="test_simultaneous_initiate_repeated_messages\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 Command#Generate#" [label="Generate\n(examples/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/impl#[`Incremental<M>`]new()." [label="new\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." [label="test_decryption_error_in_sealed_sender\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." [label="group_sealed_sender\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[SignedPreKey]new()." [label="new\n(src/state/bundle.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb()." [label="from_pb\n(src/ratchet/keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate()." [label="generate\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints()." [label="fingerprint_mismatching_fingerprints\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." [label="group_sealed_sender_multiple_devices_and_excluded_recipients\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session()." [label="initialize_alice_session\n(src/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/chunk_sizes_sha512()." [label="chunk_sizes_sha512\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSessionStore][Default]default()." [label="default\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/DecryptionError#BadCiphertext#" [label="BadCiphertext\n(src/crypto.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." [label="test_sealed_sender_multi_recipient_encrypt_with_archived_session\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[`std::time::SystemTime`][`From<Timestamp>`]from()." [label="from\n(src/timestamp.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/validating_simple_test()." [label="validating_simple_test\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[`UnacknowledgedPreKeyMessageItems<'a>`]new()." [label="new\n(src/state/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/iteration()." [label="iteration\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." [label="sealed_sender_decrypt_to_usmc\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#PlaintextContent#" [label="PlaintextContent\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PlaintextContent][`From<DecryptionErrorMessage>`]from()." [label="from\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_decrypt_result()." [label="session_encrypt_decrypt_result\n(benches/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." [label="group_basic_encrypt_decrypt\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize()." [label="deserialize\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_raw_kem()." [label="test_raw_kem\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]decapsulate()." [label="decapsulate\n(src/kem/kyber768.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#" [label="InvalidProtobufEncoding\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[`kem::Key<kem::Secret>`][KeySerde]deserialize()." [label="deserialize\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/KeySerde#deserialize()." [label="deserialize\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." [label="group_large_messages\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." [label="test_sender_cert\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_session()." [label="test_basic_session\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#" [label="Whisper\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize()." [label="test_pre_key_signal_message_serialize_deserialize\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt()." [label="aes256_ctr_hmacsha256_decrypt\n(src/crypto.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Resendable#" [label="Resendable\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4()." [label="initialize_sessions_v4\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderMessageKey]from_protobuf()." [label="from_protobuf\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/chunk_sizes_sha256()." [label="chunk_sizes_sha256\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new()." [label="new\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [label="process_prekey_bundle\n(src/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/decode_varint()." [label="decode_varint\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize()." [label="deserialize\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." [label="test_repeat_bundle_message\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/prekey/impl#[PreKeyRecord]new()." [label="new\n(src/state/prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMacKeyLength#" [label="InvalidMacKeyLength\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/get_or_create_chain_key()." [label="get_or_create_chain_key\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyType][`TryFrom<u8>`]try_from()." [label="try_from\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[KeyPair][`From<IdentityKeyPair>`]from()." [label="from\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_impl()." [label="process_prekey_impl\n(src/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf()." [label="from_protobuf\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt()." [label="sealed_sender_multi_recipient_encrypt\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[KyberPayload]new()." [label="new\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." [label="test_message_key_limits\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/new_incremental()." [label="new_incremental\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." [label="group_message_key_limit\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt()." [label="sealed_sender_encrypt\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SessionNotFound#" [label="SessionNotFound\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session_record()." [label="initialize_bob_session_record\n(src/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." [label="test_bad_message_bundle\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/encrypt()." [label="encrypt\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." [label="test_server_cert\n(tests/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#from_storage()." [label="from_storage\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/validating_returns_right_size()." [label="validating_returns_right_size\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3()." [label="initialize_sessions_v3\n(tests/support/mod.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#NoSenderKeyState#" [label="NoSenderKeyState\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From<ProtoMessageType>`]from()." [label="from\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis()." [label="from_epoch_millis\n(src/timestamp.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V1#" [label="V1\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." [label="v2\n(benches/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty()." [label="new_empty\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/message_version()." [label="message_version\n(src/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed()." [label="new_from_seed\n(src/ratchet/keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private()." [label="from_public_and_private\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[RootKey]new()." [label="new\n(src/ratchet/keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." [label="group_too_far_in_the_future\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/tests/test_chain_key_derivation()." [label="test_chain_key_derivation\n(src/ratchet/keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from()." [label="try_from\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]new()." [label="new\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#" [label="UnrecognizedCiphertextVersion\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new()." [label="new\n(src/state/bundle.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." [label="session_encrypt\n(benches/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize()." [label="test_signal_message_serialize_deserialize\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SignatureValidationFailed#" [label="SignatureValidationFailed\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#" [label="DuplicatedMessage\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers()." [label="fingerprint_mismatching_identifiers\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMessage#" [label="InvalidMessage\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize()." [label="deserialize\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#ApplicationCallbackError#" [label="ApplicationCallbackError\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SealedSenderSelfSend#" [label="SealedSenderSelfSend\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/hmac_sha256()." [label="hmac_sha256\n(src/crypto.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." [label="test_simultaneous_initiate_lost_message_repeated_messages\n(tests/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 main()." [label="main\n(examples/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/get_encoded_string()." [label="get_encoded_string\n(src/fingerprint.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom<PrivateKey>`]try_from()." [label="try_from\n(src/identity_key.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." [label="v1\n(benches/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/chunk_size_zero()." [label="chunk_size_zero\n(src/incremental_mac.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_serialize()." [label="test_serialize\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [label="group_encrypt\n(src/group_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V2#" [label="V2\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage<'a>`]deserialize()." [label="deserialize\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/impl#[PreKeysUsed][Default]default()." [label="default\n(src/session.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage<'a>`]parse()." [label="parse\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]encapsulate()." [label="encapsulate\n(src/kem/kyber1024.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord][GenericSignedPreKey]from_storage()." [label="from_storage\n(src/state/kyber_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state()." [label="add_second_state\n(src/sender_keys.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidPreKeyId#" [label="InvalidPreKeyId\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#" [label="InvalidSenderKeySession\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." [label="group_late_join\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Receiving#" [label="Receiving\n(src/storage/traits.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/append_session_summary()." [label="append_session_summary\n(src/session_cipher.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_kyber1024_keypair()." [label="test_kyber1024_keypair\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new()." [label="new\n(src/state/signed_prekey.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#" [label="UntrustedIdentity\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." [label="group_out_of_order\n(tests/groups.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKEMKeyType#" [label="BadKEMKeyType\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ContentHint][`From<u32>`]from()." [label="from\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[Secret][KeyKind]key_length()." [label="key_length\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#FingerprintVersionMismatch#" [label="FingerprintVersionMismatch\n(src/error.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." [label="test_lossless_round_trip\n(src/sealed_sender.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore][Default]default()." [label="default\n(src/storage/inmem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/create_signal_message()." [label="create_signal_message\n(src/protocol.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/Parameters#generate()." [label="generate\n(src/kem.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/derive_keys()." [label="derive_keys\n(src/ratchet.rs)"];
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_impl().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Receiving#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SessionNotFound#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidState#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidRegistrationId#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidArgument#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/EncryptionError#BadKeyOrIv#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore][Default]default()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/get_or_create_message_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/get_or_create_message_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<Public>`][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/kyber768/impl#[Parameters][Parameters]generate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`KeyMaterial<T>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_test_v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_test_v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]decode().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/advance()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionRecord]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidState#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle][`TryFrom<PreKeyBundleContent>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle][`TryFrom<PreKeyBundleContent>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidArgument#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSenderKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemIdentityKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/when_sender_chain_key_iteration_overflows()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/when_sender_chain_key_iteration_overflows()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidState#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/simple_test()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/hmac_sha256().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/simple_test()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/new_incremental().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 v1().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 bench_kem().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 v2().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Random#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage]compute_mac()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMacKeyLength#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemIdentityKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Implicit#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage<'a>`]parse().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_decrypt_result().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/prekey/impl#[PreKeyRecord]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_encodings()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Random#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidArgument#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<Secret>`][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/incremental_macs_are_valid()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/new_incremental().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/incremental_macs_are_valid()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/hmac_sha256().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[DisplayableFingerprint]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]get_fingerprint().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionRecord]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage<'a>`]parse().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Implicit#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_identity_key_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey][`From<PublicKey>`]from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SessionNotFound#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/derive_keys_with_label()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[RootKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/derive_keys_with_label()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#SignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run_interaction().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidPreKeyId#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 is_session_id_equal().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Random#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From<CiphertextMessageType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From<CiphertextMessageType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From<CiphertextMessageType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From<CiphertextMessageType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState][`From<SessionStructure>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]from_session_structure().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SessionNotFound#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_kyber768_keypair()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber768#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_kyber768_keypair()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/total_digest_size()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/calculate_chunk_size().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[ChainKey]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/hmac_sha256().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[ChainKey]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Receiving#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/create_decryption_failure_log().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionRecord]new_fresh().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SessionNotFound#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 impl#[`libsignal_protocol::kem::KeyType`][`From<KeyType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 impl#[`libsignal_protocol::kem::KeyType`][`From<KeyType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 KeyType#Kyber#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/prekey/impl#[PreKeyRecord]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderChainKey]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderMessageKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderChainKey]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/hmac_sha256().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderChainKey]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidState#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber768#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/CurrentOrPrevious#Previous#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/CurrentOrPrevious#Current#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[`kem::KeyPair`][KeyPairSerde]from_public_and_private()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Ciphertext<'a>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Ciphertext<'a>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKEMCiphertextLength#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Ciphertext<'a>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyType][`TryFrom<u8>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Next#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run_interaction()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run_interaction()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run_interaction()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/final_result_should_be_equal_to_non_incremental_hmac()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/new_incremental().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/final_result_should_be_equal_to_non_incremental_hmac()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/hmac_sha256().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 bench_kem()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 bench_kem()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber768#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 bench_kem()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_kyber1024_kem()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_kyber1024_kem()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidArgument#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_signal().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#SignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_prekey().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Receiving#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run_session_interaction()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run_session_interaction()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 run_session_interaction()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/produce_and_validate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/new_incremental().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/create_signal_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_signal().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_prekey().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SealedSenderSelfSend#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/get_or_create_message_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/get_or_create_chain_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/impl#[SignalProtocolError][`From<CurveError>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/impl#[SignalProtocolError][`From<CurveError>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKeyLength#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/impl#[SignalProtocolError][`From<CurveError>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKeyType#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore][Default]default()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidPreKeyId#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore][Default]default()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemPreKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]decode().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidArgument#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/extract_single_ssv2_received_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SignalProtocolError][`From<InvalidSessionError>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/Parameters#decapsulate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/Parameters#encapsulate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/Parameters#decapsulate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/Parameters#generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_test_v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]decode().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_test_v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/derive_keys().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/message_version().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_alice()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_alice()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_alice()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_alice()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]decode().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#FingerprintParsingError#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[ScannableFingerprint]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#FingerprintVersionMismatch#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Receiving#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[IdChoice][`From<u32>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Exactly#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_send_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_send_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]new_empty().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_bob()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_bob()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]decode().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_bob()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters<'a>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_ratcheting_session_as_bob()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`KeyMaterial<T>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKEMKeyLength#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyType][`TryFrom<u8>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyKind#key_length().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#NoKeyTypeIdentifier#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Ciphertext<'a>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#WrongKEMKeyType#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<Public>`][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<Secret>`][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]from_public_and_private()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#WrongKEMKeyType#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnrecognizedMessageVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SignatureValidationFailed#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#NoSenderKeyState#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/get_sender_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[KyberPayload]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/extract_single_ssv2_received_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage<'a>`]parse().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 parse_empty_multi_recipient_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage<'a>`]parse().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_mismatching_versions()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_mismatching_versions()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]decode().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidArgument#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message_for_plaintext()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/hmac_sha256().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/test/aes_ctr_test()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[KyberPayload]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidState#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#SignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SessionNotFound#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSessionStructure#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore][Default]default()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSignedPreKeyId#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore][Default]default()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignedPreKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/kyber1024/impl#[Parameters][Parameters]generate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`KeyMaterial<T>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[DisplayableFingerprint]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/get_encoded_string().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters<'a>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/create_decryption_failure_log().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/CurrentOrPrevious#Current#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_state().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/CurrentOrPrevious#Previous#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Receiving#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidRegistrationId#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSignalProtocolStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Receiving#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[`kem::Key<kem::Public>`][KeySerde]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#PlaintextContent#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#SignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#SenderKeyMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 error/impl#[SignalProtocolError]for_application_callback()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#ApplicationCallbackError#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage]compute_mac().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]decode().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[`UnacknowledgedPreKeyMessageItems<'a>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[RootKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/get_sender_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#DuplicatedMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/get_sender_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/get_sender_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/get_sender_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/EncryptionError#BadKeyOrIv#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/DecryptionError#BadKeyOrIv#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/prekey/impl#[PreKeyRecord]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Exactly#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Next#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]from_store()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Random#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyRecord]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyState]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]get_fingerprint()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidArgument#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_signal()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_signal()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_signal()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SessionNotFound#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_signal()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/decrypt_message_with_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt_signal()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Receiving#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyState]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Unknown#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Unknown#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Implicit#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Unknown#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Resendable#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Unknown#" -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[u32][`From<ContentHint>`]from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Random#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/impl#[`Incremental<M>`]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/hmac_sha256().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/extract_decryption_error_message_from_serialized_content().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessage#PreKeySignalMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PlaintextContent][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[DecryptionErrorMessage]for_original().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PlaintextContent][`From<DecryptionErrorMessage>`]from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Implicit#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage<'a>`]parse().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Keys#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]from_pb()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Seed#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Implicit#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemIdentityKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage<'a>`]parse().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionState]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/derive_keys().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/message_version().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/chunk_sizes_sha512()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/calculate_chunk_size().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSessionStore][Default]default()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemSessionStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/validating_simple_test()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/new_incremental().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_chain_key_iteration_tests/iteration()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Receiving#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/DecryptionError#BadKeyOrIv#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/DecryptionError#BadCiphertext#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V1#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage<'a>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V2#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_decrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_decrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_decrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_decrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/impl#[`kem::Key<kem::Secret>`][KeySerde]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKeyLength#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKeyType#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run_session_interaction().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/assert_signal_message_equals().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/create_signal_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[PreKeySignalMessage]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/hmac_sha256().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/DecryptionError#BadCiphertext#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes256_ctr_hmacsha256_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 crypto/aes_256_ctr_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters<'a>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderMessageKey]from_protobuf()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderMessageKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/chunk_sizes_sha256()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/calculate_chunk_size().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ProtoMessageType][`From<CiphertextMessageType>`]from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/traits/Direction#Sending#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UntrustedIdentity#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#SignatureValidationFailed#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionRecord]new_fresh().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/decode_varint()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/decode_varint()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/decode_varint()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/advance().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#from_storage().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/KeyPairSerde#from_public_and_private().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/KeySerde#deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyType][`TryFrom<u8>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber768#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyType][`TryFrom<u8>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyType][`TryFrom<u8>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKEMKeyType#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/impl#[PreKeysUsed][Default]default().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters<'a>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_impl()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderChainKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderKeyState]from_protobuf()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/impl#[SenderMessageKey]from_protobuf().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v4().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/new_incremental()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/impl#[`Incremental<M>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session_record()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/session/impl#[SessionRecord]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_cipher/message_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKeyLength#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#BadKeyType#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/validating_returns_right_size()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/new_incremental().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_bob_session_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[`BobSignalProtocolParameters<'a>`]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/params/impl#[AliceSignalProtocolParameters]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/initialize_sessions_v3()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/initialize_alice_session_record().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From<ProtoMessageType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Whisper#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From<ProtoMessageType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#SenderKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From<ProtoMessageType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#PreKey#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From<ProtoMessageType>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/extract_single_ssv2_received_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeys]derive_keys().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Keys#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[MessageKeyGenerator]new_from_seed()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/MessageKeyGenerator#Seed#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/tests/test_chain_key_derivation()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/keys/impl#[ChainKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#LegacyCiphertextVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#CiphertextMessageTooShort#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnrecognizedCiphertextVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[SignedPreKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[PreKeyBundle]new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/bundle/impl#[KyberPreKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/assert_signal_message_equals().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/create_signal_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/impl#[Fingerprint]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[CiphertextMessageType][`From<ProtoMessageType>`]from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ContentHint][`From<u32>`]from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/IdChoice#Next#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 main()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 main()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 Command#Decapsulate#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 main()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 Command#Generate#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 main()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 main()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 Command#Encapsulate#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 fingerprint/get_encoded_string()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidArgument#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom<PrivateKey>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom<PrivateKey>`]try_from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[UnidentifiedSenderMessageContent]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/CiphertextMessageType#Plaintext#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/chunk_size_zero()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 incremental_mac/test/new_incremental().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_serialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_serialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#NoSenderKeyState#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSenderKeySession#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage<'a>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage<'a>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidProtobufEncoding#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage<'a>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V1#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage<'a>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/UnidentifiedSenderMessage#V2#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`UnidentifiedSenderMessage<'a>`]deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnknownSealedSenderVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage<'a>`]parse()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidSealedSenderMessage#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[`SealedSenderV2SentMessage<'a>`]parse()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#UnknownSealedSenderVersion#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord][GenericSignedPreKey]from_storage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[`Key<T>`]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/impl#[TestContext]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/chain_key().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_kyber1024_keypair()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/impl#[KeyPair]generate().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 kem/tests/test_kyber1024_keypair()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 kem/KeyType#Kyber1024#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#new()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 state/signed_prekey/GenericSignedPreKey#from_storage().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/process_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyDistributionMessage][`TryFrom<&[u8]>`]try_from().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/test_in_memory_protocol_store().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/create_sender_key_distribution_message().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ContentHint][`From<u32>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Default#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ContentHint][`From<u32>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Resendable#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ContentHint][`From<u32>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Unknown#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ContentHint][`From<u32>`]from()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/ContentHint#Implicit#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]deserialize().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 timestamp/impl#[Timestamp]from_epoch_millis().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore][Default]default()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 error/SignalProtocolError#InvalidKyberPreKeyId#";
  "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore][Default]default()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 storage/inmem/impl#[InMemKyberPreKeyStore]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/create_signal_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SignalMessage]new().";
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/derive_keys()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet/derive_keys_with_label().";
}
