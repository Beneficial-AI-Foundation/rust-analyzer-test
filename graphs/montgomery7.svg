<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="1810pt" height="1748pt"
 viewBox="0.00 0.00 1810.00 1748.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1744)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1744 1806,-1744 1806,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="603,-1149 603,-1386 1365,-1386 1365,-1149 603,-1149"/>
<text text-anchor="middle" x="984" y="-1370.8" font-family="Helvetica,sans-Serif" font-size="14.00">dalek_benchmarks.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1124.5,-1066 1124.5,-1141 1321.5,-1141 1321.5,-1066 1124.5,-1066"/>
<text text-anchor="middle" x="1223" y="-1125.8" font-family="Helvetica,sans-Serif" font-size="14.00">pippenger.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1073,-1441 1073,-1732 1794,-1732 1794,-1441 1073,-1441"/>
<text text-anchor="middle" x="1433.5" y="-1716.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" points="138,-432 138,-777 513,-777 513,-432 138,-432"/>
<text text-anchor="middle" x="325.5" y="-761.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" points="533,-1066 533,-1141 992,-1141 992,-1066 533,-1066"/>
<text text-anchor="middle" x="762.5" y="-1125.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" points="632,-983 632,-1058 713,-1058 713,-983 632,-983"/>
<text text-anchor="middle" x="672.5" y="-1042.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" points="860,-983 860,-1058 1268,-1058 1268,-983 860,-983"/>
<text text-anchor="middle" x="1064" y="-1042.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightgrey" stroke="lightgrey" points="627,-846 627,-975 1019.5,-975 1019.5,-846 627,-846"/>
<text text-anchor="middle" x="823.25" y="-959.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightgrey" stroke="lightgrey" points="833.5,-434 833.5,-509 1045.5,-509 1045.5,-434 833.5,-434"/>
<text text-anchor="middle" x="939.5" y="-493.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_benchmarks.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightgrey" stroke="lightgrey" points="1171,-434 1171,-509 1275,-509 1275,-434 1171,-434"/>
<text text-anchor="middle" x="1223" y="-493.8" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightgrey" stroke="lightgrey" points="831.5,-547 831.5,-838 1311,-838 1311,-547 831.5,-547"/>
<text text-anchor="middle" x="1071.25" y="-822.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightgrey" stroke="lightgrey" points="0,-295 0,-370 118,-370 118,-295 0,-295"/>
<text text-anchor="middle" x="59" y="-354.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightgrey" stroke="lightgrey" points="172.5,-241 172.5,-424 478.5,-424 478.5,-241 172.5,-241"/>
<text text-anchor="middle" x="325.5" y="-408.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightgrey" stroke="lightgrey" points="615.5,-35 615.5,-110 729.5,-110 729.5,-35 615.5,-35"/>
<text text-anchor="middle" x="672.5" y="-94.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightgrey" stroke="lightgrey" points="589,-255 589,-384 756,-384 756,-255 589,-255"/>
<text text-anchor="middle" x="672.5" y="-368.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightgrey" stroke="lightgrey" points="565,-678 565,-807 780,-807 780,-678 565,-678"/>
<text text-anchor="middle" x="672.5" y="-791.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightgrey" stroke="lightgrey" points="829,-259 829,-334 1266,-334 1266,-259 829,-259"/>
<text text-anchor="middle" x="1047.5" y="-318.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightgrey" stroke="lightgrey" points="588.5,-118 588.5,-247 982.5,-247 982.5,-118 588.5,-118"/>
<text text-anchor="middle" x="785.5" y="-231.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightgrey" stroke="lightgrey" points="844,-351 844,-426 1036,-426 1036,-351 844,-351"/>
<text text-anchor="middle" x="940" y="-410.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightgrey" stroke="lightgrey" points="176,-8 176,-137 475,-137 475,-8 176,-8"/>
<text text-anchor="middle" x="325.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightgrey" stroke="lightgrey" points="189,-785 189,-968 462,-968 462,-785 189,-785"/>
<text text-anchor="middle" x="325.5" y="-952.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightgrey" stroke="lightgrey" points="198,-158 198,-233 453,-233 453,-158 198,-158"/>
<text text-anchor="middle" x="325.5" y="-217.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;fn montgomery_ladder&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Montgomery pseudomultiplication&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = constants::X25519_BASEPOINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1301.5,-1301 1144.5,-1301 1144.5,-1265 1301.5,-1265 1301.5,-1301"/>
<text text-anchor="middle" x="1223" y="-1279.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_ladder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1481,-1485 1424,-1485 1424,-1449 1481,-1449 1481,-1485"/>
<text text-anchor="middle" x="1452.5" y="-1463.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1301.71,-1285.64C1323.78,-1289.49 1346.75,-1296.74 1365,-1310 1408.89,-1341.88 1433.11,-1403.12 1444.1,-1438.97"/>
<polygon fill="gray" stroke="gray" points="1440.81,-1440.18 1446.98,-1448.79 1447.53,-1438.21 1440.81,-1440.18"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;fn consttime_variable_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let B = &amp;constants::ED25519_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1357,-1247 1089,-1247 1089,-1211 1357,-1211 1357,-1247"/>
<text text-anchor="middle" x="1223" y="-1225.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_variable_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1352.07,-1247.11C1356.61,-1249.74 1360.95,-1252.69 1365,-1256 1422.03,-1302.64 1441.86,-1392.96 1448.43,-1438.82"/>
<polygon fill="gray" stroke="gray" points="1444.99,-1439.49 1449.77,-1448.94 1451.93,-1438.57 1444.99,-1439.49"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="white" stroke="black" points="1346,-1355 1100,-1355 1100,-1319 1346,-1319 1346,-1355"/>
<text text-anchor="middle" x="1223" y="-1333.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1334.76,-1355.03C1345.34,-1358.83 1355.61,-1363.43 1365,-1369 1394.64,-1386.58 1419.55,-1417.78 1434.91,-1440.26"/>
<polygon fill="gray" stroke="gray" points="1432.07,-1442.31 1440.52,-1448.7 1437.9,-1438.44 1432.07,-1442.31"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn scalar_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; scalar benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_arith(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;batch_scalar_inversion(...">
<polygon fill="white" stroke="black" points="734,-1274 611,-1274 611,-1238 734,-1238 734,-1274"/>
<text text-anchor="middle" x="672.5" y="-1252.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn batch_scalar_inversion&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for batch_size in &amp;BATCH_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new(&#39; Batch scalar inve...">
<polygon fill="white" stroke="black" points="1026.5,-1355 852.5,-1355 852.5,-1319 1026.5,-1319 1026.5,-1355"/>
<text text-anchor="middle" x="939.5" y="-1333.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_scalar_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<path fill="none" stroke="gray" d="M721.8,-1274.07C752.31,-1285.16 792.69,-1299.24 829,-1310 836.33,-1312.17 843.96,-1314.31 851.65,-1316.37"/>
<polygon fill="gray" stroke="gray" points="850.82,-1319.77 861.38,-1318.94 852.61,-1313 850.82,-1319.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn montgomery_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; montgomery benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;montgomery_ladder(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consttime_...">
<polygon fill="white" stroke="black" points="1025,-1247 854,-1247 854,-1211 1025,-1211 1025,-1247"/>
<text text-anchor="middle" x="939.5" y="-1225.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().</title>
<path fill="none" stroke="gray" d="M734.3,-1249.81C766.7,-1246.5 807.29,-1242.37 843.73,-1238.66"/>
<polygon fill="gray" stroke="gray" points="844.3,-1242.12 853.89,-1237.62 843.59,-1235.15 844.3,-1242.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn scalar_arith&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = thread_rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Scalar inversion&#39; , |b| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64...">
<polygon fill="white" stroke="black" points="988,-1301 891,-1301 891,-1265 988,-1265 988,-1301"/>
<text text-anchor="middle" x="939.5" y="-1279.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_arith</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().</title>
<path fill="none" stroke="gray" d="M734.3,-1262.19C778.29,-1266.68 837.38,-1272.7 880.68,-1277.11"/>
<polygon fill="gray" stroke="gray" points="880.46,-1280.61 890.77,-1278.14 881.17,-1273.64 880.46,-1280.61"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn edwards_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; edwards benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;decompress(&amp;mut g); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1009.5,-1193 869.5,-1193 869.5,-1157 1009.5,-1157 1009.5,-1193"/>
<text text-anchor="middle" x="939.5" y="-1171.3" font-family="Helvetica,sans-Serif" font-size="14.00">edwards_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().</title>
<path fill="none" stroke="gray" d="M721.8,-1237.93C752.31,-1226.84 792.69,-1212.76 829,-1202 838.82,-1199.09 849.19,-1196.25 859.49,-1193.56"/>
<polygon fill="gray" stroke="gray" points="860.5,-1196.91 869.31,-1191.03 858.76,-1190.13 860.5,-1196.91"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;pub fn batch_invert(inputs: &amp;mut [Scalar]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This code is essentially identical to the FieldElement &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// implementation, and is documented there. &#160;Unfortunately, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1504,-1593 1401,-1593 1401,-1557 1504,-1557 1504,-1593"/>
<text text-anchor="middle" x="1452.5" y="-1571.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M972.11,-1355.08C998.31,-1369.25 1036.97,-1388.3 1073,-1399 1198.63,-1436.3 1254.68,-1369.26 1365,-1440 1367.66,-1441.71 1410.22,-1509.16 1434.63,-1548.06"/>
<polygon fill="gray" stroke="gray" points="1431.84,-1550.2 1440.12,-1556.81 1437.77,-1546.48 1431.84,-1550.2"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn consttime_fixed_base_scalar_mul&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s = Scalar::from(897987897u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; Constant&#45;time fixed&#45;base scalar mul&#39;...">
<polygon fill="white" stroke="black" points="1346,-1193 1100,-1193 1100,-1157 1346,-1157 1346,-1193"/>
<text text-anchor="middle" x="1223" y="-1171.3" font-family="Helvetica,sans-Serif" font-size="14.00">consttime_fixed_base_scalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1346.2,-1189.24C1352.95,-1192.76 1359.3,-1196.97 1365,-1202 1435.47,-1264.09 1448.81,-1384.32 1451.13,-1438.87"/>
<polygon fill="gray" stroke="gray" points="1447.64,-1438.99 1451.47,-1448.87 1454.63,-1438.76 1447.64,-1438.99"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_ladder().</title>
<path fill="none" stroke="gray" d="M1025.27,-1246.56C1041.12,-1249.76 1057.55,-1253.03 1073,-1256 1092.77,-1259.8 1114.04,-1263.75 1134.14,-1267.41"/>
<polygon fill="gray" stroke="gray" points="1133.76,-1270.89 1144.22,-1269.24 1135.01,-1264.01 1133.76,-1270.89"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/montgomery_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul().</title>
<path fill="none" stroke="gray" d="M1025.02,-1243.69C1032.36,-1247.01 1039.33,-1251.06 1045.5,-1256 1066.51,-1272.85 1051.39,-1293.93 1073,-1310 1078.46,-1314.06 1084.33,-1317.57 1090.48,-1320.61"/>
<polygon fill="gray" stroke="gray" points="1089.13,-1323.84 1099.68,-1324.73 1091.99,-1317.45 1089.13,-1323.84"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_arith().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M988.24,-1286.69C1007.69,-1290.24 1029.35,-1297.05 1045.5,-1310 1066.51,-1326.85 1051.13,-1348.29 1073,-1364 1179.53,-1440.54 1243,-1358.79 1365,-1407 1386.13,-1415.35 1407.14,-1429.74 1423.16,-1442.34"/>
<polygon fill="gray" stroke="gray" points="1421.08,-1445.16 1431.06,-1448.72 1425.48,-1439.71 1421.08,-1445.16"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul().</title>
<path fill="none" stroke="gray" d="M1009.56,-1189.37C1029.97,-1193.53 1052.37,-1198.03 1073,-1202 1085.22,-1204.35 1098.02,-1206.76 1110.76,-1209.12"/>
<polygon fill="gray" stroke="gray" points="1110.49,-1212.63 1120.96,-1211 1111.76,-1205.74 1110.49,-1212.63"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/edwards_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul().</title>
<path fill="none" stroke="gray" d="M1009.72,-1175C1033.94,-1175 1061.99,-1175 1089.62,-1175"/>
<polygon fill="gray" stroke="gray" points="1089.77,-1178.5 1099.77,-1175 1089.77,-1171.5 1089.77,-1178.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn test_vartime_pippenger() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Reuse points across different tests &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut n = 512; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = Scalar::from(2128506u64).invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = Scalar::from(4443282u64).in...">
<polygon fill="white" stroke="black" points="1313.5,-1110 1132.5,-1110 1132.5,-1074 1313.5,-1074 1313.5,-1110"/>
<text text-anchor="middle" x="1223" y="-1088.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_vartime_pippenger</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1310.53,-1110.02C1330.71,-1117.84 1350.5,-1129.02 1365,-1145 1442.24,-1230.13 1451.7,-1376.94 1452.05,-1438.51"/>
<polygon fill="gray" stroke="gray" points="1448.55,-1438.64 1452.03,-1448.65 1455.55,-1438.66 1448.55,-1438.64"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Uses the addition chain from &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://briansmith.org/ecc&#45;inversion&#45;addition&#45;chains&#45;01#curve25519_scalar_inversion &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightblue" stroke="black" points="1786,-1521 1633,-1521 1633,-1485 1786,-1485 1786,-1521"/>
<text text-anchor="middle" x="1709.5" y="-1499.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" d="M1504.18,-1560.69C1541.43,-1550.17 1592.62,-1535.72 1634.45,-1523.91"/>
<polygon fill="gray" stroke="gray" points="1635.64,-1527.21 1644.31,-1521.12 1633.74,-1520.47 1635.64,-1527.21"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_consistency() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut x = Scalar::from(1u64); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut v1: Vec&lt;_&gt; = (0..16) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let tmp = x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x + x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1318.5,-1593 1127.5,-1593 1127.5,-1557 1318.5,-1557 1318.5,-1593"/>
<text text-anchor="middle" x="1223" y="-1571.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_consistency</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M1318.5,-1575C1342.85,-1575 1368.41,-1575 1390.54,-1575"/>
<polygon fill="gray" stroke="gray" points="1390.78,-1578.5 1400.78,-1575 1390.78,-1571.5 1390.78,-1578.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1318.61,-1564.52C1334.62,-1560.63 1350.67,-1555.29 1365,-1548 1390.92,-1534.81 1414.58,-1511.49 1430.59,-1493.25"/>
<polygon fill="gray" stroke="gray" points="1433.56,-1495.16 1437.38,-1485.28 1428.23,-1490.62 1433.56,-1495.16"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn invert() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let inv_X = X.invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(inv_X, XINV); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let should_be_one = inv_X * X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(should_be_one, Scalar::ONE); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1251.5,-1485 1194.5,-1485 1194.5,-1449 1251.5,-1449 1251.5,-1485"/>
<text text-anchor="middle" x="1223" y="-1463.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1251.9,-1467C1292.51,-1467 1368.05,-1467 1413.65,-1467"/>
<polygon fill="gray" stroke="gray" points="1413.73,-1470.5 1423.73,-1467 1413.73,-1463.5 1413.73,-1470.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_montgomery().montgomery_invert().from_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1597,-1485 1540,-1485 1540,-1449 1597,-1449 1597,-1485"/>
<text text-anchor="middle" x="1568.5" y="-1463.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<path fill="none" stroke="gray" d="M1481.1,-1467C1495.69,-1467 1513.83,-1467 1529.71,-1467"/>
<polygon fill="gray" stroke="gray" points="1529.76,-1470.5 1539.76,-1467 1529.76,-1463.5 1529.76,-1470.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn test_pippenger_radix() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use core::iter; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// For each valid radix it tests that 1000 random&#45;ish scalars can be restored &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// from the produced representation precisely. &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1304.5,-1539 1141.5,-1539 1141.5,-1503 1304.5,-1503 1304.5,-1539"/>
<text text-anchor="middle" x="1223" y="-1517.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pippenger_radix</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/test_pippenger_radix().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1304.5,-1507.22C1324.38,-1503.37 1345.54,-1498.88 1365,-1494 1381.27,-1489.92 1399,-1484.55 1414.14,-1479.68"/>
<polygon fill="gray" stroke="gray" points="1415.26,-1482.99 1423.68,-1476.57 1413.09,-1476.34 1415.26,-1482.99"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_with_a_zero_input_panics() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut xs = vec![Scalar::ONE; 16]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xs[3] = Scalar::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should panic in debug mode. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::batch_invert(&amp;mut...">
<polygon fill="white" stroke="black" points="1365,-1647 1081,-1647 1081,-1611 1365,-1611 1365,-1647"/>
<text text-anchor="middle" x="1223" y="-1625.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_with_a_zero_input_panics</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M1325.58,-1610.98C1338.89,-1608.2 1352.31,-1605.19 1365,-1602 1373.43,-1599.89 1382.24,-1597.43 1390.89,-1594.87"/>
<polygon fill="gray" stroke="gray" points="1391.98,-1598.2 1400.54,-1591.96 1389.96,-1591.5 1391.98,-1598.2"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" d="M1597.29,-1474.2C1606.61,-1476.61 1617.51,-1479.43 1628.77,-1482.35"/>
<polygon fill="gray" stroke="gray" points="1628.18,-1485.81 1638.74,-1484.93 1629.94,-1479.04 1628.18,-1485.81"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Scalar::ONE, Scalar::batch_invert(&amp;mut [])); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1300,-1701 1146,-1701 1146,-1665 1300,-1665 1300,-1701"/>
<text text-anchor="middle" x="1223" y="-1679.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" d="M1300.12,-1676.44C1321.91,-1672.46 1345.12,-1666.12 1365,-1656 1390.92,-1642.81 1414.58,-1619.49 1430.59,-1601.25"/>
<polygon fill="gray" stroke="gray" points="1433.56,-1603.16 1437.38,-1593.28 1428.23,-1598.62 1433.56,-1603.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().</title>
<g id="a_node20"><a xlink:title="fn GroupSendEndorsement_CallLinkParams_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;call_link_secret_params_serialized: &amp;[u8], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let call_link_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="505,-638 146,-638 146,-602 505,-602 505,-638"/>
<text text-anchor="middle" x="325.5" y="-616.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_CallLinkParams_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="710,-722 635,-722 635,-686 710,-686 710,-722"/>
<text text-anchor="middle" x="672.5" y="-700.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="gray" d="M471.39,-638.04C485.52,-640.68 499.59,-643.65 513,-647 551.7,-656.65 594.15,-672.2 625.37,-684.62"/>
<polygon fill="gray" stroke="gray" points="624.1,-687.88 634.69,-688.37 626.71,-681.39 624.1,-687.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node21"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="465,-530 186,-530 186,-494 465,-494 465,-530"/>
<text text-anchor="middle" x="325.5" y="-508.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="745.5,-299 599.5,-299 599.5,-263 745.5,-263 745.5,-299"/>
<text text-anchor="middle" x="672.5" y="-277.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M465.39,-512.84C483.29,-507.31 499.91,-498.51 513,-485 568.1,-428.15 479.3,-366.17 533,-308 547.56,-292.23 568.38,-284.09 589.47,-280.21"/>
<polygon fill="gray" stroke="gray" points="590.13,-283.64 599.48,-278.67 589.06,-276.73 590.13,-283.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().</title>
<g id="a_node22"><a xlink:title="fn GroupSendDerivedKeyPair_ForExpiration( &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;server_params: &amp;ServerSecretParams, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;GroupSendDerivedKeyPair::for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exp...">
<polygon fill="white" stroke="black" points="474,-746 177,-746 177,-710 474,-710 474,-746"/>
<text text-anchor="middle" x="325.5" y="-724.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendDerivedKeyPair_ForExpiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;pub fn for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root: impl AsRef&lt;zkcredential::endorsements::ServerRootKeyPair&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: ReservedByte::de...">
<polygon fill="white" stroke="black" points="729,-776 616,-776 616,-740 729,-740 729,-776"/>
<text text-anchor="middle" x="672.5" y="-754.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M474.06,-740.83C519.9,-744.82 568.14,-749.01 605.46,-752.26"/>
<polygon fill="gray" stroke="gray" points="605.42,-755.77 615.68,-753.15 606.02,-748.79 605.42,-755.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node23"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="461.5,-476 189.5,-476 189.5,-440 461.5,-440 461.5,-476"/>
<text text-anchor="middle" x="325.5" y="-454.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="721.5,-79 623.5,-79 623.5,-43 721.5,-43 721.5,-79"/>
<text text-anchor="middle" x="672.5" y="-57.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="gray" d="M461.93,-458.36C481.34,-452.57 499.33,-443.05 513,-428 560.01,-376.25 491.56,-170.31 533,-114 551.77,-88.5 584.48,-75.26 613.39,-68.4"/>
<polygon fill="gray" stroke="gray" points="614.4,-71.76 623.43,-66.23 612.92,-64.92 614.4,-71.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().</title>
<g id="a_node24"><a xlink:title="fn GroupSendEndorsement_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;group_params: Serialized&lt;GroupSecretParams&gt;, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let endorsement = zkgroup::deserialize::&lt;GroupSendEndorsement&gt;(endorsement)...">
<polygon fill="white" stroke="black" points="449,-692 202,-692 202,-656 449,-656 449,-692"/>
<text text-anchor="middle" x="325.5" y="-670.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="gray" d="M449.11,-684.66C510.02,-689.96 580.01,-696.04 624.95,-699.95"/>
<polygon fill="gray" stroke="gray" points="624.71,-703.44 634.97,-700.82 625.32,-696.47 624.71,-703.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node25"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="466.5,-584 184.5,-584 184.5,-548 466.5,-548 466.5,-584"/>
<text text-anchor="middle" x="325.5" y="-562.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="748,-353 597,-353 597,-317 748,-317 748,-353"/>
<text text-anchor="middle" x="672.5" y="-331.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="gray" d="M466.97,-557.67C483.13,-553.27 498.86,-547.23 513,-539 585.41,-496.86 636.54,-407.61 658.89,-362.43"/>
<polygon fill="gray" stroke="gray" points="662.13,-363.76 663.34,-353.23 655.83,-360.71 662.13,-363.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node26"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="984,-1110 895,-1110 895,-1074 984,-1074 984,-1110"/>
<text text-anchor="middle" x="939.5" y="-1088.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="1260,-1027 1186,-1027 1186,-991 1260,-991 1260,-1027"/>
<text text-anchor="middle" x="1223" y="-1005.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="gray" d="M984.22,-1079.65C1003.08,-1074.28 1025.4,-1067.89 1045.5,-1062 1089.98,-1048.97 1140.65,-1033.71 1176.25,-1022.92"/>
<polygon fill="gray" stroke="gray" points="1177.32,-1026.25 1185.87,-1020 1175.29,-1019.56 1177.32,-1026.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="804,-1110 541,-1110 541,-1074 804,-1074 804,-1110"/>
<text text-anchor="middle" x="672.5" y="-1088.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="gray" d="M804.06,-1092C832.62,-1092 861.31,-1092 884.8,-1092"/>
<polygon fill="gray" stroke="gray" points="884.87,-1095.5 894.87,-1092 884.87,-1088.5 884.87,-1095.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="705,-1027 640,-1027 640,-991 705,-991 705,-1027"/>
<text text-anchor="middle" x="672.5" y="-1005.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="gray" d="M705.18,-1020.43C736.47,-1031.57 785.79,-1048.73 829,-1062 847.2,-1067.59 867.26,-1073.23 885.18,-1078.09"/>
<polygon fill="gray" stroke="gray" points="884.33,-1081.49 894.89,-1080.71 886.15,-1074.73 884.33,-1081.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="1011,-1027 868,-1027 868,-991 1011,-991 1011,-1027"/>
<text text-anchor="middle" x="939.5" y="-1005.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="gray" d="M1011.17,-1009C1062.59,-1009 1130.75,-1009 1175.46,-1009"/>
<polygon fill="gray" stroke="gray" points="1175.74,-1012.5 1185.74,-1009 1175.74,-1005.5 1175.74,-1012.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1260.17,-1012.9C1292.44,-1018.33 1338.55,-1031.28 1365,-1062 1414.39,-1119.36 1441.05,-1356.32 1448.96,-1438.66"/>
<polygon fill="gray" stroke="gray" points="1445.49,-1439.15 1449.91,-1448.78 1452.46,-1438.5 1445.49,-1439.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<g id="a_node31"><a xlink:title="fn key_derivation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;let mut info_sho = poksho::ShoHmacSha256::new(b&#39; ExampleEndorsements&#39; ); &#160;&#160;&#160;&#160;info_sho....">
<polygon fill="white" stroke="black" points="998,-890 881,-890 881,-854 998,-854 998,-890"/>
<text text-anchor="middle" x="939.5" y="-868.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="1268.5,-712 1177.5,-712 1177.5,-676 1268.5,-676 1268.5,-712"/>
<text text-anchor="middle" x="1223" y="-690.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M998.24,-866.25C1015.34,-861.94 1032.86,-854.56 1045.5,-842 1076.38,-811.32 1043.21,-779.73 1073,-748 1097.56,-721.84 1135.75,-708.32 1167.32,-701.35"/>
<polygon fill="gray" stroke="gray" points="1168.22,-704.74 1177.31,-699.31 1166.81,-697.88 1168.22,-704.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node32"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="1011.5,-944 867.5,-944 867.5,-908 1011.5,-908 1011.5,-944"/>
<text text-anchor="middle" x="939.5" y="-922.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1011.59,-911.86C1105.6,-897.65 1270.37,-889.1 1365,-979 1432.13,-1042.78 1447.52,-1344.25 1450.72,-1438.66"/>
<polygon fill="gray" stroke="gray" points="1447.23,-1438.99 1451.05,-1448.87 1454.23,-1438.77 1447.23,-1438.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;pub fn from_blinding_scalar(scalar: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_inv: scalar.invert(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1303,-793 1143,-793 1143,-757 1303,-757 1303,-793"/>
<text text-anchor="middle" x="1223" y="-771.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_blinding_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M1011.75,-911.4C1023.28,-907.99 1034.9,-903.89 1045.5,-899 1102.4,-872.76 1160.32,-827.85 1193.62,-799.88"/>
<polygon fill="gray" stroke="gray" points="1196.18,-802.3 1201.54,-793.16 1191.65,-796.96 1196.18,-802.3"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M1011.75,-919.31C1024.43,-915.12 1036.46,-908.71 1045.5,-899 1091.98,-849.07 1028.97,-800.1 1073,-748 1096.4,-720.31 1135.17,-706.82 1167.3,-700.25"/>
<polygon fill="gray" stroke="gray" points="1168.29,-703.62 1177.47,-698.35 1167,-696.74 1168.29,-703.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node33"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="710,-890 635,-890 635,-854 710,-854 710,-890"/>
<text text-anchor="middle" x="672.5" y="-868.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<path fill="none" stroke="gray" d="M710.07,-872C751.38,-872 819.51,-872 870.63,-872"/>
<polygon fill="gray" stroke="gray" points="870.94,-875.5 880.94,-872 870.94,-868.5 870.94,-875.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="gray" d="M710.07,-879.45C747.93,-887.17 808.3,-899.47 857.48,-909.49"/>
<polygon fill="gray" stroke="gray" points="856.97,-912.96 867.47,-911.53 858.37,-906.1 856.97,-912.96"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<g id="a_node34"><a xlink:title="fn attribute_key_inversion(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let key_pair = KeyPair::&lt;ExampleDomain&gt;::derive_from(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; KeyPair...">
<polygon fill="white" stroke="black" points="1028.5,-478 850.5,-478 850.5,-442 1028.5,-442 1028.5,-478"/>
<text text-anchor="middle" x="939.5" y="-456.3" font-family="Helvetica,sans-Serif" font-size="14.00">attribute_key_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<path fill="none" stroke="gray" d="M710.08,-865.29C740.49,-857.66 782.19,-841.98 804,-811 872.85,-713.17 770.85,-647.54 829,-543 843.29,-517.31 869.2,-497.11 892.23,-483.08"/>
<polygon fill="gray" stroke="gray" points="894.03,-486.08 900.89,-478.01 890.49,-480.04 894.03,-486.08"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;pub fn inverse_of&lt;D2: Domain&gt;(other: &amp;KeyPair&lt;D2&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_ne!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D2::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; You must provide a new domain for an inverse key&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="1267,-478 1179,-478 1179,-442 1267,-442 1267,-478"/>
<text text-anchor="middle" x="1223" y="-456.3" font-family="Helvetica,sans-Serif" font-size="14.00">inverse_of</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="gray" d="M1028.8,-460C1074.68,-460 1129.24,-460 1168.66,-460"/>
<polygon fill="gray" stroke="gray" points="1168.85,-463.5 1178.85,-460 1168.85,-456.5 1168.85,-463.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1267.07,-473.29C1299.73,-485.77 1342.68,-507.88 1365,-543 1414.21,-620.44 1444.33,-1291.7 1450.37,-1438.65"/>
<polygon fill="gray" stroke="gray" points="1446.88,-1438.83 1450.78,-1448.68 1453.87,-1438.55 1446.88,-1438.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="1011,-591 868,-591 868,-555 1011,-555 1011,-591"/>
<text text-anchor="middle" x="939.5" y="-569.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M1011.27,-588.74C1022.85,-592.01 1034.62,-595.77 1045.5,-600 1095.56,-619.45 1149.56,-649.71 1184.46,-670.62"/>
<polygon fill="gray" stroke="gray" points="1182.98,-673.81 1193.35,-675.99 1186.6,-667.82 1182.98,-673.81"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1037.5,-699 841.5,-699 841.5,-663 1037.5,-663 1037.5,-699"/>
<text text-anchor="middle" x="939.5" y="-677.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M1017.57,-699.02C1027.06,-701.76 1036.56,-704.77 1045.5,-708 1058.21,-712.59 1060.52,-715.8 1073,-721 1100.82,-732.59 1132.12,-744.15 1158.82,-753.58"/>
<polygon fill="gray" stroke="gray" points="1157.84,-756.95 1168.43,-756.95 1160.16,-750.34 1157.84,-756.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M1037.77,-685.49C1081.06,-687.49 1130.43,-689.77 1167.16,-691.47"/>
<polygon fill="gray" stroke="gray" points="1167.02,-694.96 1177.17,-691.93 1167.34,-687.97 1167.02,-694.96"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1247.47,-793.15C1279.71,-819.51 1336.9,-871.66 1365,-930 1409.3,-1021.95 1440.46,-1341.51 1449.09,-1438.72"/>
<polygon fill="gray" stroke="gray" points="1445.62,-1439.29 1449.98,-1448.95 1452.6,-1438.68 1445.62,-1439.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="990,-645 889,-645 889,-609 990,-609 990,-645"/>
<text text-anchor="middle" x="939.5" y="-623.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M990.1,-630.3C1009.28,-633.82 1030.24,-640.71 1045.5,-654 1069.77,-675.14 1049.77,-698.72 1073,-721 1089.69,-737.01 1111.49,-748.33 1133.24,-756.31"/>
<polygon fill="gray" stroke="gray" points="1132.28,-759.68 1142.87,-759.64 1134.56,-753.06 1132.28,-759.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M990.18,-638.82C1039.9,-650.66 1116.19,-668.82 1167.53,-681.04"/>
<polygon fill="gray" stroke="gray" points="1166.92,-684.49 1177.45,-683.4 1168.54,-677.68 1166.92,-684.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="983.5,-753 895.5,-753 895.5,-717 983.5,-717 983.5,-753"/>
<text text-anchor="middle" x="939.5" y="-731.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M983.56,-741.12C1023.11,-746.74 1082.97,-755.25 1132.82,-762.33"/>
<polygon fill="gray" stroke="gray" points="1132.58,-765.83 1142.97,-763.77 1133.56,-758.9 1132.58,-765.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M983.56,-728.73C1032.76,-721.56 1113.37,-709.82 1167.05,-702"/>
<polygon fill="gray" stroke="gray" points="1167.69,-705.45 1177.08,-700.54 1166.68,-698.52 1167.69,-705.45"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;pub fn for_first_point_of_attribute&lt;D&gt;(key_pair: &amp;crate::attributes::KeyPair&lt;D&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_blinding_scalar(key_pair.a1) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1039.5,-807 839.5,-807 839.5,-771 1039.5,-771 1039.5,-807"/>
<text text-anchor="middle" x="939.5" y="-785.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_first_point_of_attribute</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="gray" d="M1039.75,-784.06C1069.91,-782.56 1102.86,-780.93 1132.35,-779.46"/>
<polygon fill="gray" stroke="gray" points="1132.81,-782.94 1142.62,-778.95 1132.46,-775.95 1132.81,-782.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1268.69,-699C1300.65,-705.06 1341.95,-718.44 1365,-748 1450.95,-858.2 1452.85,-1319.21 1451.87,-1438.65"/>
<polygon fill="gray" stroke="gray" points="1448.36,-1438.78 1451.77,-1448.81 1455.36,-1438.85 1448.36,-1438.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node43"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="96,-339 21,-339 21,-303 96,-303 96,-339"/>
<text text-anchor="middle" x="58.5" y="-317.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node44"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="433.5,-285 217.5,-285 217.5,-249 433.5,-249 433.5,-285"/>
<text text-anchor="middle" x="325.5" y="-263.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="gray" d="M96.21,-306.78C109.25,-302.16 124.13,-297.36 138,-294 160.16,-288.64 184.07,-284.19 207.15,-280.56"/>
<polygon fill="gray" stroke="gray" points="207.97,-283.98 217.33,-279.01 206.91,-277.06 207.97,-283.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node45"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="439.5,-339 211.5,-339 211.5,-303 439.5,-303 439.5,-339"/>
<text text-anchor="middle" x="325.5" y="-317.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="gray" d="M96.07,-321C123.51,-321 162.77,-321 201.02,-321"/>
<polygon fill="gray" stroke="gray" points="201.25,-324.5 211.25,-321 201.25,-317.5 201.25,-324.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node46"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="470.5,-393 180.5,-393 180.5,-357 470.5,-357 470.5,-393"/>
<text text-anchor="middle" x="325.5" y="-371.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="gray" d="M96.21,-335.22C109.25,-339.84 124.13,-344.64 138,-348 148.7,-350.59 159.81,-352.97 171.03,-355.14"/>
<polygon fill="gray" stroke="gray" points="170.44,-358.59 180.92,-357 171.73,-351.71 170.44,-358.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M433.77,-271.35C483.99,-273.39 542.85,-275.78 589.44,-277.67"/>
<polygon fill="gray" stroke="gray" points="589.36,-281.17 599.49,-278.08 589.64,-274.18 589.36,-281.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="gray" d="M439.94,-325.6C487.77,-327.54 542.49,-329.76 586.72,-331.56"/>
<polygon fill="gray" stroke="gray" points="586.72,-335.06 596.86,-331.97 587.01,-328.07 586.72,-335.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M439.94,-307.85C488.79,-302.18 544.81,-295.69 589.52,-290.51"/>
<polygon fill="gray" stroke="gray" points="589.93,-293.98 599.46,-289.35 589.12,-287.03 589.93,-293.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M464.74,-393.01C483.31,-401.04 500.3,-412.29 513,-428 555.43,-480.47 488.4,-680.36 533,-731 550.95,-751.38 579.32,-759.17 605.72,-761.46"/>
<polygon fill="gray" stroke="gray" points="605.52,-764.95 615.72,-762.08 605.95,-757.96 605.52,-764.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="974.5,-216 904.5,-216 904.5,-180 974.5,-180 974.5,-216"/>
<text text-anchor="middle" x="939.5" y="-194.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M721.8,-78.33C746.8,-87.87 777.54,-100.49 804,-114 839.25,-131.99 877.32,-156.27 903.93,-174.09"/>
<polygon fill="gray" stroke="gray" points="902.25,-177.18 912.49,-179.87 906.16,-171.38 902.25,-177.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="1258,-303 1188,-303 1188,-267 1258,-267 1258,-303"/>
<text text-anchor="middle" x="1223" y="-281.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M748.13,-332.36C823.36,-329.24 942.72,-323.02 1045.5,-312 1090.81,-307.14 1142.27,-298.96 1177.89,-292.88"/>
<polygon fill="gray" stroke="gray" points="1178.69,-296.29 1187.95,-291.14 1177.5,-289.39 1178.69,-296.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M745.81,-266.4C764.89,-262 785.35,-256.78 804,-251 835.06,-241.37 869.14,-227.91 895.22,-216.96"/>
<polygon fill="gray" stroke="gray" points="896.61,-220.18 904.45,-213.05 893.88,-213.73 896.61,-220.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<path fill="none" stroke="gray" d="M710.25,-705.01C737.83,-707.27 775.56,-713.64 804,-731 819.11,-740.22 814.07,-752.49 829,-762 831.48,-763.58 834.04,-765.06 836.67,-766.46"/>
<polygon fill="gray" stroke="gray" points="835.32,-769.69 845.84,-770.89 838.36,-763.39 835.32,-769.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="gray" d="M729.16,-760.4C755.46,-758.45 785.14,-751.22 804,-731 860.59,-670.32 766.53,-600.6 829,-546 865.23,-514.34 1000.29,-529.55 1045.5,-546 1112.3,-570.3 1171.43,-632.21 1201.33,-667.78"/>
<polygon fill="gray" stroke="gray" points="1198.88,-670.31 1207.95,-675.8 1204.28,-665.86 1198.88,-670.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="1042,-303 837,-303 837,-267 1042,-267 1042,-303"/>
<text text-anchor="middle" x="939.5" y="-281.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M1042.13,-285C1088.57,-285 1141.18,-285 1177.45,-285"/>
<polygon fill="gray" stroke="gray" points="1177.69,-288.5 1187.69,-285 1177.69,-281.5 1177.69,-288.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M1250.63,-303.2C1283.96,-327.66 1339.75,-374.56 1365,-430 1450.19,-617.08 1452.28,-1291.02 1451.69,-1438.4"/>
<polygon fill="gray" stroke="gray" points="1448.19,-1438.81 1451.64,-1448.82 1455.19,-1438.84 1448.19,-1438.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" d="M974.56,-190.11C1055.78,-173.54 1261.76,-145.13 1365,-255 1448.61,-343.99 1451.74,-1263.42 1451.57,-1438.35"/>
<polygon fill="gray" stroke="gray" points="1448.07,-1438.55 1451.56,-1448.56 1455.07,-1438.56 1448.07,-1438.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="748.5,-162 596.5,-162 596.5,-126 748.5,-126 748.5,-162"/>
<text text-anchor="middle" x="672.5" y="-140.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M748.73,-159.33C795.75,-168.91 854.67,-180.92 894.29,-188.99"/>
<polygon fill="gray" stroke="gray" points="893.67,-192.44 904.17,-191 895.07,-185.58 893.67,-192.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="748.5,-216 596.5,-216 596.5,-180 748.5,-180 748.5,-216"/>
<text text-anchor="middle" x="672.5" y="-194.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="gray" d="M748.73,-198C795.65,-198 854.42,-198 894.03,-198"/>
<polygon fill="gray" stroke="gray" points="894.17,-201.5 904.17,-198 894.17,-194.5 894.17,-201.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node57"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="1005,-395 874,-395 874,-359 1005,-359 1005,-395"/>
<text text-anchor="middle" x="939.5" y="-373.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="gray" d="M1001.58,-395.01C1051.55,-409.74 1121.49,-430.37 1169.1,-444.4"/>
<polygon fill="gray" stroke="gray" points="1168.32,-447.82 1178.9,-447.29 1170.3,-441.11 1168.32,-447.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node58"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="403.5,-52 247.5,-52 247.5,-16 403.5,-16 403.5,-52"/>
<text text-anchor="middle" x="325.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="gray" d="M403.92,-40.06C467.36,-45.02 555.75,-51.94 613.29,-56.44"/>
<polygon fill="gray" stroke="gray" points="613.07,-59.94 623.31,-57.23 613.62,-52.96 613.07,-59.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node59"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="467,-106 184,-106 184,-70 467,-70 467,-106"/>
<text text-anchor="middle" x="325.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="gray" d="M467.32,-76.98C518.4,-72.98 573.31,-68.68 613.31,-65.55"/>
<polygon fill="gray" stroke="gray" points="613.71,-69.03 623.41,-64.76 613.17,-62.05 613.71,-69.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node60"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="454,-883 197,-883 197,-847 454,-847 454,-883"/>
<text text-anchor="middle" x="325.5" y="-861.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M454.15,-852.14C474.09,-848.53 494.28,-843.91 513,-838 556.61,-824.24 602.9,-799.56 634.13,-781.24"/>
<polygon fill="gray" stroke="gray" points="636.11,-784.14 642.92,-776.02 632.53,-778.12 636.11,-784.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node61"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="396.5,-829 254.5,-829 254.5,-793 396.5,-793 396.5,-829"/>
<text text-anchor="middle" x="325.5" y="-807.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="gray" d="M396.52,-815.64C434.69,-814.55 480.61,-806.92 513,-781 531.69,-766.05 514.56,-746.26 533,-731 558.41,-709.97 595.39,-703.59 624.76,-702.27"/>
<polygon fill="gray" stroke="gray" points="624.89,-705.77 634.79,-702 624.7,-698.77 624.89,-705.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M396.73,-800.21C457.91,-790.81 545.96,-777.29 605.77,-768.1"/>
<polygon fill="gray" stroke="gray" points="606.5,-771.53 615.86,-766.55 605.44,-764.61 606.5,-771.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node62"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="427,-937 224,-937 224,-901 427,-901 427,-937"/>
<text text-anchor="middle" x="325.5" y="-915.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="gray" d="M427,-923.1C457.28,-919.72 488.84,-911.03 513,-892 531.8,-877.19 517.53,-860.26 533,-842 555.72,-815.19 589.27,-794.54 617.65,-780.42"/>
<polygon fill="gray" stroke="gray" points="619.18,-783.57 626.67,-776.07 616.14,-777.26 619.18,-783.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node63"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="445,-202 206,-202 206,-166 445,-166 445,-202"/>
<text text-anchor="middle" x="325.5" y="-180.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="gray" d="M445.2,-198.43C470.21,-206.39 494.58,-218.53 513,-237 536.15,-260.21 508.89,-285.79 533,-308 547.72,-321.56 567.15,-329.21 586.79,-333.35"/>
<polygon fill="gray" stroke="gray" points="586.27,-336.82 596.73,-335.16 587.52,-329.93 586.27,-336.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="gray" d="M412.7,-202.09C445.03,-210.51 481.54,-222.04 513,-237 522.8,-241.66 523.06,-246.65 533,-251 550.66,-258.72 570.48,-264.52 589.49,-268.86"/>
<polygon fill="gray" stroke="gray" points="588.83,-272.3 599.34,-271 590.31,-265.46 588.83,-272.3"/>
</g>
</g>
</svg>
