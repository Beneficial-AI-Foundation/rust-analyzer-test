<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="1707pt" height="1542pt"
 viewBox="0.00 0.00 1707.00 1542.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1538)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1538 1703,-1538 1703,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="39,-832 39,-907 419,-907 419,-832 39,-832"/>
<text text-anchor="middle" x="229" y="-891.8" font-family="Helvetica,sans-Serif" font-size="14.00">dalek_benchmarks.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1155,-1289 1155,-1526 1691,-1526 1691,-1289 1155,-1289"/>
<text text-anchor="middle" x="1423" y="-1510.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="536.5,-607 536.5,-736 787.5,-736 787.5,-607 536.5,-607"/>
<text text-anchor="middle" x="662" y="-720.8" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="439,-774 439,-1281 1504.5,-1281 1504.5,-774 439,-774"/>
<text text-anchor="middle" x="971.75" y="-1265.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="567.5,-524 567.5,-599 756.5,-599 756.5,-524 567.5,-524"/>
<text text-anchor="middle" x="662" y="-583.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="596.5,-441 596.5,-516 727.5,-516 727.5,-441 596.5,-441"/>
<text text-anchor="middle" x="662" y="-500.8" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-311 8,-406 719,-406 719,-311 8,-311"/>
<text text-anchor="middle" x="363.5" y="-390.8" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="551,-174 551,-303 773,-303 773,-174 551,-174"/>
<text text-anchor="middle" x="662" y="-287.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="610.5,-91 610.5,-166 713.5,-166 713.5,-91 610.5,-91"/>
<text text-anchor="middle" x="662" y="-150.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="610.5,-8 610.5,-83 713.5,-83 713.5,-8 610.5,-8"/>
<text text-anchor="middle" x="662" y="-67.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;fn batch_scalar_inversion&lt;M: Measurement&gt;(c: &amp;mut BenchmarkGroup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for batch_size in &amp;BATCH_SIZES { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.bench_with_input( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BenchmarkId::new(&#39; Batch scalar inve...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="411,-876 237,-876 237,-840 411,-840 411,-876"/>
<text text-anchor="middle" x="324" y="-854.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_scalar_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;pub fn random&lt;R: CryptoRngCore + ?Sized&gt;(rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scal...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="697.5,-980 626.5,-980 626.5,-944 697.5,-944 697.5,-980"/>
<text text-anchor="middle" x="662" y="-958.3" font-family="Helvetica,sans-Serif" font-size="14.00">random</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M345.16,-876.04C366.73,-894.22 402.76,-921.46 439,-935 497.54,-956.87 570.23,-961.91 616.13,-962.64"/>
<polygon fill="gray" stroke="gray" points="616.32,-966.14 626.35,-962.74 616.39,-959.14 616.32,-966.14"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;pub fn batch_invert(inputs: &amp;mut [Scalar]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This code is essentially identical to the FieldElement &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// implementation, and is documented there. &#160;Unfortunately, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1071.5,-1142 968.5,-1142 968.5,-1106 1071.5,-1106 1071.5,-1142"/>
<text text-anchor="middle" x="1020" y="-1120.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M341.83,-839.77C362.4,-818.97 399.4,-786.14 439,-773 531.38,-742.35 796.29,-718.59 877,-773 905.62,-792.3 982.89,-1016.27 1009.69,-1096.02"/>
<polygon fill="gray" stroke="gray" points="1006.49,-1097.49 1012.99,-1105.86 1013.13,-1095.26 1006.49,-1097.49"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn scalar_benches() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut c = Criterion::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut g = c.benchmark_group(&#39; scalar benches&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_arith(&amp;mut g); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;batch_scalar_inversion(...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="170,-876 47,-876 47,-840 170,-840 170,-876"/>
<text text-anchor="middle" x="108.5" y="-854.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/scalar_benches().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar_benches/batch_scalar_inversion().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M170.11,-858C187.75,-858 207.46,-858 226.72,-858"/>
<polygon fill="gray" stroke="gray" points="226.74,-861.5 236.74,-858 226.74,-854.5 226.74,-861.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_mul(a: &amp;Scalar52, b: &amp;Scalar52) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_reduce(&amp;Scalar52::mul_internal(a, b)) &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="1683,-1387 1544,-1387 1544,-1351 1683,-1351 1683,-1387"/>
<text text-anchor="middle" x="1613.5" y="-1365.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_wide(bytes: &amp;[u8; 64]) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut words = [0u64; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;words[i] |= (bytes[(i * 8) + j] as u64...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1486.5,-1387 1353.5,-1387 1353.5,-1351 1486.5,-1351 1486.5,-1387"/>
<text text-anchor="middle" x="1420" y="-1365.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1486.64,-1369C1501.73,-1369 1517.95,-1369 1533.54,-1369"/>
<polygon fill="gray" stroke="gray" points="1533.69,-1372.5 1543.69,-1369 1533.69,-1365.5 1533.69,-1372.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;pub fn as_montgomery(&amp;self) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_mul(self, &amp;constants::RR) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1484,-1333 1356,-1333 1356,-1297 1484,-1297 1484,-1333"/>
<text text-anchor="middle" x="1420" y="-1311.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1484.23,-1332.83C1501.61,-1337.73 1520.6,-1343.09 1538.52,-1348.14"/>
<polygon fill="gray" stroke="gray" points="1537.77,-1351.57 1548.35,-1350.91 1539.67,-1344.83 1537.77,-1351.57"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn from_bytes_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bignum = [255u8; 64]; // 2^512 &#45; 1 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let reduced = Scalar52::from_bytes_wide(&amp;bignum); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(reduced[i] == C[i]); &#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1296,-1387 1163,-1387 1163,-1351 1296,-1351 1296,-1387"/>
<text text-anchor="middle" x="1229.5" y="-1365.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1296.16,-1369C1311.33,-1369 1327.59,-1369 1343.15,-1369"/>
<polygon fill="gray" stroke="gray" points="1343.25,-1372.5 1353.25,-1369 1343.25,-1365.5 1343.25,-1372.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_max() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::montgomery_mul(&amp;X, &amp;X); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XX_MONT[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="1508,-1495 1332,-1495 1332,-1459 1508,-1459 1508,-1495"/>
<text text-anchor="middle" x="1420" y="-1473.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_max</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul_max().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1488.02,-1458.91C1494.91,-1456.25 1501.69,-1453.29 1508,-1450 1536.94,-1434.93 1565.95,-1411.63 1586.04,-1393.88"/>
<polygon fill="gray" stroke="gray" points="1588.45,-1396.42 1593.55,-1387.13 1583.77,-1391.21 1588.45,-1396.42"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let res = Scalar52::montgomery_mul(&amp;X, &amp;Y); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(res[i] == XY_MONT[i]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="1489.5,-1441 1350.5,-1441 1350.5,-1405 1489.5,-1405 1489.5,-1441"/>
<text text-anchor="middle" x="1420" y="-1419.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/test/montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1485.03,-1404.94C1502.28,-1400.08 1521.08,-1394.78 1538.8,-1389.78"/>
<polygon fill="gray" stroke="gray" points="1539.85,-1393.12 1548.53,-1387.04 1537.95,-1386.38 1539.85,-1393.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be_twist().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_bits_be_twist() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Make a random point P on the curve or its twist &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_montgomer...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="779.5,-705 544.5,-705 544.5,-669 779.5,-669 779.5,-705"/>
<text text-anchor="middle" x="662" y="-683.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_bits_be_twist</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn montgomery_mul_bits_be() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = rand_core::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..100 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Make a random prime&#45;order point P &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let p_edwards = rand_prime_order_po...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="759.5,-651 564.5,-651 564.5,-615 759.5,-615 759.5,-651"/>
<text text-anchor="middle" x="662" y="-629.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul_bits_be</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order_wide(input: &amp;[u8; 64]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScalar::from_bytes_wide(input).pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1127,-818 913,-818 913,-782 1127,-782 1127,-818"/>
<text text-anchor="middle" x="1020" y="-796.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/test/montgomery_mul_bits_be().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M759.73,-632.03C797.86,-634.95 841.04,-642.54 877,-660 930.75,-686.09 976.56,-740.63 1000.71,-773.4"/>
<polygon fill="gray" stroke="gray" points="997.97,-775.57 1006.66,-781.63 1003.64,-771.47 997.97,-775.57"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_consistency() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut x = Scalar::from(1u64); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut v1: Vec&lt;_&gt; = (0..16) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let tmp = x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x + x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="757.5,-1142 566.5,-1142 566.5,-1106 757.5,-1106 757.5,-1142"/>
<text text-anchor="middle" x="662" y="-1120.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_consistency</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1048.5,-1205 991.5,-1205 991.5,-1169 1048.5,-1169 1048.5,-1205"/>
<text text-anchor="middle" x="1020" y="-1183.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M757.67,-1133.41C795.01,-1137.78 838.18,-1143.66 877,-1151 912.83,-1157.78 953.07,-1168.26 981.54,-1176.16"/>
<polygon fill="gray" stroke="gray" points="980.9,-1179.62 991.47,-1178.95 982.79,-1172.88 980.9,-1179.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_consistency().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M757.93,-1124C821.4,-1124 903.04,-1124 957.98,-1124"/>
<polygon fill="gray" stroke="gray" points="958.26,-1127.5 968.26,-1124 958.26,-1120.5 958.26,-1127.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;fn from_bytes_mod_order_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bignum = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// set bignum = x + 2^256x &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[i] = X[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[32 + i] = X[i]; &#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="769,-872 555,-872 555,-836 769,-836 769,-872"/>
<text text-anchor="middle" x="662" y="-850.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M769.04,-841.95C803.53,-837.67 841.95,-832.54 877,-827 890.46,-824.87 904.61,-822.43 918.53,-819.91"/>
<polygon fill="gray" stroke="gray" points="919.42,-823.3 928.62,-818.06 918.16,-816.42 919.42,-823.3"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;pub fn from_hash&lt;D&gt;(hash: D) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut output = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output.copy_from_slice(hash.finalize().as_slice()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="706.5,-818 617.5,-818 617.5,-782 706.5,-782 706.5,-818"/>
<text text-anchor="middle" x="662" y="-796.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M706.65,-800C755.13,-800 835.39,-800 902.41,-800"/>
<polygon fill="gray" stroke="gray" points="902.63,-803.5 912.63,-800 902.63,-796.5 902.63,-803.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]random().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M697.82,-964.09C741.76,-965.32 818.63,-962.68 877,-935 929.54,-910.09 975.22,-858.26 999.78,-826.56"/>
<polygon fill="gray" stroke="gray" points="1002.88,-828.28 1006.14,-818.2 997.3,-824.04 1002.88,-828.28"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn montgomery_reduce_matches_from_bytes_mod_order_wide() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bignum = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// set bignum = x + 2^256x &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bignum[i] = X[i]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="877,-1196 447,-1196 447,-1160 877,-1160 877,-1196"/>
<text text-anchor="middle" x="662" y="-1174.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_reduce_matches_from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M828.21,-1196.01C844.75,-1198.66 861.25,-1201.65 877,-1205 900.71,-1210.05 1209.71,-1304.69 1350.25,-1347.86"/>
<polygon fill="gray" stroke="gray" points="1349.48,-1351.29 1360.07,-1350.88 1351.54,-1344.59 1349.48,-1351.29"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/montgomery_reduce_matches_from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M864.01,-1159.81C868.51,-1157.13 872.85,-1154.2 877,-1151 904.36,-1129.94 982.43,-907.1 1009.57,-827.81"/>
<polygon fill="gray" stroke="gray" points="1012.99,-828.62 1012.91,-818.03 1006.36,-826.36 1012.99,-828.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Uses the addition chain from &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://briansmith.org/ecc&#45;inversion&#45;addition&#45;chains&#45;01#curve25519_scalar_inversion &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1496.5,-1214 1343.5,-1214 1343.5,-1178 1496.5,-1178 1496.5,-1214"/>
<text text-anchor="middle" x="1420" y="-1192.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1441.13,-1214.19C1475.47,-1245.21 1545.43,-1308.41 1584.5,-1343.71"/>
<polygon fill="gray" stroke="gray" points="1582.58,-1346.69 1592.35,-1350.8 1587.28,-1341.5 1582.58,-1346.69"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn square_multiply(y: &amp;mut UnpackedScalar, squarings: usize, x: &amp;UnpackedScalar) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..squarings { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*y = y.montgomery_square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*y ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="725.5,-1250 598.5,-1250 598.5,-1214 725.5,-1214 725.5,-1250"/>
<text text-anchor="middle" x="662" y="-1228.3" font-family="Helvetica,sans-Serif" font-size="14.00">square_multiply</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/square_multiply().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M694.67,-1250.11C788.28,-1302.45 1073.29,-1453.42 1332,-1504 1408.77,-1519.01 1437.77,-1538.45 1508,-1504 1553.34,-1481.76 1584.61,-1429.33 1600.46,-1396.74"/>
<polygon fill="gray" stroke="gray" points="1603.81,-1397.86 1604.89,-1387.32 1597.47,-1394.89 1603.81,-1397.86"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_montgomery().montgomery_invert().from_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1258,-1214 1201,-1214 1201,-1178 1258,-1178 1258,-1214"/>
<text text-anchor="middle" x="1229.5" y="-1192.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1258.32,-1206.09C1270.8,-1211.55 1285.12,-1219.2 1296,-1229 1317.99,-1248.8 1308.73,-1266.72 1332,-1285 1336.4,-1288.45 1341.22,-1291.52 1346.27,-1294.25"/>
<polygon fill="gray" stroke="gray" points="1345.03,-1297.54 1355.55,-1298.8 1348.11,-1291.26 1345.03,-1297.54"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1258.31,-1196C1278.2,-1196 1306.12,-1196 1333.11,-1196"/>
<polygon fill="gray" stroke="gray" points="1333.39,-1199.5 1343.39,-1196 1333.39,-1192.5 1333.39,-1199.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_empty() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Scalar::ONE, Scalar::batch_invert(&amp;mut [])); &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="739,-1034 585,-1034 585,-998 739,-998 739,-1034"/>
<text text-anchor="middle" x="662" y="-1012.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_empty</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_empty().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M739.13,-1018.36C780.74,-1021.43 832.68,-1028.22 877,-1043 916.84,-1056.29 958.07,-1081.28 985.77,-1100.01"/>
<polygon fill="gray" stroke="gray" points="984.05,-1103.07 994.27,-1105.84 988.01,-1097.3 984.05,-1103.07"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1048.55,-1188.2C1085.06,-1189.78 1149.63,-1192.58 1190.68,-1194.36"/>
<polygon fill="gray" stroke="gray" points="1190.69,-1197.86 1200.83,-1194.8 1190.99,-1190.87 1190.69,-1197.86"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1028.38,-818.16C1046.88,-864.19 1095.98,-989.42 1127,-1097 1142.89,-1152.12 1121.63,-1176.34 1155,-1223 1197.7,-1282.7 1237.34,-1264.88 1296,-1309 1313.35,-1322.05 1313.18,-1331.19 1332,-1342 1335.7,-1344.13 1339.59,-1346.11 1343.59,-1347.94"/>
<polygon fill="gray" stroke="gray" points="1342.49,-1351.28 1353.06,-1351.98 1345.24,-1344.84 1342.49,-1351.28"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;fn fuzzer_testcase_reduction() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// LE bytes of 24519928653854221733733552434404946937899825954937634815 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_bytes = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;255, 255, 255, 255, 255, 255, 255, 255, 255, 25...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="760.5,-926 563.5,-926 563.5,-890 760.5,-890 760.5,-926"/>
<text text-anchor="middle" x="662" y="-904.3" font-family="Helvetica,sans-Serif" font-size="14.00">fuzzer_testcase_reduction</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/fuzzer_testcase_reduction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M760.67,-903.78C797.81,-900.09 840.06,-893.32 877,-881 916.84,-867.71 958.07,-842.72 985.77,-823.99"/>
<polygon fill="gray" stroke="gray" points="988.01,-826.7 994.27,-818.16 984.05,-820.93 988.01,-826.7"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;fn batch_invert_with_a_zero_input_panics() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut xs = vec![Scalar::ONE; 16]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xs[3] = Scalar::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should panic in debug mode. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::batch_invert(&amp;mut...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="804,-1088 520,-1088 520,-1052 804,-1052 804,-1088"/>
<text text-anchor="middle" x="662" y="-1066.3" font-family="Helvetica,sans-Serif" font-size="14.00">batch_invert_with_a_zero_input_panics</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M804.19,-1086.55C828.51,-1089.76 853.51,-1093.29 877,-1097 903.69,-1101.22 933.04,-1106.66 958.1,-1111.56"/>
<polygon fill="gray" stroke="gray" points="957.71,-1115.05 968.2,-1113.54 959.06,-1108.18 957.71,-1115.05"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1071.67,-1113.58C1166.73,-1097.03 1374.23,-1075.44 1508,-1169 1567.44,-1210.57 1595.56,-1296.63 1606.58,-1341.08"/>
<polygon fill="gray" stroke="gray" points="1603.2,-1342 1608.9,-1350.92 1610.01,-1340.39 1603.2,-1342"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1071.59,-1132.21C1090.8,-1137.47 1111.71,-1146.04 1127,-1160 1149.63,-1180.66 1132.47,-1202.23 1155,-1223 1216.29,-1279.5 1253.27,-1257.64 1332,-1285 1340.03,-1287.79 1348.47,-1290.72 1356.82,-1293.6"/>
<polygon fill="gray" stroke="gray" points="1355.94,-1297 1366.54,-1296.96 1358.23,-1290.38 1355.94,-1297"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]batch_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1071.58,-1131.44C1126.85,-1139.77 1217.96,-1154.06 1296,-1169 1308.11,-1171.32 1320.86,-1173.93 1333.38,-1176.58"/>
<polygon fill="gray" stroke="gray" points="1332.84,-1180.05 1343.35,-1178.72 1334.3,-1173.2 1332.84,-1180.05"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().</title>
<g id="a_node25"><a xlink:title="pub fn scalar_from_slice_wide(bytes: &amp;[u8]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="748.5,-568 575.5,-568 575.5,-532 748.5,-532 748.5,-568"/>
<text text-anchor="middle" x="662" y="-546.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M748.59,-557.33C790.17,-564.19 839.19,-577.44 877,-603 941.32,-646.49 986.58,-729.35 1006.92,-772.44"/>
<polygon fill="blue" stroke="blue" points="1003.85,-774.13 1011.22,-781.74 1010.21,-771.2 1003.85,-774.13"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="719.5,-485 604.5,-485 604.5,-449 719.5,-449 719.5,-485"/>
<text text-anchor="middle" x="662" y="-463.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M719.58,-468.35C766.32,-472.2 832.07,-484.25 877,-520 960.54,-586.47 999.37,-715.15 1013.01,-771.92"/>
<polygon fill="blue" stroke="blue" points="1009.67,-773.01 1015.33,-781.97 1016.49,-771.43 1009.67,-773.01"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="352,-375 296,-375 296,-339 352,-339 352,-375"/>
<text text-anchor="middle" x="324" y="-353.3" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M352.32,-358.66C460.76,-365.35 855.98,-390.78 877,-407 995.28,-498.27 1015.15,-697 1018.4,-771.25"/>
<polygon fill="blue" stroke="blue" points="1014.92,-771.81 1018.78,-781.67 1021.92,-771.55 1014.92,-771.81"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="711,-355 613,-355 613,-319 711,-319 711,-355"/>
<text text-anchor="middle" x="662" y="-333.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M352.21,-355.38C406.52,-352.15 529.45,-344.83 602.76,-340.47"/>
<polygon fill="blue" stroke="blue" points="602.99,-343.96 612.77,-339.87 602.58,-336.97 602.99,-343.96"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M711.32,-330.78C758.94,-327.44 831.05,-330.26 877,-369 1002.41,-474.73 1017.75,-693.57 1019.11,-771.6"/>
<polygon fill="blue" stroke="blue" points="1015.61,-771.69 1019.22,-781.65 1022.61,-771.61 1015.61,-771.69"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="201,-375 16,-375 16,-339 201,-339 201,-375"/>
<text text-anchor="middle" x="108.5" y="-353.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M187.1,-375.06C203.51,-378.42 220.77,-381.62 237,-384 241.41,-384.65 873.42,-434.34 877,-437 987.75,-519.51 1012.17,-701.16 1017.51,-771.45"/>
<polygon fill="blue" stroke="blue" points="1014.04,-772 1018.22,-781.74 1021.03,-771.52 1014.04,-772"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M201.28,-357C230.88,-357 262.05,-357 285.43,-357"/>
<polygon fill="blue" stroke="blue" points="285.59,-360.5 295.59,-357 285.59,-353.5 285.59,-360.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M181.9,-338.94C199.8,-335.23 219,-331.89 237,-330 367.08,-316.38 520.81,-325.03 602.72,-331.61"/>
<polygon fill="blue" stroke="blue" points="602.57,-335.11 612.83,-332.44 603.15,-328.13 602.57,-335.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<g id="a_node30"><a xlink:title="fn random_scalar&lt;R: Rng + CryptoRng&gt;(r: &amp;mut R) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;r.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="721.5,-272 602.5,-272 602.5,-236 721.5,-236 721.5,-272"/>
<text text-anchor="middle" x="662" y="-250.3" font-family="Helvetica,sans-Serif" font-size="14.00">random_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M721.89,-253.28C769.72,-255.9 835.78,-267.31 877,-307 946.11,-373.56 999.47,-677.26 1014.64,-771.82"/>
<polygon fill="blue" stroke="blue" points="1011.2,-772.46 1016.22,-781.79 1018.11,-771.37 1011.2,-772.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;fn scalars_summing_to_works() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(n in 1usize..10)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut seed = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.try_fill_bytes(&amp;mut seed...">
<polygon fill="white" stroke="black" points="765,-218 559,-218 559,-182 765,-182 765,-218"/>
<text text-anchor="middle" x="662" y="-196.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to_works</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M765.11,-189.72C804.36,-191.21 846.91,-200.25 877,-227 960.78,-301.48 1005.07,-667.08 1016.18,-771.88"/>
<polygon fill="blue" stroke="blue" points="1012.72,-772.42 1017.23,-782 1019.68,-771.69 1012.72,-772.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) &#160;&#160;...">
<polygon fill="white" stroke="black" points="705.5,-135 618.5,-135 618.5,-99 705.5,-99 705.5,-135"/>
<text text-anchor="middle" x="662" y="-113.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M705.53,-115.2C753.91,-115.59 832.01,-124.05 877,-170 963.35,-258.19 1006.2,-660.67 1016.51,-771.61"/>
<polygon fill="blue" stroke="blue" points="1013.03,-772.06 1017.43,-781.7 1020.01,-771.43 1013.03,-772.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;pub fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="705.5,-52 618.5,-52 618.5,-16 705.5,-16 705.5,-52"/>
<text text-anchor="middle" x="662" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M705.73,-32C754.31,-32.2 832.59,-40.49 877,-87 973.89,-188.47 1009.59,-651.39 1017.3,-771.48"/>
<polygon fill="blue" stroke="blue" points="1013.83,-771.94 1017.95,-781.7 1020.81,-771.5 1013.83,-771.94"/>
</g>
</g>
</svg>
