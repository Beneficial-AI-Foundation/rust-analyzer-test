digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "dalek_benchmarks.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul()." [label="consttime_fixed_base_scalar_mul", tooltip="    fn consttime_fixed_base_scalar_mul<M: Measurement>(c: &mut BenchmarkGroup<M>) {         let s = Scalar::from(897987897u64).invert();         c.bench_function(' Constant-time fixed-base scalar mul'...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul()." [label="consttime_fixed_base_scalar_mul", tooltip="    fn consttime_fixed_base_scalar_mul<M: Measurement>(c: &mut BenchmarkGroup<M>) {         let s = Scalar::from(897987897u64).invert();         c.bench_function(' Constant-time fixed-base scalar mul'...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul()." [label="consttime_variable_base_scalar_mul", tooltip="    fn consttime_variable_base_scalar_mul<M: Measurement>(c: &mut BenchmarkGroup<M>) {         let B = &constants::ED25519_BASEPOINT_POINT;         let s = Scalar::from(897987897u64).invert();        ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_arith()." [label="scalar_arith", tooltip="    fn scalar_arith<M: Measurement>(c: &mut BenchmarkGroup<M>) {         let mut rng = thread_rng();          c.bench_function(' Scalar inversion' , |b| {             let s = Scalar::from(897987897u64...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/batch_scalar_inversion()." [label="batch_scalar_inversion", tooltip="    fn batch_scalar_inversion<M: Measurement>(c: &mut BenchmarkGroup<M>) {         for batch_size in &BATCH_SIZES {             c.bench_with_input(                 BenchmarkId::new(' Batch scalar inve...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/montgomery_ladder()." [label="montgomery_ladder", tooltip="    fn montgomery_ladder<M: Measurement>(c: &mut BenchmarkGroup<M>) {         c.bench_function(' Montgomery pseudomultiplication' , |b| {             let B = constants::X25519_BASEPOINT;             l...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_benches()." [label="scalar_benches", tooltip="    pub(crate) fn scalar_benches() {         let mut c = Criterion::default();         let mut g = c.benchmark_group(' scalar benches' );          scalar_arith(&mut g);         batch_scalar_inversion(...", fillcolor=white]
  }
  subgraph cluster_1 {
    label = "pippenger.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger()." [label="test_vartime_pippenger", tooltip="    fn test_vartime_pippenger() {         // Reuse points across different tests         let mut n = 512;         let x = Scalar::from(2128506u64).invert();         let y = Scalar::from(4443282u64).in...", fillcolor=white]
  }
  subgraph cluster_2 {
    label = "scalar.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()." [label="batch_invert", tooltip="    pub fn batch_invert(inputs: &mut [Scalar]) -> Scalar {         // This code is essentially identical to the FieldElement         // implementation, and is documented there.  Unfortunately,        ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics()." [label="batch_invert_with_a_zero_input_panics", tooltip="    fn batch_invert_with_a_zero_input_panics() {         let mut xs = vec![Scalar::ONE; 16];         xs[3] = Scalar::ZERO;         // This should panic in debug mode.         Scalar::batch_invert(&mut...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_pippenger_radix()." [label="test_pippenger_radix", tooltip="    fn test_pippenger_radix() {         use core::iter;         // For each valid radix it tests that 1000 random-ish scalars can be restored         // from the produced representation precisely.    ...", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()." [label="invert", tooltip="    pub fn invert(&self) -> Scalar {         self.unpack().invert().pack()     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert()." [label="montgomery_invert", tooltip="    pub fn montgomery_invert(&self) -> UnpackedScalar {         // Uses the addition chain from         // https://briansmith.org/ecc-inversion-addition-chains-01#curve25519_scalar_inversion         l...", fillcolor=lightblue]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert()." [label="invert", tooltip="    pub fn invert(&self) -> UnpackedScalar {         self.as_montgomery().montgomery_invert().from_montgomery()     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/invert()." [label="invert", tooltip="    fn invert() {         let inv_X = X.invert();         assert_eq!(inv_X, XINV);         let should_be_one = inv_X * X;         assert_eq!(should_be_one, Scalar::ONE);     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_empty()." [label="batch_invert_empty", tooltip="    fn batch_invert_empty() {         assert_eq!(Scalar::ONE, Scalar::batch_invert(&mut []));     }", fillcolor=white]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_consistency()." [label="batch_invert_consistency", tooltip="    fn batch_invert_consistency() {         let mut x = Scalar::from(1u64);         let mut v1: Vec<_> = (0..16)             .map(|_| {                 let tmp = x;                 x = x + x;         ...", fillcolor=white]
  }
  subgraph cluster_3 {
    label = "lib.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [label="restore2", tooltip="    pub fn restore2<R: Rng + CryptoRng>(         self,         responses1_bytes: &[Vec<u8>],         handshake_hashes: &[&[u8]],         rng: &mut R,     ) -> Result<Restore2<'a>, Error> {         if ...", fillcolor=white]
  }
  subgraph cluster_4 {
    label = "endorsements.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." [label="endorsement_flow", tooltip="fn endorsement_flow(c: &mut Criterion) {     let mut group = c.benchmark_group(' endorsements' );      let mut input_sho = poksho::ShoSha256::new(b' test' );     let inputs: Vec<RistrettoPoint> = (0.....", fillcolor=white]
  }
  subgraph cluster_5 {
    label = "attributes.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]inverse_of()." [label="inverse_of", tooltip="    pub fn inverse_of<D2: Domain>(other: &KeyPair<D2>) -> Self {         assert_ne!(             D::ID,             D2::ID,             ' You must provide a new domain for an inverse key'          ); ...", fillcolor=white]
  }
  subgraph cluster_6 {
    label = "endorsements.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()." [label="from_blinding_scalar", tooltip="    pub fn from_blinding_scalar(scalar: Scalar) -> Self {         Self {             a_inv: scalar.invert(),         }     }", fillcolor=white]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()." [label="derive_key", tooltip="    pub fn derive_key(&self, mut tag_info: impl ShoApi) -> ServerDerivedKeyPair {         let t = tag_info.get_scalar();         ServerDerivedKeyPair {             sk_prime: (self.sk + t).invert(),   ...", fillcolor=white]
  }
  subgraph cluster_7 {
    label = "profile_key_encryption.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()." [label="decrypt", tooltip="    pub(crate) fn decrypt(         key_pair: &KeyPair,         ciphertext: &Ciphertext,         uid_bytes: UidBytes,     ) -> Result<profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure> {...", fillcolor=white]
  }
  subgraph cluster_8 {
    label = "uid_encryption.rs";
    style=filled;
    color=lightgrey;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." [label="decrypt", tooltip="    pub(crate) fn decrypt(         key_pair: &KeyPair,         ciphertext: &Ciphertext,     ) -> Result<libsignal_core::ServiceId, ZkGroupVerificationFailure> {         let M2 = key_pair             ....", fillcolor=white]
  }

  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_fixed_base_scalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/consttime_fixed_base_scalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_with_a_zero_input_panics()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()."
  "rust-analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair<D>`]inverse_of()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/test_pippenger_radix()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards_benches/consttime_variable_base_scalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/pippenger/test/test_vartime_pippenger()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_arith()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/batch_scalar_inversion()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery_benches/montgomery_ladder()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_empty()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()."
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_arith()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/scalar_benches()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar_benches/batch_scalar_inversion()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_consistency()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]invert()."
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/test/batch_invert_consistency()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]batch_invert()."
}
